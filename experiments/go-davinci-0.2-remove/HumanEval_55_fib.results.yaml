language: go_test.go
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073207
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\nfunc fib(n int) int {\n    if n < 2 {\n        return\
    \ n\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073207
