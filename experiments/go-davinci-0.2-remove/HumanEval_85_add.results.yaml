language: go_test.go
name: HumanEval_85_add
results:
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, n := range\
    \ lst {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, n := range\
    \ lst {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i := 0; i <\
    \ len(lst); i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n      \
    \  }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmprzhey7nw_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmprzhey7nw_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i%2 == 1 && v%2 == 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    // your code here\n    return 0\n\
    }\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
    \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6,\
    \ 7}), expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__0 (0.00s)\n\
    \        tmpnnesp4vh_test.go:31: expected '%!s(int=88)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestAdd/test_num__1 (0.00s)\n        tmpnnesp4vh_test.go:31: expected\
    \ '%!s(int=122)', got '%!s(int=0)'\n    --- FAIL: TestAdd/test_num__3 (0.00s)\n\
    \        tmpnnesp4vh_test.go:31: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, n := range lst\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 1
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n     {\
    \ actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     { actual:\
    \ candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd (0.00s)\n    --- FAIL: TestAdd/test_num__1 (0.00s)\n\
    \        tmpwl30km2i_test.go:36: expected '%!s(int=122)', got '%!s(int=134)'\n\
    \    --- FAIL: TestAdd/test_num__2 (0.00s)\n        tmpwl30km2i_test.go:36: expected\
    \ '%!s(int=0)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i := 1; i < len(lst);\
    \ i += 2 {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    var sum int\n    for i, v := range\
    \ lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate :=\
    \ add\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88\
    \ },\n     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n\
    \     { actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074861
- exit_code: 0
  program: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    // Examples:\nfunc add(lst []int) int {\n    sum := 0\n    for i, v := range lst\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestAdd(t *testing.T) {\n  candidate := add\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{4, 88}), expected: 88 },\n\
    \     { actual: candidate([]int{4, 5, 6, 7, 2, 122}), expected: 122 },\n     {\
    \ actual: candidate([]int{4, 0, 6, 7}), expected: 0 },\n     { actual: candidate([]int{4,\
    \ 4, 6, 8}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074861
