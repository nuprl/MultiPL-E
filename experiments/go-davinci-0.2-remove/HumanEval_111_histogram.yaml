name: HumanEval_111_histogram
language: go_test.go
prompt: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a string representing a space separated lowercase letters, return a dictionary\n\
  // of the letter with the most repetition and containing the corresponding count.\n\
  // If several letters have the same occurrence, return all of them.\n// Example:\n\
  func histogram(test string) map[string]int {\n"
tests: "func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\"\
  : 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
  a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
  a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
  r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
  \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
  \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n\
  \     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual: candidate(\"\
  a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var histo = make(map[string]int)\n    for _, c := range test {\n\
    \        histo[string(c)] += 1\n    }\n    return histo\n}\n", "    var result\
    \ = make(map[string]int)\n    var max = 0\n    for _, char := range test {\n \
    \       count := result[string(char)]\n        result[string(char)] = count +\
    \ 1\n        if count + 1 > max {\n            max = count + 1\n        }\n  \
    \  }\n    var max_letters = make(map[string]int)\n    for letter, count := range\
    \ result {\n        if count == max {\n            max_letters[letter] = count\n\
    \        }\n    }\n    return max_letters\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = []string{}\n    for _, letter := range\
    \ test {\n        result[string(letter)]++\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n            max_letters =\
    \ []string{string(letter)}\n        } else if result[string(letter)] == max {\n\
    \            max_letters = append(max_letters, string(letter))\n        }\n  \
    \  }\n    return map[string]int{\n        \"max\": max,\n        \"letters\":\
    \ max_letters,\n    }\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]\
    \ += 1\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for\
    \ _, letter := range test {\n        hist[string(letter)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, c := range test {\n\
    \        hist[string(c)]++\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        if _, ok := hist[string(char)]; ok {\n\
    \            hist[string(char)] += 1\n        } else {\n            hist[string(char)]\
    \ = 1\n        }\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n", "    histogram := make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    var histogram\
    \ = make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var result = make(map[string]int)\n \
    \   var max = 0\n    for _, v := range test {\n        result[string(v)]++\n \
    \       if result[string(v)] > max {\n            max = result[string(v)]\n  \
    \      }\n    }\n    for k, v := range result {\n        if v != max {\n     \
    \       delete(result, k)\n        }\n    }\n    return result\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, char\
    \ := range test {\n        hist[string(char)]++\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, v := range test {\n        hist[string(v)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    var result = make(map[string]int)\n    var max int\n    for _, letter := range\
    \ test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    var result = make(map[string]int)\n    var max\
    \ int\n    var max_letters []string\n\n    for _, letter := range test {\n   \
    \     result[string(letter)]++\n        if result[string(letter)] > max {\n  \
    \          max = result[string(letter)]\n            max_letters = []string{string(letter)}\n\
    \        } else if result[string(letter)] == max {\n            max_letters =\
    \ append(max_letters, string(letter))\n        }\n    }\n\n    for _, letter :=\
    \ range max_letters {\n        result[letter] = max\n    }\n\n    return result\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    var result\
    \ = make(map[string]int)\n    var max int\n    for _, letter := range test {\n\
    \        result[string(letter)]++\n        if result[string(letter)] > max {\n\
    \            max = result[string(letter)]\n        }\n    }\n    for key, value\
    \ := range result {\n        if value != max {\n            delete(result, key)\n\
    \        }\n    }\n    return result\n}\n", "    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    var histogram = make(map[string]int)\n    for _, letter := range test {\n \
    \       histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    var\
    \ result = make(map[string]int)\n    for _, char := range test {\n        result[string(char)]++\n\
    \    }\n    return result\n}\n", "    var histogram = make(map[string]int)\n \
    \   for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    hist := make(map[string]int)\n    for _, v :=\
    \ range test {\n        hist[string(v)] += 1\n    }\n    return hist\n}\n", " \
    \   var histogram = make(map[string]int)\n    for _, char := range test {\n  \
    \      histogram[string(char)]++\n    }\n    return histogram\n}\n", "    var\
    \ result = make(map[string]int)\n    for _, char := range test {\n        result[string(char)]++\n\
    \    }\n    return result\n}\n", "    hist := make(map[string]int)\n    for _,\
    \ char := range test {\n        hist[string(char)]++\n    }\n    return hist\n\
    }\n", "    histogram := make(map[string]int)\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n    }\n    return histogram\n}\n", " \
    \   hist := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, char\
    \ := range test {\n        hist[string(char)]++\n    }\n    return hist\n}\n",
  "    var result = make(map[string]int)\n    for _, letter := range test {\n    \
    \    result[string(letter)]++\n    }\n    return result\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, char := range test\
    \ {\n        hist[string(char)] += 1\n    }\n    return hist\n}\n", "    var result\
    \ = make(map[string]int)\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    for _, char := range test {\n        if _, ok := result[string(char)]; ok\
    \ {\n            result[string(char)] += 1\n        } else {\n            result[string(char)]\
    \ = 1\n        }\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n", "    var histogram = make(map[string]int)\n    for _,\
    \ letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter := range\
    \ test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var histogram = make(map[string]int)\n   \
    \ for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    hist := make(map[string]int)\n    for _, c :=\
    \ range test {\n        hist[string(c)]++\n    }\n    return hist\n}\n", "   \
    \ hist := make(map[string]int)\n    for _, r := range test {\n        hist[string(r)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, c\
    \ := range test {\n        hist[string(c)]++\n    }\n    return hist\n}\n", " \
    \   var histogram = make(map[string]int)\n    for _, letter := range test {\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ hist := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]\
    \ += 1\n    }\n    return hist\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, char := range test {\n        result[string(char)]\
    \ += 1\n        if result[string(char)] > max {\n            max = result[string(char)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)] += 1\n    }\n   \
    \ return hist\n}\n", "    var hist = make(map[string]int)\n    for _, char :=\
    \ range test {\n        hist[string(char)]++\n    }\n    return hist\n}\n", " \
    \   var histogram = make(map[string]int)\n    for _, letter := range test {\n\
    \        histogram[string(letter)]++\n    }\n    return histogram\n}\n", "   \
    \ hist := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    var histogram = make(map[string]int)\n    for _, letter := range test {\n \
    \       histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    var\
    \ max int\n    var max_letters []string\n\n    for _, letter := range test {\n\
    \        if _, ok := result[string(letter)]; ok {\n            result[string(letter)]\
    \ += 1\n        } else {\n            result[string(letter)] = 1\n        }\n\
    \    }\n\n    for letter, count := range result {\n        if count > max {\n\
    \            max = count\n            max_letters = []string{letter}\n       \
    \ } else if count == max {\n            max_letters = append(max_letters, letter)\n\
    \        }\n    }\n\n    return map[string]int{\"max\": max, \"letters\": len(max_letters)}\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)] += 1\n    }\n    return hist\n}\n", "    hist :=\
    \ make(map[string]int)\n    for _, c := range test {\n        hist[string(c)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    histogram := make(map[string]int)\n    for _, letter := range test {\n    \
    \    histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    histogram\
    \ := make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]\
    \ += 1\n    }\n    return histogram\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    histogram := make(map[string]int)\n    for _, letter := range\
    \ test {\n        histogram[string(letter)]++\n    }\n    return histogram\n}\n",
  "    hist := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)] += 1\n    }\n    return hist\n\
    }\n", "    var result = make(map[string]int)\n    var max int\n    for _, char\
    \ := range test {\n        result[string(char)]++\n        if result[string(char)]\
    \ > max {\n            max = result[string(char)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for key, value := range result {\n        if value\
    \ == max {\n            final[key] = value\n        }\n    }\n    return final\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    var histogram = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n    }\n    return histogram\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, letter := range test\
    \ {\n        hist[string(letter)] += 1\n    }\n    return hist\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, c := range test {\n        hist[string(c)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    var\
    \ max = 0\n    var max_letters = make([]string, 0)\n    for _, letter := range\
    \ test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n            max_letters =\
    \ []string{string(letter)}\n        } else if result[string(letter)] == max {\n\
    \            max_letters = append(max_letters, string(letter))\n        }\n  \
    \  }\n    return map[string]int{\"max\": max, \"letters\": max_letters}\n}\n",
  "    hist := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    for\
    \ _, letter := range test {\n        result[string(letter)]++\n    }\n    return\
    \ result\n}\n", "    hist := make(map[string]int)\n    for _, char := range test\
    \ {\n        hist[string(char)]++\n    }\n    return hist\n}\n", "    var histogram\
    \ = make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    histogram := make(map[string]int)\n \
    \   for _, letter := range test {\n        histogram[string(letter)] += 1\n  \
    \  }\n    return histogram\n}\n", "    hist := make(map[string]int)\n    for _,\
    \ letter := range test {\n        hist[string(letter)]++\n    }\n    return hist\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    var result = make(map[string]int)\n    for _, letter := range\
    \ test {\n        result[string(letter)]++\n    }\n    return result\n}\n", " \
    \   hist := make(map[string]int)\n    for _, c := range test {\n        hist[string(c)]++\n\
    \    }\n    return hist\n}\n", "    histogram := make(map[string]int)\n    for\
    \ _, letter := range test {\n        histogram[string(letter)] += 1\n    }\n \
    \   return histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    var\
    \ max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var max_letters = make(map[string]int)\n    for key, value\
    \ := range result {\n        if value == max {\n            max_letters[key] =\
    \ value\n        }\n    }\n    return max_letters\n}\n", "    var m map[string]int\n\
    \    m = make(map[string]int)\n    for _, v := range test {\n        m[string(v)]++\n\
    \    }\n    return m\n}\n", "    var histogram = make(map[string]int)\n    for\
    \ _, letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter := range\
    \ test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]\
    \ += 1\n    }\n    return hist\n}\n", "    var hist = make(map[string]int)\n \
    \   for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, letter := range test\
    \ {\n        hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist :=\
    \ make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    for\
    \ _, char := range test {\n        result[string(char)]++\n    }\n    return result\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    var result\
    \ = make(map[string]int)\n    var max = 0\n    for _, char := range test {\n \
    \       result[string(char)] += 1\n        if result[string(char)] > max {\n \
    \           max = result[string(char)]\n        }\n    }\n    var final = make(map[string]int)\n\
    \    for key, value := range result {\n        if value == max {\n           \
    \ final[key] = value\n        }\n    }\n    return final\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, char := range test\
    \ {\n        hist[string(char)]++\n    }\n    return hist\n}\n", "    var hist\
    \ = make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, char\
    \ := range test {\n        hist[string(char)]++\n    }\n    return hist\n}\n",
  "    var histogram = make(map[string]int)\n    for _, letter := range test {\n \
    \       histogram[string(letter)] += 1\n    }\n    return histogram\n}\n", " \
    \   hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    histogram := make(map[string]int)\n    for\
    \ _, char := range test {\n        histogram[string(char)]++\n    }\n    return\
    \ histogram\n}\n", "    hist := make(map[string]int)\n    for _, c := range test\
    \ {\n        hist[string(c)]++\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, letter := range test\
    \ {\n        hist[string(letter)]++\n    }\n    return hist\n}\n", "    var histogram\
    \ = make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    hist := make(map[string]int)\n    for\
    \ _, letter := range test {\n        hist[string(letter)]++\n    }\n    return\
    \ hist\n}\n", "    var result = make(map[string]int)\n    var max = 0\n    for\
    \ _, letter := range test {\n        if _, ok := result[string(letter)]; ok {\n\
    \            result[string(letter)] += 1\n        } else {\n            result[string(letter)]\
    \ = 1\n        }\n        if result[string(letter)] > max {\n            max =\
    \ result[string(letter)]\n        }\n    }\n    var keys []string\n    for key,\
    \ value := range result {\n        if value == max {\n            keys = append(keys,\
    \ key)\n        }\n    }\n    return map[string]int{\n        \"count\": max,\n\
    \        \"letters\": keys,\n    }\n}\n", "    // Create a map to hold the results\n\
    \    result := make(map[string]int)\n    // Iterate through the string\n    for\
    \ _, char := range test {\n        // If the character is in the map, increment\
    \ the value\n        if _, ok := result[string(char)]; ok {\n            result[string(char)]\
    \ += 1\n        } else {\n            // If the character is not in the map, add\
    \ it with a value of 1\n            result[string(char)] = 1\n        }\n    }\n\
    \    return result\n}\n", "    var histogram = make(map[string]int)\n    for _,\
    \ letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    var result = make(map[string]int)\n    var max = 0\n \
    \   for _, letter := range test {\n        result[string(letter)] += 1\n     \
    \   if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var max_letters = make(map[string]int)\n    for letter,\
    \ count := range result {\n        if count == max {\n            max_letters[letter]\
    \ = count\n        }\n    }\n    return max_letters\n}\n", "    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n", "    hist := make(map[string]int)\n    for\
    \ _, letter := range test {\n        hist[string(letter)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, char := range test\
    \ {\n        hist[string(char)]++\n    }\n    return hist\n}\n", "    histogram\
    \ := make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    result := make(map[string]int)\n    for\
    \ _, letter := range test {\n        result[string(letter)]++\n    }\n    return\
    \ result\n}\n", "    var result = make(map[string]int)\n    var max int\n    for\
    \ _, letter := range test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    hist := make(map[string]int)\n\
    \    for _, v := range test {\n        hist[string(v)]++\n    }\n    return hist\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, letter := range test\
    \ {\n        hist[string(letter)] += 1\n    }\n    return hist\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    result := make(map[string]int)\n    for _,\
    \ char := range test {\n        result[string(char)] += 1\n    }\n    return result\n\
    }\n", "    hist := make(map[string]int)\n    for _, char := range test {\n   \
    \     hist[string(char)]++\n    }\n    return hist\n}\n", "    var hist = make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    var result = make(map[string]int)\n    for _, letter\
    \ := range test {\n        result[string(letter)]++\n    }\n    return result\n\
    }\n", "    var result = make(map[string]int)\n    for _, letter := range test\
    \ {\n        result[string(letter)]++\n    }\n    return result\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]\
    \ += 1\n    }\n    return hist\n}\n", "    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    var result = make(map[string]int)\n    var max\
    \ int\n    for _, v := range test {\n        result[string(v)]++\n        if result[string(v)]\
    \ > max {\n            max = result[string(v)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for k, v := range result {\n        if v == max\
    \ {\n            final[k] = v\n        }\n    }\n    return final\n}\n", "   \
    \ hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    histogram := make(map[string]int)\n    for\
    \ _, letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    histogram := make(map[string]int)\n    for _, letter :=\
    \ range test {\n        histogram[string(letter)] += 1\n    }\n    return histogram\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    var histogram\
    \ = make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    hist := make(map[string]int)\n    for\
    \ _, letter := range test {\n        hist[string(letter)] += 1\n    }\n    return\
    \ hist\n}\n", "    hist := make(map[string]int)\n    for _, letter := range test\
    \ {\n        hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist :=\
    \ make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    var\
    \ max = 0\n    for _, letter := range test {\n        result[string(letter)] +=\
    \ 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    histogram := make(map[string]int)\n    for _, letter := range test {\n    \
    \    histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var histogram = make(map[string]int)\n   \
    \ for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    var result = make(map[string]int)\n    for _,\
    \ char := range test {\n        result[string(char)]++\n    }\n    return result\n\
    }\n", "    hist := make(map[string]int)\n    for _, char := range test {\n   \
    \     hist[string(char)] += 1\n    }\n    return hist\n}\n", "    var histogram\
    \ = make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    // Create a map of strings to ints\n\
    \    hist := make(map[string]int)\n    // Split the string into an array of strings\n\
    \    letters := strings.Split(test, \" \")\n    // Loop over the array of strings\n\
    \    for _, letter := range letters {\n        // If the letter is not in the\
    \ map, add it with a count of 1\n        if _, ok := hist[letter]; !ok {\n   \
    \         hist[letter] = 1\n        } else {\n            // If the letter is\
    \ in the map, increment the count\n            hist[letter]++\n        }\n   \
    \ }\n    return hist\n}\n", "    var histogram = make(map[string]int)\n    for\
    \ _, letter := range test {\n        histogram[string(letter)] += 1\n    }\n \
    \   return histogram\n}\n", "    var result = make(map[string]int)\n    for _,\
    \ char := range test {\n        result[string(char)]++\n    }\n    return result\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)] += 1\n    }\n    return hist\n}\n", "    histogram\
    \ := make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n", "    var histogram = make(map[string]int)\n\
    \    for _, char := range test {\n        histogram[string(char)]++\n    }\n \
    \   return histogram\n}\n", "    hist := make(map[string]int)\n    for _, char\
    \ := range test {\n        hist[string(char)] += 1\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, c := range test {\n        hist[string(c)]++\n\
    \    }\n    return hist\n}\n", "    var histogram = make(map[string]int)\n   \
    \ for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    var histogram = make(map[string]int)\n    for\
    \ _, letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter := range\
    \ test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, c := range test {\n        hist[string(c)]\
    \ += 1\n    }\n    return hist\n}\n", "    var result = make(map[string]int)\n\
    \    var max int\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var max_letters = make(map[string]int)\n    for k, v :=\
    \ range result {\n        if v == max {\n            max_letters[k] = v\n    \
    \    }\n    }\n    return max_letters\n}\n", "    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, char\
    \ := range test {\n        hist[string(char)]++\n    }\n    return hist\n}\n",
  "    var result = make(map[string]int)\n    var max = 0\n    for _, letter := range\
    \ test {\n        result[string(letter)]++\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    hist := make(map[string]int)\n    for _, char := range\
    \ test {\n        hist[string(char)]++\n    }\n    return hist\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var histogram = make(map[string]int)\n   \
    \ for _, letter := range test {\n        histogram[string(letter)] += 1\n    }\n\
    \    return histogram\n}\n", "    var result map[string]int\n    result = make(map[string]int)\n\
    \    for _, char := range test {\n        if _, ok := result[string(char)]; ok\
    \ {\n            result[string(char)] += 1\n        } else {\n            result[string(char)]\
    \ = 1\n        }\n    }\n    return result\n}\n", "    var hist = make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter :=\
    \ range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var hist = make(map[string]int)\n    for _,\
    \ letter := range test {\n        hist[string(letter)]++\n    }\n    return hist\n\
    }\n", "    hist := make(map[string]int)\n    for _, char := range test {\n   \
    \     hist[string(char)] += 1\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n", "    var histogram = make(map[string]int)\n    for _,\
    \ letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    var histogram = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)]++\n    }\n    return hist\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    histogram := make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var histogram = make(map[string]int)\n    for _, letter := range test\
    \ {\n        if _, ok := histogram[string(letter)]; ok {\n            histogram[string(letter)]\
    \ += 1\n        } else {\n            histogram[string(letter)] = 1\n        }\n\
    \    }\n    return histogram\n}\n", "    var result = make(map[string]int)\n \
    \   var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    var result = make(map[string]int)\n    var max = 0\n    for\
    \ _, letter := range test {\n        result[string(letter)]++\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)] += 1\n    }\n\
    \    return result\n}\n", "    var histogram = make(map[string]int)\n    for _,\
    \ letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter := range\
    \ test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n", "    var\
    \ result map[string]int\n    result = make(map[string]int)\n    for _, v := range\
    \ test {\n        result[string(v)] += 1\n    }\n    return result\n}\n", "  \
    \  result := make(map[string]int)\n    for _, letter := range test {\n       \
    \ result[string(letter)]++\n    }\n    return result\n}\n", "    var histogram\
    \ = make(map[string]int)\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \    }\n    return histogram\n}\n", "    hist := make(map[string]int)\n    for\
    \ _, char := range test {\n        hist[string(char)] += 1\n    }\n    return\
    \ hist\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
