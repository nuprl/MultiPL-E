language: go_test.go
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    for b != 0 {\n        a,\
    \ b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    var gcd int\n    if a <\
    \ b {\n        gcd = a\n    } else {\n        gcd = b\n    }\n    for i := gcd;\
    \ i > 0; i-- {\n        if a % i == 0 && b % i == 0 {\n            return i\n\
    \        }\n    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    for b != 0 {\n        a,\
    \ b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a < b {\n        a, b\
    \ = b, a\n    }\n    for b != 0 {\n        a, b = b, a % b\n    }\n    return\
    \ a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else if a == b {\n      \
    \  return a\n    } else if a > b {\n        return greatest_common_divisor(a -\
    \ b, b)\n    } else {\n        return greatest_common_divisor(a, b - a)\n    }\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a < b {\n        a, b\
    \ = b, a\n    }\n    for b != 0 {\n        a, b = b, a % b\n    }\n    return\
    \ a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    for b != 0 {\n        a,\
    \ b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a < b {\n       \
    \ return greatest_common_divisor(a, b % a)\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    for b != 0 {\n        a,\
    \ b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a < b {\n        return\
    \ greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n        return a\n  \
    \  }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a == b {\n      \
    \  return a\n    }\n    if a > b {\n        return greatest_common_divisor(a -\
    \ b, b)\n    }\n    return greatest_common_divisor(a, b - a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a == b {\n      \
    \  return a\n    }\n    if a > b {\n        return greatest_common_divisor(a -\
    \ b, b)\n    }\n    return greatest_common_divisor(a, b - a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a < b {\n        return\
    \ greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n        return a\n  \
    \  }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a%b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b%a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a % b == 0 {\n      \
    \  return b\n    } else {\n        return greatest_common_divisor(b, a % b)\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    for b != 0 {\n        a,\
    \ b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    var gcd int\n    if a <\
    \ b {\n        gcd = a\n    } else {\n        gcd = b\n    }\n    for gcd > 1\
    \ {\n        if a % gcd == 0 && b % gcd == 0 {\n            break\n        }\n\
    \        gcd--\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(a % b, b)\n    }\n    return greatest_common_divisor(a,\
    \ b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073755
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    func greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n        return\
    \ a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073755
