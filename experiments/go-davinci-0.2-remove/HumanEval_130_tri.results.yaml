language: go_test.go
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 19}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8wn2t1w7_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 30}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18, 31}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8b_kawr_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    tri := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            tri =\
    \ append(tri, 1 + i / 2)\n        } else {\n            tri = append(tri, tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp81re5ucv_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp81re5ucv_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 3}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 3, 8}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 3, 8, 5}\n    }\n  \
    \  if n == 8 {\n        return []int{3, 2, 8, 3, 3, 8, 5, 8}\n    }\n    if n\
    \ == 9 {\n        return []int{3, 2, 8, 3, 3, 8, 5, 8, 5}\n    }\n    if n ==\
    \ 10 {\n        return []int{3, 2, 8, 3, 3, 8, 5, 8, 5, 13}\n    }\n    if n ==\
    \ 11 {\n        return []int{3, 2, 8, 3, 3, 8, 5, 8, 5, 13, 8}\n    }\n    if\
    \ n == 12 {\n        return []int{3, 2, 8, 3, 3, 8, 5, 8, 5, 13, 8, 5}\n    }\n\
    \    if n == 13 {\n        return []int{3, 2, 8, 3, 3, 8, 5, 8, 5, 13, 8, 5, 21}\n\
    \    }\n    if n == 14 {\n        return []int{3, 2, 8, 3, 3, 8, 5, 8, 5, 13,\
    \ 8, 5, 21, 13}\n    }\n    if n == 15 {\n        return []int{3, 2, 8, 3, 3,\
    \ 8, 5, 8, 5, 13, 8, 5, 21, 13, 8}\n    }\n    if n == 16 {\n        return []int{3,\n\
    func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps8qky0s1_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    var result []int\n    if n == 0 {\n        return result\n    }\n   \
    \ result = append(result, 3)\n    if n == 1 {\n        return result\n    }\n\
    \    result = append(result, 2)\n    if n == 2 {\n        return result\n    }\n\
    \    result = append(result, 8)\n    for i := 3; i < n; i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, 1 + i / 2)\n        } else {\n\
    \            result = append(result, result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000162000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp605p48m8_test.go:40\
    \ +0x21d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp605p48m8_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000103380, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5}\n    }\n\
    \    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18,\
    \ 5, 6, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 17,\
    \ 11, 10, 18, 5, 6, 13, 7}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15}\n    }\n    if n == 15 {\n       \
    \ return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15, 1}\n    }\n   \
    \ if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp15698bar_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 18}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 18, 22}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 13}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 13, 21}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvf4geiip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 30}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ny32fip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 30}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ny32fip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5}\n    }\n\
    \    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18,\
    \ 5, 6, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 17,\
    \ 11, 10, 18, 5, 6, 13, 7}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15}\n    }\n    if n == 15 {\n       \
    \ return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15, 1}\n    }\n   \
    \ if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp15698bar_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    tri := make([]int,\
    \ n + 1)\n    tri[0] = 3\n    tri[1] = 2\n    tri[2] = 8\n    for i := 3; i <=\
    \ n; i++ {\n        if i % 2 == 0 {\n            tri[i] = 1 + i / 2\n        }\
    \ else {\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        }\n\
    \    }\n    return tri\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpkb4_me9b_test.go:43\
    \ +0x1d5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpkb4_me9b_test.go:58\
    \ +0xa2\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    l := []int{3, 2, 8}\n\
    \    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            l = append(l,\
    \ 1 + i / 2)\n        } else {\n            l = append(l, l[i - 1] + l[i - 2]\
    \ + l[i + 1])\n        }\n    }\n    return l\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp2bu4nsz4_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp2bu4nsz4_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000198340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    t := []int{3, 2, 8}\n\
    \    for i := 3; i < n; i++ {\n        t = append(t, t[i - 1] + t[i - 2] + t[i\
    \ - 3])\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T) {\n  candidate :=\
    \ tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmp0cgj8arh_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmp0cgj8arh_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp0cgj8arh_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23)]'\n    --- FAIL:\
    \ TestTri/test_num__3 (0.00s)\n        tmp0cgj8arh_test.go:64: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmp0cgj8arh_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)]'\n  \
    \  --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp0cgj8arh_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)\
    \ %!s(int=23) %!s(int=44) %!s(int=80) %!s(int=147)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmp0cgj8arh_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)\
    \ %!s(int=147) %!s(int=271)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n   \
    \     tmp0cgj8arh_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    seq := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            seq =\
    \ append(seq, 1 + i / 2)\n        } else {\n            seq = append(seq, seq[i\
    \ - 1] + seq[i - 2] + seq[i + 1])\n        }\n    }\n    return seq\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpzxl1xeaj_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpzxl1xeaj_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 11}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 11, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 11, 5, 16}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 11, 5, 16, 8}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 11, 5, 16, 8, 19}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 11, 5, 16, 8, 19, 10}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 11, 5, 16, 8, 19, 10, 29}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 11, 5, 16, 8, 19, 10,\
    \ 29, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 11, 5, 16,\
    \ 8, 19, 10, 29, 13, 42}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 11, 5, 16, 8, 19, 10, 29, 13, 42, 21}\n    }\n    if n == 15 {\n     \
    \   return []int{3, 2, 8, 3, 11, 5, 16, 8, 19, 10, 29, 13, 42, 21, 55}\n    }\n\
    \    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpftjiii7h_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 30}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ny32fip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 11}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 11, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 11, 5, 14}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9}\n    }\n  \
    \  if n == 11 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9, 23}\n \
    \   }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9,\
    \ 23, 10}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 11, 5, 14,\
    \ 6, 19, 9, 23, 10, 27}\n    }\n    if n == 14 {\n        return []int{3, 2, 8,\
    \ 3, 11, 5, 14, 6, 19, 9, 23, 10, 27, 12}\n    }\n    if n == 15 {\n        return\
    \ []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9, 23, 10, 27, 12, 31}\n    }\n    if n\
    \ == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j39qfa4_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 30}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18, 31}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8b_kawr_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpbp6lks14_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbp6lks14_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 30}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ny32fip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 5, 13}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55,\
    \ 89, 144}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 5, 13,\
    \ 21, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n\
    \        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr097wync_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpbp6lks14_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbp6lks14_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        result = append(result, result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23)]'\n    --- FAIL:\
    \ TestTri/test_num__3 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)]'\n  \
    \  --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)\
    \ %!s(int=23) %!s(int=44) %!s(int=80) %!s(int=147)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)\
    \ %!s(int=147) %!s(int=271)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n   \
    \     tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    // your code\n    return []int{}\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmppmhloyqe_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmppmhloyqe_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmppmhloyqe_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmppmhloyqe_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmppmhloyqe_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24)]', got '[]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmppmhloyqe_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[]'\n    ---\
    \ FAIL: TestTri/test_num__6 (0.00s)\n        tmppmhloyqe_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5) %!s(int=35)]', got '[]'\n    --- FAIL: TestTri/test_num__7\
    \ (0.00s)\n        tmppmhloyqe_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)\
    \ %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9)\
    \ %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[]'\n    --- FAIL:\
    \ TestTri/test_num__8 (0.00s)\n        tmppmhloyqe_test.go:49: expected '[%!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmppmhloyqe_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    t := []int{3, 2, 8}\n\
    \    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            t = append(t,\
    \ 1 + i / 2)\n        } else {\n            t = append(t, t[i - 1] + t[i - 2]\
    \ + t[i + 1])\n        }\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpmf2289tu_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpmf2289tu_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 18}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 18, 22}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 13}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 13, 21}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvf4geiip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 11}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 11, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 11, 5, 14}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 8}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 8, 21}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 8, 21, 13}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 8, 21, 13, 34}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 8, 21, 13,\
    \ 34, 21}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 11, 5, 14,\
    \ 8, 21, 13, 34, 21, 55}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 11, 5, 14, 8, 21, 13, 34, 21, 55, 34}\n    }\n    if n == 15 {\n     \
    \   return []int{3, 2, 8, 3, 11, 5, 14, 8, 21, 13, 34, 21, 55, 34, 89}\n    }\n\
    \    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpixgqlxt8_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 5, 13}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55,\
    \ 89, 144}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 5, 13,\
    \ 21, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n\
    \        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr097wync_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 11}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 11, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 11, 5, 19}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 11, 5, 19, 7}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 11, 5, 19, 7, 23}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 11, 5, 19, 7, 23, 9}\n    }\n  \
    \  if n == 11 {\n        return []int{3, 2, 8, 3, 11, 5, 19, 7, 23, 9, 31}\n \
    \   }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 11, 5, 19, 7, 23, 9,\
    \ 31, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 11, 5, 19,\
    \ 7, 23, 9, 31, 13, 37}\n    }\n    if n == 14 {\n        return []int{3, 2, 8,\
    \ 3, 11, 5, 19, 7, 23, 9, 31, 13, 37, 15}\n    }\n    if n == 15 {\n        return\
    \ []int{3, 2, 8, 3, 11, 5, 19, 7, 23, 9, 31, 13, 37, 15, 43}\n    }\n    if n\
    \ == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjlvpts7__test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5}\n    }\n\
    \    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18,\
    \ 5, 6, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 17,\
    \ 11, 10, 18, 5, 6, 13, 7}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15}\n    }\n    if n == 15 {\n       \
    \ return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15, 1}\n    }\n   \
    \ if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp15698bar_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 5, 13}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55,\
    \ 89, 144}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 5, 13,\
    \ 21, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n\
    \        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr097wync_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var res []int\n  \
    \  res = append(res, 3, 2, 8)\n    for i := 4; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            res = append(res, 1 + i / 2)\n        } else {\n       \
    \     res = append(res, res[i - 1] + res[i - 2] + res[i - 3])\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 19 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160048})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160048})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmp82p_gdeo_test.go:41\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp82p_gdeo_test.go:56\
    \ +0xa2\ntesting.tRunner(0xc000103520, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 30}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ny32fip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpbp6lks14_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbp6lks14_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 5, 13}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55,\
    \ 89, 144}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 5, 13,\
    \ 21, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n\
    \        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr097wync_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 2] + result[i - 1] + result[i - 4])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000160048})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000160048})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpab5ddgsr_test.go:40\
    \ +0x23d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpab5ddgsr_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001031e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5}\n    }\n\
    \    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18,\
    \ 5, 6, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 17,\
    \ 11, 10, 18, 5, 6, 13, 7}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15}\n    }\n    if n == 15 {\n       \
    \ return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15, 1}\n    }\n   \
    \ if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp15698bar_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 30}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18, 31}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8b_kawr_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 30}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ny32fip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 19}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8wn2t1w7_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    var result []int\n    if n == 0 {\n        return result\n    }\n   \
    \ result = append(result, 3)\n    if n == 1 {\n        return result\n    }\n\
    \    result = append(result, 2)\n    if n == 2 {\n        return result\n    }\n\
    \    result = append(result, 8)\n    if n == 3 {\n        return result\n    }\n\
    \    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5139e0, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5139e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpcrn6bu38_test.go:43\
    \ +0x246\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpcrn6bu38_test.go:58\
    \ +0xa2\ntesting.tRunner(0xc0001164e0, 0x5292f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    a := 3\n    b := 2\n\
    \    c := 8\n    result := []int{3, 2, 8}\n    for i := 3; i < n; i++ {\n    \
    \    d := a + b + c\n        result = append(result, d)\n        a = b\n     \
    \   b = c\n        c = d\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpjw1oag95_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpjw1oag95_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpjw1oag95_test.go:71: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23)]'\n    --- FAIL:\
    \ TestTri/test_num__3 (0.00s)\n        tmpjw1oag95_test.go:71: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpjw1oag95_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)]'\n  \
    \  --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpjw1oag95_test.go:71: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)\
    \ %!s(int=23) %!s(int=44) %!s(int=80) %!s(int=147)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpjw1oag95_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)\
    \ %!s(int=147) %!s(int=271)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n   \
    \     tmpjw1oag95_test.go:71: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        result = append(result, result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23)]'\n    --- FAIL:\
    \ TestTri/test_num__3 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)]'\n  \
    \  --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)\
    \ %!s(int=23) %!s(int=44) %!s(int=80) %!s(int=147)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)\
    \ %!s(int=147) %!s(int=271)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n   \
    \     tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    var result []int\n    for i := 0; i <= n; i++ {\n        if i == 0 {\n\
    \            result = append(result, 0)\n        } else if i == 1 {\n        \
    \    result = append(result, 1)\n        } else if i == 2 {\n            result\
    \ = append(result, 1)\n        } else {\n            result = append(result, result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpszlkhqqv_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpszlkhqqv_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpszlkhqqv_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7)]'\n    ---\
    \ FAIL: TestTri/test_num__3 (0.00s)\n        tmpszlkhqqv_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpszlkhqqv_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24)]', got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=7) %!s(int=13) %!s(int=24)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n\
    \        tmpszlkhqqv_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=13) %!s(int=24)\
    \ %!s(int=44)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpszlkhqqv_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=13) %!s(int=24) %!s(int=44)\
    \ %!s(int=81)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpszlkhqqv_test.go:60:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)\
    \ %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7)\
    \ %!s(int=63) %!s(int=8"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpbp6lks14_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbp6lks14_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 5, 13}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55,\
    \ 89, 144}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 5, 13,\
    \ 21, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n\
    \        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr097wync_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5}\n    }\n\
    \    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18,\
    \ 5, 6, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 17,\
    \ 11, 10, 18, 5, 6, 13, 7}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15}\n    }\n    if n == 15 {\n       \
    \ return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15, 1}\n    }\n   \
    \ if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp15698bar_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 31}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 31, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 31, 14, 18}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpop9emu2u_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 19}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8wn2t1w7_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 11}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 11, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 11, 5, 14}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9}\n    }\n  \
    \  if n == 11 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9, 23}\n \
    \   }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9,\
    \ 23, 10}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 11, 5, 14,\
    \ 6, 19, 9, 23, 10, 27}\n    }\n    if n == 14 {\n        return []int{3, 2, 8,\
    \ 3, 11, 5, 14, 6, 19, 9, 23, 10, 27, 12}\n    }\n    if n == 15 {\n        return\
    \ []int{3, 2, 8, 3, 11, 5, 14, 6, 19, 9, 23, 10, 27, 12, 31}\n    }\n    if n\
    \ == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j39qfa4_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 2] + result[i - 1] + result[i - 4])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001ce048})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001ce048})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpg01_3z1t_test.go:40\
    \ +0x23d\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpg01_3z1t_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc00019b1e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 5, 13}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55,\
    \ 89, 144}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 5, 13,\
    \ 21, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n\
    \        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr097wync_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 5, 13}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55}\n    }\n \
    \   if n == 11 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55,\
    \ 89, 144}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 5, 13,\
    \ 21, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n\
    \        return []int{3, 2, 8, 3, 9, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr097wync_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := make([]int,\
    \ n + 1)\n    result[0] = 3\n    result[1] = 2\n    result[2] = 8\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n\
    \        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmp7_ayegtt_test.go:43\
    \ +0x1d5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7_ayegtt_test.go:58\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5}\n    }\n\
    \    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6}\n\
    \    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 18,\
    \ 5, 6, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 17,\
    \ 11, 10, 18, 5, 6, 13, 7}\n    }\n    if n == 14 {\n        return []int{3, 2,\
    \ 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15}\n    }\n    if n == 15 {\n       \
    \ return []int{3, 2, 8, 3, 9, 17, 11, 10, 18, 5, 6, 13, 7, 15, 1}\n    }\n   \
    \ if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp15698bar_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    arr := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            arr =\
    \ append(arr, 1 + i / 2)\n        } else {\n            arr = append(arr, arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n    return arr\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpqx2hw8lf_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpqx2hw8lf_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a6340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    t := []int{3, 2, 8}\n\
    \    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            t = append(t,\
    \ 1 + i / 2)\n        } else {\n            t = append(t, t[i - 1] + t[i - 2]\
    \ + t[i + 1])\n        }\n    }\n    return t\n}\n\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpmf2289tu_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpmf2289tu_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 4}\n    }\n \
    \   if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 4, 23}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 4, 23, 5}\n    }\n    if n\
    \ == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 4, 23, 5, 14}\n    }\n    if\
    \ n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 4, 23, 5, 14, 26}\n    }\n\
    \    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 4, 23, 5, 14, 26, 7}\n\
    \    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9, 17, 4, 23, 5, 14,\
    \ 26, 7, 18}\n    }\n    if n == 14 {\n        return []int{3, 2, 8, 3, 9, 17,\
    \ 4, 23, 5, 14, 26, 7, 18, 30}\n    }\n    if n == 15 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 4, 23, 5, 14, 26, 7, 18, 30, 9}\n    }\n    if n == 16 {\n \
    \       return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8}\
    \ },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual:\
    \ candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n\
    \     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq9i20ggb_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 30}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18, 31}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8b_kawr_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := make([]int,\
    \ n + 1)\n    result[0] = 3\n    result[1] = 2\n    result[2] = 8\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n\
    \        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        }\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n\
    \  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [6]\
    \ with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with\
    \ length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmp7_ayegtt_test.go:43\
    \ +0x1d5\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp7_ayegtt_test.go:58\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 18}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 18, 22}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 27}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 27, 31}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpthxv3tf5_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpbp6lks14_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbp6lks14_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        result = append(result, result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpqhggva8e_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpqhggva8e_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpqhggva8e_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23)]'\n    --- FAIL:\
    \ TestTri/test_num__3 (0.00s)\n        tmpqhggva8e_test.go:64: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpqhggva8e_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)]'\n  \
    \  --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpqhggva8e_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)\
    \ %!s(int=23) %!s(int=44) %!s(int=80) %!s(int=147)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpqhggva8e_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)\
    \ %!s(int=147) %!s(int=271)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n   \
    \     tmpqhggva8e_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    ret := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            ret =\
    \ append(ret, 1 + i / 2)\n        } else {\n            ret = append(ret, ret[i\
    \ - 1] + ret[i - 2] + ret[i + 1])\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpfl1u5zx2_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfl1u5zx2_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001991e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 30}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18, 31}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8b_kawr_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 18}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 18, 22}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 13}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 18, 22, 13, 21}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvf4geiip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        result = append(result, result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\nfunc TestTri(t\
    \ *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1,\
    \ 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3,\
    \ 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n\
    \     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n \
    \    { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n\
    \     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35}\
    \ },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n\
    \        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)]'\n\
    \    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got\
    \ '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23)]'\n    --- FAIL:\
    \ TestTri/test_num__3 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1)\
    \ %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44)]'\n    --- FAIL: TestTri/test_num__4\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=3)\
    \ %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)]'\n  \
    \  --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpb8d1bi2m_test.go:64: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)\
    \ %!s(int=24) %!s(int=5)]', got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13)\
    \ %!s(int=23) %!s(int=44) %!s(int=80) %!s(int=147)]'\n    --- FAIL: TestTri/test_num__6\
    \ (0.00s)\n        tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=8) %!s(int=13) %!s(int=23) %!s(int=44) %!s(int=80)\
    \ %!s(int=147) %!s(int=271)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n   \
    \     tmpb8d1bi2m_test.go:64: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)\
    \ %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6)\
    \ %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99)\
    \ %!s(int=10) %!s(int=120) %"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 30}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18, 31}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx8b_kawr_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    tri := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            tri =\
    \ append(tri, 1 + i / 2)\n        } else {\n            tri = append(tri, tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp81re5ucv_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp81re5ucv_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 30}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 30, 18, 34}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuladnj_1_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    arr := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            arr =\
    \ append(arr, 1 + i / 2)\n        } else {\n            arr = append(arr, arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n    return arr\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpqx2hw8lf_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpqx2hw8lf_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a6340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpd3348z19_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpd3348z19_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001a0340, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpbp6lks14_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbp6lks14_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 11}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 11, 5}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 11, 5, 14}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 7}\n    }\n    if\
    \ n == 9 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 7, 18}\n    }\n    if\
    \ n == 10 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 7, 18, 9}\n    }\n  \
    \  if n == 11 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 7, 18, 9, 22}\n \
    \   }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 11, 5, 14, 7, 18, 9,\
    \ 22, 11}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 11, 5, 14,\
    \ 7, 18, 9, 22, 11, 25}\n    }\n    if n == 14 {\n        return []int{3, 2, 8,\
    \ 3, 11, 5, 14, 7, 18, 9, 22, 11, 25, 13}\n    }\n    if n == 15 {\n        return\
    \ []int{3, 2, 8, 3, 11, 5, 14, 7, 18, 9, 22, 11, 25, 13, 28}\n    }\n    if n\
    \ == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T) {\n  candidate\
    \ := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2,\
    \ 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n    \
    \ { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual:\
    \ candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7),\
    \ expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected:\
    \ []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1),\
    \ expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7v275805_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n    \
    \    return []int{3, 2, 8, 3}\n    }\n    if n == 5 {\n        return []int{3,\
    \ 2, 8, 3, 9}\n    }\n    if n == 6 {\n        return []int{3, 2, 8, 3, 9, 17}\n\
    \    }\n    if n == 7 {\n        return []int{3, 2, 8, 3, 9, 17, 11}\n    }\n\
    \    if n == 8 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10}\n    }\n   \
    \ if n == 9 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29}\n    }\n  \
    \  if n == 10 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12}\n   \
    \ }\n    if n == 11 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12,\
    \ 15}\n    }\n    if n == 12 {\n        return []int{3, 2, 8, 3, 9, 17, 11, 10,\
    \ 29, 12, 15, 13}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 3, 9,\
    \ 17, 11, 10, 29, 12, 15, 13, 24}\n    }\n    if n == 14 {\n        return []int{3,\
    \ 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14}\n    }\n    if n == 15 {\n \
    \       return []int{3, 2, 8, 3, 9, 17, 11, 10, 29, 12, 15, 13, 24, 14, 30}\n\
    \    }\n    if n == 16 {\n        return []int{3,\nfunc TestTri(t *testing.T)\
    \ {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2,\
    \ 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n\
    \     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     {\
    \ actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual:\
    \ candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual:\
    \ candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual:\
    \ candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1}\
    \ },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ny32fip_test.go:73:6: expected ''('', found TestTri

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073774
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    var result = []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001c4030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001c4030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpi7hyofon_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpi7hyofon_test.go:54\
    \ +0x73\ntesting.tRunner(0xc000185040, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            res\
    \ = append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0000143a8})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0000143a8})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x5)\n\t/tmp/tmpbp6lks14_test.go:40\
    \ +0x248\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpbp6lks14_test.go:55\
    \ +0xa2\ntesting.tRunner(0xc0001924e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    ret := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            ret =\
    \ append(ret, 1 + i / 2)\n        } else {\n            ret = append(ret, ret[i\
    \ - 1] + ret[i - 2] + ret[i + 1])\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc0001d6030})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc0001d6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpfl1u5zx2_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpfl1u5zx2_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001991e0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073776
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    result := []int{3,\
    \ 2, 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
    \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
    \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8,\
    \ 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual:\
    \ candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected:\
    \ []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmp05fsj_m0_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmp05fsj_m0_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
- exit_code: 1
  program: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n)\
    \ = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n\
    // tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a\
    \ non-negative integer number n, you have to a return a list of the \n// first\
    \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunc tri(n int) []int\
    \ {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n       \
    \ return []int{3}\n    }\n    if n == 2 {\n        return []int{3, 2}\n    }\n\
    \    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    res := []int{3, 2,\
    \ 8}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            res =\
    \ append(res, 1 + i / 2)\n        } else {\n            res = append(res, res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected:\
    \ []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3,\
    \ 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
    \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
    \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
    \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTri (0.00s)\npanic: runtime error: index out of range [4]\
    \ with length 3 [recovered]\n\tpanic: runtime error: index out of range [4] with\
    \ length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513a40, 0xc000014390})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513a40,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.tri(0x4)\n\t/tmp/tmpyf6citin_test.go:40\
    \ +0x232\ncommand-line-arguments_test.TestTri(0x0?)\n\t/tmp/tmpyf6citin_test.go:54\
    \ +0x73\ntesting.tRunner(0xc0001a01a0, 0x529358)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073775
