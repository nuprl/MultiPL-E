name: HumanEval_9_rolling_max
language: go_test.go
prompt: "package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // From a given list of integers, generate a list of rolling maximum element found\
  \ until given moment\n// in the sequence.\nfunc rolling_max(numbers []int) []int\
  \ {\n"
tests: "func TestRolling_Max(t *testing.T) {\n  candidate := rolling_max\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4}), expected: []int{1, 2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 1}), expected: []int{4, 4, 4, 4} },\n     { actual: candidate([]int{3, 2,\
  \ 3, 100, 3}), expected: []int{3, 3, 3, 100, 100} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
