name: HumanEval_65_circular_shift
language: go_test.go
prompt: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\nfunc circular_shift(x int, shift int) string {\n"
tests: "func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n   \
  \  { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
  \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
  \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
