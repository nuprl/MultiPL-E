language: go_test.go
name: HumanEval_120_maximum
results:
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // \u601D\u8DEF\uFF1A\u6784\u5EFA\u4E00\u4E2A\u5927\u5C0F\u4E3Ak\u7684\u6700\
    \u5C0F\u5806\uFF0C\u7136\u540E\u904D\u5386\u6570\u7EC4\uFF0C\u82E5\u6570\u7EC4\
    \u5143\u7D20\u5927\u4E8E\u5806\u9876\u5143\u7D20\uFF0C\u5219\u5C06\u5806\u9876\
    \u5143\u7D20\u5F39\u51FA\uFF0C\n    // \u5C06\u6570\u7EC4\u5143\u7D20\u63D2\u5165\
    \u5806\u4E2D\uFF0C\u6700\u540E\u5C06\u5806\u4E2D\u5143\u7D20\u5F39\u51FA\uFF0C\
    \u5373\u4E3A\u7ED3\u679C\n    if len(arr) == 0 || k == 0 {\n        return nil\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    buildMinHeap(heap)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n        \
    \    heap[0] = arr[i]\n            minHeapify(heap, 0)\n        }\n    }\n   \
    \ for i := 0; i < k/2; i++ {\n        heap[i], heap[k-1-i] = heap[k-1-i], heap[i]\n\
    \    }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkucbbji_test.go:30:5: undefined: buildMinHeap

    /tmp/tmppkucbbji_test.go:34:13: undefined: minHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // TODO:\n    return nil\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvay0ksp7_test.go:45: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpvay0ksp7_test.go:45: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpvay0ksp7_test.go:45: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   n := len(arr)\n    if n == 0 || k == 0 {\n        return []int{}\n    }\n\
    \    if k >= n {\n        return arr\n    }\n    var res []int\n    for i := 0;\
    \ i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i := k; i <\
    \ n; i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n\
    \                res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n\
    \                res = res[:k]\n                break\n            }\n       \
    \ }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxutk7_wq_test.go:64: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxutk7_wq_test.go:64: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxutk7_wq_test.go:64: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxutk7_wq_test.go:64:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxutk7_wq_test.go:64: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxutk7_wq_test.go:64:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // heap\n    heap := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 -\
    \ 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpym4qg7z6_test.go:30:9: undefined: heapify

    /tmp/tmpym4qg7z6_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpba4gjkj1_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpba4gjkj1_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpba4gjkj1_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpba4gjkj1_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpba4gjkj1_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpba4gjkj1_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k <= 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for t := k - 1; t > j; t-- {\n                    result[t] =\
    \ result[t - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp838yxv4k_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp838yxv4k_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp838yxv4k_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp838yxv4k_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp838yxv4k_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp838yxv4k_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    // k > 1\n  \
    \  res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n  \
    \          res[0] = arr[i]\n            for j := 1; j < k; j++ {\n           \
    \     if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpft_pftw8_test.go:76: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpft_pftw8_test.go:76: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpft_pftw8_test.go:76: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpft_pftw8_test.go:76: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpft_pftw8_test.go:76: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpft_pftw8_test.go:76:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n     \
    \   max := arr[0]\n        min := arr[0]\n        for _, v := range arr {\n  \
    \          if v > max {\n                max = v\n            }\n            if\
    \ v < min {\n                min = v\n            }\n        }\n        return\
    \ []int{max, min}\n    }\n    return []int{}\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpx8qu5d10_test.go:72: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpx8qu5d10_test.go:72: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpx8qu5d10_test.go:72: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpx8qu5d10_test.go:72:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpx8qu5d10_test.go:72: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpx8qu5d10_test.go:72:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=-10)]'\n    ---\
    \ FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpx8qu5d10_test.go:72: expected\
    \ '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\u518D\u53D6\u524D\
    k\u4E2A\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp29y_qjn6_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpapnk_bxu_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpapnk_bxu_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    // max heap\n    heap := make([]int, 0)\n    for _,\
    \ v := range arr {\n        if len(heap) < k {\n            heap = append(heap,\
    \ v)\n            if len(heap) == k {\n                buildMaxHeap(heap)\n  \
    \          }\n        } else {\n            if v > heap[0] {\n               \
    \ heap[0] = v\n                maxHeapify(heap, 0)\n            }\n        }\n\
    \    }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprh65csmi_test.go:30:17: undefined: buildMaxHeap

    /tmp/tmprh65csmi_test.go:35:17: undefined: maxHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ if arr[i] > res[0] {\n            res[0] = arr[i]\n            for j := 1; j\
    \ < k; j++ {\n                if res[j] < res[j - 1] {\n                    res[j],\
    \ res[j - 1] = res[j - 1], res[j]\n                } else {\n                \
    \    break\n                }\n            }\n        }\n    }\n    return res\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpe14_2up5_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpe14_2up5_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpe14_2up5_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpe14_2up5_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpe14_2up5_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpe14_2up5_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if res[j] > res[j - 1] {\n           \
    \         res[j], res[j - 1] = res[j - 1], res[j]\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbxh7l8ts_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpbxh7l8ts_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpbxh7l8ts_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbxh7l8ts_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbxh7l8ts_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpbxh7l8ts_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpbxh7l8ts_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpapnk_bxu_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpapnk_bxu_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // use a min heap to store the maximum k numbers\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    buildMinHeap(heap)\n    for i := k; i < len(arr); i++ {\n        if\
    \ arr[i] > heap[0] {\n            heap[0] = arr[i]\n            minHeapify(heap,\
    \ 0)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa03dhaj_test.go:29:5: undefined: buildMinHeap

    /tmp/tmpfa03dhaj_test.go:33:13: undefined: minHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var result []int\n    if len(arr) == 0 || k == 0 {\n        return result\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    for i := 0; i <\
    \ k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] >\
    \ result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptx2ads4n_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmptx2ads4n_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptx2ads4n_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptx2ads4n_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptx2ads4n_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmptx2ads4n_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp5lajv2we_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp5lajv2we_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp5lajv2we_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp5lajv2we_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp5lajv2we_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp5lajv2we_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp5lajv2we_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var result []int\n    if k == 0 {\n        return result\n    }\n    if k\
    \ == 1 {\n        max := arr[0]\n        for _, v := range arr {\n           \
    \ if v > max {\n                max = v\n            }\n        }\n        result\
    \ = append(result, max)\n        return result\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpr2ei456x_test.go:73: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpr2ei456x_test.go:73: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpr2ei456x_test.go:73: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpr2ei456x_test.go:73:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpr2ei456x_test.go:73: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpr2ei456x_test.go:73:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxd7aw06r_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxd7aw06r_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        min := result[0]\n        minIndex := 0\n        for j := 1;\
    \ j < k; j++ {\n            if result[j] < min {\n                min = result[j]\n\
    \                minIndex = j\n            }\n        }\n        if arr[i] > min\
    \ {\n            result[minIndex] = arr[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp9facznbo_test.go:67: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp9facznbo_test.go:67: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp9facznbo_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp9facznbo_test.go:67: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp9facznbo_test.go:67:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   n := len(arr)\n    if n == 0 || k == 0 {\n        return nil\n    }\n    if\
    \ k >= n {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\u7136\u540E\
    \u53D6\u524Dk\u4E2A\n    // sort.Ints(arr)\n    // return arr[:k]\n    // \u5806\
    \u6392\u5E8F\n    heap := make([]int, k)\n    copy(heap, arr[:k])\n    for i :=\
    \ k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k;\
    \ i < n; i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n\
    \            heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpppnkwx3d_test.go:32:9: undefined: heapify

    /tmp/tmpppnkwx3d_test.go:37:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for l := k - 1; l > j; l-- {\n                    res[l] = res[l\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpx3cfa0r7_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpx3cfa0r7_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpx3cfa0r7_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpx3cfa0r7_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpx3cfa0r7_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpx3cfa0r7_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for t := k - 1; t > j; t-- {\n                    result[t] =\
    \ result[t - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpa3gy2rlu_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpa3gy2rlu_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpa3gy2rlu_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpa3gy2rlu_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpa3gy2rlu_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpa3gy2rlu_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >=\
    \ 0; i-- {\n        heapify(result, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         heapify(result, 0, k)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpse_dobv2_test.go:29:9: undefined: heapify

    /tmp/tmpse_dobv2_test.go:34:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpj_9wg6rk_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpj_9wg6rk_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // use a min heap to store the maximum k numbers\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0so9ntsd_test.go:30:9: undefined: heapify

    /tmp/tmp0so9ntsd_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    // use a min heap to store the k largest elements\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    heapify(heap)\n    for i := k; i < len(arr); i++ {\n        if arr[i]\
    \ > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap)\n     \
    \   }\n    }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdheeppzg_test.go:29:5: undefined: heapify

    /tmp/tmpdheeppzg_test.go:33:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        k = len(arr)\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                for m := k - 1;\
    \ m > j; m-- {\n                    res[m] = res[m - 1]\n                }\n \
    \               res[j] = arr[i]\n                break\n            }\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpytc5en6j_test.go:68: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpytc5en6j_test.go:68: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpytc5en6j_test.go:68: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpytc5en6j_test.go:68:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpytc5en6j_test.go:68: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpytc5en6j_test.go:68:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) <= k {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\
    \u518D\u53D6\u524Dk\u4E2A\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpipgs9kdz_test.go:22:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpapnk_bxu_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpapnk_bxu_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result[j] = arr[i]\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpn2xcah8d_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpn2xcah8d_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpn2xcah8d_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpn2xcah8d_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpn2xcah8d_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpn2xcah8d_test.go:62: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprfn8w1uz_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmprfn8w1uz_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxd7aw06r_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxd7aw06r_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for t := k - 1; t > j; t-- {\n                    res[t] = res[t\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbe99t76s_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbe99t76s_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbe99t76s_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbe99t76s_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbe99t76s_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbe99t76s_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp4a5f8ogx_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp4a5f8ogx_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp4a5f8ogx_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp4a5f8ogx_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp4a5f8ogx_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp4a5f8ogx_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpow1m3zii_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpow1m3zii_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpow1m3zii_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpow1m3zii_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpow1m3zii_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpow1m3zii_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpj_9wg6rk_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpj_9wg6rk_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var result []int\n    if k == 0 {\n        return result\n    }\n    if k\
    \ == 1 {\n        max := arr[0]\n        for _, v := range arr {\n           \
    \ if v > max {\n                max = v\n            }\n        }\n        result\
    \ = append(result, max)\n        return result\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    for i := 0; i < k; i++ {\n        max := arr[i]\n\
    \        maxIndex := i\n        for j := i; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n                maxIndex = j\n\
    \            }\n        }\n        arr[i], arr[maxIndex] = arr[maxIndex], arr[i]\n\
    \        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpwrhiiyzu_test.go:73: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpwrhiiyzu_test.go:73: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpwrhiiyzu_test.go:73: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpwrhiiyzu_test.go:73: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpwrhiiyzu_test.go:73:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpwrhiiyzu_test.go:73: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return nil\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmppycckq43_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmppycckq43_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmppycckq43_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmppycckq43_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmppycckq43_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmppycckq43_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmppycckq43_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    // heap\n    heap := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >=\
    \ 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn14e0fps_test.go:30:9: undefined: heapify

    /tmp/tmpn14e0fps_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpufpkvc8q_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpufpkvc8q_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpufpkvc8q_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpufpkvc8q_test.go:66:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpufpkvc8q_test.go:66: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpufpkvc8q_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if res[j] < res[j - 1] {\n           \
    \         res[j], res[j - 1] = res[j - 1], res[j]\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpfh2hd_mw_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpfh2hd_mw_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpfh2hd_mw_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpfh2hd_mw_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpfh2hd_mw_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpfh2hd_mw_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxd7aw06r_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxd7aw06r_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // quick sort\n    quickSort(arr, 0, len(arr)\
    \ - 1)\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvelxfou_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpapnk_bxu_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpapnk_bxu_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if res[j] < res[j - 1] {\n           \
    \         res[j], res[j - 1] = res[j - 1], res[j]\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxtx98uoj_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpxtx98uoj_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpxtx98uoj_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxtx98uoj_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxtx98uoj_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxtx98uoj_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res[j] = arr[i]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprcgzz_5j_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprcgzz_5j_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprcgzz_5j_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprcgzz_5j_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmprcgzz_5j_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmprcgzz_5j_test.go:62: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    max := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        max[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > max[0] {\n            max[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if max[j] < max[j - 1] {\n           \
    \         max[j], max[j - 1] = max[j - 1], max[j]\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpdlgpjzfw_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpdlgpjzfw_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpdlgpjzfw_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpdlgpjzfw_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpdlgpjzfw_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpdlgpjzfw_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    max := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        max[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ if arr[i] > max[0] {\n            max[0] = arr[i]\n            for j := 1; j\
    \ < k; j++ {\n                if max[j] < max[j - 1] {\n                    max[j],\
    \ max[j - 1] = max[j - 1], max[j]\n                } else {\n                \
    \    break\n                }\n            }\n        }\n    }\n    return max\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpuoogj33g_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpuoogj33g_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpuoogj33g_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpuoogj33g_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpuoogj33g_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpuoogj33g_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprn73_it0_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprn73_it0_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprn73_it0_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprn73_it0_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmprn73_it0_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmprn73_it0_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        max := -1001\n   \
    \     maxIndex := -1\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n                maxIndex = j\n\
    \            }\n        }\n        result = append(result, max)\n        arr =\
    \ append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n    return result\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpovvdtfix_test.go:57: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpovvdtfix_test.go:57: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpovvdtfix_test.go:57:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n\
    \                    result[j], result[j - 1] = result[j - 1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpduhjv92p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpduhjv92p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpduhjv92p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpduhjv92p_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return nil\n    }\n    if k == 1 {\n\
    \        max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxu5he_ke_test.go:74: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxu5he_ke_test.go:74: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxu5he_ke_test.go:74: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxu5he_ke_test.go:74:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxu5he_ke_test.go:74: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxu5he_ke_test.go:74:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0xgn44f2_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp0xgn44f2_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp0xgn44f2_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp0xgn44f2_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp0xgn44f2_test.go:69: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0xgn44f2_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp0xgn44f2_test.go:69: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] < result[j - 1] {\n \
    \                   result[j], result[j - 1] = result[j - 1], result[j]\n    \
    \            } else {\n                    break\n                }\n        \
    \    }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpl5zal40m_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpl5zal40m_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpl5zal40m_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpl5zal40m_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpl5zal40m_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpl5zal40m_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp3k9jw2t2_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp3k9jw2t2_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp3k9jw2t2_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp3k9jw2t2_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp3k9jw2t2_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp3k9jw2t2_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // k < len(arr)\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for t := k - 1; t > j; t-- {\n       \
    \             result[t] = result[t - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpni5a74y5_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpni5a74y5_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpni5a74y5_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpni5a74y5_test.go:66:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpni5a74y5_test.go:66: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpni5a74y5_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // use a min heap to store the k largest numbers\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9pe4aczk_test.go:30:9: undefined: heapify

    /tmp/tmp9pe4aczk_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u521B\u5EFA\u4E00\u4E2A\u5927\u5C0F\u4E3A\
    k\u7684\u6570\u7EC4\n    var res = make([]int, k)\n    // \u5C06\u524Dk\u4E2A\u5143\
    \u7D20\u653E\u5165\u6570\u7EC4\n    for i := 0; i < k; i++ {\n        res[i] =\
    \ arr[i]\n    }\n    // \u5C06\u6570\u7EC4\u6784\u5EFA\u6210\u6700\u5C0F\u5806\
    \n    buildMinHeap(res)\n    // \u5BF9\u5269\u4F59\u7684\u5143\u7D20\u8FDB\u884C\
    \u6BD4\u8F83\uFF0C\u5982\u679C\u5927\u4E8E\u5806\u9876\u5143\u7D20\uFF0C\u5219\
    \u66FF\u6362\u5806\u9876\u5143\u7D20\n    for i := k; i < len(arr); i++ {\n  \
    \      if arr[i] > res[0] {\n            res[0] = arr[i]\n            minHeapify(res,\
    \ 0)\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpii1vts4d_test.go:31:5: undefined: buildMinHeap

    /tmp/tmpii1vts4d_test.go:36:13: undefined: minHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) <= k {\n        return arr\n    }\n    res := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > res[j] {\n                for l := k - 1; l > j; l-- {\n                 \
    \   res[l] = res[l - 1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxin79l8d_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxin79l8d_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxin79l8d_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxin79l8d_test.go:62:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxin79l8d_test.go:62: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxin79l8d_test.go:62:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprfn8w1uz_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmprfn8w1uz_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // use a min-heap to store the maximum k numbers\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vqabhoq_test.go:30:9: undefined: heapify

    /tmp/tmp2vqabhoq_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n               \
    \ for l := k - 1; l > j; l-- {\n                    res[l] = res[l - 1]\n    \
    \            }\n                res[j] = arr[i]\n                break\n     \
    \       }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp5wa2d4x6_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp5wa2d4x6_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp5wa2d4x6_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp5wa2d4x6_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp5wa2d4x6_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp5wa2d4x6_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] < result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvq38y3_p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpvq38y3_p_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // TODO:\n    return nil\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvay0ksp7_test.go:45: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpvay0ksp7_test.go:45: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpvay0ksp7_test.go:45: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpgtmh3wjc_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpgtmh3wjc_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpgtmh3wjc_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpgtmh3wjc_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpgtmh3wjc_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpgtmh3wjc_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) <= k {\n        return arr\n    }\n    var res []int\n    for\
    \ i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > res[j] {\n                res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n\
    \                res = res[:k]\n                break\n            }\n       \
    \ }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpo6pparww_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpo6pparww_test.go:60: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpo6pparww_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpo6pparww_test.go:60:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpo6pparww_test.go:60: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpo6pparww_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return nil\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u5806\u6392\u5E8F\n    // \u5148\u6784\
    \u5EFA\u4E00\u4E2A\u6700\u5927\u5806\n    // \u53D6\u51FA\u6700\u5927\u5806\u7684\
    \u6839\u8282\u70B9\uFF0C\u653E\u5230\u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\uFF0C\
    \u7136\u540E\u91CD\u65B0\u6784\u5EFA\u6700\u5927\u5806\n    // \u53D6\u51FA\u6700\
    \u5927\u5806\u7684\u6839\u8282\u70B9\uFF0C\u653E\u5230\u5012\u6570\u7B2C\u4E8C\
    \u4E2A\u4F4D\u7F6E\uFF0C\u7136\u540E\u91CD\u65B0\u6784\u5EFA\u6700\u5927\u5806\
    \n    // \u53D6\u51FA\u6700\u5927\u5806\u7684\u6839\u8282\u70B9\uFF0C\u653E\u5230\
    \u5012\u6570\u7B2C\u4E09\u4E2A\u4F4D\u7F6E\uFF0C\u7136\u540E\u91CD\u65B0\u6784\
    \u5EFA\u6700\u5927\u5806\n    // ...\n    // \u53D6\u51FA\u6700\u5927\u5806\u7684\
    \u6839\u8282\u70B9\uFF0C\u653E\u5230\u5012\u6570\u7B2Ck\u4E2A\u4F4D\u7F6E\uFF0C\
    \u7136\u540E\u91CD\u65B0\u6784\u5EFA\u6700\u5927\u5806\n    // \u53D6\u51FA\u6700\
    \u5927\u5806\u7684\u6839\u8282\u70B9\uFF0C\u653E\u5230\u5012\u6570\u7B2Ck+1\u4E2A\
    \u4F4D\u7F6E\uFF0C\u7136\u540E\u91CD\u65B0\u6784\u5EFA\u6700\u5927\u5806\n   \
    \ // ...\n    // \u53D6\u51FA\u6700\u5927\u5806\u7684\u6839\u8282\u70B9\uFF0C\u653E\
    \u5230\u5012\u6570\u7B2Clen(arr)\u4E2A\u4F4D\u7F6E\uFF0C\u7136\u540E\u91CD\u65B0\
    \u6784\u5EFA\u6700\u5927\u5806\n    // \u6700\u540E\u53D6\u51FA\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjhy6cq3c_test.go:35:6: expected ''('', found TestMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmps0y4wdsm_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmps0y4wdsm_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmps0y4wdsm_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmps0y4wdsm_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmps0y4wdsm_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmps0y4wdsm_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // \u5229\u7528\u5FEB\u6392\u7684\u601D\u60F3\
    \uFF0C\u6BCF\u6B21\u628A\u6700\u5927\u7684\u6570\u653E\u5230\u6700\u540E\uFF0C\
    \u7136\u540E\u518D\u628A\u5269\u4E0B\u7684\u6570\u653E\u5230\u524D\u9762\n   \
    \ // \u6BCF\u6B21\u628A\u6700\u5927\u7684\u6570\u653E\u5230\u6700\u540E\uFF0C\u7136\
    \u540E\u518D\u628A\u5269\u4E0B\u7684\u6570\u653E\u5230\u524D\u9762\n    // \u6BCF\
    \u6B21\u628A\u6700\u5927\u7684\u6570\u653E\u5230\u6700\u540E\uFF0C\u7136\u540E\
    \u518D\u628A\u5269\u4E0B\u7684\u6570\u653E\u5230\u524D\u9762\n    // \u6BCF\u6B21\
    \u628A\u6700\u5927\u7684\u6570\u653E\u5230\u6700\u540E\uFF0C\u7136\u540E\u518D\
    \u628A\u5269\u4E0B\u7684\u6570\u653E\u5230\u524D\u9762\n    // \u6BCF\u6B21\u628A\
    \u6700\u5927\u7684\u6570\u653E\u5230\u6700\u540E\uFF0C\u7136\u540E\u518D\u628A\
    \u5269\u4E0B\u7684\u6570\u653E\u5230\u524D\u9762\n    // \u6BCF\u6B21\u628A\u6700\
    \u5927\u7684\u6570\u653E\u5230\u6700\u540E\uFF0C\u7136\u540E\u518D\u628A\u5269\
    \u4E0B\u7684\u6570\u653E\u5230\u524D\u9762\n    // \u6BCF\u6B21\u628A\u6700\u5927\
    \u7684\u6570\u653E\u5230\u6700\u540E\uFF0C\u7136\u540E\u518D\u628A\u5269\u4E0B\
    \u7684\u6570\u653E\u5230\u524D\u9762\n    // \u6BCF\u6B21\u628A\u6700\u5927\u7684\
    \u6570\u653E\u5230\u6700\u540E\uFF0C\u7136\u540E\u518D\u628A\u5269\u4E0B\u7684\
    \u6570\u653E\u5230\u524D\u9762\n    //\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptwdta5jn_test.go:33:6: expected ''('', found TestMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] < result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvq38y3_p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpvq38y3_p_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      if arr[i] > res[0] {\n            res[0] = arr[i]\n            for j :=\
    \ 1; j < k; j++ {\n                if res[j] < res[j-1] {\n                  \
    \  res[j], res[j-1] = res[j-1], res[j]\n                } else {\n           \
    \         break\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpc8zw92g7_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpc8zw92g7_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpc8zw92g7_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpc8zw92g7_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpc8zw92g7_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpc8zw92g7_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpws8kptay_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpws8kptay_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpws8kptay_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpws8kptay_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] < result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvq38y3_p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpvq38y3_p_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >=\
    \ 0; i-- {\n        heapify(result, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         heapify(result, 0, k)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptpgsmye7_test.go:29:9: undefined: heapify

    /tmp/tmptpgsmye7_test.go:34:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073341
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var (\n        i, j int\n        n = len(arr)\n    )\n    if k == n {\n  \
    \      return arr\n    }\n    for i = 0; i < k; i++ {\n        for j = i + 1;\
    \ j < n; j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            }\n        }\n    }\n    return arr[:k]\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp8sj_fs5l_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp8sj_fs5l_test.go:58: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp8sj_fs5l_test.go:58: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp8sj_fs5l_test.go:58: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp8sj_fs5l_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp8sj_fs5l_test.go:58: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n\
    \                    result[j], result[j - 1] = result[j - 1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpduhjv92p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpduhjv92p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpduhjv92p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpduhjv92p_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n     \
    \   max1, max2 := arr[0], arr[1]\n        if max1 < max2 {\n            max1,\
    \ max2 = max2, max1\n        }\n        for _, v := range arr[2:] {\n        \
    \    if v > max1 {\n                max2 = max1\n                max1 = v\n  \
    \          } else if v > max2 {\n                max2 = v\n            }\n   \
    \     }\n        return []int{max1, max2}\n    }\n    if k == 3 {\n        max1,\
    \ max2, max3 := arr[0], arr[1], arr[2]\n        if max1 < max2 {\n           \
    \ max1, max2 = max2, max1\n        }\n        if max1 < max3 {\n            max1,\
    \ max3 = max3, max1\n        }\n        if max2 < max3 {\n            max2, max3\
    \ = max3, max2\n        }\n        for _, v := range arr[3:] {\n            if\
    \ v > max1 {\n                max3 = max2\n                max2 = max1\n     \
    \           max1 = v\n            } else if v > max2 {\n                max3 =\
    \ max2\n                max2 = v\n            } else if v > max3 {\n         \
    \       max3 = v\n            }\n        }\n        return []int{max1, max2, max3}\n\
    \    }\n    return []int{}\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp5nxsclz2_test.go:99: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp5nxsclz2_test.go:99: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp5nxsclz2_test.go:99: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmp5nxsclz2_test.go:99: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0)\
    \ %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp5nxsclz2_test.go:99: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp5nxsclz2_test.go:99: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpypda8r10_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpypda8r10_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpypda8r10_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpypda8r10_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpypda8r10_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpypda8r10_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpdzk330o7_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpdzk330o7_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpdzk330o7_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpdzk330o7_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpdzk330o7_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpdzk330o7_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // use a min heap to store the k largest elements\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    buildMinHeap(heap)\n    for i := k; i < len(arr); i++ {\n        if\
    \ arr[i] > heap[0] {\n            heap[0] = arr[i]\n            minHeapify(heap,\
    \ 0)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwp3faz8g_test.go:29:5: undefined: buildMinHeap

    /tmp/tmpwp3faz8g_test.go:33:13: undefined: minHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n     \
    \   if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1], arr[0]\n      \
    \  }\n        for i := 2; i < len(arr); i++ {\n            if arr[i] > arr[1]\
    \ {\n                arr[1] = arr[i]\n                if arr[0] > arr[1] {\n \
    \                   arr[0], arr[1] = arr[1], arr[0]\n                }\n     \
    \       }\n        }\n        return arr[:2]\n    }\n    if k == 3 {\n       \
    \ if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1], arr[0]\n        }\n\
    \        if arr[1] > arr[2] {\n            arr[1], arr[2] = arr[2], arr[1]\n \
    \       }\n        if arr[0] > arr[1] {\n            arr[0], arr[1] = arr[1],\
    \ arr[0]\n        }\n        for i := 3; i < len(arr); i++ {\n            if arr[i]\
    \ > arr[2] {\n                arr[2] = arr[i]\n                if arr[1] > arr[2]\
    \ {\n                    arr[1], arr[2] = arr[2], arr[1]\n                }\n\
    \                if arr[0] > arr[1] {\n                    arr[0], arr[1] = arr[1],\
    \ arr[0]\n                }\n            }\n        }\n        return arr[:3]\n\
    \    }\n    if k == 4 {\n        if arr[0] > arr[1] {\n            arr[0], arr[1]\
    \ = arr[1], arr[0]\n        }\n        if arr[1] > arr\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl6icc6gn_test.go:75:6: expected ''('', found TestMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        var min = result[0]\n        var minIndex = 0\n        for j\
    \ := 1; j < k; j++ {\n            if result[j] < min {\n                min =\
    \ result[j]\n                minIndex = j\n            }\n        }\n        if\
    \ arr[i] > min {\n            result[minIndex] = arr[i]\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp_jgz2sj3_test.go:67: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp_jgz2sj3_test.go:67: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp_jgz2sj3_test.go:67: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp_jgz2sj3_test.go:67: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp_jgz2sj3_test.go:67:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var (\n        result = make([]int, k)\n        i,\
    \ j int\n    )\n    for i = 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n\
    \    for i = k; i < len(arr); i++ {\n        for j = 0; j < k; j++ {\n       \
    \     if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp5chcw3qd_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp5chcw3qd_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp5chcw3qd_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp5chcw3qd_test.go:66:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp5chcw3qd_test.go:66: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp5chcw3qd_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result[j] = arr[i]\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpn2xcah8d_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpn2xcah8d_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpn2xcah8d_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpn2xcah8d_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpn2xcah8d_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpn2xcah8d_test.go:62: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n\
    \    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpllrg9z99_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpllrg9z99_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpllrg9z99_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpllrg9z99_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpllrg9z99_test.go:69: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpllrg9z99_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpllrg9z99_test.go:69: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i--\
    \ {\n        heapify(res, i, k)\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > res[0] {\n            res[0] = arr[i]\n            heapify(res,\
    \ 0, k)\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpclahx54r_test.go:29:9: undefined: heapify

    /tmp/tmpclahx54r_test.go:34:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // \u4F7F\u7528\u6700\u5927\u5806\n    heap\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprdv1sfyd_test.go:30:9: undefined: heapify

    /tmp/tmprdv1sfyd_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j - 1] {\n\
    \                    result[j], result[j - 1] = result[j - 1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpduhjv92p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpduhjv92p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpduhjv92p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpduhjv92p_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpduhjv92p_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // TODO:\n    return nil\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvay0ksp7_test.go:45: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpvay0ksp7_test.go:45: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpvay0ksp7_test.go:45: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpvay0ksp7_test.go:45: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpvay0ksp7_test.go:45:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // \u5229\u7528\u5FEB\u6392\u7684\u601D\u60F3\
    \uFF0C\u627E\u5230\u7B2Ck\u5927\u7684\u6570\uFF0C\u7136\u540E\u628A\u6570\u7EC4\
    \u5206\u4E3A\u4E24\u90E8\u5206\uFF0C\u4E00\u90E8\u5206\u5927\u4E8E\u7B2Ck\u5927\
    \u7684\u6570\uFF0C\u4E00\u90E8\u5206\u5C0F\u4E8E\u7B2Ck\u5927\u7684\u6570\n  \
    \  // \u5982\u679C\u5927\u4E8E\u7B2Ck\u5927\u7684\u6570\u7684\u90E8\u5206\u7684\
    \u957F\u5EA6\u5927\u4E8Ek\uFF0C\u5219\u7EE7\u7EED\u5BFB\u627E\u7B2Ck\u5927\u7684\
    \u6570\uFF0C\u5426\u5219\u8FD4\u56DE\u5C0F\u4E8E\u7B2Ck\u5927\u7684\u6570\u7684\
    \u90E8\u5206\n    // \u5982\u679C\u5C0F\u4E8E\u7B2Ck\u5927\u7684\u6570\u7684\u90E8\
    \u5206\u7684\u957F\u5EA6\u5927\u4E8Ek\uFF0C\u5219\u7EE7\u7EED\u5BFB\u627E\u7B2C\
    k\u5927\u7684\u6570\uFF0C\u5426\u5219\u8FD4\u56DE\u5927\u4E8E\u7B2Ck\u5927\u7684\
    \u6570\u7684\u90E8\u5206\n    // \u5982\u679C\u5927\u4E8E\u7B2Ck\u5927\u7684\u6570\
    \u7684\u90E8\u5206\u7684\u957F\u5EA6\u7B49\u4E8Ek\uFF0C\u5219\u8FD4\u56DE\u8FD9\
    \u90E8\u5206\n    // \u5982\u679C\u5C0F\u4E8E\u7B2Ck\u5927\u7684\u6570\u7684\u90E8\
    \u5206\u7684\u957F\u5EA6\u7B49\u4E8Ek\uFF0C\u5219\u8FD4\u56DE\u8FD9\u90E8\u5206\
    \n    // \u5982\u679C\u5927\u4E8E\u7B2Ck\u5927\u7684\u6570\u7684\u90E8\u5206\u7684\
    \u957F\u5EA6\u5C0F\u4E8Ek\uFF0C\u5219\u8FD4\u56DE\u8FD9\u90E8\u5206\u52A0\u4E0A\
    \u5C0F\u4E8E\u7B2Ck\u5927\u7684\u6570\u7684\u90E8\u5206\n    // \u5982\u679C\u5C0F\
    \u4E8E\u7B2Ck\u5927\u7684\u6570\u7684\u90E8\u5206\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgx_0kzhl_test.go:31:6: expected ''('', found TestMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073342
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // use a min heap to store the k largest elements\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp39f4_sqi_test.go:30:9: undefined: heapify

    /tmp/tmp39f4_sqi_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // heap\n    heap := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 -\
    \ 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1te9y3mb_test.go:30:9: undefined: heapify

    /tmp/tmp1te9y3mb_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for x := 0; x < j; x++ {\n                    result[x] = result[x+1]\n\
    \                }\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpnw1ca4n4_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpnw1ca4n4_test.go:65: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpnw1ca4n4_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=2) %!s(int=0) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpnw1ca4n4_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpnw1ca4n4_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpnw1ca4n4_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpnw1ca4n4_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // Use a max heap to store the k largest elements.\n\
    \    // The heap is initialized with the first k elements.\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i\
    \ := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    // For\
    \ each of the remaining elements, compare it with the root of the heap.\n    //\
    \ If it is larger, replace the root with it and heapify the heap.\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0] =\
    \ arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n    return heap\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgq82i3ua_test.go:31:9: undefined: heapify

    /tmp/tmpgq82i3ua_test.go:38:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // heap sort\n    // build heap\n    for i\
    \ := k / 2 - 1; i >= 0; i-- {\n        heapify(arr, i, k)\n    }\n    // adjust\
    \ heap\n    for i := k; i < len(arr); i++ {\n        if arr[i] > arr[0] {\n  \
    \          arr[0] = arr[i]\n            heapify(arr, 0, k)\n        }\n    }\n\
    \    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoxve1f3o_test.go:27:9: undefined: heapify

    /tmp/tmpoxve1f3o_test.go:33:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    var result []int\n\
    \    for _, v := range arr {\n        if len(result) < k {\n            result\
    \ = append(result, v)\n            continue\n        }\n        if v > result[0]\
    \ {\n            result[0] = v\n        }\n        for i := 1; i < k; i++ {\n\
    \            if result[i] > result[i - 1] {\n                result[i], result[i\
    \ - 1] = result[i - 1], result[i]\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1avnaxil_test.go:76: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp1avnaxil_test.go:76: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp1avnaxil_test.go:76: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp1avnaxil_test.go:76: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp1avnaxil_test.go:76: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1avnaxil_test.go:76:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp1avnaxil_test.go:76: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], result[j+1:]...)\n              \
    \  result = append(result, arr[i])\n                break\n            }\n   \
    \     }\n    }\n    return result[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpq9r_3jva_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpq9r_3jva_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpq9r_3jva_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpq9r_3jva_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpq9r_3jva_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpq9r_3jva_test.go:63: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    // \u53D6\u524Dk\u4E2A\
    \u6570\uFF0C\u6392\u5E8F\n    arr = arr[:k]\n    for i := 1; i < k; i++ {\n  \
    \      for j := i; j > 0; j-- {\n            if arr[j] < arr[j-1] {\n        \
    \        arr[j], arr[j-1] = arr[j-1], arr[j]\n            } else {\n         \
    \       break\n            }\n        }\n    }\n    // \u5269\u4F59\u6570\u636E\
    \u63D2\u5165\n    for i := k; i < len(arr); i++ {\n        if arr[i] > arr[0]\
    \ {\n            arr[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if arr[j] < arr[j-1] {\n                    arr[j], arr[j-1] = arr[j-1],\
    \ arr[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpkblsksgg_test.go:83: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpkblsksgg_test.go:83: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=-4) %!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpkblsksgg_test.go:83: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=-123) %!s(int=20) %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpkblsksgg_test.go:83: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=-123) %!s(int=0) %!s(int=1) %!s(int=20)]'\n   \
    \ --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpkblsksgg_test.go:83: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpkblsksgg_test.go:83:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpkblsksgg_test.go:83: expected\
    \ '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpapnk_bxu_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpapnk_bxu_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpapnk_bxu_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpapnk_bxu_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxd7aw06r_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxd7aw06r_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := 0; l < k - j - 1; l++ {\n                    result[k\
    \ - l - 1] = result[k - l - 2]\n                }\n                result[j] =\
    \ arr[i]\n                break\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmptmoy_h4j_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmptmoy_h4j_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmptmoy_h4j_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmptmoy_h4j_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmptmoy_h4j_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmptmoy_h4j_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpba4gjkj1_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpba4gjkj1_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpba4gjkj1_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpba4gjkj1_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpba4gjkj1_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpba4gjkj1_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] < result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvq38y3_p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpvq38y3_p_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprfn8w1uz_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmprfn8w1uz_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      if arr[i] > res[0] {\n            res[0] = arr[i]\n            for j :=\
    \ 1; j < k; j++ {\n                if res[j] < res[j - 1] {\n                \
    \    res[j], res[j - 1] = res[j - 1], res[j]\n                } else {\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpfawd6w2__test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpfawd6w2__test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpfawd6w2__test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpfawd6w2__test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpfawd6w2__test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpfawd6w2__test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      for t := k - 1; t > j; t-- {\n                    res[t] = res[t - 1]\n\
    \                }\n                res[j] = arr[i]\n                break\n \
    \           }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvmbkftdw_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpvmbkftdw_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvmbkftdw_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvmbkftdw_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpvmbkftdw_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpvmbkftdw_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    if k > len(arr) {\n\
    \        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n\
    \        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxyek9_fg_test.go:75: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxyek9_fg_test.go:75: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxyek9_fg_test.go:75: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxyek9_fg_test.go:75:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxyek9_fg_test.go:75: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxyek9_fg_test.go:75:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // build a max heap\n    buildMaxHeap(arr)\n\
    \    // remove the largest k elements\n    for i := 0; i < k; i++ {\n        arr[0],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[0]\n        maxHeapify(arr,\
    \ 0, len(arr) - 1 - i)\n    }\n    return arr[len(arr) - k:]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzo52uw6d_test.go:25:5: undefined: buildMaxHeap

    /tmp/tmpzo52uw6d_test.go:29:9: undefined: maxHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073344
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // quick sort\n    quickSort(arr, 0, len(arr)\
    \ - 1)\n    return arr[len(arr) - k:]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk6q57wn7_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // use quick sort\n    quickSort(arr, 0, len(arr)\
    \ - 1)\n    return arr[len(arr) - k:]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwhly4h37_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var max = make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        max[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > max[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    max[l] = max[l\
    \ - 1]\n                }\n                max[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpaly4vglt_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpaly4vglt_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpaly4vglt_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpaly4vglt_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpaly4vglt_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpaly4vglt_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // quick sort\n    quickSort(arr, 0, len(arr)\
    \ - 1)\n    return arr[len(arr) - k:]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy8hvvt6c_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\u518D\u53D6\u524D\
    k\u4E2A\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp29y_qjn6_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpq5uxue5v_test.go:56: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpq5uxue5v_test.go:56: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpq5uxue5v_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpq5uxue5v_test.go:56: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpq5uxue5v_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpq5uxue5v_test.go:56: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for t := k - 1; t > j; t-- {\n                    result[t] =\
    \ result[t - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpa3gy2rlu_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpa3gy2rlu_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpa3gy2rlu_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpa3gy2rlu_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpa3gy2rlu_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpa3gy2rlu_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp5lajv2we_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp5lajv2we_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp5lajv2we_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp5lajv2we_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp5lajv2we_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp5lajv2we_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp5lajv2we_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // use a min heap\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i\
    \ := k / 2 - 1; i >= 0; i-- {\n        minHeapify(heap, i)\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0] =\
    \ arr[i]\n            minHeapify(heap, 0)\n        }\n    }\n    return heap\n\
    }\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvztchk1g_test.go:30:9: undefined: minHeapify

    /tmp/tmpvztchk1g_test.go:35:13: undefined: minHeapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073345
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // use a min heap to store the maximum k numbers\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0so9ntsd_test.go:30:9: undefined: heapify

    /tmp/tmp0so9ntsd_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp62g6j34u_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp62g6j34u_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp62g6j34u_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp62g6j34u_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp62g6j34u_test.go:69: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp62g6j34u_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp62g6j34u_test.go:69: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] < result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvq38y3_p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpvq38y3_p_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbkqrohkr_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbkqrohkr_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbkqrohkr_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbkqrohkr_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], result[j+1:]...)\n              \
    \  result = append(result, arr[i])\n                break\n            }\n   \
    \     }\n    }\n    return result[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxbf69ywx_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxbf69ywx_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxbf69ywx_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxbf69ywx_test.go:63: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpxbf69ywx_test.go:63:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpxbf69ywx_test.go:63: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res[j] = arr[i]\n         \
    \       break\n            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpktwfolsp_test.go:56: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpktwfolsp_test.go:56: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpktwfolsp_test.go:56: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpktwfolsp_test.go:56: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpktwfolsp_test.go:56:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpktwfolsp_test.go:56: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return nil\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp8t0g_fj3_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp8t0g_fj3_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp8t0g_fj3_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp8t0g_fj3_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp8t0g_fj3_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp8t0g_fj3_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpws8kptay_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpws8kptay_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpws8kptay_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpws8kptay_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpdzk330o7_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpdzk330o7_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpdzk330o7_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpdzk330o7_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpdzk330o7_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpdzk330o7_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpdzk330o7_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpdzk330o7_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpdzk330o7_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpdzk330o7_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpdzk330o7_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpdzk330o7_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpj_9wg6rk_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpj_9wg6rk_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // TODO\n    return nil\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpr_kjm2l__test.go:45: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n        tmpr_kjm2l__test.go:45:\
    \ expected '[%!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpr_kjm2l__test.go:45: expected '[%!s(int=2)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpr_kjm2l__test.go:45:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpr_kjm2l__test.go:45: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmpr_kjm2l__test.go:45: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpr_kjm2l__test.go:45: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpr_kjm2l__test.go:45:\
    \ expected '[%!s(int=5)]', got '[]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpr_kjm2l__test.go:45: expected '[%!s(int=-4) %!s(int=4)]', got '[]'\n\
    \    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpr_kjm2l__test.go:45:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    max := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        max[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > max[0] {\n            max[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if max[j] > max[j - 1] {\n           \
    \         max[j], max[j - 1] = max[j - 1], max[j]\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp06x4pei__test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp06x4pei__test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp06x4pei__test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp06x4pei__test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp06x4pei__test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp06x4pei__test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp06x4pei__test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u5806\u6392\u5E8F\n    // \u5EFA\u7ACB\
    \u5927\u6839\u5806\n    for i := (k - 1) / 2; i >= 0; i-- {\n        heapify(arr,\
    \ i, k)\n    }\n    // \u5806\u6392\u5E8F\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > arr[0] {\n            arr[0], arr[i] = arr[i], arr[0]\n \
    \           heapify(arr, 0, k)\n        }\n    }\n    return arr[:k]\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyenc6ot9_test.go:27:9: undefined: heapify

    /tmp/tmpyenc6ot9_test.go:33:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] < result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpvq38y3_p_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpvq38y3_p_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpvq38y3_p_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpvq38y3_p_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxd7aw06r_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxd7aw06r_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxd7aw06r_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxd7aw06r_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j - 1] {\n                    result[j],\
    \ result[j - 1] = result[j - 1], result[j]\n                } else {\n       \
    \             break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0xgn44f2_test.go:69: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmp0xgn44f2_test.go:69: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmp0xgn44f2_test.go:69: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp0xgn44f2_test.go:69: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp0xgn44f2_test.go:69: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0xgn44f2_test.go:69:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp0xgn44f2_test.go:69: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpjyp6e4uh_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpjyp6e4uh_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpjyp6e4uh_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpjyp6e4uh_test.go:66:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpjyp6e4uh_test.go:66: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpjyp6e4uh_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for t := k - 1; t > j; t-- {\n                    res[t] = res[t\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpbe99t76s_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpbe99t76s_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpbe99t76s_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpbe99t76s_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpbe99t76s_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpbe99t76s_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j -\
    \ 1] {\n                    result[j], result[j - 1] = result[j - 1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpws8kptay_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpws8kptay_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpws8kptay_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpws8kptay_test.go:66:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpws8kptay_test.go:66: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073342
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp4a5f8ogx_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp4a5f8ogx_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp4a5f8ogx_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp4a5f8ogx_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp4a5f8ogx_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp4a5f8ogx_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for l := k - 1; l > j; l-- {\n                    res[l] = res[l\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp7lma9ai6_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp7lma9ai6_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp7lma9ai6_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp7lma9ai6_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp7lma9ai6_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp7lma9ai6_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    result := make([]int,\
    \ k)\n    copy(result, arr[:k])\n    for i := k; i < len(arr); i++ {\n       \
    \ for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n            \
    \    copy(result[j+1:], result[j:k-1])\n                result[j] = arr[i]\n \
    \               break\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxuowsyz5_test.go:70: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxuowsyz5_test.go:70: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxuowsyz5_test.go:70: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxuowsyz5_test.go:70:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxuowsyz5_test.go:70: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxuowsyz5_test.go:70:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n     \
    \   max1, max2 := arr[0], arr[1]\n        if max1 < max2 {\n            max1,\
    \ max2 = max2, max1\n        }\n        for _, v := range arr[2:] {\n        \
    \    if v > max1 {\n                max2 = max1\n                max1 = v\n  \
    \          } else if v > max2 {\n                max2 = v\n            }\n   \
    \     }\n        return []int{max1, max2}\n    }\n    if k == 3 {\n        max1,\
    \ max2, max3 := arr[0], arr[1], arr[2]\n        if max1 < max2 {\n           \
    \ max1, max2 = max2, max1\n        }\n        if max1 < max3 {\n            max1,\
    \ max3 = max3, max1\n        }\n        if max2 < max3 {\n            max2, max3\
    \ = max3, max2\n        }\n        for _, v := range arr[3:] {\n            if\
    \ v > max1 {\n                max3 = max2\n                max2 = max1\n     \
    \           max1 = v\n            } else if v > max2 {\n                max3 =\
    \ max2\n                max2 = v\n            } else if v > max3 {\n         \
    \       max3 = v\n            }\n        }\n        return []int{max1, max2, max3}\n\
    \    }\n    return []int{}\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp5nxsclz2_test.go:99: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp5nxsclz2_test.go:99: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp5nxsclz2_test.go:99: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmp5nxsclz2_test.go:99: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0)\
    \ %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmp5nxsclz2_test.go:99: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmp5nxsclz2_test.go:99: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073343
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // use a max heap to store the first k elements\n\
    \    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudocic7h_test.go:30:9: undefined: heapify

    /tmp/tmpudocic7h_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var max int\n    var maxIndex int\n    var\
    \ result []int\n    for i := 0; i < k; i++ {\n        max = arr[0]\n        maxIndex\
    \ = 0\n        for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n\
    \                max = arr[j]\n                maxIndex = j\n            }\n \
    \       }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0lojplkb_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp0lojplkb_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp0lojplkb_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp0lojplkb_test.go:65: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0lojplkb_test.go:65:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp0lojplkb_test.go:65: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    // find the maximum k numbers in arr\n   \
    \ // 1. sort the array\n    // 2. return the first k elements\n    // 3. time\
    \ complexity is O(nlogn)\n    // 4. space complexity is O(1)\n    quickSort(arr,\
    \ 0, len(arr) - 1)\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n\
    \  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdq87zq2n_test.go:29:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // return maximum1(arr, k)\n    return maximum2(arr, k)\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo6n39w_4_test.go:19:12: undefined: maximum2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var result []int\n    if len(arr) < k {\n        return result\n    }\n  \
    \  for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpz9p0_17t_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpz9p0_17t_test.go:60: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpz9p0_17t_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpz9p0_17t_test.go:60:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpz9p0_17t_test.go:60: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpz9p0_17t_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n \
    \ candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4,\
    \ 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4,\
    \ 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2,\
    \ -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123, -123,\
    \ 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpxd7aw06r_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpxd7aw06r_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpxd7aw06r_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpxd7aw06r_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var res []int\n    if k == 0 {\n        return res\n    }\n    for i := 0;\
    \ i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i := k; i <\
    \ len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j]\
    \ {\n                res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n\
    \                res = res[:k]\n                break\n            }\n       \
    \ }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmph6b5_vjc_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmph6b5_vjc_test.go:60: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmph6b5_vjc_test.go:60: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmph6b5_vjc_test.go:60:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmph6b5_vjc_test.go:60: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmph6b5_vjc_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpj_9wg6rk_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpj_9wg6rk_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpj_9wg6rk_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpj_9wg6rk_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // quick sort\n    quickSort(arr, 0, len(arr)\
    \ - 1)\n    return arr[:k]\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptvelxfou_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073338
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   // heap\n    // heap.Init(h)\n    // heap.Push(h, x)\n    // heap.Pop(h)\n\
    \    // heap.Fix(h, i)\n    // heap.Remove(h, i)\n    // heap.Push(h, x)\n   \
    \ // heap.Pop(h)\n    // heap.Fix(h, i)\n    // heap.Remove(h, i)\n    // heap.Push(h,\
    \ x)\n    // heap.Pop(h)\n    // heap.Fix(h, i)\n    // heap.Remove(h, i)\n  \
    \  // heap.Push(h, x)\n    // heap.Pop(h)\n    // heap.Fix(h, i)\n    // heap.Remove(h,\
    \ i)\n    // heap.Push(h, x)\n    // heap.Pop(h)\n    // heap.Fix(h, i)\n    //\
    \ heap.Remove(h, i)\n    // heap.Push(h, x)\n    // heap.Pop(h)\n    // heap.Fix(h,\
    \ i)\n    // heap.Remove(h, i)\n    // heap.Push(h, x)\n    // heap.Pop(h)\n \
    \   // heap.Fix(h, i)\n    // heap.Remove(h, i)\n    // heap.Push(h, x)\n    //\
    \ heap.Pop(h)\n    // heap.Fix(h, i)\n    // heap.Remove(h, i)\n    // heap.Push(h,\
    \ x)\n    // heap.Pop(h)\n    // heap.Fix(h, i)\n    // heap.Remove(h, i)\n  \
    \  // heap.Push(h, x)\n    // heap.Pop(h)\n    // heap.Fix(h, i)\n    // heap.Remove(h,\
    \ i)\n    // heap.Push(h, x)\n    // heap.Pop(h)\n    // heap.Fix(h, i)\n    //\
    \ heap.Remove(h, i)\n    // heap.Push(h, x)\n    // heap.Pop(h)\n    // heap.Fix(h,\
    \ i)\n    // heap.Remove\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg6fwpac6_test.go:68:6: expected ''('', found TestMaximum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        max := -1001\n   \
    \     maxIndex := -1\n        for j := 0; j < len(arr); j++ {\n            if\
    \ arr[j] > max {\n                max = arr[j]\n                maxIndex = j\n\
    \            }\n        }\n        result = append(result, max)\n        arr =\
    \ append(arr[:maxIndex], arr[maxIndex+1:]...)\n    }\n    return result\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpovvdtfix_test.go:57: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=20) %!s(int=2)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpovvdtfix_test.go:57: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=15) %!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=-8) %!s(int=-13)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpovvdtfix_test.go:57:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__9\
    \ (0.00s)\n        tmpovvdtfix_test.go:57: expected '[%!s(int=-10) %!s(int=10)]',\
    \ got '[%!s(int=10) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073340
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   var res []int\n    for _, v := range arr {\n        if len(res) == 0 {\n \
    \           res = append(res, v)\n        } else {\n            for i := 0; i\
    \ < len(res); i++ {\n                if v > res[i] {\n                    res\
    \ = append(res, 0)\n                    copy(res[i+1:], res[i:])\n           \
    \         res[i] = v\n                    break\n                }\n         \
    \   }\n        }\n        if len(res) > k {\n            res = res[:k]\n     \
    \   }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp04f019d1_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=-3)]'\n    --- FAIL: TestMaximum/test_num__1 (0.00s)\n\
    \        tmp04f019d1_test.go:62: expected '[%!s(int=4) %!s(int=4)]', got '[%!s(int=4)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp04f019d1_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123)]'\n   \
    \ --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp04f019d1_test.go:62: expected\
    \ '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20) %!s(int=2)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n   \
    \     tmp04f019d1_test.go:62: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15) %!s(int=5)]'\n    ---\
    \ FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp04f019d1_test.go:62: expected\
    \ '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8\
    \ (0.00s)\n        tmp04f019d1_test.go:62: expected '[%!s(int=-4) %!s(int=4)]',\
    \ got '[%!s(int=4)]'\n    --- FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp04f019d1_test.go:62:\
    \ expected '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=-10)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      if arr[i] > res[0] {\n            res[0] = arr[i]\n            for j :=\
    \ 1; j < k; j++ {\n                if res[j] < res[j - 1] {\n                \
    \    res[j], res[j - 1] = res[j - 1], res[j]\n                } else {\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpfawd6w2__test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpfawd6w2__test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpfawd6w2__test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpfawd6w2__test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpfawd6w2__test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpfawd6w2__test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073344
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for t := k - 1; t > j; t-- {\n                    result[t] =\
    \ result[t - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpa3gy2rlu_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpa3gy2rlu_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpa3gy2rlu_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpa3gy2rlu_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpa3gy2rlu_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpa3gy2rlu_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073338
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // heap\n    heap := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 -\
    \ 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1te9y3mb_test.go:30:9: undefined: heapify

    /tmp/tmp1te9y3mb_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if res[j] < res[j - 1] {\n           \
    \         res[j], res[j - 1] = res[j - 1], res[j]\n                } else {\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpfh2hd_mw_test.go:66: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpfh2hd_mw_test.go:66: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpfh2hd_mw_test.go:66: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpfh2hd_mw_test.go:66: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpfh2hd_mw_test.go:66: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpfh2hd_mw_test.go:66:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n     \
    \   res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n  \
    \      for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n          \
    \      res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n         \
    \       res = res[:k]\n                break\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpp6jgnjw8_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpp6jgnjw8_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpp6jgnjw8_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpp6jgnjw8_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073336
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u5148\u6392\u5E8F\uFF0C\u7136\u540E\u53D6\
    \u524Dk\u4E2A\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cn80hgi_test.go:25:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpow1m3zii_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpow1m3zii_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpow1m3zii_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpow1m3zii_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpow1m3zii_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpow1m3zii_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    // k > 1\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n\
    \            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n      \
    \          if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpkfkl761b_test.go:76: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpkfkl761b_test.go:76: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__3 (0.00s)\n\
    \        tmpkfkl761b_test.go:76: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=-123) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpkfkl761b_test.go:76: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=20) %!s(int=2) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpkfkl761b_test.go:76: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpkfkl761b_test.go:76:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmpkfkl761b_test.go:76: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    var res []int\n    for i := 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n   \
    \             res = res[:k]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp4a5f8ogx_test.go:63: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp4a5f8ogx_test.go:63: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp4a5f8ogx_test.go:63: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp4a5f8ogx_test.go:63:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmp4a5f8ogx_test.go:63: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp4a5f8ogx_test.go:63:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for m := k - 1; m > j; m-- {\n                    res[m] = res[m\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpow1m3zii_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmpow1m3zii_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmpow1m3zii_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmpow1m3zii_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmpow1m3zii_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpow1m3zii_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // \u5806\u6392\u5E8F\n    // \u5148\u6784\
    \u5EFA\u4E00\u4E2A\u6700\u5927\u5806\uFF0C\u7136\u540E\u6BCF\u6B21\u53D6\u51FA\
    \u5806\u9876\u5143\u7D20\uFF0C\u653E\u5230\u7ED3\u679C\u6570\u7EC4\u4E2D\uFF0C\
    \u7136\u540E\u628A\u5806\u9876\u5143\u7D20\u66FF\u6362\u4E3A\u5806\u4E2D\u6700\
    \u540E\u4E00\u4E2A\u5143\u7D20\uFF0C\n    // \u518D\u5BF9\u5806\u8FDB\u884C\u8C03\
    \u6574\uFF0C\u76F4\u5230\u5806\u4E2D\u5143\u7D20\u4E2A\u6570\u4E3Ak\n    // \u6784\
    \u5EFA\u6700\u5927\u5806\n    for i := len(arr) / 2 - 1; i >= 0; i-- {\n     \
    \   adjustHeap(arr, i, len(arr))\n    }\n    // \u53D6\u51FA\u5806\u9876\u5143\
    \u7D20\uFF0C\u653E\u5230\u7ED3\u679C\u6570\u7EC4\u4E2D\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[0]\n        // \u628A\
    \u5806\u9876\u5143\u7D20\u66FF\u6362\u4E3A\u5806\u4E2D\u6700\u540E\u4E00\u4E2A\
    \u5143\u7D20\n        arr[0] = arr[len(arr) - 1]\n        // \u518D\u5BF9\u5806\
    \u8FDB\u884C\u8C03\u6574\n        adjustHeap(arr, 0, len(arr) - 1)\n    }\n  \
    \  return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83o32_qh_test.go:29:9: undefined: adjustHeap

    /tmp/tmp83o32_qh_test.go:38:9: undefined: adjustHeap

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073346
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // heap\n    heap := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 -\
    \ 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1te9y3mb_test.go:30:9: undefined: heapify

    /tmp/tmp1te9y3mb_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    result := make([]int, k)\n    for i := 0;\
    \ i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    result[l] =\
    \ result[l - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmprfn8w1uz_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmprfn8w1uz_test.go:65: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=-3) %!s(int=-123) %!s(int=20)]'\n  \
    \  --- FAIL: TestMaximum/test_num__5 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5)\
    \ %!s(int=15)]', got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13)\
    \ %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n  \
    \      tmprfn8w1uz_test.go:65: expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=3)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmprfn8w1uz_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073339
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            res[j] = arr[i]\n                break\n            }\n        }\n\
    \    }\n    return res\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate :=\
    \ maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp3urxggv4_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__3\
    \ (0.00s)\n        tmp3urxggv4_test.go:62: expected '[%!s(int=2) %!s(int=20) %!s(int=123)]',\
    \ got '[%!s(int=123) %!s(int=2) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4\
    \ (0.00s)\n        tmp3urxggv4_test.go:62: expected '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=20)]', got '[%!s(int=2) %!s(int=20) %!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestMaximum/test_num__5 (0.00s)\n        tmp3urxggv4_test.go:62: expected\
    \ '[%!s(int=-13) %!s(int=-8) %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]',\
    \ got '[%!s(int=5) %!s(int=15) %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8)\
    \ %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp3urxggv4_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL:\
    \ TestMaximum/test_num__8 (0.00s)\n        tmp3urxggv4_test.go:62: expected '[%!s(int=-4)\
    \ %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example\
    \ 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range\
    \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n \
    \   if len(arr) == 0 || k == 0 {\n        return []int{}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // heap\n    heap := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2 -\
    \ 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > heap[0] {\n            heap[0] = arr[i]\n       \
    \     heapify(heap, 0, k)\n        }\n    }\n    return heap\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1te9y3mb_test.go:30:9: undefined: heapify

    /tmp/tmp1te9y3mb_test.go:35:13: undefined: heapify

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073343
