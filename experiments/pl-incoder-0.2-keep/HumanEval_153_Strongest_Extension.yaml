name: HumanEval_153_Strongest_Extension
language: humaneval_to_perl.py
prompt: "# You will be given the name of a class (a string) and a list of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the list.\n\
  # For example, if you are given \"Slices\" as the class and a list of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
  sub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
  \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
  ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\",\
  \ \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
  , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
  __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"\
  cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\"\
  , \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
  , \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"finNNalLLly\"\
  , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"Bb\"]),\"\
  Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my $strongest_extension = '';\n    my $strongest_extension_strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $extension_strength\
    \ = uc($extension) =~ tr/A-Z//;\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}", "    my $strongest;\n    my $strength;\n\
    \    my $index;\n    my $extension;\n    my $extension_length;\n    my $extension_str;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my\
    \ $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n\
    \    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my\
    \ $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n\
    \    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my\
    \ $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n\
    \    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    ", "    my $strongest_extension = '';\n   \
    \ my $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = uc($extension) =~ tr/A-Z//;\n        if\
    \ ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . '.' . $strongest_extension;\n}", "  \
    \  my $strongest_extension;\n    my $strongest_extension_strength;\n    my $num_uppercase_letters\
    \ = length($class_name) - length($class_name =~ /[A-Z]/);\n    my $num_lowercase_letters\
    \ = length($class_name) - length($class_name =~ /[a-z]/);\n    my $num_letters\
    \ = $num_uppercase_letters + $num_lowercase_letters;\n    my $num_extensions =\
    \ scalar(@$extensions);\n    my $strength_of_extension = $num_letters / $num_extensions;\n\
    \    foreach my $extension (@$extensions) {\n        my $num_uppercase_letters_in_extension\
    \ = length($extension) - length($extension =~ /[A-Z]/);\n        my $num_lowercase_letters_in_extension\
    \ = length($extension) - length($extension =~ /[a-z]/);\n        my $strength_of_extension_in_extension\
    \ = $num_uppercase_letters_in_extension / $num_letters;\n        if ($strength_of_extension\
    \ > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $strength_of_extension;\n            $strongest_extension = $extension;\n\
    \        }\n        if ($strength_of_extension_in_extension > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength_of_extension_in_extension;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . $strongest_extension;\n}", "    my $strongest = undef;\n    my\
    \ $strength;\n    foreach my $extension (@$extensions) {\n        $strength =\
    \ uc(substr($extension, 0, 1))-uc(substr($extension, 0, 2));\n        if ($strength\
    \ > 0) {\n            if ($strength > $strongest) {\n                $strongest\
    \ = $extension;\n            }\n        }\n    }\n    return $class_name.$strongest;\n\
    }", "    my $strongest_extension = \"\";\n    my $strongest_extension_strength\
    \ = 0;\n    my $extension_count = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        $extension_count++;\n        my $extension_strength = uc($extension)\
    \ - uc($extension_strength);\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}", "    my $strongest_extension;\n    my $strength;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $strongest_strength;\n    my $strongest_extension_found\
    \ = 0;\n    \n    foreach $i (0..$#extensions) {\n        foreach $j (0..$#extensions)\
    \ {\n            foreach $k (0..$#extensions) {\n                my $extension_1\
    \ = $extensions[$i];\n                my $extension_2 = $extensions[$j];\n   \
    \             my $extension_3 = $extensions[$k];\n                \n         \
    \       my $extension_1_length = length($extension_1);\n                my $extension_2_length\
    \ = length($extension_2);\n                my $extension_3_length = length($extension_3);\n\
    \                \n                my $extension_1_cap = uc($extension_1);\n \
    \               my $extension_2_cap = uc($extension_2);\n                my $extension_3_cap\
    \ = uc($extension_3);\n                \n                my $extension_1_sm =\
    \ lc($extension_1);\n                my $extension_2_sm = lc($extension_2);\n\
    \                my $extension_3_sm = lc($extension_3);\n                \n  \
    \              my $extension_1_cap_length = length($extension_1_cap);\n      \
    \          my $extension_2_cap_length = length($extension_2_cap);\n          \
    \      my $extension_3_cap_length = length($extension_3_cap);\n              \
    \  \n                my $extension_1_sm_length = length($extension_1_sm);\n  \
    \              my $extension_2_sm_length = length($extension_2_sm);\n        \
    \        my $extension_3_sm_length = length($extension_3_sm);\n              \
    \  \n                my $extension_1_cap_strength = $extension_1_cap - $extension_1_sm;\n\
    \                my $extension_2_cap_strength = $extension_2_cap - $extension_2_sm;\n\
    \                my $extension_3_cap_strength = $extension_3_cap - $extension_3_sm;\n\
    \                \n                my $extension_1_sm_strength = $extension_1_sm\
    \ - $extension_1_cap;\n                my $extension_2_sm_strength = $extension_2_sm\
    \ - $extension_2_cap;\n                my $extension_3_sm_strength = $extension_3_sm\
    \ - $extension_3_cap;\n                \n                my $extension_1_strength\
    \ = $extension_1_cap_strength - $extension_1_sm_strength;\n                my\
    \ $extension_2_cap_strength = $extension_2_cap_strength - $extension_2_sm_strength;\n\
    \                my $extension_3_cap_strength = $extension_3_cap_strength - $extension_3_sm_",
  "    my $strongest;\n    my $strength;\n    my $i;\n    my $j;\n    my $k;\n   \
    \ my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n\
    \    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my\
    \ $y;\n    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n\
    \    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my\
    \ $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n\
    \    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my\
    \ $Y;\n    my $Z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n\
    \    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my\
    \ $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n\
    \    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my\
    \ $Y;\n    my $Z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n\
    \    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my\
    \ $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n\
    \    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my\
    \ $Y;\n    my $Z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n\
    \    my $F;\n    my $G;\n    my $H;\n    my $", "    my $strongest_extension =\
    \ '';\n    my $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = uc($extension) =~ tr/A-Z/a-z/;\n       \
    \ if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . '.' . $strongest_extension;\n}", "  \
    \  my $strongest_extension = '';\n    my $strongest_extension_strength = 0;\n\
    \    foreach my $extension (@$extensions) {\n        my $extension_strength =\
    \ uc($extension) =~ tr/A-Z//;\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}", "    my $strongest_extension = \"\";\n  \
    \  my $num_upper = 0;\n    my $num_lower = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        $num_upper += length($extension) - length($extension) =~ tr/A-Z//;\n\
    \        $num_lower += length($extension) - length($extension) =~ tr/a-z//;\n\
    \    }\n    my $strength = $num_upper - $num_lower;\n    foreach my $extension\
    \ (@$extensions) {\n        if (length($extension) - length($extension) =~ tr/A-Z//)\
    \ {\n            $strongest_extension .= $class_name . \".\" . $extension;\n \
    \       }\n    }\n    return $strongest_extension;\n}", "    my $strongest;\n\
    \    my $num_cap = 0;\n    my $num_sm = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $cap = uc($extension);\n        $num_cap += length($cap);\n  \
    \      my $sm = uc($extension);\n        $num_sm += length($sm);\n        if ($num_cap\
    \ > $num_sm) {\n            $strongest = $class_name . '.' . $extension;\n   \
    \     }\n    }\n    return $strongest;\n}", "    my $strongest_extension;\n  \
    \  my $strongest_extension_strength;\n    my $class_name_length = length($class_name);\n\
    \    foreach my $extension (@$extensions) {\n        my $extension_length = length($extension);\n\
    \        my $extension_strength = uc($extension) - uc($extension);\n        if\
    \ ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . $strongest_extension;\n}", "    my $strongest_extension;\n\
    \    my $num_upper = 0;\n    my $num_lower = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_upper = uc($extension);\n        my $extension_lower\
    \ = lc($extension);\n        $num_upper += $extension_upper =~ /[A-Z]/;\n    \
    \    $num_lower += $extension_lower =~ /[a-z]/;\n    }\n    my $strength = $num_upper\
    \ - $num_lower;\n    if ($strength > 0) {\n        $strongest_extension = $class_name\
    \ . \".\" . $extensions[0];\n    } else {\n        foreach my $extension (@$extensions)\
    \ {\n            $strongest_extension = $class_name . \".\" . $extension;\n  \
    \          if ($extension =~ /[A-Z]/) {\n                $num_upper++;\n     \
    \       } elsif ($extension =~ /[a-z]/) {\n                $num_lower++;\n   \
    \         }\n        }\n    }\n    return $strongest_extension;\n}", "    my $strongest_extension;\n\
    \    my $strongest_extension_strength;\n    my $class_name_length = length($class_name);\n\
    \    foreach my $extension (@$extensions) {\n        my $extension_length = length($extension);\n\
    \        my $extension_strength = uc($extension) - uc($extension);\n        if\
    \ ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . $strongest_extension;\n}", "    my $strongest_extension\
    \ = '';\n    my $strongest_extension_strength = 0;\n    foreach my $extension\
    \ (@$extensions) {\n        my $extension_strength = uc($extension) =~ tr/A-Z//;\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }", "    my $strongest_extension;\n    my $strongest_extension_strength;\n   \
    \ my $num_uppercase_letters = length($class_name) - length($class_name =~ tr/[A-Z]/);\n\
    \    my $num_lowercase_letters = length($class_name) - length($class_name =~ tr/[a-z]/);\n\
    \    my $strongest_extension_strength_fraction =  $num_uppercase_letters - $num_lowercase_letters;\n\
    \    foreach my $extension (@$extensions) {\n        my $extension_strength =\
    \ length($extension) - length($extension =~ tr/[A-Z]/) - length($extension =~\
    \ tr/[a-z]/);\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}", "    my %extension_strength;\n    foreach\
    \ my $extension (@$extensions) {\n        my $extension_class = $class_name .\
    \ '_' . $extension;\n        my $extension_strength = length($extension) - length($extension_class);\n\
    \        $extension_strength{$extension_class} = $extension_strength;\n    }\n\
    \    my $strongest_extension = keys %extension_strength;\n    foreach my $extension\
    \ (@$extensions) {\n        my $extension_class = $class_name . '_' . $extension;\n\
    \        if ($extension_strength{$extension_class} > $extension_strength{$strongest_extension})\
    \ {\n            $strongest_extension = $extension_class;\n        }\n    }\n\
    \    return $strongest_extension;\n}", "    my $strongest_extension;\n    my $strongest_extension_strength;\n\
    \    my $num_cap_letters = length($class_name) - length($class_name =~ /[A-Z]/);\n\
    \    my $num_sm_letters = length($class_name) - length($class_name =~ /[a-z]/);\n\
    \    my $num_letters = $num_cap_letters + $num_sm_letters;\n    my $num_extensions\
    \ = scalar(@$extensions);\n    my $num_extension_strengths = $num_letters / $num_extensions;\n\
    \    my $max_extension_strength;\n    my $max_extension_strength_index;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $strength;\n    my $extension;\n    my $extension_strength;\n\
    \    foreach $i (0..$num_extension_strengths) {\n        $extension_strength =\
    \ $extensions[$i];\n        $extension = substr($class_name, 0, length($class_name)\
    \ - length($extension_strength));\n        $extension_strength = length($extension_strength);\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = substr($class_name, 0, length($class_name) - length($extension_strength));\n\
    \        }\n    }\n    if ($strongest_extension_strength > 0) {\n        $max_extension_strength\
    \ = $strongest_extension_strength;\n        $max_extension_strength_index = $i;\n\
    \    }\n    foreach $j ($max_extension_strength_index + 1, $num_extension_strengths)\
    \ {\n        $extension_strength = $extensions[$j];\n        $extension = substr($class_name,\
    \ 0, length($class_name) - length($extension_strength));\n        $extension_strength\
    \ = length($extension_strength);\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = substr($class_name, 0, length($class_name) - length($extension_strength));\n\
    \        }\n    }\n    if ($strongest_extension_strength > 0) {\n        $max_extension_strength\
    \ = $strongest_extension_strength;\n        $max_extension_strength_index = $j;\n\
    \    }\n    foreach $k ($max_extension_strength_index - 1, $num_extension_strengths)\
    \ {\n        $extension_strength = $extensions[$k];\n        $extension = substr($class_name,\
    \ 0, length($class_name) - length($extension_strength));\n        $extension_strength\
    \ = length($extension_strength);", "    my $strongest_extension = '';\n    my\
    \ $total_extensions = scalar @$extensions;\n    my $total_letters = scalar @$class_name;\n\
    \    my $total_cap_letters = $total_letters - $total_cap_letters;\n    my $total_sm_letters\
    \ = $total_letters - $total_sm_letters;\n    my $total_cap_letters_ratio = $total_cap_letters\
    \ / $total_letters;\n    my $total_sm_letters_ratio = $total_sm_letters / $total_letters;\n\
    \    my $total_ratio = $total_cap_letters_ratio - $total_sm_letters_ratio;\n \
    \   my $strength = 0;\n    my $index = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_letters = scalar $extension;\n        my $extension_cap_letters\
    \ = $extension_letters - $total_cap_letters;\n        my $extension_sm_letters\
    \ = $extension_letters - $total_sm_letters;\n        my $extension_ratio = $extension_cap_letters\
    \ / $extension_letters;\n        if ($extension_ratio > $total_ratio) {\n    \
    \        $strongest_extension = $extension;\n            $strength = $total_ratio\
    \ - $extension_ratio;\n        }\n        $index++;\n    }\n    return $class_name\
    \ . $strongest_extension;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
