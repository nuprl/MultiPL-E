name: HumanEval_20_find_closest_elements
language: humaneval_to_perl.py
prompt: "# From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n# other and return them in order (smaller number,\
  \ larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  # (2.0, 2.2)\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# (2.0,\
  \ 2.0)\nsub find_closest_elements {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_closest_elements;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 5.9, 4.0, 5.0]),[5.0, 5.9])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0,\
  \ 2.2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = Math::BigRat->new($numbers[0])->bfloor();\n    my $max\
    \ = Math::BigRat->new($numbers[-1])->bceil();\n    my $result;\n    my $i;\n \
    \   for ($i = 1; $i < $#numbers; $i++) {\n        my $diff = Math::BigRat->new($numbers[$i])->bsub($min);\n\
    \        if ($diff->is_zero()) {\n            $result = $min;\n            last;\n\
    \        }\n        if ($diff->is_negative()) {\n            $result = $max;\n\
    \            last;\n        }\n        $result = Math::BigRat->new($numbers[$i])->badd($result);\n\
    \    }\n    return ($result, $numbers[$i]);\n}", "    my @closest_elements;\n\
    \    my $smallest_number = $numbers[0];\n    my $largest_number = $numbers[0];\n\
    \    my $smallest_difference = abs($smallest_number);\n    my $largest_difference\
    \ = abs($largest_number);\n    foreach my $number (@$numbers) {\n        my $difference\
    \ = abs($number);\n        if ($difference < $smallest_difference) {\n       \
    \     $smallest_difference = $difference;\n            $smallest_number = $number;\n\
    \        }\n        if ($difference > $largest_difference) {\n            $largest_difference\
    \ = $difference;\n            $largest_number = $number;\n        }\n    }\n \
    \   push (@closest_elements, $smallest_number);\n    push (@closest_elements,\
    \ $largest_number);\n    return @closest_elements;\n}", "    my $smallest_number\
    \ = $numbers[0];\n    my $second_smallest_number = $numbers[0];\n    my $second_number\
    \ = $numbers[1];\n    foreach my $number (@$numbers) {\n        if ($number <\
    \ $smallest_number) {\n            $second_smallest_number = $smallest_number;\n\
    \            $second_number = $number;\n            $smallest_number = $number;\n\
    \        } elsif ($number > $second_number) {\n            $second_smallest_number\
    \ = $second_number;\n            $second_number = $number;\n        }\n    }\n\
    \    return ($smallest_number, $second_smallest_number);\n}", "    my $min = Math::BigRat->new('1');\n\
    \    my $max = $numbers[0];\n    my $min_index = 0;\n    my $max_index = 0;\n\
    \    foreach my $number (@$numbers) {\n        if ($number < $min) {\n       \
    \     $min = $number;\n            $min_index = $_;\n        } elsif ($number\
    \ > $max) {\n            $max = $number;\n            $max_index = $_;\n     \
    \   }\n    }\n    return ($min, $numbers[$min_index], $max, $numbers[$max_index]);\n\
    }", "    my $min = $numbers[0];\n    my $max = $numbers[0];\n    my $min_index\
    \ = 0;\n    my $max_index = 0;\n    my $min_diff = $max;\n    my $max_diff = $min;\n\
    \    my $min_diff_index = 0;\n    my $max_diff_index = 0;\n    foreach my $number\
    \ (@$numbers) {\n        my $diff = $number - $min;\n        if ($diff < $min_diff)\
    \ {\n            $min_diff = $diff;\n            $min_diff_index = $index;\n \
    \       }\n        if ($diff > $max_diff) {\n            $max_diff = $diff;\n\
    \            $max_diff_index = $index;\n        }\n        $min = $number if ($number\
    \ < $min);\n        $max = $number if ($number > $max);\n        $index++;\n \
    \   }\n    return ($numbers[$min_diff_index], $numbers[$max_diff_index]);\n}",
  "    my($smallest, $largest);\n    foreach my $number (@$numbers) {\n        if\
    \ ($smallest == undef) {\n            $smallest = $number;\n            $largest\
    \ = $number;\n        } elsif ($number < $smallest) {\n            $smallest =\
    \ $number;\n        } elsif ($number > $largest) {\n            $largest = $number;\n\
    \        }\n    }\n    return ($smallest, $largest);\n}", "    my $min = Math::BigFloat->new('inf');\n\
    \    my $max = Math::BigFloat->new('-inf');\n    my $min_index = 0;\n    my $max_index\
    \ = 0;\n    my $index = 0;\n    foreach my $number (@$numbers) {\n        $index++;\n\
    \        $min->badd($number);\n        $max->badd($number);\n        if ($min->bcmp($max)\
    \ < 0) {\n            $min_index = $index;\n            $min = $number;\n    \
    \    }\n        else {\n            $max_index = $index;\n            $max = $number;\n\
    \        }\n    }\n    return ($min, $numbers[$min_index]);\n}", "    my $min\
    \ = $numbers[0];\n    my $max = $numbers[0];\n    my $min_index = 0;\n    my $max_index\
    \ = 0;\n    my $min_diff = 0;\n    my $max_diff = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $diff = 0;\n    my $found = 0;\n    my $found_index = 0;\n    my\
    \ $found_diff = 0;\n    my $found_number = undef;\n    my $found_number = undef;\n\
    \    my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_number = undef;\n    my $found_number = undef;\n   \
    \ my $found_number = undef;\n    my $found_number = undef;\n    my $found_number\
    \ = undef;\n    my $found_", "    my $min = Math::BigRat->new('1');\n    my $max\
    \ = $numbers[0];\n    my $min_index = 0;\n    my $max_index = 0;\n    foreach\
    \ my $num (@$numbers) {\n        if ($num < $min) {\n            $min = $num;\n\
    \            $min_index = $_;\n        } elsif ($num > $max) {\n            $max\
    \ = $num;\n            $max_index = $_;\n        }\n    }\n    return ($min, $numbers[$min_index],\
    \ $max, $numbers[$max_index]);\n}", "    my $min = $numbers[0];\n    my $max =\
    \ $numbers[0];\n    my $min_index = 0;\n    my $max_index = 0;\n    my $closest_element;\n\
    \    my $closest_element_index;\n    foreach my $number (@$numbers) {\n      \
    \  if ($number < $min) {\n            $min = $number;\n            $min_index\
    \ = $_;\n        } elsif ($number > $max) {\n            $max = $number;\n   \
    \         $max_index = $_;\n        }\n    }\n    if ($min_index == $max_index)\
    \ {\n        $closest_element = $min;\n        $closest_element_index = $min_index;\n\
    \    } else {\n        $closest_element = $min;\n        $closest_element_index\
    \ = $min_index;\n        foreach my $index ($min_index + 1, $max_index) {\n  \
    \          if ($numbers[$index] - $closest_element < $closest_element - $numbers[$index])\
    \ {\n                $closest_element = $numbers[$index];\n                $closest_element_index\
    \ = $index;\n            }\n        }\n    }\n    return ($closest_element, $closest_element_index);\n\
    }", "    my($min, $max) = @$numbers[0, 1];\n    my $index = 0;\n    my $min_index\
    \ = 0;\n    my $max_index = 0;\n    foreach my $number (@$numbers) {\n       \
    \ if ($number < $min) {\n            $min = $number;\n            $min_index =\
    \ $index;\n        } elsif ($number > $max) {\n            $max = $number;\n \
    \           $max_index = $index;\n        }\n        $index++;\n    }\n    return\
    \ ($min, $max);\n}", "    my($min, $max) = @$numbers;\n    my $min_index = 0;\n\
    \    my $max_index = 0;\n    my $min_diff = $max;\n    my $max_diff = $min;\n\
    \    my $min_diff_index = 0;\n    my $max_diff_index = 0;\n    my $min_diff_index2\
    \ = 0;\n    my $max_diff_index2 = 0;\n    my $min_diff_index3 = 0;\n    my $max_diff_index3\
    \ = 0;\n    my $min_diff_index4 = 0;\n    my $max_diff_index4 = 0;\n    my $min_diff_index5\
    \ = 0;\n    my $max_diff_index5 = 0;\n    my $min_diff_index6 = 0;\n    my $max_diff_index6\
    \ = 0;\n    my $min_diff_index7 = 0;\n    my $max_diff_index7 = 0;\n    my $min_diff_index8\
    \ = 0;\n    my $max_diff_index8 = 0;\n    my $min_diff_index9 = 0;\n    my $max_diff_index9\
    \ = 0;\n    my $min_diff_index10 = 0;\n    my $max_diff_index10 = 0;\n    my $min_diff_index11\
    \ = 0;\n    my $max_diff_index11 = 0;\n    my $min_diff_index12 = 0;\n    my $max_diff_index12\
    \ = 0;\n    my $min_diff_index13 = 0;\n    my $max_diff_index13 = 0;\n    my $min_diff_index14\
    \ = 0;\n    my $max_diff_index14 = 0;\n    my $min_diff_index15 = 0;\n    my $max_diff_index15\
    \ = 0;\n    my $min_diff_index16 = 0;\n    my $max_diff_index16 = 0;\n    my $min_diff_index17\
    \ = 0;\n    my $max_diff_index17 = 0;\n    my $min_diff_index18 = 0;\n    my $max_diff_index18\
    \ = 0;\n    my $min_diff_index19 = 0;\n    my $max_diff_index19 = 0;\n    my $min_diff_index20\
    \ = 0;\n    my $max_diff_index20 = 0;\n    my $min_diff_index21 = 0;\n    my $max_diff_index21\
    \ = 0;\n    my $min_diff_index22 = 0;\n    my $max_diff_index22 = 0;\n    my $min_diff_index23\
    \ = 0;\n    my $max_diff_index23 = 0;\n    my $min_diff_index24 = 0;\n    my $max_diff_index24\
    \ = 0;\n    my $min_diff_index25 = 0;\n    my $max_diff_index25 = 0;\n    my $min_diff_index26\
    \ = 0;\n    my $max_diff_index26 = 0;\n    my $min_diff_index27 = 0;\n    my $max_diff_index27\
    \ = 0;\n    my $min_diff_index28 = 0;\n    my $max_diff_index28 = 0;\n    my $min_diff_index29\
    \ = 0;\n    my $max_diff_index29 = 0;\n    my $min_diff_index30 = 0;\n    my $max_diff_index30\
    \ = 0;\n    my $", "    my $min = $numbers[0];\n    my $max = $numbers[0];\n \
    \   my $min_index = 0;\n    my $max_index = 0;\n    foreach my $number (@$numbers)\
    \ {\n        if ($number < $min) {\n            $min = $number;\n            $min_index\
    \ = 0;\n        } elsif ($number > $max) {\n            $max = $number;\n    \
    \        $max_index = 0;\n        }\n        $min_index++;\n        $max_index++;\n\
    \    }\n    return ($min, $numbers[$min_index], $max, $numbers[$max_index]);\n\
    }", "    my $min = $numbers[0];\n    my $max = $numbers[0];\n    my $min_index\
    \ = 0;\n    my $max_index = 0;\n    my $min_diff = 0;\n    my $max_diff = 0;\n\
    \    my $i;\n    foreach $i (0 .. $#numbers) {\n        if ($numbers[$i] < $min)\
    \ {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n\
    \        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n      \
    \      $max_index = $i;\n        }\n    }\n    foreach $i (0 .. $#numbers) {\n\
    \        if ($i != $min_index && $i != $max_index) {\n            my $diff = $numbers[$i]\
    \ - $min;\n            if ($diff < $min_diff) {\n                $min_diff = $diff;\n\
    \                $min_element = $numbers[$i];\n            }\n            if ($diff\
    \ > $max_diff) {\n                $max_diff = $diff;\n                $max_element\
    \ = $numbers[$i];\n            }\n        }\n    }\n    return ($min_element,\
    \ $max_element);\n}", "    my $min = $numbers[0];\n    my $max = $numbers[0];\n\
    \    my $min_index = 0;\n    my $max_index = 0;\n    my $min_diff = 0;\n    my\
    \ $max_diff = 0;\n    my $i = 0;\n    my $j = 0;\n    my $diff = 0;\n    my $found\
    \ = 0;\n    while($i < @$numbers) {\n        while($j < @$numbers) {\n       \
    \     $diff = $numbers[$j] - $numbers[$i];\n            if($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_index = $i;\n  \
    \              $min_diff = $diff;\n            } elsif($diff > $max_diff) {\n\
    \                $max_diff = $diff;\n                $max_index = $i;\n      \
    \          $max_diff = $diff;\n            }\n            $j++;\n        }\n \
    \       $i++;\n    }\n    return ($numbers[$min_index], $numbers[$max_index]);\n\
    }", "    my $min = $numbers[0];\n    my $max = $numbers[0];\n    my $min_index\
    \ = 0;\n    my $max_index = 0;\n    my $min_diff = 0;\n    my $max_diff = 0;\n\
    \    my $i;\n    my $j;\n    my $diff;", "    my @closest_elements;\n    my $smallest_number\
    \ = $numbers[0];\n    my $largest_number = $numbers[0];\n    my $smallest_difference\
    \ = abs($smallest_number);\n    my $largest_difference = abs($largest_number);\n\
    \    foreach my $number (@$numbers) {\n        my $difference = abs($number);\n\
    \        if ($difference < $smallest_difference) {\n            $smallest_difference\
    \ = $difference;\n            $smallest_number = $number;\n        }\n       \
    \ if ($difference > $largest_difference) {\n            $largest_difference =\
    \ $difference;\n            $largest_number = $number;\n        }\n    }\n   \
    \ push @closest_elements, $smallest_number, $largest_number;\n    return @closest_elements;\n\
    }", "    my $min_diff = $numbers[0] - $numbers[1];\n    my $max_diff = $numbers[1]\
    \ - $numbers[0];\n    my $min_element = $numbers[0];\n    my $max_element = $numbers[1];\n\
    \    my $min_element_index = 0;\n    my $max_element_index = 0;\n    my $min_diff_index\
    \ = 0;\n    my $max_diff_index = 0;\n    my $index = 0;\n    my $diff = 0;\n \
    \   my $element = 0;\n    my $element_index = 0;\n    my $diff_index = 0;\n  \
    \  foreach $index (0 .. $#numbers) {\n        $diff = $numbers[$index] - $min_element;\n\
    \        if ($diff < $min_diff) {\n            $min_diff = $diff;\n          \
    \  $min_element = $numbers[$index];\n            $min_element_index = $index;\n\
    \        }\n        $diff = $numbers[$index] - $max_element;\n        if ($diff\
    \ > $max_diff) {\n            $max_diff = $diff;\n            $max_element = $numbers[$index];\n\
    \            $max_element_index = $index;\n        }\n    }\n    foreach $index\
    \ (0 .. $#numbers) {\n        $diff = $numbers[$index] - $min_element;\n     \
    \   if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_element\
    \ = $numbers[$index];\n            $min_element_index = $index;\n        }\n \
    \       $diff = $numbers[$index] - $max_element;\n        if ($diff > $max_diff)\
    \ {\n            $max_diff = $diff;\n            $max_element = $numbers[$index];\n\
    \            $max_element_index = $index;\n        }\n    }\n    foreach $index\
    \ (0 .. $#numbers) {\n        $diff = $numbers[$index] - $min_element;\n     \
    \   if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_element\
    \ = $numbers[$index];\n            $min_element_index = $index;\n        }\n \
    \       $diff = $numbers[$index] - $max_element;\n        if ($diff > $max_diff)\
    \ {\n            $max_diff = $diff;\n            $max_element = $numbers[$index];\n\
    \            $max_element_index = $index;\n        }\n    }\n    foreach $index\
    \ (0 .. $#numbers) {\n        $diff = $numbers[$index] - $min_element;\n     \
    \   if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_element\
    \ = $numbers[$index];\n            $min_element_index = $index;\n        }\n \
    \       $diff = $numbers[$index] - $max_element;\n        if ($diff > $max_diff)\
    \ {", "    my $min = Math::BigRat->new('1');\n    my $max = $min->copy();\n  \
    \  my $min_index = 0;\n    my $max_index = 0;\n    my $min_diff = 0;\n    my $max_diff\
    \ = 0;\n    my $diff;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    ", "    my @closest_elements;\n    my $smallest_number = $numbers[0];\n\
    \    my $largest_number = $numbers[0];\n    my $smallest_diff = 0;\n    my $largest_diff\
    \ = 0;\n    my $smallest_index = 0;\n    my $largest_index = 0;\n    foreach my\
    \ $number (@$numbers) {\n        if ($number < $smallest_number) {\n         \
    \   $smallest_number = $number;\n            $smallest_diff = 0;\n           \
    \ $smallest_index = 0;\n        } elsif ($number > $largest_number) {\n      \
    \      $largest_number = $number;\n            $largest_diff = 0;\n          \
    \  $largest_index = 0;\n        } else {\n            my $diff = $number - $smallest_number;\n\
    \            if ($diff < $smallest_diff) {\n                $smallest_diff = $diff;\n\
    \                $smallest_index = $number;\n            } elsif ($diff > $largest_diff)\
    \ {\n                $largest_diff = $diff;\n                $largest_index =\
    \ $number;\n            }\n        }\n    }\n    push(@closest_elements, $smallest_number);\n\
    \    push(@closest_elements, $largest_number);\n    return @closest_elements;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
