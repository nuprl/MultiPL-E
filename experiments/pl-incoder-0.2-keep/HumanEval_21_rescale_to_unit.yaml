name: HumanEval_21_rescale_to_unit
language: humaneval_to_perl.py
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5,\
  \ 0.75, 1.0]\nsub rescale_to_unit {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n\
  \        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0,\
  \ 49.9]),[1.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5,\
  \ 0.75, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5,\
  \ 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @rescaled;\n    my $min = $numbers[0];\n    my $max = $numbers[0];\n\
    \    foreach my $number (@$numbers) {\n        $min = $number if $number < $min;\n\
    \        $max = $number if $number > $max;\n        push(@rescaled, $number *\
    \ ($max - $min) / $max);\n    }\n    return @rescaled;\n}", "    my @rescaled_numbers\
    \ = ();\n    my $min_number = $numbers[0];\n    my $max_number = $numbers[0];\n\
    \    foreach my $number (@$numbers) {\n        if ($number > $max_number) {\n\
    \            $max_number = $number;\n        }\n        if ($number < $min_number)\
    \ {\n            $min_number = $number;\n        }\n    }\n    foreach my $number\
    \ (@$numbers) {\n        my $new_number = $number - $min_number;\n        $new_number\
    \ /= ($max_number - $min_number);\n        $new_number *= $max_number;\n     \
    \   $new_number += $min_number;\n        push @rescaled_numbers, $new_number;\n\
    \    }\n    return @rescaled_numbers;\n}", "    my @rescaled = ();\n    my $min\
    \ = $numbers[0];\n    my $max = $numbers[0];\n    foreach my $number (@$numbers)\
    \ {\n        if ($number < $min) {\n            $min = $number;\n        }\n \
    \       if ($number > $max) {\n            $max = $number;\n        }\n    }\n\
    \    foreach my $number (@$numbers) {\n        $rescaled[$number] = $number -\
    \ $min;\n    }\n    return @rescaled;\n}", "    my @rescaled;\n    my $min = $numbers[0];\n\
    \    my $max = $numbers[0];\n    foreach my $number (@$numbers) {\n        if\
    \ ($number < $min) {\n            $min = $number;\n        }\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n    }\n    foreach my $number\
    \ (@$numbers) {\n        my $new_number = ($number - $min) / ($max - $min);\n\
    \        push @rescaled, $new_number;\n    }\n    return @rescaled;\n}", "   \
    \ my $min = min($numbers);\n    my $max = max($numbers);\n    my $scale = ($max\
    \ - $min) / length($numbers);\n    my $result = [];\n    foreach my $number (@$numbers)\
    \ {\n        $result[$number] = $min + ($number * $scale);\n    }\n    return\
    \ $result;\n}", "    my $min = min($numbers);\n    my $max = max($numbers);\n\
    \    my @rescaled;\n    foreach my $num (@$numbers) {\n        $num = $num - $min;\n\
    \        $num = $num / $max - $min;\n        push(@rescaled, $num);\n    }\n \
    \   return \\@rescaled;\n}", "    my $min = min($numbers);\n    my $max = max($numbers);\n\
    \    my $range = abs($max - $min);\n    my $scale = 1.0 / $range;\n    my @rescaled;\n\
    \    foreach my $num (@$numbers) {\n        $rescaled[$_] = $num * $scale;\n \
    \   }\n    return @rescaled;\n}", "    my $min = min($numbers);\n    my $max =\
    \ max($numbers);\n    my $scale = 1.0 * ($max - $min);\n    my @rescaled = ();\n\
    \    foreach my $num (@$numbers) {\n        $rescaled[$num] = $num / $scale;\n\
    \    }\n    return @rescaled;\n}", "    my @rescaled_numbers;\n    my $min = $numbers[0];\n\
    \    my $max = $numbers[0];\n    foreach my $number (@$numbers) {\n        if\
    \ ($number > $max) {\n            $max = $number;\n        }\n        if ($number\
    \ < $min) {\n            $min = $number;\n        }\n    }\n    foreach my $number\
    \ (@$numbers) {\n        my $rescaled_number = $number - $min;\n        $rescaled_numbers[$#rescaled_numbers\
    \ + 1] = $rescaled_number / $max - $min;\n    }\n    return @rescaled_numbers;\n\
    }", "    my @rescaled_numbers = ();\n    my $min = min($numbers);\n    my $max\
    \ = max($numbers);\n    my $scale = ($max - $min) / scalar(@$numbers);\n    foreach\
    \ my $number (@$numbers) {\n        $rescaled_numbers[$number] = $min + $scale\
    \ * $number;\n    }\n    return @$rescaled_numbers;\n}", "    my $min = min($numbers);\n\
    \    my $max = max($numbers);\n    my $range = abs($max - $min);\n    my $new_min\
    \ = min($numbers);\n    my $new_max = max($numbers);\n    my $new_range = abs($new_max\
    \ - $new_min);\n    my $scale = $new_range / $range;\n    my $new_numbers = ();\n\
    \    foreach my $number (@$numbers) {\n        $new_numbers[$number] = $new_min\
    \ + $scale * ($number - $min);\n    }\n    return $new_numbers;\n}", "    my @rescaled\
    \ = ();\n    my $min = $numbers[0];\n    my $max = $numbers[0];\n    foreach my\
    \ $number (@$numbers) {\n        my $new_number = $number - $min;\n        $new_number\
    \ /= $max - $min;\n        push @rescaled, $new_number;\n        $min = $number;\n\
    \        $max = $number;\n    }\n    return @rescaled;\n}", "    my @rescaled_numbers;\n\
    \    my $min = min($numbers);\n    my $max = max($numbers);\n    my $scale = ($max\
    \ - $min) / scalar(@$numbers);\n    foreach my $number (@$numbers) {\n       \
    \ $rescaled_numbers[$number] = $min + $scale * $number;\n    }\n    return @rescaled_numbers;\n\
    }", "    my @rescaled;\n    my $min = min($numbers);\n    my $max = max($numbers);\n\
    \    my $scale = ($max - $min) / scalar(@$numbers);\n    foreach my $num (@$numbers)\
    \ {\n        $num = $num * $scale;\n        push(@rescaled, $num);\n    }\n  \
    \  return @rescaled;\n}", "    my @rescaled = ();\n    my $min = $numbers[0];\n\
    \    my $max = $numbers[0];\n    foreach my $number (@$numbers) {\n        my\
    \ $new_number = $number - $min;\n        $new_number /= ($max - $min);\n     \
    \   $rescaled[$#rescaled + 1] = $new_number;\n        $min = $number;\n      \
    \  $max = $number;\n    }\n    return @rescaled;\n}", "    my @rescaled_numbers\
    \ = ();\n    my $min = min($numbers);\n    my $max = max($numbers);\n    my $range\
    \ = $max - $min;\n    my $scale = $range / $numbers[0];\n    foreach my $number\
    \ (@$numbers) {\n        $rescaled_numbers[$number] = $min + ($number * $scale);\n\
    \    }\n    return @rescaled_numbers;\n}", "    my $min = min($numbers);\n   \
    \ my $max = max($numbers);\n    my $range = abs($max - $min);\n    my $new_min\
    \ = min($numbers);\n    my $new_max = max($numbers);\n    my $new_range = abs($new_max\
    \ - $new_min);\n    my $scale = $new_range / $range;\n    my $new_numbers = ();\n\
    \    foreach my $number (@$numbers) {\n        $new_numbers[] = $new_min + ($number\
    \ * $scale);\n    }\n    return @$new_numbers;\n}", "    my $min = min($numbers);\n\
    \    my $max = max($numbers);\n    my $range = abs($max - $min);\n    my $scale\
    \ = $range / $numbers[0];\n    my $new_numbers = ();\n    foreach my $number (@$numbers)\
    \ {\n        $new_numbers->[$number] = $number * $scale;\n    }\n    return $new_numbers;\n\
    }", "    my @rescaled;\n    my $min = $numbers[0];\n    my $max = $numbers[0];\n\
    \    foreach my $number (@$numbers) {\n        if ($number > $max) {\n       \
    \     $max = $number;\n        }\n        if ($number < $min) {\n            $min\
    \ = $number;\n        }\n    }\n    foreach my $number (@$numbers) {\n       \
    \ my $scaled = $number - $min;\n        $scaled /= ($max - $min);\n        push(@rescaled,\
    \ $scaled);\n    }\n    return @rescaled;\n}", "    my @rescaled;\n    my $min\
    \ = min($numbers);\n    my $max = max($numbers);\n    my $scale = ($max - $min)\
    \ / @$numbers;\n    foreach my $number (@$numbers) {\n        $rescaled[$number]\
    \ = $min + $scale * $number;\n    }\n    return @rescaled;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
