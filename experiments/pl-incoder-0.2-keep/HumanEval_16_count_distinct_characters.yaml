name: HumanEval_16_count_distinct_characters
language: humaneval_to_perl.py
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n\
  # 4\nsub count_distinct_characters {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry\
  \ jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    my $char;\n    my $prev;\n    my $prev_char;\n\
    \    my $prev_prev_char;\n    my $prev_prev_prev_char;\n    foreach $char (split\
    \ //, $string) {\n        $count++;\n        $prev_char = $char;\n        $prev_prev_char\
    \ = $prev_char;\n        $prev_prev_prev_char = $prev_prev_char;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $char;\n    foreach $char (split //,\
    \ $string) {\n        $count++ if $char !~ /[^a-zA-Z0-9]/;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $char;\n    my $prev_char;\n    foreach\
    \ $char (split //, $string) {\n        $count++ if $char ne $prev_char;\n    \
    \    $prev_char = $char;\n    }\n    return $count;\n}", "    my($characters);\n\
    \    my($i);\n    my($j);\n    my($distinct);\n    my($count);\n    my($character);\n\
    \    my(@characters);\n    my($length);", "    my $count = 0;\n    my $char;\n\
    \    foreach $char (split(//, $string)) {\n        $count++ if $char ne $char;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $chars = $string;\n\
    \    my $char;\n    while ($chars =~ /./) {\n        $char = $&;\n        $char\
    \ =~ tr/A-Z/a-z/;\n        $count++ if $char ne $chars;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $chars = $string;\n    my $char;\n    while ($chars\
    \ =~ /([A-Za-z])/g) {\n        $char = $1;\n        $count++ if $chars =~ /$char/g;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach\
    \ $char (split(//, $string)) {\n        $count++ if $char !~ /[a-z]/i;\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach $char\
    \ (split(//, $string)) {\n        $count++ if $char ne $char;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $char;\n    foreach $char (split(//,\
    \ $string)) {\n        $count++ if $char =~ /[a-z]/i;\n        $count++ if $char\
    \ =~ /[A-Z]/i;\n        $count++ if $char =~ /[0-9]/i;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $char;\n    my $prev_char;\n    foreach $char\
    \ (split(//, $string)) {\n        if ($char ne $prev_char) {\n            $count++;\n\
    \            $prev_char = $char;\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    my $chars = $string =~ /([A-Z]+)/ig;\n    foreach my $char\
    \ (@$chars) {\n        $count++ if $char ne 'X';\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my $char;\n    foreach $char (split //, $string) {\n  \
    \      $count++ if $char !~ /[A-Z]/;\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $char;\n    foreach $char (split(//, $string)) {\n        $count++\
    \ if $char ne $char;\n    }\n    return $count;\n}", "    my $count = 0;\n   \
    \ my $chars = $string =~ /[[:alpha:]]/g;\n    $count += scalar keys %$chars;\n\
    \    $count += scalar keys %{ $string =~ /[[:upper:]]/g };\n    $count += scalar\
    \ keys %{ $string =~ /[[:lower:]]/g };\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $char;\n    foreach $char (split(//, $string)) {\n        $count++\
    \ if ($char =~ /[a-z]/i || $char =~ /[A-Z]/i);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my $char;\n    foreach $char (split(//, $string)) {\n \
    \       $count++ if $char =~ /[A-Z]/;\n        $count++ if $char =~ /[a-z]/;\n\
    \        $count++ if $char =~ /[0-9]/;\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my $char;\n    my $prev_char;\n    foreach $char (split(//,\
    \ $string)) {\n        $prev_char = $char;\n        $count++;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $char;\n    foreach $char (split(//,\
    \ $string)) {\n        $count++ if $char ne $char;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $char;\n    foreach $char (split //, $string)\
    \ {\n        $count++ if $char ne $char;\n    }\n    return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
