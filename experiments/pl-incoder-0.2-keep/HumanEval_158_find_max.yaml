name: HumanEval_158_find_max
language: humaneval_to_perl.py
prompt: "# Write a function that accepts a list of strings.\n# The list contains different\
  \ words. Return the word with maximum number\n# of unique characters. If multiple\
  \ strings have maximum number of unique\n# characters, return the one which comes\
  \ first in lexicographical order.\n# find_max([\"name\", \"of\", \"string\"]) ==\
  \ \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n# find_max([\"\
  aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nsub find_max {\n    my($words) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n\
  \        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"\
  cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
  , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\",\
  \ \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = 0;\n    my $word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $count = 0;\n        foreach my $char (split(//, $word)) {\n \
    \           $count++ if $char =~ /^[a-z]/i;\n        }\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $word;\n        }\n    }\n\
    \    return $word;\n}", "    my $max_count = 0;\n    my $max_word = \"\";\n  \
    \  foreach my $word (@$words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /./;\n        }\n    \
    \    if ($count > $max_count) {\n            $max_count = $count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my %counts;\n\
    \    foreach my $word (@$words) {\n        $counts{$word}++;\n    }\n    my $max\
    \ = 0;\n    my $word = \"\";\n    foreach my $word (keys %counts) {\n        if\
    \ ($counts{$word} > $max) {\n            $max = $counts{$word};\n            $word\
    \ = $word;\n        }\n    }\n    return $word;\n}", "    my $max = 0;\n    my\
    \ $word = \"\";\n    foreach my $word (@$words) {\n        my $count = scalar(@$words);\n\
    \        foreach my $char (split(//, $word)) {\n            $count--;\n      \
    \      if ($count > $max) {\n                $max = $count;\n                $word\
    \ = $char;\n            }\n        }\n    }\n    return $word;\n}\n</code>\n<|/\
    \ a tags=perl,arrays |>\n<| c |>\nThis doesn't work if there are multiple strings\
    \ with the same number of unique characters. For example, `find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"` returns `\"\"aaaaaaa\"` instead of `\"cc\"\
    `.\n<|/ c |>\n<| c |>\n: Yes, you are right. I've added a comment to the question.\n\
    <|/ c |>\n<| c |>\n: I've added a solution that works with multiple strings with\
    \ the same number of unique characters.\n<|/ c |>\n<| a tags=perl,arrays |>\n\
    <code>\nuse strict;\nuse warnings;", "    my $max_count = 0;\n    my $max_word\
    \ = \"\";\n    my $max_word_len = 0;\n    foreach my $word (@$words) {\n     \
    \   my $word_len = length($word);\n        if ($word_len > $max_word_len) {\n\
    \            $max_word_len = $word_len;\n            $max_word = $word;\n    \
    \        $max_count = 1;\n        } elsif ($word_len == $max_word_len) {\n   \
    \         $max_count++;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max = 0;\n    my $word = \"\";\n    foreach my $word (@$words) {\n        my\
    \ $count = 0;\n        foreach my $char (split(//, $word)) {\n            $count++\
    \ if $char =~ /[^a-zA-Z]/;\n        }\n        if ($count > $max) {\n        \
    \    $max = $count;\n            $word = $word;\n        }\n    }\n    return\
    \ $word;\n}", "    my $max;\n    my $maxword;\n    my $maxchar;\n    my $maxcharcount;\n\
    \    my $maxcharcounts;\n    my $maxcharcounts2;\n    my $maxcharcounts3;\n  \
    \  my $maxcharcounts4;\n    my $maxcharcounts5;\n    my $maxcharcounts6;\n   \
    \ my $maxcharcounts7;\n    my $maxcharcounts8;\n    my $maxcharcounts9;\n    my\
    \ $maxcharcounts10;\n    my $maxcharcounts11;\n    my $maxcharcounts12;\n    my\
    \ $maxcharcounts13;\n    my $maxcharcounts14;\n    my $maxcharcounts15;\n    my\
    \ $maxcharcounts16;\n    my $maxcharcounts17;\n    my $maxcharcounts18;\n    my\
    \ $maxcharcounts19;\n    my $maxcharcounts20;\n    my $maxcharcounts21;\n    my\
    \ $maxcharcounts22;\n    my $maxcharcounts23;\n    my $maxcharcounts24;\n    my\
    \ $maxcharcounts25;\n    my $maxcharcounts26;\n    my $maxcharcounts27;\n    my\
    \ $maxcharcounts28;\n    my $maxcharcounts29;\n    my $maxcharcounts30;\n    my\
    \ $maxcharcounts31;\n    my $maxcharcounts32;\n    my $maxcharcounts33;\n    my\
    \ $maxcharcounts34;\n    my $maxcharcounts35;\n    my $maxcharcounts36;\n    my\
    \ $maxcharcounts37;\n    my $maxcharcounts38;\n    my $maxcharcounts39;\n    my\
    \ $maxcharcounts40;\n    my $maxcharcounts41;\n    my $maxcharcounts42;\n    my\
    \ $maxcharcounts43;\n    my $maxcharcounts44;\n    my $maxcharcounts45;\n    my\
    \ $maxcharcounts46;\n    my $maxcharcounts47;\n    my $maxcharcounts48;\n    my\
    \ $maxcharcounts49;\n    my $maxcharcounts50;\n    my $maxcharcounts51;\n    my\
    \ $maxcharcounts52;\n    my $maxcharcounts53;\n    my $maxcharcounts54;\n    my\
    \ $maxcharcounts55;\n    my $maxcharcounts56;\n    my $maxcharcounts57;", "  \
    \  my $max = 0;\n    my $word = \"\";\n    foreach my $word (@$words) {\n    \
    \    my $len = length($word);\n        if ($len > $max) {\n            $max =\
    \ $len;\n            $word = $word;\n        }\n    }\n    return $word;\n}",
  "    my $max_count = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $count = 0;\n        foreach my $char (split(//, $word)) {\n \
    \           $count++ if $char =~ /[^a-zA-Z]/;\n        }\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max = 0;\n    my $word\
    \ = \"\";\n    foreach my $word (@$words) {\n        my $count = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            $count++ if $char =~ /^[a-z]/i;\n\
    \        }\n        if ($count > $max) {\n            $max = $count;\n       \
    \     $word = $word;\n        }\n    }\n    return $word;\n}", "    my $max =\
    \ 0;\n    my $word = \"\";\n    foreach my $word (@$words) {\n        my $count\
    \ = 0;\n        foreach my $char (split(//, $word)) {\n            $count++ if\
    \ $char =~ /./;\n        }\n        if ($count > $max) {\n            $max = $count;\n\
    \            $word = $word;\n        }\n    }\n    return $word;\n}", "    my\
    \ $max_count = -1;\n    my $max_word = \"\";\n    foreach my $word (@$words) {\n\
    \        my $count = scalar(@$words);\n        if ($count > $max_count) {\n  \
    \          $max_count = $count;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}", "    my $max = 0;\n    my $word = \"\";\n  \
    \  foreach my $word (@$words) {\n        my $chars = scalar(split(//, $word));\n\
    \        if ($chars > $max) {\n            $max = $chars;\n            $word =\
    \ $word;\n        }\n    }\n    return $word;\n}", "    my($max_chars) = 0;\n\
    \    my($max_word);\n    my($max_word_index);\n    foreach my $word (@$words)\
    \ {\n        $max_chars = $max_chars > length $word ? $max_chars : length $word;\n\
    \        $max_word_index = $max_chars == length $word ? $max_chars : $max_chars;\n\
    \        $max_word = $word if $max_chars == length $word;\n    }\n    return $max_word\
    \ if $max_chars > $max_word_index;\n    return '';\n}", "    my $max;\n    my\
    \ $word;\n    my $count;\n    foreach $word (@$words) {\n        $count = 1;\n\
    \        foreach $max (@$words) {\n            if ($word eq $max) {\n        \
    \        $count++;\n            }\n        }\n        if ($count > 1) {\n    \
    \        return $word;\n        }\n    }\n    return \"\";\n}", "    my $max =\
    \ 0;\n    my $word = \"\";\n    foreach my $word (@$words) {\n        my $count\
    \ = scalar(@$words);\n        foreach my $char (split(//, $word)) {\n        \
    \    $count--;\n            if ($count > $max) {\n                $max = $count;\n\
    \                $word = $char;\n            }\n        }\n    }\n    return $word;\n\
    }", "    my $max = 0;\n    my $word = \"\";\n    foreach my $word (@$words) {\n\
    \        my $count = scalar(@$words);\n        foreach my $char (split(//, $word))\
    \ {\n            $count--;\n            if ($count > $max) {\n               \
    \ $max = $count;\n                $word = $char;\n            }\n        }\n \
    \   }\n    return $word;\n}", "    my $max_count = 0;\n    my $max_word = \"\"\
    ;\n    foreach my $word (@$words) {\n        my $count = 0;\n        foreach my\
    \ $char (split(//, $word)) {\n            $count++ if $char =~ /[A-Za-z]/;\n \
    \       }\n        if ($count > $max_count) {\n            $max_count = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max = 0;\n    my $word = \"\";\n    foreach my $word (@$words) {\n    \
    \    my $count = scalar(@$words);\n        foreach my $char (split(//, $word))\
    \ {\n            $count--;\n            if ($count > $max) {\n               \
    \ $max = $count;\n                $word = $char;\n            }\n        }\n \
    \   }\n    return $word;\n}", "    my $max;\n    my $word;\n    my $count;\n \
    \   foreach $word (@$words) {\n        $count = 1;\n        foreach $word (@$words)\
    \ {\n            if ($word ne $word) {\n                $count++;\n          \
    \  }\n        }\n        if ($count > $max) {\n            $max = $count;\n  \
    \          $word = $word;\n        }\n    }\n    return $word;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
