name: HumanEval_68_pluck
language: humaneval_to_perl.py
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 2:\n# Input: [1,2,3]\n# Output:\
  \ [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\
  \ \n# Example 3:\n# Input: []\n# Output: []\n# Example 4:\n# Input: [5, 0, 3, 0,\
  \ 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest value, but  there are\
  \ two zeros,\n# so we will choose the first zero, which has the smallest index.\n\
  # Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n\
  \    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n\
  \        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7,\
  \ 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $len = @$arr;\n    my $min = $arr->[0];\n    my $min_index =\
    \ 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $temp;\n    my $temp2;\n    my $temp3;\n    my $temp4;\n \
    \   my $temp5;\n    my $temp6;\n    my $temp7;\n    my $temp8;\n    my $temp9;\n\
    \    my $temp10;\n    my $temp11;\n    my $temp12;\n    my $temp13;\n    my $temp14;\n\
    \    my $temp15;\n    my $temp16;\n    my $temp17;\n    my $temp18;\n    my $temp19;\n\
    \    my $temp20;\n    my $temp21;\n    my $temp22;\n    my $temp23;\n    my $temp24;\n\
    \    my $temp25;\n    my $temp26;\n    my $temp27;\n    my $temp28;\n    my $temp29;\n\
    \    my $temp30;\n    my $temp31;\n    my $temp32;\n    my $temp33;\n    my $temp34;\n\
    \    my $temp35;\n    my $temp36;\n    my $temp37;\n    my $temp38;\n    my $temp39;\n\
    \    my $temp40;\n    my $temp41;\n    my $temp42;\n    my $temp43;\n    my $temp44;\n\
    \    my $temp45;\n    my $temp46;\n    my $temp47;\n    my $temp48;\n    my $temp49;\n\
    \    my $temp50;\n    my $temp51;\n    my $temp52;\n    my $temp53;\n    my $temp54;\n\
    \    my $temp55;\n    my $temp56;\n    my $temp57;\n    my $temp58;\n    my $temp59;\n\
    \    my $temp60;\n    my $temp61;\n    my $temp62;\n    my $temp63;\n    my $temp64;\n\
    \    my $temp65;\n    my $temp66;\n    my $temp67;\n    my $temp68;\n    my $temp69;\n\
    \    my $temp70;\n    my $temp71;\n    my $temp72;\n    my $temp73;\n    my $temp74;\n\
    \    my $temp75;\n    my $temp76;\n    my $temp77;\n    my $temp78;\n    my $temp79;\n\
    \    my $temp80;\n    my $temp", "    my $min;\n    my $index;\n    my $even;\n\
    \    my $smalest_value;\n    foreach my $i (0..$#{$arr}) {\n        $even = $arr->[$i]\
    \ % 2;\n        if ($even != 0) {\n            $smalest_value = $arr->[$i];\n\
    \            $index = $i;\n        }\n    }\n    return $smalest_value if $smalest_value;\n\
    \    return [];\n}", "    my $len = @$arr;\n    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $even;\n    for(my\
    \ $i = 1; $i < $len; $i++) {\n        $even = $arr->[$i] % 2;\n        if($even\
    \ != 0) {\n            $smalest_value = $arr->[$i];\n            $smalest_index\
    \ = $i;\n        }\n        if($smalest_value == $min) {\n            $index =\
    \ $i;\n        }\n    }\n    if($smalest_value == $min) {\n        $index = $smalest_index;\n\
    \    }\n    return [ $smalest_value, $index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $even;\n    foreach my $n (@$arr) {\n        if ($n\
    \ % 2 == 0) {\n            $even = $n;\n        }\n        if ($n < $min) {\n\
    \            $min = $n;\n            $index = $n;\n        }\n    }\n    return\
    \ [ $even, $index ];\n}", "    my @result;\n    my $min_value;\n    my $min_index;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $value;\n    my $index;\n    my $even;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index", "    my $min =\
    \ $arr[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            $smalest_value = $val;\n      \
    \      $index = $val;\n        }\n    }\n    return $smalest_value, $index;\n}",
  "    my $min = $arr[0];\n    my $index = 0;\n    foreach my $n (@$arr) {\n     \
    \   if ($n % 2 == 0) {\n            if ($min > $n) {\n                $min = $n;\n\
    \                $index = $i;\n            }\n        }\n        $i++;\n    }\n\
    \    return [ $min, $index ];\n}", "    my $min = -1;\n    my $min_index;\n  \
    \  my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            if ($min == -1) {\n                $min = $node;\n       \
    \         $min_index = $node;\n                $smalest_value = $node;\n     \
    \       } else {\n                if ($node < $smalest_value) {\n            \
    \        $min = $node;\n                    $min_index = $node;\n            \
    \        $smalest_value = $node;\n                }\n            }\n        }\n\
    \    }\n    return [ $smalest_value, $min_index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $smalest_value;\n    foreach my $n (@$arr) {\n   \
    \     if ($n % 2 == 0) {\n            $smalest_value = $n;\n            $index\
    \ = $i;\n        }\n        $i++;\n    }\n    return [ $smalest_value, $index\
    \ ];\n}", "    my ($i, $j, $k, $smallest, $smallest_index);\n    my ($even_value);\n\
    \    my ($min_value);\n    my ($min_index);\n    my ($max_value);\n    my ($max_index);\n\
    \    my ($tmp);\n    my ($count);\n    my ($tmp2);\n    my ($tmp3);\n    my ($tmp4);\n\
    \    my ($tmp5);\n    my ($tmp6);\n    my ($tmp7);\n    my ($tmp8);\n    my ($tmp9);\n\
    \    my ($tmp10);\n    my ($tmp11);\n    my ($tmp12);\n    my ($tmp13);\n    my\
    \ ($tmp14);\n    my ($tmp15);\n    my ($tmp16);\n    my ($tmp17);\n    my ($tmp18);\n\
    \    my ($tmp19);\n    my ($tmp20);\n    my ($tmp21);\n    my ($tmp22);\n    my\
    \ ($tmp23);\n    my ($tmp24);\n    my ($tmp25);\n    my ($tmp26);\n    my ($tmp27);\n\
    \    my ($tmp28);\n    my ($tmp29);\n    my ($tmp30);\n    my ($tmp31);\n    my\
    \ ($tmp32);\n    my ($tmp33);\n    my ($tmp34);\n    my ($tmp35);\n    my ($tmp36);\n\
    \    my ($tmp37);\n    my ($tmp38);\n    my ($tmp39);\n    my ($tmp40);\n    my\
    \ ($tmp41);\n    my ($tmp42);\n    my ($tmp43);\n    my ($tmp44);\n    my ($tmp45);\n\
    \    my ($tmp46);\n    my ($tmp47);\n    my ($tmp48);\n    my ($tmp49);\n    my\
    \ ($tmp50);\n    my ($tmp51);\n    my ($tmp52);\n    my ($tmp53);\n    my ($tmp54);\n\
    \    my ($tmp55);\n    my ($tmp56);\n    my ($tmp57);\n    my ($tmp58);\n    my\
    \ ($tmp59);\n    my ($tmp60);\n    my ($tmp61);\n    my ($tmp62);\n    my ($tmp63);\n\
    \    my ($tmp64);\n    my ($tmp65);\n    my ($tmp66);\n    my ($tmp67);\n    my\
    \ ($tmp68);\n    my ($", "    my $min_value = $arr[0];\n    my $min_idx = 0;\n\
    \    my $i = 0;\n    while($i < $#arr) {\n        my $value = $arr[$i];\n    \
    \    if($value % 2 == 0) {\n            if($value < $min_value) {\n          \
    \      $min_value = $value;\n                $min_idx = $i;\n            }\n \
    \           $i++;\n        } else {\n            $i++;\n        }\n    }\n   \
    \ return [ $min_value, $min_idx ];\n}", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $even;\n    my $even_index;\n    foreach my $i (@$arr) {\n    \
    \    if ($i % 2 == 0) {\n            $even = $i;\n            $even_index = $index;\n\
    \        }\n        $index++;\n    }\n    if ($even) {\n        return [ $even,\
    \ $even_index ];\n    }\n    return [];\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    foreach my $i (@$arr) {\n        if ($i % 2 == 0) {\n            if\
    \ ($i < $min) {\n                $min = $i;\n                $index = $i;\n  \
    \          }\n        }\n    }\n    return [$min, $index];\n}", "    my $min =\
    \ $arr[0];\n    my $index = 0;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            $min = $node;\n            $index = $arr->index($node);\n\
    \        }\n    }\n    return [ $min, $index ];\n}", "    my @res;\n    my $min;\n\
    \    my $index;\n    my $value;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $even;\n    my $even_index;\n    my $even_value;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $", "    my $min = $arr[0];\n    my $index = 0;\n\
    \    my $found = 0;\n    foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n\
    \            if ($found == 0) {\n                $min = $n;\n                $found\
    \ = 1;\n            }\n            else {\n                if ($n < $min) {\n\
    \                    $min = $n;\n                    $index = $found;\n      \
    \          }\n            }\n        }\n    }\n    return [ $min, $index ];\n}",
  "    my $min = -1;\n    my $min_index;\n    foreach my $node (@$arr) {\n       \
    \ if ($node % 2 == 0) {\n            $min = $node;\n            $min_index = $_;\n\
    \        }\n    }\n    return $min if $min != -1;\n    return [];\n}", "    my\
    \ $min = $arr[0];\n    my $index = 0;\n    my $found = 0;\n    foreach my $val\
    \ (@$arr) {\n        if ($val % 2 == 0) {\n            $found = 1;\n         \
    \   if ($val < $min) {\n                $min = $val;\n                $index =\
    \ $found;\n            }\n        }\n    }\n    return $found ? [$min, $index]\
    \ : [];\n}", "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    ", "    my ($i, $j, $smallest, @result);\n    foreach $i (0 .. $#{$arr})\
    \ {\n        foreach $j ($i + 1 .. $#{$arr}) {\n            if ($arr->[$i] % 2\
    \ == 0 && $arr->[$j] % 2 == 0) {\n                if ($arr->[$i] < $smallest)\
    \ {\n                    $smallest = $arr->[$i];\n                    $result[$i]\
    \ = $j;\n                }\n                if ($arr->[$j] < $smallest) {\n  \
    \                  $smallest = $arr->[$j];\n                    $result[$j] =\
    \ $i;\n                }\n            }\n        }\n    }\n    return @result;\n\
    }", "    my $min = -1;\n    my $min_index;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even_value;\n    my $index;\n\
    \    my $temp;\n    my $count = 0;\n    my $even_value;\n    my $index;\n    my\
    \ $temp;\n    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n\
    \    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n\
    \    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n\
    \    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n\
    \    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n\
    \    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n\
    \    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n\
    \    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n\
    \    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n\
    \    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n\
    \    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n\
    \    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n\
    \    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n\
    \    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n\
    \    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n\
    \    my $index;\n    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n\
    \    my $temp;\n    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n\
    \    my $count;\n    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n\
    \    my $even_value;\n    my $index;\n    my $temp;\n    my $count;\n", "    my\
    \ ($i, $j, $smallest, $smallest_index);\n    my $size = @$arr;\n    foreach $i\
    \ (0 .. $size-1) {\n        foreach $j ($i+1 .. $size-1) {\n            if ($arr[$i]\
    \ % 2 == 0 && $arr[$j] % 2 == 0) {\n                if ($arr[$i] < $smallest)\
    \ {\n                    $smallest = $arr[$i];\n                    $smallest_index\
    \ = $i;\n                } elsif ($arr[$i] > $smallest) {\n                  \
    \  $smallest = $arr[$j];\n                    $smallest_index = $j;\n        \
    \        }\n            }\n        }\n    }\n    return ($smallest, $smallest_index);\n\
    }", "    my $min = $arr->[0];\n    my $index = 0;\n    my $i = 0;\n    while($i\
    \ < $arr->length) {\n        if($arr->[$i] % 2 == 0) {\n            $min = $arr->[$i];\n\
    \            $index = $i;\n        }\n        $i++;\n    }\n    return [$min,\
    \ $index];\n}", "    my $min = $arr[0];\n    my $index = 0;\n    my $smalest_value;\n\
    \    foreach my $val (@$arr) {\n        if ($val < $min) {\n            $min =\
    \ $val;\n            $index = $val;\n        }\n        if ($val % 2 == 0) {\n\
    \            $smalest_value = $val;\n        }\n    }\n    return [ $smalest_value,\
    \ $index ];\n}", "    my @result;\n    my $min;\n    my $index;\n    my $value;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my\
    \ $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_even_index;\n\
    \    my $even;\n    my $even_index;\n    my $even_value;\n    my $even_indexes;\n\
    \    my $even_values;\n    my $even_index;\n    my $even_value;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    my $even_value_index;\n\
    \    my $even_value_indexes;\n    my $even_value_index;\n    my $even_value_indexes;\n\
    \    my $even_value_index;\n    my $even_value_indexes;\n    ", "    my ($i, $j,\
    \ $k, $smallest, $smallest_index);\n    my $len = @$arr;\n    for(my $i = 0; $i\
    \ < $len; $i++) {\n        $smallest = $arr->[$i];\n        $smallest_index =\
    \ $i;\n        for(my $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$j]\
    \ % 2 == 0) {\n                $smallest = $arr->[$j];\n                $smallest_index\
    \ = $j;\n            }\n        }\n        if($smallest == 0) {\n            $smallest\
    \ = $arr->[$i];\n            $smallest_index = $i;\n        }\n        if($smallest\
    \ == 0) {\n            $smallest = $arr->[$i];\n            $smallest_index =\
    \ $i;\n        }\n    }\n    return [ $smallest, $smallest_index ];\n}", "   \
    \ my $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $smalest_value\
    \ = $node;\n            $index = $node < $min ? $node : $min;\n        }\n   \
    \ }\n    return [ $smalest_value, $index ];\n}", "    my ($i, $j, $min, $min_index);\n\
    \    my $even_value = 0;\n    my $even_index = 0;\n    my $smalest_value;\n  \
    \  my $smalest_index;\n    my $smalest_value_found = 0;\n    my $smalest_index_found\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n      \
    \      $even_value = $node;\n            $even_index = $i;\n            $smalest_value\
    \ = $node;\n            $smalest_index = $i;\n            $smalest_value_found\
    \ = 1;\n            $smalest_index_found = 1;\n        }\n        else {\n   \
    \         if ($smalest_value_found == 1) {\n                $smalest_value = $node;\n\
    \                $smalest_index = $i;\n                $smalest_value_found =\
    \ 0;\n            }\n            if ($smalest_index_found == 1) {\n          \
    \      $smalest_index_found = 0;\n            }\n        }\n        $i++;\n  \
    \  }\n    if ($smalest_value_found == 0) {\n        return [];\n    }\n    else\
    \ {\n        return [$smalest_value, $smalest_index];\n    }\n}", "    my $min\
    \ = $arr[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my $node\
    \ (@$arr) {\n        if ($node % 2 == 0) {\n            $smalest_value = $node;\n\
    \            $index = $node;\n        }\n        elsif ($node < $min) {\n    \
    \        $min = $node;\n            $index = $node;\n        }\n    }\n    return\
    \ [ $smalest_value, $index ];\n}", "    my $min = $arr[0];\n    my $index = 0;\n\
    \    foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n            if ($min\
    \ > $n) {\n                $min = $n;\n                $index = $i;\n        \
    \    }\n        }\n        $i++;\n    }\n    return [ $min, $index ];\n}", " \
    \   my @res;\n    my $min = $arr[0];\n    my $index = 0;\n    my $flag = 0;\n\
    \    my $i = 0;\n    foreach my $num (@$arr) {\n        if ($flag == 0 && $num\
    \ % 2 == 0) {\n            $flag = 1;\n            $min = $num;\n            $index\
    \ = $i;\n        }\n        elsif ($flag == 1 && $num == $min) {\n           \
    \ $flag = 0;\n        }\n        elsif ($flag == 1) {\n            $flag = 0;\n\
    \        }\n        $i++;\n    }\n    if ($flag == 1) {\n        push(@res, [\"\
    $min\", $index]);\n    }\n    return @res;\n}", "    my $min = $arr[0];\n    my\
    \ $index = 0;\n    my $found = 0;\n    foreach my $i (@$arr) {\n        if ($i\
    \ % 2 == 0) {\n            $found = 1;\n            if ($min > $i) {\n       \
    \         $min = $i;\n                $index = $i;\n            }\n        }\n\
    \    }\n    return $found ? [ $min, $index ] : [];\n}", "    my ($i, $j, $k, $smallest,\
    \ $smallest_index);\n    my $size = @$arr;\n    my $even = 0;\n    my $index =\
    \ 0;\n    my $even_value;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    foreach $i (0 .. $size - 1) {\n        $even = 0;\n        $index = 0;\n\
    \        $even_value = $arr->[$i];\n        $smallest_value = $arr->[$i];\n  \
    \      $smallest_index = $i;\n        foreach $j ($i + 1 .. $size - 1) {\n   \
    \         if ($arr->[$j] % 2 == 0) {\n                $even = 1;\n           \
    \     if ($even_value < $smallest_value) {\n                    $smallest_value\
    \ = $even_value;\n                    $smallest_index = $j;\n                }\n\
    \            }\n        }\n        if ($even) {\n            push(@$arr, $even_value);\n\
    \            push(@$arr, $smallest_index);\n        }\n    }\n    return @$arr;\n\
    }", "    my $min = $arr->[0];\n    my $min_index = 0;\n    my $index = 0;\n  \
    \  foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            if ($node\
    \ < $min) {\n                $min = $node;\n                $min_index = $index;\n\
    \            }\n            $index++;\n        }\n    }\n    return [ $min, $min_index\
    \ ];\n}", "    my $min_value = $arr[0];\n    my $min_idx = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $even = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_value = 0;\n    my $even_idx = 0;\n    my $even_value = 0;\n   \
    \ my $even_idx = 0;\n    my $even_value = 0;\n    my $even_idx", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $even;\n    foreach my $n (@$arr) {\n\
    \        if ($n % 2 == 0) {\n            $even = $n;\n        }\n        if ($n\
    \ < $min) {\n            $min = $n;\n            $index = $arr->[$n];\n      \
    \  }\n    }\n    return $even ? [ $min, $index ] : [];\n}", '    my ($i, $j, $smallest,
    @result);', "    my $min = $arr->[0];\n    my $index = 0;\n    my $even;\n   \
    \ foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even\
    \ = $node;\n        }\n        if ($node < $min) {\n            $min = $node;\n\
    \            $index = $even;\n        }\n    }\n    return [ $min, $index ];\n\
    }", "    my $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n  \
    \  foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($smalest_value\
    \ == undef) {\n                $smalest_value = $val;\n                $index\
    \ = $val;\n            }\n            elsif ($val < $smalest_value) {\n      \
    \          $smalest_value = $val;\n                $index = $val;\n          \
    \  }\n        }\n    }\n    return [ $smalest_value, $index ];\n}", "    my $min\
    \ = $arr[0];\n    my $index = 0;\n    for (my $i = 1; $i < @$arr; $i++) {\n  \
    \      if ($arr[$i] % 2 == 0) {\n            if ($arr[$i] < $min) {\n        \
    \        $min = $arr[$i];\n                $index = $i;\n            }\n     \
    \   }\n    }\n    return [ $min, $index ];\n}", "    my $min = -1;\n    my $min_index;\n\
    \    my $smalest_value;\n    foreach my $n (@$arr) {\n        if ($n =~ /0/) {\n\
    \            if ($min == -1) {\n                $min = $n;\n                $min_index\
    \ = 0;\n            }\n            elsif ($min > $n) {\n                $min =\
    \ $n;\n                $min_index = 0;\n            }\n            else {\n  \
    \              $min_index++;\n            }\n        }\n    }\n    if ($min ==\
    \ -1) {\n        return [];\n    }\n    else {\n        return [$min, $min_index];\n\
    \    }\n}", "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n \
    \   foreach my $i (0..$#{$arr}) {\n        my $value = $arr->[$i];\n        if\
    \ ($value % 2 == 0) {\n            if ($min == -1 || $value < $smalest_value)\
    \ {\n                $min = $value;\n                $min_index = $i;\n      \
    \          $smalest_value = $value;\n            }\n        }\n    }\n    return\
    \ $min == -1 ? [] : [ $smalest_value, $min_index ];\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $even = 0;\n    foreach my $val (@$arr) {\n      \
    \  if ($val & 1) {\n            $even = $val;\n        }\n        if ($val < $min)\
    \ {\n            $min = $val;\n            $index = $even;\n        }\n    }\n\
    \    return [ $min, $index ];\n}", "    my $i = 0;\n    my $smalest_value = $arr[0];\n\
    \    my $smalest_index = 0;\n    my $smalest_even_value = 0;\n    my $smalest_even_node\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n      \
    \      $smalest_even_value = $node;\n            $smalest_even_node = $i;\n  \
    \      }\n        if ($node < $smalest_value) {\n            $smalest_value =\
    \ $node;\n            $smalest_index = $i;\n        }\n        $i++;\n    }\n\
    \    return [ $smalest_value, $smalest_index ] if $smalest_even_value && $smalest_even_node;\n\
    \    return [];\n}", "    my %hash;\n    my $min;\n    my $index;\n    my $value;\n\
    \    foreach my $node (@$arr) {\n        $hash{$node}++;\n    }\n    foreach my\
    \ $key (sort {$a <=> $b} keys %hash) {\n        if ($hash{$key} % 2 == 0) {\n\
    \            $value = $key;\n            $min = $key;\n            $index = $hash{$key};\n\
    \        }\n    }\n    return ($min, $index);\n}", "    my ($i, $j, $min, $min_index);\n\
    \    my $len = @$arr;\n    my $even;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my\
    \ $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my\
    \ $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my\
    \ $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my\
    \ $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $smalest_value;\n    my $smalest_index;\n    my $smalest_value;\n    my\
    \ $smalest_index;\n    my $sm", "    my $min = $arr[0];\n    my $min_index = 0;\n\
    \    my $i = 0;\n    while($i < @$arr) {\n        if($arr[$i] % 2 == 0) {\n  \
    \          $min = $arr[$i];\n            $min_index = $i;\n        }\n       \
    \ $i++;\n    }\n    return [ $min, $min_index ];\n}", "    my $min_value = $arr[0];\n\
    \    my $min_idx = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $found = 0;\n    my $even = 0;\n    my $even_idx = 0;\n    my $even_value =\
    \ 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n          \
    \  $even++;\n            $even_value = $val;\n            $even_idx = $i;\n  \
    \      }\n        $i++;\n    }\n    if ($even == 0) {\n        return [];\n  \
    \  }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n          \
    \  $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n        }\n        $i++;\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n            $even_idx = $i;\n", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $even;\n    foreach my $node (@$arr) {\n        if\
    \ ($node % 2 == 0) {\n            $even = $node;\n        }\n        if ($node\
    \ < $min) {\n            $min = $node;\n            $index = $even;\n        }\n\
    \    }\n    return [ $min, $index ];\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n      \
    \      if ($node < $min) {\n                $min = $node;\n                $index\
    \ = $index;\n            }\n        }\n    }\n    return [ $min, $index ];\n}",
  "    my $min = -1;\n    my $index = 0;\n    my $smalest_value;\n    foreach my $val\
    \ (@$arr) {\n        if ($val % 2 == 0) {\n            if ($min == -1 || $val\
    \ < $smalest_value) {\n                $smalest_value = $val;\n              \
    \  $min = $index;\n            }\n        }\n        $index++;\n    }\n    return\
    \ [ $smalest_value, $min ];\n}", "    my @result;\n    my $min = 0;\n    my $min_index\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n      \
    \      if ($min > $node) {\n                $min = $node;\n                $min_index\
    \ = $min_index + 1;\n            }\n        }\n        else {\n            push\
    \ (@result, $node);\n        }\n    }\n    return @result;\n}", "    my $min =\
    \ -1;\n    my $min_index;\n    my $smalest_value;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $smalest_value = $node;\n    \
    \        $min_index = $node;\n        }\n        elsif ($node < $smalest_value)\
    \ {\n            $smalest_value = $node;\n            $min_index = $node;\n  \
    \      }\n    }\n    return [$smalest_value, $min_index];\n}", "    my $min =\
    \ -1;\n    my $min_index;\n    my $smalest_value;\n    foreach my $i (0..$#{$arr})\
    \ {\n        my $value = $arr->[$i];\n        if ($value % 2 == 0) {\n       \
    \     if ($min == -1 || $value < $smalest_value) {\n                $min = $value;\n\
    \                $min_index = $i;\n                $smalest_value = $value;\n\
    \            }\n        }\n    }\n    if ($min == -1) {\n        return [];\n\
    \    }\n    return [ $smalest_value, $min_index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            if ($min > $node) {\n                $min = $node;\n     \
    \           $index = $arr->index($node);\n            }\n        }\n    }\n  \
    \  return [ $min, $index ];\n}", "    my $min = $arr[0];\n    my $index = 0;\n\
    \    my $even_value = 0;\n    foreach my $node (@$arr) {\n        if ($node %\
    \ 2 == 0) {\n            $even_value = $node;\n        }\n        if ($node <\
    \ $min) {\n            $min = $node;\n            $index = $even_value;\n    \
    \    }\n    }\n    return $index;\n}", "    my $min_value = $arr[0];\n    my $min_idx\
    \ = 0;\n    my $min_even_value = 0;\n    my $even_value = 0;\n    my $idx = 0;\n\
    \    my $even_value_idx = 0;\n    my $even_value_idx_count = 0;\n    foreach my\
    \ $val (@$arr) {\n        if ($val % 2 == 0) {\n            $even_value = $val;\n\
    \            $even_value_idx = $idx;\n            $even_value_idx_count++;\n \
    \       }\n        if ($val < $min_value) {\n            $min_value = $val;\n\
    \            $min_idx = $idx;\n            $min_even_value = $even_value;\n  \
    \          $min_even_value_idx = $even_value_idx;\n            $min_even_value_idx_count\
    \ = $even_value_idx_count;\n        }\n        $idx++;\n    }\n    return ($min_even_value_idx_count,\
    \ $min_even_value_idx, $min_value, $min_idx);\n}", "    my $min = $arr[0];\n \
    \   my $index = 0;\n    foreach my $num (@$arr) {\n        if ($num % 2 == 0)\
    \ {\n            if ($num < $min) {\n                $min = $num;\n          \
    \      $index = $index;\n            }\n        }\n    }\n    return [ $min, $index\
    \ ];\n}", "    my $min = -1;\n    my $index = 0;\n    my $smalest_value;\n   \
    \ foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            if ($min\
    \ == -1) {\n                $smalest_value = $node;\n                $min = $index;\n\
    \            } elsif ($node < $smalest_value) {\n                $smalest_value\
    \ = $node;\n                $min = $index;\n            }\n            $index++;\n\
    \        }\n    }\n    return $smalest_value if $min != -1;\n    return [];\n}",
  "    my $min = $arr[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n   \
    \     if ($val % 2 == 0) {\n            if ($val < $min) {\n                $min\
    \ = $val;\n                $index = $arr->index($val);\n            }\n      \
    \  }\n    }\n    return [ $min, $index ];\n}", "    my $i = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $even_value;\n    my $even_index;\n    my $index;\n\
    \    my $value;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n\
    \            $even_value = $node;\n            $even_index = $i;\n        }\n\
    \        $i++;\n    }\n    if ($even_value ne 0) {\n        $smalest_value = $even_value;\n\
    \        $smalest_index = $even_index;\n    }\n    else {\n        $smalest_value\
    \ = $arr[0];\n        $smalest_index = 0;\n    }\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            if ($smalest_value < $node) {\n\
    \                $smalest_value = $node;\n                $smalest_index = $i;\n\
    \            }\n        }\n        $i++;\n    }\n    if ($smalest_value == 0)\
    \ {\n        return [];\n    }\n    else {\n        return [$smalest_value, $smalest_index];\n\
    \    }\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $found = 0;\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            $found\
    \ = 1;\n            if ($val < $min) {\n                $min = $val;\n       \
    \         $index = $found;\n            }\n        }\n    }\n    return $found\
    \ ? [ $min, $index ] : [];\n}", "    my $min = $arr[0];\n    my $min_index = 0;\n\
    \    my $index = 0;\n    my $even = 0;\n    foreach my $node (@$arr) {\n     \
    \   if ($node % 2 == 0) {\n            $even++;\n        }\n        if ($node\
    \ < $min) {\n            $min = $node;\n            $min_index = $index;\n   \
    \     }\n        $index++;\n    }\n    if ($even > 0) {\n        return [ $min,\
    \ $min_index ];\n    }\n    return [];\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node < $min) {\n        \
    \    $min = $node;\n            $index = $node;\n        }\n    }\n    return\
    \ [ $min, $index ];\n}", "    my $min_value = $arr[0];\n    my $min_index = 0;\n\
    \    my $index = 0;\n    my $even_value = 0;\n    foreach my $val (@$arr) {\n\
    \        if ($val % 2 == 0) {\n            $even_value = $val;\n        }\n  \
    \      if ($val < $min_value) {\n            $min_value = $val;\n            $min_index\
    \ = $index;\n        }\n        $index++;\n    }\n    if ($even_value == 0) {\n\
    \        return [];\n    }\n    return [ $even_value, $min_index ];\n}", "   \
    \ my $index = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_even_value;\n\
    \    my $smalest_even_index;\n    my $smalest_even_value_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value_index;\n    my $even_value_index;\n \
    \   my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index",
  "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n    foreach my $node\
    \ (@$arr) {\n        if ($min == -1 || $min > $node) {\n            $min = $node;\n\
    \            $min_index = $node;\n        }\n        elsif ($node == $min) {\n\
    \            $min_index = $node;\n        }\n        elsif ($node < $min) {\n\
    \            $min = $node;\n            $min_index = $node;\n        }\n    }\n\
    \    return [$min, $min_index];\n}", "    my $i = 0;\n    my $min = 0;\n    my\
    \ $smalest_value = 0;\n    my $smalest_index = 0;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            if ($node < $smalest_value) {\n\
    \                $smalest_value = $node;\n                $smalest_index = $i;\n\
    \            }\n            $i++;\n        }\n    }\n    return [ $smalest_value,\
    \ $smalest_index ];\n}", "    my $min = $arr[0];\n    my $index = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min)\
    \ {\n                $min = $val;\n                $index = $arr->index($val);\n\
    \            }\n        }\n    }\n    return [ $min, $index ];\n}", "    my @res;\n\
    \    my $min = $arr[0];\n    my $index = 0;\n    my $flag = 0;\n    foreach my\
    \ $node (@$arr) {\n        if ($flag == 0 && $node % 2 == 0) {\n            $min\
    \ = $node;\n            $index = 0;\n            $flag = 1;\n        } elsif ($flag\
    \ == 1 && $node % 2 == 0) {\n            $flag = 0;\n        } elsif ($flag ==\
    \ 1 && $node < $min) {\n            $min = $node;\n            $index = 0;\n \
    \           $flag = 1;\n        } elsif ($flag == 1 && $node == $min) {\n    \
    \        $index++;\n        }\n    }\n    if ($flag == 1) {\n        push(@res,\
    \ [ $min, $index ]);\n    }\n    return @res;\n}", "    my $min_value = $arr[0];\n\
    \    my $min_index = 0;\n    my $smalest_value;\n    my $smalest_index;\n    for\
    \ (my $i = 1; $i < @$arr; $i++) {\n        if ($arr[$i] % 2 == 0) {\n        \
    \    if ($smalest_value == 0 || $smalest_value < $arr[$i]) {\n               \
    \ $smalest_value = $arr[$i];\n                $smalest_index = $i;\n         \
    \   }\n        }\n    }\n    if ($smalest_value == 0) {\n        return [];\n\
    \    }\n    return [ $smalest_value, $smalest_index ];\n}", "    my @res;\n  \
    \  my $min = $arr[0];\n    my $index = 0;\n    foreach my $n (@$arr) {\n     \
    \   if ($n % 2 == 0) {\n            if ($min > $n) {\n                $min = $n;\n\
    \                $index = $i;\n            }\n        }\n        $i++;\n    }\n\
    \    if ($min == 0) {\n        return [];\n    }\n    push(@res, $min, $index);\n\
    \    return @res;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $found\
    \ = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $found = 1;\n            if ($val < $min) {\n                $min = $val;\n\
    \                $index = $found;\n            }\n        }\n    }\n    return\
    \ $found ? [$min, $index] : [];\n}", "    my @result;\n    my $min;\n    my $index;\n\
    \    my $value;\n    my $i = 0;\n    my $j = 0;\n    my $even;\n    my $even_index;\n\
    \    foreach my $node (@$arr) {\n        $value = $node;\n        $index = $i;\n\
    \        $min = $node;\n        $even = 0;\n        $even_index = 0;\n       \
    \ foreach my $node (@$arr) {\n            if ($node == $value) {\n           \
    \     $even = 1;\n                $even_index = $j;\n            }\n         \
    \   $j++;\n        }\n        if ($even) {\n            if ($min > $value) {\n\
    \                $min = $value;\n                $index = $even_index;\n     \
    \       }\n        }\n        $i++;\n    }\n    if ($min > $value) {\n       \
    \ $min = $value;\n        $index = $i;\n    }\n    push(@result, $min, $index);\n\
    \    return @result;\n}", "    my $min = $arr[0];\n    my $index = 0;\n    my\
    \ $found = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n\
    \            $found = 1;\n            $min = $node;\n            $index = $arr->index($node);\n\
    \            last;\n        }\n    }\n    return $found ? [ $min, $index ] : [];\n\
    }", "    my $min = $arr[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            $smalest_value\
    \ = $val;\n            $index = $arr->index($val);\n        }\n    }\n    return\
    \ $smalest_value, $index;\n}", "    my $min = -1;\n    my $min_index;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $value;\n    my $index;\n    my $even;\n\
    \    my $temp;\n    my $result;", "    my $i = 0;\n    my $min_value = $arr[0];\n\
    \    my $min_index = 0;\n    my $smalest_value;\n    my $smalest_index;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($smalest_value\
    \ == 0 || $smalest_value < $val) {\n                $smalest_value = $val;\n \
    \               $smalest_index = $i;\n            }\n            $i++;\n     \
    \   }\n    }\n    if ($smalest_value == 0) {\n        return [];\n    }\n    return\
    \ [ $smalest_value, $smalest_index ];\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    if ($val < $min) {\n                $min = $val;\n                $index\
    \ = $arr->index($val);\n            }\n        }\n    }\n    return [ $min, $index\
    \ ];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            if ($val < $min) {\n          \
    \      $min = $val;\n                $index = $arr->[$index];\n            }\n\
    \        }\n    }\n    return [ $min, $index ];\n}", "    my $index = 0;\n   \
    \ my $smalest_value;\n    my $smalest_index;\n    my $smalest_even_value;\n  \
    \  my $smalest_even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    ", "    my $i = 0;\n\
    \    my $smalest_value;\n    my $smalest_index;\n    my $smalest_even_val;\n \
    \   my $smalest_even_index;\n    foreach my $val (@$arr) {\n        if ($val %\
    \ 2 == 0) {\n            $smalest_even_val = $val;\n            $smalest_even_index\
    \ = $i;\n        }\n        $i++;\n    }\n    if ($smalest_even_val == 0) {\n\
    \        return [];\n    }\n    foreach my $val (@$arr) {\n        if ($val %\
    \ 2 == 0) {\n            if ($smalest_even_val < $val) {\n                $smalest_even_val\
    \ = $val;\n                $smalest_even_index = $i;\n            }\n        }\n\
    \        $i++;\n    }\n    if ($smalest_even_val == 0) {\n        return [];\n\
    \    }\n    my @res;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0)\
    \ {\n            if ($smalest_even_val < $val) {\n                $smalest_even_val\
    \ = $val;\n                $smalest_even_index = $i;\n            }\n        }\n\
    \        $i++;\n    }\n    push(@res, $smalest_even_val, $smalest_even_index);\n\
    \    return @res;\n}", "    my $min_value = $arr[0];\n    my $min_index = 0;\n\
    \    my $index = 0;\n    my $even_values = 0;\n    my $even_values_index = 0;\n\
    \    my $even_values_index2 = 0;\n    my $even_values_index3 = 0;\n    my $even_values_index4\
    \ = 0;\n    my $even_values_index5 = 0;\n    my $even_values_index6 = 0;\n   \
    \ my $even_values_index7 = 0;\n    my $even_values_index8 = 0;\n    my $even_values_index9\
    \ = 0;\n    my $even_values_index10 = 0;\n    my $even_values_index11 = 0;\n \
    \   my $even_values_index12 = 0;\n    my $even_values_index13 = 0;\n    my $even_values_index14\
    \ = 0;\n    my $even_values_index15 = 0;\n    my $even_values_index16 = 0;\n \
    \   my $even_values_index17 = 0;\n    my $even_values_index18 = 0;\n    my $even_values_index19\
    \ = 0;\n    my $even_values_index20 = 0;\n    my $even_values_index21 = 0;\n \
    \   my $even_values_index22 = 0;\n    my $even_values_index23 = 0;\n    my $even_values_index24\
    \ = 0;\n    my $even_values_index25 = 0;\n    my $even_values_index26 = 0;\n \
    \   my $even_values_index27 = 0;\n    my $even_values_index28 = 0;\n    my $even_values_index29\
    \ = 0;\n    my $even_values_index30 = 0;\n    my $even_values_index31 = 0;\n \
    \   my $even_values_index32 = 0;\n    my $even_values_index33 = 0;\n    my $even_values_index34\
    \ = 0;\n    my $even_values_index35 = 0;\n    my $even_values_index36 = 0;\n \
    \   my $even_values_index37 = 0;\n    my $even_values_index38 = 0;\n    my $even_values_index39\
    \ = 0;\n    my $even_values_index40 = 0;\n    my $even_values_index41 = 0;\n \
    \   my $even_values_index42 = 0;\n    my $even_values_index43 = 0;\n    my $even_values_index44\
    \ = 0;\n    my $even_values_index45 = 0;\n    my $even_values_index46 = 0;\n \
    \   my $even_values_index47 = 0;\n    my $even_values_index48 = 0;\n    my $even_values_index49\
    \ = 0;\n    my $even_values_index50 = 0;\n    my $even_values_index51 = 0;\n \
    \   my $even_values_index52 = 0;\n    my $even_values_index53 = 0;\n    my $even_values_index54\
    \ = 0;\n    my $even_values_index", "    my $min = $arr[0];\n    my $index = 0;\n\
    \    my $even = 0;\n    foreach my $num (@$arr) {\n        if ($num % 2 == 0)\
    \ {\n            $even++;\n        }\n        if ($num < $min) {\n           \
    \ $min = $num;\n            $index = $even;\n        }\n    }\n    return [ $min,\
    \ $index ];\n}", "    my $min_value = $arr[0];\n    my $min_index = 0;\n    my\
    \ $index = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n \
    \           if ($val < $min_value) {\n                $min_value = $val;\n   \
    \             $min_index = $index;\n            }\n            $index++;\n   \
    \     }\n    }\n    return [ $min_value, $min_index ];\n}", "    my ($i, $j, $smallest_value,\
    \ $smallest_index);\n    my $len = @$arr;\n    my $smallest_even_value = 0;\n\
    \    my $smallest_even_index = 0;\n    my $smallest_even_value_found = 0;\n  \
    \  my $smallest_even_index_found = 0;\n    my $smallest_even_value_found_index\
    \ = 0;\n    my $smallest_even_index_found_index = 0;\n    my $smallest_even_value_found_index2\
    \ = 0;\n    my $smallest_even_index_found_index2 = 0;\n    my $smallest_even_value_found_index3\
    \ = 0;\n    my $smallest_even_index_found_index3 = 0;\n    my $smallest_even_value_found_index4\
    \ = 0;\n    my $smallest_even_index_found_index4 = 0;\n    my $smallest_even_value_found_index5\
    \ = 0;\n    my $smallest_even_index_found_index5 = 0;\n    my $smallest_even_value_found_index6\
    \ = 0;\n    my $smallest_even_index_found_index6 = 0;\n    my $smallest_even_value_found_index7\
    \ = 0;\n    my $smallest_even_index_found_index7 = 0;\n    my $smallest_even_value_found_index8\
    \ = 0;\n    my $smallest_even_index_found_index8 = 0;\n    my $smallest_even_value_found_index9\
    \ = 0;\n    my $smallest_even_index_found_index9 = 0;\n    my $smallest_even_value_found_index10\
    \ = 0;\n    my $smallest_even_index_found_index10 = 0;\n    my $smallest_even_value_found_index11\
    \ = 0;\n    my $smallest_even_index_found_index11 = 0;\n    my $smallest_even_value_found_index12\
    \ = 0;\n    my $smallest_even_index_found_index12 = 0;\n    my $smallest_even_value_found_index13\
    \ = 0;\n    my $smallest_even_index_found_index13 = 0;\n    my $smallest_even_value_found_index14\
    \ = 0;\n    my $smallest_even_index_found_index14 = 0;\n    my $smallest_even_value_found_index15\
    \ = 0;\n    my $smallest_even_index_found_index15 = 0;\n    my $smallest_even_value_found_index16\
    \ = 0;\n    my $smallest_even_index_found_index16 = 0;\n    my $smallest_even_value_found_index17\
    \ = 0;\n    my $smallest_even_index_found_index17 = 0;\n    my $smallest_even_value_found_index18\
    \ = 0;\n    my $smallest_even_index_found_index18 = 0;\n    my $smallest_even_value_found_index19\
    \ = 0;\n    my $smallest_even_index_found_index19 = 0;\n    my $smallest_even_value_found_index20\
    \ = 0;\n    my $smallest_even_index_found_index20 = 0;\n    my $smallest_even_value_found_index21\
    \ = 0;\n    my $smallest_even_index_found_index21 = 0;\n    my $smalle", "   \
    \ my $index = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_even_value;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $smalest_even_value\
    \ = $node;\n            $smalest_index = $index;\n        }\n        $index++;\n\
    \    }\n    if ($smalest_even_value ne 0) {\n        return [ $smalest_value,\
    \ $smalest_index ];\n    }\n    my $even_value_count = 0;\n    my $even_value_index\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n      \
    \      $even_value_count++;\n            $even_value_index = $index;\n       \
    \ }\n        $index++;\n    }\n    if ($even_value_count == 0) {\n        return\
    \ [];\n    }\n    if ($even_value_count == 1) {\n        return [ $smalest_even_value,\
    \ $even_value_index ];\n    }\n    my $even_value_min_index = $even_value_index;\n\
    \    my $even_value_min_value = $smalest_even_value;\n    my $even_value_min_even_value\
    \ = $smalest_even_value;\n    my $even_value_min_index = 0;\n    foreach my $node\
    \ (@$arr) {\n        if ($node % 2 == 0) {\n            if ($even_value_min_even_value\
    \ < $node) {\n                $even_value_min_index = $even_value_index;\n   \
    \             $even_value_min_value = $even_value_min_even_value;\n          \
    \      $even_value_min_even_value = $node;\n            }\n            $even_value_index++;\n\
    \        }\n        $even_value_min_even_value = $node;\n    }\n    return [ $even_value_min_value,\
    \ $even_value_min_index ];\n}", "    my $min = $arr[0];\n    my $index = 0;\n\
    \    my $found = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            $found = 1;\n            if ($node < $min) {\n           \
    \     $min = $node;\n                $index = $node;\n            }\n        }\n\
    \    }\n    return $found ? [ $min, $index ] : [];\n}", "    my @res;\n    my\
    \ $min;\n    my $index;\n    my $value;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $even;\n    my $even_index;\n    foreach my $node (@$arr) {\n        $i++;\n\
    \        if ($node % 2 == 0) {\n            $even = $node;\n            $even_index\
    \ = $i;\n        }\n    }\n    if ($even) {\n        my $min_index = $i;\n   \
    \     my $min_value = $even;\n        my $min_even_index = $even_index;\n    \
    \    foreach my $node (@$arr) {\n            $j++;\n            if ($node % 2\
    \ == 0) {\n                if ($node < $min_value) {\n                    $min_value\
    \ = $node;\n                    $min_index = $j;\n                    $min_even_index\
    \ = $even_index;\n                }\n            }\n        }\n        push(@res,\
    \ $min_value, $min_even_index);\n    }\n    return @res;\n}", "    my $min;\n\
    \    my $index;\n    my $even;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $even_value;\n    my $index;\n   \
    \ my $even_value_index;\n    my $even_value_index2;\n    my $even_value_index3;\n\
    \    my $even_value_index4;\n    my $even_value_index5;\n    my $even_value_index6;\n\
    \    my $even_value_index7;\n    my $even_value_index8;\n    my $even_value_index9;\n\
    \    my $even_value_index10;\n    my $even_value_index11;\n    my $even_value_index12;\n\
    \    my $even_value_index13;\n    my $even_value_index14;\n    my $even_value_index15;\n\
    \    my $even_value_index16;\n    my $even_value_index17;\n    my $even_value_index18;\n\
    \    my $even_value_index19;\n    my $even_value_index20;\n    my $even_value_index21;\n\
    \    my $even_value_index22;\n    my $even_value_index23;\n    my $even_value_index24;\n\
    \    my $even_value_index25;\n    my $even_value_index26;\n    my $even_value_index27;\n\
    \    my $even_value_index28;\n    my $even_value_index29;\n    my $even_value_index30;\n\
    \    my $even_value_index31;\n    my $even_value_index32;\n    my $even_value_index33;\n\
    \    my $even_value_index34;\n    my $even_value_index35;\n    my $even_value_index36;\n\
    \    my $even_value_index37;\n    my $even_value_index38;\n    my $even_value_index39;\n\
    \    my $even_value_index40;\n    my $even_value_index41;\n    my $even_value_index42;\n\
    \    my $even_value_index43;\n    my $even_value_index44;\n    my $even_value_index45;\n\
    \    my $even_value_index46;\n    my $even_value_index47;\n    my $even_value_index48;\n\
    \    my $even_value_index49;\n    my $even_value_index50;\n    my $even_value_index51;\n\
    \    my $even_value_index52;\n    my $even_value_index53;\n    my $even_value_index54;\n\
    \    my $even_value_index55;\n    my $even_value_index56;\n    my $even_value_index57;\n\
    \    my $even_value_index58;\n    my $even_value_index59;\n    my $even_value_index60;\n\
    \    ", "    my $min = $arr[0];\n    my $index = 0;\n    my $smalest_value;\n\
    \    foreach my $i (0 .. $#arr) {\n        my $val = $arr[$i];\n        if ($val\
    \ % 2 == 0) {\n            if ($val < $min) {\n                $min = $val;\n\
    \                $index = $i;\n            }\n        }\n    }\n    if ($min ==\
    \ 0) {\n        return [];\n    }\n    return [ $min, $index ];\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $found;\n    for (my $i = 1; $i < @$arr;\
    \ $i++) {\n        if ($arr->[$i] % 2 == 0) {\n            $found = $i;\n    \
    \        $min = $arr->[$i];\n            $index = $i;\n        }\n    }\n    return\
    \ $found if $found;\n    return $min if $min == 0;\n    return $arr->[$index];\n\
    }", "    my @res;\n    my $min_even_val = -1;\n    my $min_even_pos = -1;\n  \
    \  my $min_even_pos2 = -1;\n    my $min_even_pos3 = -1;\n    my $min_even_pos4\
    \ = -1;\n    my $min_even_pos5 = -1;\n    my $min_even_pos6 = -1;\n    my $min_even_pos7\
    \ = -1;\n    my $min_even_pos8 = -1;\n    my $min_even_pos9 = -1;\n    my $min_even_pos10\
    \ = -1;\n    my $min_even_pos11 = -1;\n    my $min_even_pos12 = -1;\n    my $min_even_pos13\
    \ = -1;\n    my $min_even_pos14 = -1;\n    my $min_even_pos15 = -1;\n    my $min_even_pos16\
    \ = -1;\n    my $min_even_pos17 = -1;\n    my $min_even_pos18 = -1;\n    my $min_even_pos19\
    \ = -1;\n    my $min_even_pos20 = -1;\n    my $min_even_pos21 = -1;\n    my $min_even_pos22\
    \ = -1;\n    my $min_even_pos23 = -1;\n    my $min_even_pos24 = -1;\n    my $min_even_pos25\
    \ = -1;\n    my $min_even_pos26 = -1;\n    my $min_even_pos27 = -1;\n    my $min_even_pos28\
    \ = -1;\n    my $min_even_pos29 = -1;\n    my $min_even_pos30 = -1;\n    my $min_even_pos31\
    \ = -1;\n    my $min_even_pos32 = -1;\n    my $min_even_pos33 = -1;\n    my $min_even_pos34\
    \ = -1;\n    my $min_even_pos35 = -1;\n    my $min_even_pos36 = -1;\n    my $min_even_pos37\
    \ = -1;\n    my $min_even_pos38 = -1;\n    my $min_even_pos39 = -1;\n    my $min_even_pos40\
    \ = -1;\n    my $min_even_pos41 = -1;\n    my $min_even_pos42 = -1;\n    my $min_even_pos43\
    \ = -1;\n    my $min_even_pos44 = -1;\n    my $min_even_pos45 = -1;\n    my $min_even_pos46\
    \ = -1;\n    my $min_even_pos47 = -1;\n    my $min_even_pos48 = -1;\n    my $min_even_pos49\
    \ = -1;\n    my $min_even_pos50 = -1;\n    my $min_even_pos51 = -1;\n    my $min_",
  "    my $min = $arr[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach\
    \ my $i (0 .. $#arr) {\n        my $val = $arr[$i];\n        if ($val % 2 == 0)\
    \ {\n            if ($val < $min) {\n                $min = $val;\n          \
    \      $index = $i;\n            }\n        }\n    }\n    if ($min == 0) {\n \
    \       return [];\n    }\n    if ($min == $arr[0]) {\n        return [ $min,\
    \ $index ];\n    }\n    my $smalest_value_index = 0;\n    my $smalest_value_index2\
    \ = 0;\n    foreach my $i (0 .. $#arr) {\n        my $val = $arr[$i];\n      \
    \  if ($val % 2 == 0) {\n            if ($val < $min) {\n                $smalest_value\
    \ = $val;\n                $smalest_value_index = $i;\n            }\n       \
    \     if ($val == $smalest_value) {\n                $smalest_value_index2 = $i;\n\
    \            }\n        }\n    }\n    return [ $smalest_value, $smalest_value_index\
    \ ];\n}", "    my $index = 0;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $even_value;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            $even_value = $node;\n        }\n        if ($node < $smallest_value)\
    \ {\n            $smallest_value = $node;\n            $smallest_index = $index;\n\
    \        }\n        $index++;\n    }\n    if ($smallest_value == 0) {\n      \
    \  return [];\n    }\n    return [ $smallest_value, $smallest_index ];\n}", " \
    \   my $len = @$arr;\n    my $min = $arr->[0];\n    my $min_index = 0;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $even = 0;\n    my $even_index\
    \ = 0;\n    my $even_value = 0;\n    my $even_value_index = 0;\n    my $even_value_index2\
    \ = 0;\n    my $even_value_index3 = 0;\n    my $even_value_index4 = 0;\n    my\
    \ $even_value_index5 = 0;\n    my $even_value_index6 = 0;\n    my $even_value_index7\
    \ = 0;\n    my $even_value_index8 = 0;\n    my $even_value_index9 = 0;\n    my\
    \ $even_value_index10 = 0;\n    my $even_value_index11 = 0;\n    my $even_value_index12\
    \ = 0;\n    my $even_value_index13 = 0;\n    my $even_value_index14 = 0;\n   \
    \ my $even_value_index15 = 0;\n    my $even_value_index16 = 0;\n    my $even_value_index17\
    \ = 0;\n    my $even_value_index18 = 0;\n    my $even_value_index19 = 0;\n   \
    \ my $even_value_index20 = 0;\n    my $even_value_index21 = 0;\n    my $even_value_index22\
    \ = 0;\n    my $even_value_index23 = 0;\n    my $even_value_index24 = 0;\n   \
    \ my $even_value_index25 = 0;\n    my $even_value_index26 = 0;\n    my $even_value_index27\
    \ = 0;\n    my $even_value_index28 = 0;\n    my $even_value_index29 = 0;\n   \
    \ my $even_value_index30 = 0;\n    my $even_value_index31 = 0;\n    my $even_value_index32\
    \ = 0;\n    my $even_value_index33 = 0;\n    my $even_value_index34 = 0;\n   \
    \ my $even_value_index35 = 0;\n    my $even_value_index36 = 0;\n    my $even_value_index37\
    \ = 0;\n    my $even_value_index38 = 0;\n    my $even_value_index39 = 0;\n   \
    \ my $even_value_index40 = 0;\n    my $even_value_index41 = 0;\n    my $even_value_index42\
    \ = 0;\n    my $even_value_index43 = 0;\n    my $even_value_index44 = 0;\n   \
    \ my $even_value_index45 = 0;\n    my $even_value_index46 = 0;\n    my $even_value_index47\
    \ = 0;\n    my $even_value_index48 = 0;\n    my $even_value_index49 = 0;\n   \
    \ my $even_value_index50 = 0;\n    my $even_value_index51 = 0;\n    my $even_value_index52\
    \ = 0;\n    my $even_value_index53 = 0;\n    my $even_value_index54 = 0;\n   \
    \ my $even_value_index55 = 0;\n    my $even_value_index56 = 0;\n    my $even_value_index57\
    \ = 0;\n    my $even_value_index58 = 0;\n", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    my $even;\n    foreach my $val (@$arr) {\n        if ($val % 2 ==\
    \ 0) {\n            $even = $val;\n        }\n        if ($val < $min) {\n   \
    \         $min = $val;\n            $index = $even;\n        }\n    }\n    return\
    \ [ $min, $index ];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my\
    \ $even = 0;\n    foreach my $num (@$arr) {\n        if ($num % 2 == 0) {\n  \
    \          $even++;\n        }\n        if ($num < $min) {\n            $min =\
    \ $num;\n            $index = $even;\n        }\n    }\n    return [ $min, $index\
    \ ];\n}", "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n   \
    \ foreach my $node (@$arr) {\n        if ($min == -1 || $min > $node) {\n    \
    \        $min = $node;\n            $min_index = $node;\n        }\n        elsif\
    \ ($node == $min) {\n            $min_index = $node;\n        }\n    }\n    return\
    \ [$smalest_value, $min_index];\n}", "    my $min = $arr[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    foreach my $val (@$arr) {\n        if ($val %\
    \ 2 == 0) {\n            if ($val < $min) {\n                $min = $val;\n  \
    \              $min_index = $index;\n            }\n            $index++;\n  \
    \      }\n    }\n    return [ $min, $min_index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $result;", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    my $found = 0;\n    foreach my $n (@$arr) {\n        if ($n % 2 ==\
    \ 0) {\n            if ($min > $n) {\n                $min = $n;\n           \
    \     $index = $found;\n            }\n            $found++;\n        }\n    }\n\
    \    return [$min, $index];\n}", "    my $min = -1;\n    my $min_index;\n    my\
    \ $smalest_value;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n\
    \            if ($min == -1 || $val < $smalest_value) {\n                $min\
    \ = $val;\n                $min_index = $_;\n                $smalest_value =\
    \ $val;\n            }\n        }\n    }\n    if ($min != -1) {\n        return\
    \ [$smalest_value, $min_index];\n    }\n    return [];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $found = 0;\n    foreach my $i (0 .. $#arr) {\n  \
    \      if ($arr[$i] % 2 == 0) {\n            $found = 1;\n            if ($min\
    \ > $arr[$i]) {\n                $min = $arr[$i];\n                $index = $i;\n\
    \            }\n        }\n    }\n    return $found ? [ $min, $index ] : [];\n\
    }", "    my $index = 0;\n    my $smalest_value = $arr[0];\n    my $smalest_index\
    \ = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    if ($smalest_value eq $val) {\n                $smalest_index = $index;\n\
    \            }\n            else {\n                $smalest_value = $val;\n \
    \               $smalest_index = $index;\n            }\n        }\n        $index++;\n\
    \    }\n    return [ $smalest_value, $smalest_index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $even;\n    my $even_index;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            $even = $val;\n            $even_index\
    \ = $index;\n        }\n        $index++;\n    }\n    if ($even) {\n        return\
    \ [ $even, $even_index ];\n    }\n    return [];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $found = 0;\n    foreach my $n (@$arr) {\n       \
    \ if ($n % 2 == 0) {\n            $found = 1;\n            if ($n < $min) {\n\
    \                $min = $n;\n                $index = $found;\n            }\n\
    \        }\n    }\n    return $found ? [$min, $index] : [];\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n        if\
    \ ($val % 2 == 0) {\n            if ($val < $min) {\n                $min = $val;\n\
    \                $index = $arr->[$index];\n            }\n        }\n    }\n \
    \   return [ $min, $index ];\n}", "    my $min = $arr[0];\n    my $min_index =\
    \ 0;\n    my $index = 0;\n    my $even_value = 0;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $even_value = $node;\n       \
    \ }\n        if ($node < $min) {\n            $min = $node;\n            $min_index\
    \ = $index;\n        }\n        $index++;\n    }\n    if ($min_index == 0) {\n\
    \        return [];\n    }\n    return [ $even_value, $min_index ];\n}", "   \
    \ my $len = @$arr;\n    my $index = 0;\n    my $min = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $even_value;\n    my $even_index;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $even;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n", "    my $min = $arr[0];\n    my $index = 0;\n    my $even;\n\
    \    my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2\
    \ == 0) {\n            $even = $node;\n        }\n        if ($node < $min) {\n\
    \            $min = $node;\n            $index = $even;\n        }\n    }\n  \
    \  return $smalest_value if $smalest_value && $smalest_value < $min;\n    return\
    \ $index if $smalest_value && $smalest_value < $min;\n    return [];\n}", "  \
    \  my %hash;\n    my $index = 0;\n    my $value;\n    foreach my $val (@$arr)\
    \ {\n        if ($val eq 0) {\n            $value = $val;\n            $hash{$val}\
    \ = $index;\n        }\n        elsif ($hash{$val} eq 0) {\n            $value\
    \ = $val;\n            $hash{$val} = $index;\n        }\n        elsif ($hash{$val}\
    \ < $hash{$value}) {\n            $value = $val;\n            $hash{$val} = $index;\n\
    \        }\n        $index++;\n    }\n    return ($value, $hash{$value});\n}",
  "    my $min = $arr->[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n \
    \       if ($val % 2 == 0) {\n            if ($val < $min) {\n               \
    \ $min = $val;\n                $index = $arr->[$index];\n            }\n    \
    \    }\n    }\n    return $min if $min != 0;\n    return [];\n}", "    my @res;\n\
    \    my $min;\n    my $index;\n    my $value;\n    my $even;\n    foreach my $node\
    \ (@$arr) {\n        $value = $node;\n        $index = 0;\n        $min = $node;\n\
    \        $even = 0;\n        foreach my $n (@$arr) {\n            if ($n != $node\
    \ and $n % 2 == 0) {\n                $even++;\n                if ($n < $min)\
    \ {\n                    $min = $n;\n                    $index = $n;\n      \
    \          }\n            }\n        }\n        if ($even > 0) {\n           \
    \ push(@res, [\"$min\", $index]);\n        }\n    }\n    return @res;\n}", " \
    \   my $min = -1;\n    my $min_index;\n    my $index;\n    my $value;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $value = $node;\n\
    \            $index = $node;\n        }\n        else {\n            if ($node\
    \ < $min) {\n                $min = $node;\n                $min_index = $index;\n\
    \            }\n        }\n    }\n    return [$min, $min_index];\n}", "    my\
    \ $index = 0;\n    my $smalest_value;\n    my $smalest_index;\n    foreach my\
    \ $node (@$arr) {\n        if ($node % 2 == 0) {\n            $smalest_value =\
    \ $node;\n            $smalest_index = $index;\n        }\n        $index++;\n\
    \    }\n    if ($smalest_value eq 0) {\n        return [];\n    }\n    return\
    \ [ $smalest_value, $smalest_index ];\n}", "    my $min = -1;\n    my $index =\
    \ 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n        \
    \    if ($min == -1) {\n                $min = $node;\n                $index\
    \ = $node;\n            } else {\n                if ($node < $min) {\n      \
    \              $min = $node;\n                    $index = $node;\n          \
    \      }\n            }\n        }\n    }\n    return [$min, $index];\n}", " \
    \   my $min = $arr[0];\n    my $index = 0;\n    my $even;\n    foreach my $n (@$arr)\
    \ {\n        if ($n % 2 == 0) {\n            $even = $n;\n        }\n        if\
    \ ($n < $min) {\n            $min = $n;\n            $index = $even;\n       \
    \ }\n    }\n    return [ $min, $index ];\n}", "    my $min = $arr[0];\n    my\
    \ $index = 0;\n    my $even;\n    foreach my $i (@$arr) {\n        if ($i % 2\
    \ == 0) {\n            $even = $i;\n        }\n        if ($i == $min) {\n   \
    \         $index = $i;\n        }\n        if ($i == $min && $even < $i) {\n \
    \           $min = $i;\n            $index = $i;\n        }\n    }\n    return\
    \ [$min, $index];\n}", "    my @res;\n    my $min = $arr[0];\n    my $min_index\
    \ = 0;\n    my $i;\n    my $j;\n    for ($i = 0; $i < @$arr; $i++) {\n       \
    \ if ($arr[$i] % 2 == 0) {\n            $min = $arr[$i];\n            $min_index\
    \ = $i;\n        }\n    }\n    for ($i = 0; $i < @$arr; $i++) {\n        if ($arr[$i]\
    \ % 2 == 0) {\n            $j = $i;\n            while ($j < @$arr && $arr[$j]\
    \ % 2 == 0) {\n                $j++;\n            }\n            $res[$i] = $arr[$j];\n\
    \            $res[$i] = $arr[$i];\n        }\n    }\n    return @res;\n}", " \
    \   my $min = $arr->[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n\
    \        if ($val & 1) {\n            if ($val < $min) {\n                $min\
    \ = $val;\n                $index = $arr->[$index];\n            }\n        }\n\
    \    }\n    return [ $min, $index ];\n}", "    my $min = -1;\n    my $min_index\
    \ = 0;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            $smalest_value = $node;\n            $min_index = $min;\n\
    \        }\n        elsif ($node < $min) {\n            $min = $node;\n      \
    \      $min_index = $min_index;\n        }\n    }\n    return [ $smalest_value,\
    \ $min_index ];\n}", "    my @res;\n    my $min = $arr[0];\n    my $index = 0;\n\
    \    my $flag = 0;\n    foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n\
    \            if ($flag == 0) {\n                $min = $n;\n                $index\
    \ = $flag;\n                $flag = 1;\n            }\n            else {\n  \
    \              if ($n < $min) {\n                    $min = $n;\n            \
    \        $index = $flag;\n                }\n            }\n        }\n      \
    \  else {\n            $flag = 0;\n        }\n    }\n    push(@res, [\"$min\"\
    , \"$index\"]);\n    return @res;\n}", "    my @res;\n    my $min;\n    my $index;\n\
    \    my $value;\n    my $i = 0;\n    my $j = 0;\n    my $even;\n    my $even_index;\n\
    \    foreach my $val (@$arr) {\n        $i++;\n        if ($val % 2 == 0) {\n\
    \            $even = $val;\n            $even_index = $i;\n        }\n    }\n\
    \    if ($even) {\n        $min = $even;\n        $index = $even_index;\n    }\n\
    \    else {\n        $min = 9999;\n        $index = 0;\n    }\n    foreach my\
    \ $val (@$arr) {\n        $j++;\n        if ($val % 2 == 0) {\n            if\
    \ ($val < $min) {\n                $min = $val;\n                $index = $j;\n\
    \            }\n        }\n    }\n    if ($min == 9999) {\n        return [];\n\
    \    }\n    else {\n        return [$min, $index];\n    }\n}", "    my $len =\
    \ @$arr;\n    my $min = $arr->[0];\n    my $min_index = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $i;\n    my $j;\n    my $k;\n    my $result;\n\
    \    \n    for($i = 0; $i < $len; $i++) {\n        for($j = 0; $j < $len; $j++)\
    \ {\n            for($k = 0; $k < $len; $k++) {\n                if($arr->[$i]\
    \ % 2 == 0 && $arr->[$j] % 2 == 0 && $arr->[$k] % 2 == 0) {\n                \
    \    if($arr->[$i] < $min) {\n                        $min = $arr->[$i];\n   \
    \                     $min_index = $i;\n                    }\n              \
    \      if($arr->[$j] < $min) {\n                        $min = $arr->[$j];\n \
    \                       $min_index = $j;\n                    }\n            \
    \        if($arr->[$k] < $min) {\n                        $min = $arr->[$k];\n\
    \                        $min_index = $k;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    \n    if($min == 0) {\n        $result\
    \ = [];\n    } else {\n        $result = [ $min, $min_index ];\n    }\n    \n\
    \    return $result;\n}", "    my $min_value = $arr[0];\n    my $min_index = 0;\n\
    \    my $index = 0;\n    my $even_value = 0;\n    foreach my $val (@$arr) {\n\
    \        if ($val % 2 == 0) {\n            $even_value = $val;\n        }\n  \
    \      if ($val < $min_value) {\n            $min_value = $val;\n            $min_index\
    \ = $index;\n        }\n        $index++;\n    }\n    if ($even_value == 0) {\n\
    \        return [];\n    }\n    return [ $even_value, $min_index ];\n}", "   \
    \ my $min = $arr[0];\n    my $index = 0;\n    my $even;\n    foreach my $n (@$arr)\
    \ {\n        if ($n % 2 == 0) {\n            $even = $n;\n        }\n        if\
    \ ($n < $min) {\n            $min = $n;\n            $index = $even;\n       \
    \ }\n    }\n    return [ $min, $index ];\n}", "    my $min = $arr[0];\n    my\
    \ $index = 0;\n    foreach my $i (@$arr) {\n        if ($i % 2 == 0) {\n     \
    \       $min = $i;\n            $index = $i;\n        }\n    }\n    return [ $min,\
    \ $index ];\n}", "    my ($i, $j, $min, $min_index);\n    my $len = @$arr;\n \
    \   my $even;\n    my $index;\n    my $smalest_value;\n    my $smallest_index;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n \
    \   my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n  \
    \  my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n   \
    \ my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n    my\
    \ $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n \
    \   my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n  \
    \  my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n   \
    \ my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n    my\
    \ $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n \
    \   my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n  \
    \  my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n   \
    \ my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n    my\
    \ $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n \
    \   my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n  \
    \  my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n   \
    \ my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n    my\
    \ $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n \
    \   my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n  \
    \  my $smallest_value;\n    my $smallest_index;\n    my $smallest_value;\n   \
    \ my $smallest_index;\n    my $smallest_value;\n    my $smallest_index;\n    my\
    \ $smallest_value;\n    my $smallest_index;\n    ", "    my ($i, $j, $min, $min_index);\n\
    \    my $len = @$arr;\n    my $even;\n    my $index;\n    my $temp;\n    my $even_index;\n\
    \    my $temp_index;\n    my $temp_even;\n    my $temp_even_index;\n    my $temp_min;\n\
    \    my $temp_min_index;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    ", "    my $min = -1;\n    my $index;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($min == -1\
    \ || $val < $min) {\n                $min = $val;\n                $index = $arr->index($val);\n\
    \            }\n        }\n    }\n    if ($min == -1) {\n        return [];\n\
    \    }\n    return [ $min, $index ];\n}", "    my $min_value = $arr[0];\n    my\
    \ $min_index = 0;\n    my $index = 0;\n    foreach my $val (@$arr) {\n       \
    \ if ($val % 2 == 0) {\n            if ($val < $min_value) {\n               \
    \ $min_value = $val;\n                $min_index = $index;\n            }\n  \
    \          $index++;\n        }\n    }\n    return [ $min_value, $min_index ];\n\
    }", "    my $min_even_value = 0;\n    my $min_even_index = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $i;\n    my $j;\n    my $k;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_values;\n    my $even_indexes;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_index", "    my $min = $arr[0];\n    my\
    \ $index = 0;\n    foreach my $i (0 .. $#arr) {\n        if ($arr[$i] % 2 == 0)\
    \ {\n            if ($arr[$i] < $min) {\n                $min = $arr[$i];\n  \
    \              $index = $i;\n            }\n        }\n    }\n    return [ $min,\
    \ $index ];\n}", "    my $min = -1;\n    my $min_index;\n    my $index;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            $min = $val if\
    \ $min == -1 || $min > $val;\n            $min_index = $index if $min_index ==\
    \ -1 || $min_index > $index;\n            $index++;\n        }\n    }\n    return\
    \ $min == -1 ? [] : [ $min, $min_index ];\n}", "    my $min = -1;\n    my $min_index;\n\
    \    my $index;\n    my $value;\n    my $even;\n    foreach my $n (@$arr) {\n\
    \        $index = 0;\n        $value = $n;\n        $even = 0;\n        foreach\
    \ my $i (0 .. $#$arr) {\n            if ($arr->[$i] % 2 == 0) {\n            \
    \    $even = 1;\n            }\n            if ($arr->[$i] < $value) {\n     \
    \           $value = $arr->[$i];\n                $index = $i;\n            }\n\
    \        }\n        if ($even && $value < $min) {\n            $min = $value;\n\
    \            $min_index = $index;\n        }\n    }\n    return $min_index ? ($min,\
    \ $min_index) : ();\n}", "    my $min = -1;\n    my $index;\n    my $smalest_value;\n\
    \    foreach my $n (@$arr) {\n        if ($n =~ /^0/) {\n            $smalest_value\
    \ = $n;\n            $index = $n;\n        } elsif ($n =~ /^2/) {\n          \
    \  if ($min == -1 || $min > $n) {\n                $min = $n;\n              \
    \  $index = $n;\n            }\n        }\n    }\n    return $smalest_value, $index;\n\
    }", "    my $min_value = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n\
    \    my $even_value = 0;\n    my $even_index = 0;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            $even_value = $val;\n         \
    \   $even_index = $index;\n        }\n        $index++;\n        if ($val < $min_value)\
    \ {\n            $min_value = $val;\n            $min_index = $index;\n      \
    \  }\n    }\n    if ($even_value == 0) {\n        return [];\n    }\n    return\
    \ [ $even_value, $even_index ];\n}", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $even = 0;\n    foreach my $num (@$arr) {\n        if ($num % 2\
    \ == 0) {\n            $even++;\n        }\n        if ($even < $min) {\n    \
    \        $min = $even;\n            $index = $num;\n        }\n    }\n    return\
    \ [ $min, $index ];\n}", "    my $min_value = $arr[0];\n    my $min_idx = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $even_value = 0;\n    my $even_idx = 0;\n\
    \    my $even_values = ();\n    my $even_idxs = ();\n    my $even_values_count\
    \ = ();\n    my $even_idxs_count = ();\n    my $even_values_count_max = 0;\n \
    \   my $even_idxs_count_max = 0;\n    my $even_values_count_max_idx = 0;\n   \
    \ my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n \
    \   my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;\n\
    \    my $even_idxs_count_max_idx = 0;\n    my $even_values_count_max_idx = 0;",
  "    my $min_value = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min_value)\
    \ {\n                $min_value = $val;\n                $min_index = $index;\n\
    \            }\n            $index++;\n        }\n    }\n    return [ $min_value,\
    \ $min_index ];\n}", "    my $min = $arr[0];\n    my $index = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val & 1) {\n            if ($val < $min) {\n\
    \                $min = $val;\n                $index = $index;\n            }\n\
    \        }\n    }\n    return [ $min, $index ];\n}", "    my $min = -1;\n    my\
    \ $min_index;\n    my $index;\n    my $value;\n    foreach my $n (@$arr) {\n \
    \       if ($n =~ /^0$/) {\n            $min_index = $index;\n            $min\
    \ = $n;\n        }\n        elsif ($n =~ /^2$/) {\n            $min_index = $index;\n\
    \            $min = $n;\n        }\n        elsif ($n =~ /^1$/) {\n          \
    \  $min_index = $index;\n            $min = $n;\n        }\n        elsif ($n\
    \ =~ /^3$/) {\n            $min_index = $index;\n            $min = $n;\n    \
    \    }\n        elsif ($n =~ /^4$/) {\n            $min_index = $index;\n    \
    \        $min = $n;\n        }\n        elsif ($n =~ /^5$/) {\n            $min_index\
    \ = $index;\n            $min = $n;\n        }\n        elsif ($n =~ /^6$/) {\n\
    \            $min_index = $index;\n            $min = $n;\n        }\n       \
    \ elsif ($n =~ /^7$/) {\n            $min_index = $index;\n            $min =\
    \ $n;\n        }\n        elsif ($n =~ /^8$/) {\n            $min_index = $index;\n\
    \            $min = $n;\n        }\n        elsif ($n =~ /^9$/) {\n          \
    \  $min_index = $index;\n            $min = $n;\n        }\n        elsif ($n\
    \ =~ /^10$/) {\n            $min_index = $index;\n            $min = $n;\n   \
    \     }\n        elsif ($n =~ /^11$/) {\n            $min_index = $index;\n  \
    \          $min = $n;\n        }\n        elsif ($n =~ /^12$/) {\n           \
    \ $min_index = $index;\n            $min = $n;\n        }\n        elsif ($n =~\
    \ /^13$/) {\n            $min_index = $index;\n            $min = $n;\n      \
    \  }\n        elsif ($n =~ /^14$/) {\n            $min_index = $index;\n     \
    \       $min = $n;\n        }\n        elsif ($n =~ /^15$/) {\n            $min_index\
    \ = $index;\n            $min = $n;\n        }\n        elsif ($n =~ /^16$/) {\n\
    \            $min_index = $index;\n            $min = $n;\n        }\n       \
    \ elsif ($n =~ /^17$/) {\n            $min_index = $index;\n            $min =\
    \ $n;\n        }\n        elsif ($n =~ /^18$/) {\n            $min_index = $",
  "    my $min = $arr[0];\n    my $index = 0;\n    my $i = 0;\n    while($i < @$arr)\
    \ {\n        if($arr[$i] % 2 == 0) {\n            $min = $arr[$i];\n         \
    \   $index = $i;\n        }\n        $i++;\n    }\n    return [$min, $index];\n\
    }", "    my $min_value = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n\
    \    my $even_value = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2\
    \ == 0) {\n            $even_value = $val;\n        }\n        if ($val < $min_value)\
    \ {\n            $min_value = $val;\n            $min_index = $index;\n      \
    \  }\n        $index++;\n    }\n    if ($even_value == 0) {\n        return [];\n\
    \    }\n    if ($even_value == $min_value) {\n        return [ $even_value, $min_index\
    \ ];\n    }\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $even_value2\
    \ = 0;\n    my $even_value3 = 0;\n    my $even_value4 = 0;\n    my $even_value5\
    \ = 0;\n    my $even_value6 = 0;\n    my $even_value7 = 0;\n    my $even_value8\
    \ = 0;\n    my $even_value9 = 0;\n    my $even_value10 = 0;\n    my $even_value11\
    \ = 0;\n    my $even_value12 = 0;\n    my $even_value13 = 0;\n    my $even_value14\
    \ = 0;\n    my $even_value15 = 0;\n    my $even_value16 = 0;\n    my $even_value17\
    \ = 0;\n    my $even_value18 = 0;\n    my $even_value19 = 0;\n    my $even_value20\
    \ = 0;\n    my $even_value21 = 0;\n    my $even_value22 = 0;\n    my $even_value23\
    \ = 0;\n    my $even_value24 = 0;\n    my $even_value25 = 0;\n    my $even_value26\
    \ = 0;\n    my $even_value27 = 0;\n    my $even_value28 = 0;\n    my $even_value29\
    \ = 0;\n    my $even_value30 = 0;\n    my $even_value31 = 0;\n    my $even_value32\
    \ = 0;\n    my $even_value33 = 0;\n    my $even_value34 = 0;\n    my $even_value35\
    \ = 0;\n    my $even_value36 = 0;\n    my $even_value37 = 0;\n    my $even_value38\
    \ = 0;\n    my $even_value39 = 0;\n    my $even_value40 = 0;\n    my $even_value41\
    \ = 0;\n    my $even_value42 = 0;\n    my $even_value43 = 0;\n    my $even_value44\
    \ = 0;\n    my $even_value45 = 0;\n    my $even_value46 = 0;\n    my $even_value47\
    \ = 0;\n    my $even_value48 = 0;\n    my $even_value49 = 0;\n    my $even_value50\
    \ = 0;\n    my $even_value51 = 0;\n    my $even_value52 = 0;\n    my $even_value53\
    \ = 0;\n    my $even_value54 = 0;\n    my $even_value55 = 0;\n    my $even_value56\
    \ = 0;\n    my $even_value57", "    my $min = -1;\n    my $min_index;\n    my\
    \ $smalest_value;\n    my $index;\n    foreach my $node (@$arr) {\n        if\
    \ ($node % 2 == 0) {\n            if ($min == -1 || $node < $smalest_value) {\n\
    \                $min = $node;\n                $min_index = $index;\n       \
    \         $smalest_value = $node;\n            }\n            else {\n       \
    \         if ($node < $min) {\n                    $min = $node;\n           \
    \         $min_index = $index;\n                }\n            }\n        }\n\
    \        else {\n            $index++;\n        }\n    }\n    return $min == -1\
    \ ? [] : [ $smalest_value, $min_index ];\n}", "    my $min = -1;\n    my $min_index;\n\
    \    my $smalest_value;\n    foreach my $i (0..$#{$arr}) {\n        my $val =\
    \ $arr->[$i];\n        if ($val % 2 == 0) {\n            if ($min == -1 || $val\
    \ < $smalest_value) {\n                $min = $val;\n                $min_index\
    \ = $i;\n                $smalest_value = $val;\n            }\n        }\n  \
    \  }\n    return $min == -1 ? [] : [ $smalest_value, $min_index ];\n}", "    my\
    \ $min_value = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n    my $even_value\
    \ = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    $even_value = $val;\n        }\n        if ($val < $min_value) {\n      \
    \      $min_value = $val;\n            $min_index = $index;\n        }\n     \
    \   $index++;\n    }\n    return [$min_value, $min_index];\n}", "    my $min_value\
    \ = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n    my $even_value =\
    \ 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n          \
    \  $even_value = $val;\n        }\n        if ($val < $min_value) {\n        \
    \    $min_value = $val;\n            $min_index = $index;\n        }\n       \
    \ $index++;\n    }\n    if ($even_value == 0) {\n        return [];\n    }\n \
    \   my $result = [];\n    my $index = 0;\n    foreach my $val (@$arr) {\n    \
    \    if ($val == $even_value) {\n            $result->[$index] = $val;\n     \
    \   }\n        $index++;\n    }\n    return $result;\n}", "    my $min = -1;\n\
    \    my $min_index = 0;\n    my $smalest_value;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $smalest_value = $node;\n    \
    \        $min_index = $min;\n        }\n        if ($node < $min) {\n        \
    \    $min = $node;\n            $min_index = $min_index;\n        }\n    }\n \
    \   return $smalest_value, $min_index;\n}", "    my @result;\n    my $min;\n \
    \   my $index;\n    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n\
    \    my $min_index;\n    my $min_value;\n    my $found;\n    my $index;\n    my\
    \ $value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $found;\n    my $index;\n    my $value;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $found;\n    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n    my $found;\n\
    \    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n\
    \    my $min_index;\n    my $min_value;\n    my $found;\n    my $index;\n    my\
    \ $value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $found;\n    my $index;\n    my $value;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $found;\n    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n    my $found;\n\
    \    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n\
    \    my $min_index;\n    my $min_value;\n    my $found;\n    my $index;\n    my\
    \ $value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $found;\n    my $index;\n    my $value;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $found;\n    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n    my $found;",
  "    my ($i, $j, $smallest, @result);\n    my $len = @$arr;\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $smallest = $i;\n        for ($j = $i + 1; $j < $len;\
    \ $j++) {\n            if ($arr[$i] % 2 != 0 && $arr[$j] % 2 == 0) {\n       \
    \         $smallest = $j if $arr[$j] < $arr[$smallest];\n            }\n     \
    \   }\n        if ($smallest != $i) {\n            push(@result, $arr[$smallest],\
    \ $smallest);\n        }\n    }\n    return @result;\n}", "    my $min = $arr->[0];\n\
    \    my $min_index = 0;\n    my $index;\n    foreach my $i (0 .. $#{$arr}) {\n\
    \        my $val = $arr->[$i];\n        if ($val % 2 == 0) {\n            if ($val\
    \ < $min) {\n                $min = $val;\n                $min_index = $i;\n\
    \            }\n        }\n    }\n    return [ $min, $min_index ];\n}", "    my\
    \ ($i, $j, $min, $min_index);\n    my $len = @$arr;\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $min = $arr->[$i];\n        $min_index = $i;\n        for ($j\
    \ = $i + 1; $j < $len; $j++) {\n            if ($arr->[$j] >= $min) {\n      \
    \          $min = $arr->[$j];\n                $min_index = $j;\n            }\n\
    \        }\n        if ($min % 2 == 0) {\n            $arr->[$min_index] = $min;\n\
    \        }\n    }\n    return @$arr;\n}", "    my $min = $arr[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    foreach my $val (@$arr) {\n        if ($val %\
    \ 2 == 0) {\n            if ($val < $min) {\n                $min = $val;\n  \
    \              $min_index = $index;\n            }\n            $index++;\n  \
    \      }\n    }\n    return [ $min, $min_index ];\n}", "    my $min = -1;\n  \
    \  my $min_index;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0)\
    \ {\n            if ($min == -1 || $node < $min) {\n                $min = $node;\n\
    \                $min_index = $node;\n            }\n        }\n    }\n    if\
    \ ($min != -1) {\n        return [ $min, $min_index ];\n    }\n    return [];\n\
    }", "    my $min = $arr[0];\n    my $index = 0;\n    my $even = 0;\n    foreach\
    \ my $n (@$arr) {\n        if ($n % 2 == 0) {\n            $even++;\n        }\n\
    \        if ($even < $min) {\n            $min = $even;\n            $index =\
    \ $n;\n        }\n    }\n    return [ $min, $index ];\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $even = 0;\n    foreach my $val (@$arr) {\n      \
    \  if ($val % 2 == 0) {\n            $even++;\n        }\n        if ($val < $min)\
    \ {\n            $min = $val;\n            $index = $even;\n        }\n    }\n\
    \    return $min, $index;\n}", "    my $len = @$arr;\n    my $smalest_value =\
    \ $arr->[0];\n    my $smalest_index = 0;\n    my $smalest_even_value = 0;\n  \
    \  my $smalest_even_index = 0;\n    my $smalest_even_index_count = 0;\n    my\
    \ $smalest_even_value_count = 0;\n    my $smalest_even_value_count2 = 0;\n   \
    \ my $smalest_even_value_count3 = 0;\n    my $smalest_even_value_count4 = 0;\n\
    \    my $smalest_even_value_count5 = 0;\n    my $smalest_even_value_count6 = 0;\n\
    \    my $smalest_even_value_count7 = 0;\n    my $smalest_even_value_count8 = 0;\n\
    \    my $smalest_even_value_count9 = 0;\n    my $smalest_even_value_count10 =\
    \ 0;\n    my $smalest_even_value_count11 = 0;\n    my $smalest_even_value_count12\
    \ = 0;\n    my $smalest_even_value_count13 = 0;\n    my $smalest_even_value_count14\
    \ = 0;\n    my $smalest_even_value_count15 = 0;\n    my $smalest_even_value_count16\
    \ = 0;\n    my $smalest_even_value_count17 = 0;\n    my $smalest_even_value_count18\
    \ = 0;\n    my $smalest_even_value_count19 = 0;\n    my $smalest_even_value_count20\
    \ = 0;\n    my $smalest_even_value_count21 = 0;\n    my $smalest_even_value_count22\
    \ = 0;\n    my $smalest_even_value_count23 = 0;\n    my $smalest_even_value_count24\
    \ = 0;\n    my $smalest_even_value_count25 = 0;\n    my $smalest_even_value_count26\
    \ = 0;\n    my $smalest_even_value_count27 = 0;\n    my $smalest_even_value_count28\
    \ = 0;\n    my $smalest_even_value_count29 = 0;\n    my $smalest_even_value_count30\
    \ = 0;\n    my $smalest_even_value_count31 = 0;\n    my $smalest_even_value_count32\
    \ = 0;\n    my $smalest_even_value_count33 = 0;\n    my $smalest_even_value_count34\
    \ = 0;\n    my $smalest_even_value_count35 = 0;\n    my $smalest_even_value_count36\
    \ = 0;\n    my $smalest_even_value_count37 = 0;\n    my $smalest_even_value_count38\
    \ = 0;\n    my $smalest_even_value_count39 = 0;\n    my $smalest_even_value_count40\
    \ = 0;\n    my $smalest_even_value_count41 = 0;\n    my $smalest_even_value_count42\
    \ = 0;\n    ", "    my @res;\n    my $min;\n    my $index;\n    my $value;\n \
    \   my $i = 0;\n    my $j = 0;\n    my $even;\n    my $even_index;\n    my $even_value;\n\
    \    foreach my $val (@$arr) {\n        $i++;\n        if ($val % 2 == 0) {\n\
    \            $even = $val;\n            $even_index = $i;\n            $even_value\
    \ = $val;\n        }\n    }\n    if ($even) {\n        $min = $even_value;\n \
    \       $index = $even_index;\n    } else {\n        $min = 9999;\n        $index\
    \ = 0;\n    }\n    foreach my $val (@$arr) {\n        if ($val < $min) {\n   \
    \         $min = $val;\n            $index = $i;\n        }\n        $i++;\n \
    \   }\n    if ($min == 9999) {\n        return [];\n    }\n    push @res, $min,\
    \ $index;\n    return @res;\n}", "    my $min = -1;\n    my $min_index;\n    my\
    \ $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0)\
    \ {\n            $smalest_value = $node;\n            $min_index = $min;\n   \
    \     }\n        elsif ($node < $min) {\n            $min = $node;\n         \
    \   $min_index = $min_index;\n        }\n    }\n    return [ $smalest_value, $min_index\
    \ ];\n}", "    my $min_value = $arr[0];\n    my $min_idx = 0;\n    my $max_idx\
    \ = 0;\n    my $max_value = $arr[0];\n    my $max_even_value = 0;\n    my $even_value\
    \ = 0;\n    my $even_idx = 0;\n    my $even_idx_count = 0;\n    my $even_idx_sum\
    \ = 0;\n    my $even_idx_sum2 = 0;\n    my $even_idx_sum3 = 0;\n    my $even_idx_sum4\
    \ = 0;\n    my $even_idx_sum5 = 0;\n    my $even_idx_sum6 = 0;\n    my $even_idx_sum7\
    \ = 0;\n    my $even_idx_sum8 = 0;\n    my $even_idx_sum9 = 0;\n    my $even_idx_sum10\
    \ = 0;\n    my $even_idx_sum11 = 0;\n    my $even_idx_sum12 = 0;\n    my $even_idx_sum13\
    \ = 0;\n    my $even_idx_sum14 = 0;\n    my $even_idx_sum15 = 0;\n    my $even_idx_sum16\
    \ = 0;\n    my $even_idx_sum17 = 0;\n    my $even_idx_sum18 = 0;\n    my $even_idx_sum19\
    \ = 0;\n    my $even_idx_sum20 = 0;\n    my $even_idx_sum21 = 0;\n    my $even_idx_sum22\
    \ = 0;\n    my $even_idx_sum23 = 0;\n    my $even_idx_sum24 = 0;\n    my $even_idx_sum25\
    \ = 0;\n    my $even_idx_sum26 = 0;\n    my $even_idx_sum27 = 0;\n    my $even_idx_sum28\
    \ = 0;\n    my $even_idx_sum29 = 0;\n    my $even_idx_sum30 = 0;\n    my $even_idx_sum31\
    \ = 0;\n    my $even_idx_sum32 = 0;\n    my $even_idx_sum33 = 0;\n    my $even_idx_sum34\
    \ = 0;\n    my $even_idx_sum35 = 0;\n    my $even_idx_sum36 = 0;\n    my $even_idx_sum37\
    \ = 0;\n    my $even_idx_sum38 = 0;\n    my $even_idx_sum39 = 0;\n    my $even_idx_sum40\
    \ = 0;\n    my $even_idx_sum41 = 0;\n    my $even_idx_sum42 = 0;\n    my $even_idx_sum43\
    \ = 0;\n    my $even_idx_sum44 = 0;\n    my $even_idx_sum45 = 0;\n    my $even_idx_sum46\
    \ = 0;\n    my $even_idx_sum47 = 0;\n    my $even_idx_sum48 = 0;\n    my $even_idx_sum49\
    \ = 0;\n    my $even_idx_sum50 = 0;\n    my $even_idx_sum51 = 0;\n    my $even_idx_sum52\
    \ = 0;\n    my $even_idx_sum53 = 0;\n    my $even_idx_sum54 = 0;\n    my $even_idx_sum55\
    \ = 0;\n    my $even_idx_sum56 = 0;\n    my $even_idx_sum57 = 0;\n    my $even_idx_sum58\
    \ = 0;\n", "    my $min = $arr->[0];\n    my $min_index = 0;\n    my $index =\
    \ 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n        \
    \    if ($node < $min) {\n                $min = $node;\n                $min_index\
    \ = $index;\n            }\n            $index++;\n        }\n    }\n    return\
    \ [ $min, $min_index ];\n}", "    my $min = $arr[0];\n    my $index = 0;\n   \
    \ my $even;\n    foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n       \
    \     $even = $n;\n        }\n        if ($n < $min) {\n            $min = $n;\n\
    \            $index = $n;\n        }\n    }\n    if ($even) {\n        return\
    \ [ $even, $index ];\n    }\n    return [];\n}", "    my $min = $arr[0];\n   \
    \ my $index = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n\
    \            $min = $val if $val < $min;\n            $index++;\n        }\n \
    \   }\n    return [$min, $index] if $min != 0;\n    return [];\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $even = 0;\n    foreach my $n (@$arr)\
    \ {\n        if ($n % 2 == 0) {\n            $even++;\n            if ($even >\
    \ $min) {\n                $min = $even;\n                $index = $n;\n     \
    \       }\n        }\n    }\n    return [ $min, $index ];\n}", "    my $min =\
    \ $arr->[0];\n    my $min_index = 0;\n    my $i = 0;\n    while($i < @$arr) {\n\
    \        if($arr->[$i] % 2 == 0) {\n            if($arr->[$i] < $min) {\n    \
    \            $min = $arr->[$i];\n                $min_index = $i;\n          \
    \  }\n            $i++;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return [ $min, $min_index ];\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    my $found = 0;\n    foreach my $i (0 .. $#arr) {\n        if ($arr[$i]\
    \ & 1) {\n            $found = 1;\n            if ($min > $arr[$i]) {\n      \
    \          $min = $arr[$i];\n                $index = $i;\n            }\n   \
    \     }\n    }\n    return $found ? [$min, $index] : [];\n}", "    my ($i, $j,\
    \ $min, $min_index);\n    my $even;\n    my $index;\n    my $result;\n    foreach\
    \ my $node (@$arr) {\n        $even = $node % 2;\n        $index = $node < $min\
    \ ? $node : $min;\n        $min = $node < $min ? $node : $min;\n        $min_index\
    \ = $node < $min_index ? $node : $min_index;\n    }\n    return $result;\n}",
  "    my $len = @$arr;\n    my $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n\
    \    my @result;\n    for(my $i = 1; $i < $len; $i++) {\n        if($arr->[$i]\
    \ % 2 == 0) {\n            if($arr->[$i] < $min) {\n                $min = $arr->[$i];\n\
    \                $index = $i;\n            }\n        }\n    }\n    if($min !=\
    \ 0) {\n        $smalest_value = $min;\n        for(my $i = 0; $i < $len; $i++)\
    \ {\n            if($arr->[$i] == $smalest_value) {\n                push(@result,\
    \ $arr->[$i]);\n            }\n        }\n    }\n    return @result;\n}", "  \
    \  my $index = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_even_value;\n\
    \    my $smalest_even_node;\n    my $even_value;\n    my $even_node;\n    my $even_node_index;\n\
    \    my $even_node_even_value;\n    my $even_node_even_index;\n    my $even_node_even_value_index;\n\
    \    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n  \
    \  my $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my\
    \ $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n\
    \    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n  \
    \  my $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my\
    \ $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n\
    \    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n  \
    \  my $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my\
    \ $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n\
    \    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n  \
    \  my $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my\
    \ $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n\
    \    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n  \
    \  my $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my\
    \ $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n\
    \    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n  \
    \  my $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my\
    \ $even_node_even_value_index;\n    my $even_node_even_value_index;\n    my $even_node_even_value_index;\n\
    \    my $even_node_even_value", "    my $index = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $even_value;\n    my $even_index;\n    my $even_value_index;\n\
    \    my $even_value_index2;\n    my $even_value_index3;\n    my $even_value_index4;\n\
    \    my $even_value_index5;\n    my $even_value_index6;\n    my $even_value_index7;\n\
    \    my $even_value_index8;\n    my $even_value_index9;\n    my $even_value_index10;\n\
    \    my $even_value_index11;\n    my $even_value_index12;\n    my $even_value_index13;\n\
    \    my $even_value_index14;\n    my $even_value_index15;\n    my $even_value_index16;\n\
    \    my $even_value_index17;\n    my $even_value_index18;\n    my $even_value_index19;\n\
    \    my $even_value_index20;\n    my $even_value_index21;\n    my $even_value_index22;\n\
    \    my $even_value_index23;\n    my $even_value_index24;\n    my $even_value_index25;\n\
    \    my $even_value_index26;\n    my $even_value_index27;\n    my $even_value_index28;\n\
    \    my $even_value_index29;\n    my $even_value_index30;\n    my $even_value_index31;\n\
    \    my $even_value_index32;\n    my $even_value_index33;\n    my $even_value_index34;\n\
    \    my $even_value_index35;\n    my $even_value_index36;\n    my $even_value_index37;\n\
    \    my $even_value_index38;\n    my $even_value_index39;\n    my $even_value_index40;\n\
    \    my $even_value_index41;\n    my $even_value_index42;\n    my $even_value_index43;\n\
    \    my $even_value_index44;\n    my $even_value_index45;\n    my $even_value_index46;\n\
    \    my $even_value_index47;\n    my $even_value_index48;\n    my $even_value_index49;\n\
    \    my $even_value_index50;\n    my $even_value_index51;\n    my $even_value_index52;\n\
    \    my $even_value_index53;\n    my $even_value_index54;\n    my $even_value_index55;\n\
    \    my $even_value_index56;\n    my $even_value_index57;\n    my $even_value_index58;\n\
    \    my $even_value_index59;\n    my $even_value_index60;\n    my $even_value_index61;\n\
    \    my $even_value_index62;\n    my $even_value_index", "    my ($i, $j, $min,\
    \ $min_index);\n    my $size = @$arr;\n    my $even_value = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    foreach $i (0..$size-1) {\n        foreach $j ($i+1..$size-1)\
    \ {\n            next unless $arr[$i] % 2 == 0;\n            if ($arr[$i] < $arr[$j])\
    \ {\n                $even_value = $arr[$i];\n                $smalest_value =\
    \ $arr[$j];\n                $smalest_index = $j;\n            }\n        }\n\
    \    }\n    return $smalest_value if $smalest_value;\n    return [];\n}", "  \
    \  my $min_value = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n\
    \    my $even_value_index = 0;\n    my $even_value_index2 = 0;\n    my $even_value_index3\
    \ = 0;\n    my $even_value_index4 = 0;\n    my $even_value_index5 = 0;\n    my\
    \ $even_value_index6 = 0;\n    my $even_value_index7 = 0;\n    my $even_value_index8\
    \ = 0;\n    my $even_value_index9 = 0;\n    my $even_value_index10 = 0;\n    my\
    \ $even_value_index11 = 0;\n    my $even_value_index12 = 0;\n    my $even_value_index13\
    \ = 0;\n    my $even_value_index14 = 0;\n    my $even_value_index15 = 0;\n   \
    \ my $even_value_index16 = 0;\n    my $even_value_index17 = 0;\n    my $even_value_index18\
    \ = 0;\n    my $even_value_index19 = 0;\n    my $even_value_index20 = 0;\n   \
    \ my $even_value_index21 = 0;\n    my $even_value_index22 = 0;\n    my $even_value_index23\
    \ = 0;\n    my $even_value_index24 = 0;\n    my $even_value_index25 = 0;\n   \
    \ my $even_value_index26 = 0;\n    my $even_value_index27 = 0;\n    my $even_value_index28\
    \ = 0;\n    my $even_value_index29 = 0;\n    my $even_value_index30 = 0;\n   \
    \ my $even_value_index31 = 0;\n    my $even_value_index32 = 0;\n    my $even_value_index33\
    \ = 0;\n    my $even_value_index34 = 0;\n    my $even_value_index35 = 0;\n   \
    \ my $even_value_index36 = 0;\n    my $even_value_index37 = 0;\n    my $even_value_index38\
    \ = 0;\n    my $even_value_index39 = 0;\n    my $even_value_index40 = 0;\n   \
    \ my $even_value_index41 = 0;\n    my $even_value_index42 = 0;\n    my $even_value_index43\
    \ = 0;\n    my $even_value_index44 = 0;\n    my $even_value_index45 = 0;\n   \
    \ my $even_value_index46 = 0;\n    my $even_value_index47 = 0;\n    my $even_value_index48\
    \ = 0;\n    my $even_value_index49 = 0;\n    my $even_value_index50 = 0;\n   \
    \ my $even_value_index51 = 0;\n    my $even_value_index52 = 0;\n    my $even_value_index53\
    \ = 0;\n    my $even_value_index54 = 0;\n    my $even_value_index55 = 0;\n   \
    \ my $even_value_index56 = 0;\n    my $even_value_index57 = 0;\n    my $even_value_index58\
    \ = 0;\n    my $even_value_index59 = 0;\n    my $even_value_index", "    my $min\
    \ = $arr[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n        if ($val\
    \ & 1) {\n            $min = $val;\n            $index = $arr->index($val);\n\
    \        }\n    }\n    return [ $min, $index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    for(my $i = 1; $i < @$arr; $i++) {\n        if($arr[$i]\
    \ % 2 == 0) {\n            $min = $arr[$i];\n            $index = $i;\n      \
    \  }\n    }\n    return [ $min, $index ];\n}", "    my $min_value = $arr[0];\n\
    \    my $min_index = 0;\n    my $index = 0;\n    my $even_value = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            $even_value = $val;\n\
    \        }\n        if ($val < $min_value) {\n            $min_value = $val;\n\
    \            $min_index = $index;\n        }\n        $index++;\n    }\n    if\
    \ ($even_value == 0) {\n        return [];\n    }\n    my $ret = [];\n    my $index\
    \ = 0;\n    foreach my $val (@$arr) {\n        if ($val == $min_value) {\n   \
    \         $ret->[$index] = $min_value;\n            $index++;\n        }\n   \
    \ }\n    return $ret;\n}", "    my $min = $arr->[0];\n    my $min_index = 0;\n\
    \    my $index = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0)\
    \ {\n            $min = $val if $val < $min;\n            $min_index = $index\
    \ if $val < $min;\n            $index++;\n        }\n    }\n    return [$min,\
    \ $min_index] if $min != 0;\n    return [];\n}", "    my $min = $arr[0];\n   \
    \ my $index = 0;\n    my $even;\n    my $smalest_value;\n    foreach my $n (@$arr)\
    \ {\n        if ($n % 2 == 0) {\n            $even = $n;\n        }\n        if\
    \ ($n <= $min) {\n            $min = $n;\n            $index = $arr->index($n);\n\
    \        }\n    }\n    if ($even == $min) {\n        return [$even, $index];\n\
    \    }\n    if ($min == 0) {\n        return [];\n    }\n    my $smalest_value\
    \ = $min;\n    my $smalest_index = 0;\n    foreach my $n (@$arr) {\n        if\
    \ ($n % 2 == 0) {\n            if ($n <= $smalest_value) {\n                $smalest_value\
    \ = $n;\n                $smalest_index = $arr->index($n);\n            }\n  \
    \      }\n    }\n    return [$smalest_value, $smalest_index];\n}", "    my $i\
    \ = 0;\n    my $smalest_value;\n    my $smalest_index;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $smalest_value = $node;\n    \
    \        $smalest_index = $i;\n        }\n        $i++;\n    }\n    return [ $smalest_value,\
    \ $smalest_index ];\n}", "    my $min = -1;\n    my $index = 0;\n    foreach my\
    \ $node (@$arr) {\n        if ($node % 2 == 0) {\n            if ($min == -1)\
    \ {\n                $min = $node;\n                $index = $node;\n        \
    \    }\n            elsif ($node < $min) {\n                $min = $node;\n  \
    \              $index = $node;\n            }\n        }\n    }\n    return [$min,\
    \ $index];\n}", "    my $min = -1;\n    my $min_index;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $even;\n    my $even_index;\n    my $even_value;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    while($i < $#{$arr}) {\n        $even = $arr->[$i]\
    \ % 2;\n        $even_index = $i;\n        $even_value = $arr->[$i];\n       \
    \ $smalest_value = $arr->[$i];\n        $smalest_index = $i;\n        $i++;\n\
    \        while($j < $#{$arr}) {\n            $smalest_value = $arr->[$j] if $smalest_value\
    \ < $arr->[$j];\n            $smalest_index = $j;\n            $j++;\n       \
    \ }\n        if($smalest_value == 0) {\n            $smalest_value = $arr->[$even_index];\n\
    \            $smalest_index = $even_index;\n        }\n        if($smalest_value\
    \ < $min) {\n            $min = $smalest_value;\n            $min_index = $smalest_index;\n\
    \        }\n        if($smalest_value == $even_value) {\n            $min_index\
    \ = $even_index;\n        }\n    }\n    return [$min, $min_index];\n}", "    my\
    \ $min = $arr->[0];\n    my $min_index = 0;\n    my $index;\n    for (my $i =\
    \ 1; $i < @$arr; $i++) {\n        if ($arr->[$i] eq $min) {\n            $min_index\
    \ = $i;\n        }\n    }\n    if ($min_index == 0) {\n        return [];\n  \
    \  }\n    my $smalest_value = $arr->[$min_index];\n    for (my $i = $min_index\
    \ + 1; $i < @$arr; $i++) {\n        if ($arr->[$i] eq $smalest_value) {\n    \
    \        $index = $i;\n        }\n    }\n    return [ $smalest_value, $index ];\n\
    }", "    my @result;\n    my $min;\n    my $index;\n    my $value;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $value = $node;\n\
    \            $min = $node;\n            $index = 0;\n        }\n        elsif\
    \ ($node < $min) {\n            $min = $node;\n            $index = 0;\n     \
    \   }\n        elsif ($node == $min) {\n            $index++;\n        }\n   \
    \ }\n    if ($min == 0) {\n        @result = ();\n    }\n    else {\n        @result\
    \ = [$value, $index];\n    }\n    return @result;\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $even;\n    foreach my $n (@$arr) {\n        if ($n\
    \ % 2 == 0) {\n            $even = $n;\n        }\n        if ($n < $min) {\n\
    \            $min = $n;\n            $index = $even;\n        }\n    }\n    return\
    \ [ $min, $index ];\n}", "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($min\
    \ == -1) {\n                $min = $val;\n                $min_index = $_;\n \
    \           }\n            elsif ($val < $min) {\n                $min = $val;\n\
    \                $min_index = $_;\n            }\n        }\n    }\n    if ($min\
    \ != -1) {\n        return [ $min, $min_index ];\n    }\n    return [];\n}", " \
    \   my @result;\n    my $min;\n    my $index;\n    my $value;\n    my $i;\n  \
    \  my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_even_index;\n    my $min_even_value;\n\
    \    my $even;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index", "    my $min;\n    my $index;\n   \
    \ my $even;\n    my $smalest_value;\n    my $smalest_index;\n    foreach my $i\
    \ (0..$#{$arr}) {\n        if ($arr->[$i] % 2 != 0) {\n            $even = $arr->[$i];\n\
    \            $smalest_value = $arr->[$i];\n            $smalest_index = $i;\n\
    \        }\n    }\n    if ($smalest_value eq $even) {\n        return $smalest_value;\n\
    \    }\n    foreach my $i (0..$#{$arr}) {\n        if ($arr->[$i] % 2 == 0) {\n\
    \            if ($arr->[$i] eq $smalest_value) {\n                return [$smalest_value,\
    \ $smalest_index];\n            }\n            if ($arr->[$i] < $smalest_value)\
    \ {\n                $min = $arr->[$i];\n                $index = $i;\n      \
    \      }\n        }\n    }\n    return [];\n}", "    my $min = $arr[0];\n    my\
    \ $index = 0;\n    my $result = ();\n    foreach my $node (@$arr) {\n        if\
    \ ($node % 2 == 0) {\n            $min = $node;\n            $index = $i;\n  \
    \      }\n        $i++;\n    }\n    return ($result, $index);\n}", "    my $i\
    \ = 0;\n    my $j = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $even_value;\n    my $even_index;\n    my $min_value;\n    my $min_index;\n\
    \    my $even_value_count = 0;\n    my $even_index_count = 0;\n    foreach my\
    \ $val (@$arr) {\n        if ($val & 1) {\n            $even_value_count++;\n\
    \            $even_value = $val;\n            $even_index = $i;\n        }\n \
    \       $i++;\n    }\n    if ($even_value_count == 0) {\n        return [];\n\
    \    }\n    foreach my $val (@$arr) {\n        if ($val & 1) {\n            $even_index_count++;\n\
    \            if ($even_index_count == $even_value_count) {\n                if\
    \ ($even_index < $min_index) {\n                    $min_index = $even_index;\n\
    \                    $min_value = $even_value;\n                }\n          \
    \  }\n        }\n    }\n    if ($even_index_count == 0) {\n        return [];\n\
    \    }\n    if ($even_index_count == $even_value_count) {\n        if ($even_index\
    \ < $min_index) {\n            $min_index = $even_index;\n            $min_value\
    \ = $even_value;\n        }\n    }\n    return [ $min_value, $min_index ];\n}",
  "    my $min = -1;\n    my $min_index;\n    my $index;\n    foreach my $node (@$arr)\
    \ {\n        if ($min == -1 || $min > $node) {\n            $min = $node;\n  \
    \          $min_index = $index;\n        }\n        $index++;\n    }\n    return\
    \ [$min, $min_index];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n   \
    \ foreach my $val (@$arr) {\n        if ($val & 1) {\n            if ($val < $min)\
    \ {\n                $min = $val;\n                $index = $arr->[$index];\n\
    \            }\n        }\n    }\n    return [ $min, $index ];\n}", "    my $index\
    \ = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $smalest_even_value;\n\
    \    my $smalest_even_index;\n    my $even_value;\n    my $even_index;\n    my\
    \ $even_value_index;\n    my $even_value_index2;\n    my $even_value_index3;\n\
    \    my $even_value_index4;\n    my $even_value_index5;\n    my $even_value_index6;\n\
    \    my $even_value_index7;\n    my $even_value_index8;\n    my $even_value_index9;\n\
    \    my $even_value_index10;\n    my $even_value_index11;\n    my $even_value_index12;\n\
    \    my $even_value_index13;\n    my $even_value_index14;\n    my $even_value_index15;\n\
    \    my $even_value_index16;\n    my $even_value_index17;\n    my $even_value_index18;\n\
    \    my $even_value_index19;\n    my $even_value_index20;\n    my $even_value_index21;\n\
    \    my $even_value_index22;\n    my $even_value_index23;\n    my $even_value_index24;\n\
    \    my $even_value_index25;\n    my $even_value_index26;\n    my $even_value_index27;\n\
    \    my $even_value_index28;\n    my $even_value_index29;\n    my $even_value_index30;\n\
    \    my $even_value_index31;\n    my $even_value_index32;\n    my $even_value_index33;\n\
    \    my $even_value_index34;\n    my $even_value_index35;\n    my $even_value_index36;\n\
    \    my $even_value_index37;\n    my $even_value_index38;\n    my $even_value_index39;\n\
    \    my $even_value_index40;\n    my $even_value_index41;\n    my $even_value_index42;\n\
    \    my $even_value_index43;\n    my $even_value_index44;\n    my $even_value_index45;\n\
    \    my $even_value_index46;\n    my $even_value_index47;\n    my $even_value_index48;\n\
    \    my $even_value_index49;\n    my $even_value_index50;\n    my $even_value_index51;\n\
    \    my $even_value_index52;\n    my $even_value_index53;\n    my $even_value_index54;\n\
    \    my $even_value_index55;\n    my $even_value_index56;\n    my $even_value_index57;\n\
    \    my $even_value_index58;\n    my $even_value_index59;\n    my $even_value_index60;\n\
    \    my $even", "    my $min = $arr[0];\n    my $index = 0;\n    my $even = 0;\n\
    \    foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n            $even =\
    \ $n;\n        }\n        if ($n < $min) {\n            $min = $n;\n         \
    \   $index = $even;\n        }\n    }\n    return $index;\n}", "    my ($i, $j,\
    \ $min, $min_index, $min_index2);\n    my $len = @$arr;\n    my $even = 0;\n \
    \   my $min_index = 0;\n    my $min_index2 = 0;\n    my $smalest_value;\n    my\
    \ $smalest_value_index;\n    my $smalest_value_index2;\n    my $smalest_value_index3;\n\
    \    my $smalest_value_index4;\n    my $smalest_value_index5;\n    my $smalest_value_index6;\n\
    \    my $smalest_value_index7;\n    my $smalest_value_index8;\n    my $smalest_value_index9;\n\
    \    my $smalest_value_index10;\n    my $smalest_value_index11;\n    my $smalest_value_index12;\n\
    \    my $smalest_value_index13;\n    my $smalest_value_index14;\n    my $smalest_value_index15;\n\
    \    my $smalest_value_index16;\n    my $smalest_value_index17;\n    my $smalest_value_index18;\n\
    \    my $smalest_value_index19;\n    my $smalest_value_index20;\n    my $smalest_value_index21;\n\
    \    my $smalest_value_index22;\n    my $smalest_value_index23;\n    my $smalest_value_index24;\n\
    \    my $smalest_value_index25;\n    my $smalest_value_index26;\n    my $smalest_value_index27;\n\
    \    my $smalest_value_index28;\n    my $smalest_value_index29;\n    my $smalest_value_index30;\n\
    \    my $smalest_value_index31;\n    my $smalest_value_index32;\n    my $smalest_value_index33;\n\
    \    my $smalest_value_index34;\n    my $smalest_value_index35;\n    my $smalest_value_index36;\n\
    \    my $smalest_value_index37;\n    my $smalest_value_index38;\n    my $smalest_value_index39;\n\
    \    my $smalest_value_index40;\n    my $smalest_value_index41;\n    my $smalest_value_index42;\n\
    \    my $smalest_value_index43;\n    my $smalest_value_index44;\n    my $smalest_value_index45;\n\
    \    my $smalest_value_index46;\n    my $smalest_value_index47;\n    my $smalest_value_index48;\n\
    \    my $sm", "    my ($i, $j, $min, $min_index);\n    my $size = @$arr;\n   \
    \ my $even_value = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $even_index;\n    my $smalest_even_value;\n    my $smalest_even_index;\n   \
    \ my $even_smalest_value;\n    my $even_smalest_index;\n    my $even_smalest_even_value;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n    my $even_smalest_even_index;\n\
    \    ", "    my $min = -1;\n    my $min_index;\n    my $index;\n    my $value;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $value\
    \ = $node;\n            $index = $node;\n        }\n        else {\n         \
    \   if ($node < $min) {\n                $min = $node;\n                $min_index\
    \ = $index;\n            }\n        }\n    }\n    return ($min, $min_index);\n\
    }", "    my $min = $arr[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n\
    \        if ($val % 2 == 0) {\n            if ($val < $min) {\n              \
    \  $min = $val;\n                $index = $arr->index($val);\n            }\n\
    \        }\n    }\n    return [ $min, $index ];\n}", "    my $len = @$arr;\n \
    \   my $min = $arr->[0];\n    my $min_index = 0;\n    my $smalest_value;\n   \
    \ my $smalest_index;\n    my $i;\n    my $j;\n    my $k;\n    my $temp;\n    my\
    \ $flag;\n    my $flag2;\n    my $flag3;\n    my $flag4;\n    my $flag5;\n   \
    \ my $flag6;\n    my $flag7;\n    my $flag8;\n    my $flag9;\n    my $flag10;\n\
    \    my $flag11;\n    my $flag12;\n    my $flag13;\n    my $flag14;\n    my $flag15;\n\
    \    my $flag16;\n    my $flag17;\n    my $flag18;\n    my $flag19;\n    my $flag20;\n\
    \    my $flag21;\n    my $flag22;\n    my $flag23;\n    my $flag24;\n    my $flag25;\n\
    \    my $flag26;\n    my $flag27;\n    my $flag28;\n    my $flag29;\n    my $flag30;\n\
    \    my $flag31;\n    my $flag32;\n    my $flag33;\n    my $flag34;\n    my $flag35;\n\
    \    my $flag36;\n    my $flag37;\n    my $flag38;\n    my $flag39;\n    my $flag40;\n\
    \    my $flag41;\n    my $flag42;\n    my $flag43;\n    my $flag44;\n    my $flag45;\n\
    \    my $flag46;\n    my $flag47;\n    my $flag48;\n    my $flag49;\n    my $flag50;\n\
    \    my $flag51;\n    my $flag52;\n    my $flag53;\n    my $flag54;\n    my $flag55;\n\
    \    my $flag56;\n    my $flag57;\n    my $flag58;\n    my $flag59;\n    my $flag60;\n\
    \    my $flag61;\n    my $flag62;\n    my $flag63;\n    my $flag64;\n    my $flag65;\n\
    \    my $flag66;\n    my $flag67;\n    my $flag68;\n    my $flag69;\n    my $flag70;\n\
    \    my $flag71;\n    my $flag72;\n    my $flag73;\n    my $flag74;\n    my $flag75;\n\
    \    my $flag76;\n    my $flag77;\n    my $flag78;\n    my $flag79;\n    my $flag80",
  "    my $min_value = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            $min_value = $val;\n\
    \            $min_index = $index;\n        }\n        $index++;\n    }\n    return\
    \ [$min_value, $min_index];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
