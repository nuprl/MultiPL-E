name: HumanEval_68_pluck
language: humaneval_to_perl.py
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# Input: [4,2,3]\n# Output: [2, 1]\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 2:\n# Input: [1,2,3]\n# Output:\
  \ [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\
  \ \n# Example 3:\n# Input: []\n# Output: []\n# Example 4:\n# Input: [5, 0, 3, 0,\
  \ 4, 2]\n# Output: [0, 1]\n# Explanation: 0 is the smallest value, but  there are\
  \ two zeros,\n# so we will choose the first zero, which has the smallest index.\n\
  # Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n\
  \    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n\
  \        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7,\
  \ 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $len = @$arr;\n    my $min = $arr->[0];\n    my $min_index =\
    \ 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $temp;\n    my $temp2;\n    my $temp3;\n    my $temp4;\n \
    \   my $temp5;\n    my $temp6;\n    my $temp7;\n    my $temp8;\n    my $temp9;\n\
    \    my $temp10;\n    my $temp11;\n    my $temp12;\n    my $temp13;\n    my $temp14;\n\
    \    my $temp15;\n    my $temp16;\n    my $temp17;\n    my $temp18;\n    my $temp19;\n\
    \    my $temp20;\n    my $temp21;\n    my $temp22;\n    my $temp23;\n    my $temp24;\n\
    \    my $temp25;\n    my $temp26;\n    my $temp27;\n    my $temp28;\n    my $temp29;\n\
    \    my $temp30;\n    my $temp31;\n    my $temp32;\n    my $temp33;\n    my $temp34;\n\
    \    my $temp35;\n    my $temp36;\n    my $temp37;\n    my $temp38;\n    my $temp39;\n\
    \    my $temp40;\n    my $temp41;\n    my $temp42;\n    my $temp43;\n    my $temp44;\n\
    \    my $temp45;\n    my $temp46;\n    my $temp47;\n    my $temp48;\n    my $temp49;\n\
    \    my $temp50;\n    my $temp51;\n    my $temp52;\n    my $temp53;\n    my $temp54;\n\
    \    my $temp55;\n    my $temp56;\n    my $temp57;\n    my $temp58;\n    my $temp59;\n\
    \    my $temp60;\n    my $temp61;\n    my $temp62;\n    my $temp63;\n    my $temp64;\n\
    \    my $temp65;\n    my $temp66;\n    my $temp67;\n    my $temp68;\n    my $temp69;\n\
    \    my $temp70;\n    my $temp71;\n    my $temp72;\n    my $temp73;\n    my $temp74;\n\
    \    my $temp75;\n    my $temp76;\n    my $temp77;\n    my $temp78;\n    my $temp79;\n\
    \    my $temp80;\n    my $temp", "    my $min;\n    my $index;\n    my $even;\n\
    \    my $smalest_value;\n    foreach my $i (0..$#{$arr}) {\n        $even = $arr->[$i]\
    \ % 2;\n        if ($even != 0) {\n            $smalest_value = $arr->[$i];\n\
    \            $index = $i;\n        }\n    }\n    return $smalest_value if $smalest_value;\n\
    \    return [];\n}", "    my $len = @$arr;\n    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my $even;\n    for(my\
    \ $i = 1; $i < $len; $i++) {\n        $even = $arr->[$i] % 2;\n        if($even\
    \ != 0) {\n            $smalest_value = $arr->[$i];\n            $smalest_index\
    \ = $i;\n        }\n        if($smalest_value == $min) {\n            $index =\
    \ $i;\n        }\n    }\n    if($smalest_value == $min) {\n        $index = $smalest_index;\n\
    \    }\n    return [ $smalest_value, $index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $even;\n    foreach my $n (@$arr) {\n        if ($n\
    \ % 2 == 0) {\n            $even = $n;\n        }\n        if ($n < $min) {\n\
    \            $min = $n;\n            $index = $n;\n        }\n    }\n    return\
    \ [ $even, $index ];\n}", "    my @result;\n    my $min_value;\n    my $min_index;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $value;\n    my $index;\n    my $even;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index", "    my $min =\
    \ $arr[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            $smalest_value = $val;\n      \
    \      $index = $val;\n        }\n    }\n    return $smalest_value, $index;\n}",
  "    my $min = $arr[0];\n    my $index = 0;\n    foreach my $n (@$arr) {\n     \
    \   if ($n % 2 == 0) {\n            if ($min > $n) {\n                $min = $n;\n\
    \                $index = $i;\n            }\n        }\n        $i++;\n    }\n\
    \    return [ $min, $index ];\n}", "    my $min = -1;\n    my $min_index;\n  \
    \  my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            if ($min == -1) {\n                $min = $node;\n       \
    \         $min_index = $node;\n                $smalest_value = $node;\n     \
    \       } else {\n                if ($node < $smalest_value) {\n            \
    \        $min = $node;\n                    $min_index = $node;\n            \
    \        $smalest_value = $node;\n                }\n            }\n        }\n\
    \    }\n    return [ $smalest_value, $min_index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $smalest_value;\n    foreach my $n (@$arr) {\n   \
    \     if ($n % 2 == 0) {\n            $smalest_value = $n;\n            $index\
    \ = $i;\n        }\n        $i++;\n    }\n    return [ $smalest_value, $index\
    \ ];\n}", "    my ($i, $j, $k, $smallest, $smallest_index);\n    my ($even_value);\n\
    \    my ($min_value);\n    my ($min_index);\n    my ($max_value);\n    my ($max_index);\n\
    \    my ($tmp);\n    my ($count);\n    my ($tmp2);\n    my ($tmp3);\n    my ($tmp4);\n\
    \    my ($tmp5);\n    my ($tmp6);\n    my ($tmp7);\n    my ($tmp8);\n    my ($tmp9);\n\
    \    my ($tmp10);\n    my ($tmp11);\n    my ($tmp12);\n    my ($tmp13);\n    my\
    \ ($tmp14);\n    my ($tmp15);\n    my ($tmp16);\n    my ($tmp17);\n    my ($tmp18);\n\
    \    my ($tmp19);\n    my ($tmp20);\n    my ($tmp21);\n    my ($tmp22);\n    my\
    \ ($tmp23);\n    my ($tmp24);\n    my ($tmp25);\n    my ($tmp26);\n    my ($tmp27);\n\
    \    my ($tmp28);\n    my ($tmp29);\n    my ($tmp30);\n    my ($tmp31);\n    my\
    \ ($tmp32);\n    my ($tmp33);\n    my ($tmp34);\n    my ($tmp35);\n    my ($tmp36);\n\
    \    my ($tmp37);\n    my ($tmp38);\n    my ($tmp39);\n    my ($tmp40);\n    my\
    \ ($tmp41);\n    my ($tmp42);\n    my ($tmp43);\n    my ($tmp44);\n    my ($tmp45);\n\
    \    my ($tmp46);\n    my ($tmp47);\n    my ($tmp48);\n    my ($tmp49);\n    my\
    \ ($tmp50);\n    my ($tmp51);\n    my ($tmp52);\n    my ($tmp53);\n    my ($tmp54);\n\
    \    my ($tmp55);\n    my ($tmp56);\n    my ($tmp57);\n    my ($tmp58);\n    my\
    \ ($tmp59);\n    my ($tmp60);\n    my ($tmp61);\n    my ($tmp62);\n    my ($tmp63);\n\
    \    my ($tmp64);\n    my ($tmp65);\n    my ($tmp66);\n    my ($tmp67);\n    my\
    \ ($tmp68);\n    my ($", "    my $min_value = $arr[0];\n    my $min_idx = 0;\n\
    \    my $i = 0;\n    while($i < $#arr) {\n        my $value = $arr[$i];\n    \
    \    if($value % 2 == 0) {\n            if($value < $min_value) {\n          \
    \      $min_value = $value;\n                $min_idx = $i;\n            }\n \
    \           $i++;\n        } else {\n            $i++;\n        }\n    }\n   \
    \ return [ $min_value, $min_idx ];\n}", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $even;\n    my $even_index;\n    foreach my $i (@$arr) {\n    \
    \    if ($i % 2 == 0) {\n            $even = $i;\n            $even_index = $index;\n\
    \        }\n        $index++;\n    }\n    if ($even) {\n        return [ $even,\
    \ $even_index ];\n    }\n    return [];\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    foreach my $i (@$arr) {\n        if ($i % 2 == 0) {\n            if\
    \ ($i < $min) {\n                $min = $i;\n                $index = $i;\n  \
    \          }\n        }\n    }\n    return [$min, $index];\n}", "    my $min =\
    \ $arr[0];\n    my $index = 0;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            $min = $node;\n            $index = $arr->index($node);\n\
    \        }\n    }\n    return [ $min, $index ];\n}", "    my @res;\n    my $min;\n\
    \    my $index;\n    my $value;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $even;\n    my $even_index;\n    my $even_value;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $", "    my $min = $arr[0];\n    my $index = 0;\n\
    \    my $found = 0;\n    foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n\
    \            if ($found == 0) {\n                $min = $n;\n                $found\
    \ = 1;\n            }\n            else {\n                if ($n < $min) {\n\
    \                    $min = $n;\n                    $index = $found;\n      \
    \          }\n            }\n        }\n    }\n    return [ $min, $index ];\n}",
  "    my $min = -1;\n    my $min_index;\n    foreach my $node (@$arr) {\n       \
    \ if ($node % 2 == 0) {\n            $min = $node;\n            $min_index = $_;\n\
    \        }\n    }\n    return $min if $min != -1;\n    return [];\n}", "    my\
    \ $min = $arr[0];\n    my $index = 0;\n    my $found = 0;\n    foreach my $val\
    \ (@$arr) {\n        if ($val % 2 == 0) {\n            $found = 1;\n         \
    \   if ($val < $min) {\n                $min = $val;\n                $index =\
    \ $found;\n            }\n        }\n    }\n    return $found ? [$min, $index]\
    \ : [];\n}", "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    ", "    my ($i, $j, $smallest, @result);\n    foreach $i (0 .. $#{$arr})\
    \ {\n        foreach $j ($i + 1 .. $#{$arr}) {\n            if ($arr->[$i] % 2\
    \ == 0 && $arr->[$j] % 2 == 0) {\n                if ($arr->[$i] < $smallest)\
    \ {\n                    $smallest = $arr->[$i];\n                    $result[$i]\
    \ = $j;\n                }\n                if ($arr->[$j] < $smallest) {\n  \
    \                  $smallest = $arr->[$j];\n                    $result[$j] =\
    \ $i;\n                }\n            }\n        }\n    }\n    return @result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
