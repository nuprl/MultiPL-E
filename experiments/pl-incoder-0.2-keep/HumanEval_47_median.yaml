name: HumanEval_47_median
language: humaneval_to_perl.py
prompt: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$l;\n    if ($n == 0) {\n        return 0;\n    }\n  \
    \  my $m = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n        $median =\
    \ $l->[$m];\n    } else {\n        $median = ($l->[$m] + $l->[$m-1]) / 2;\n  \
    \  }\n    return $median;\n}", "    my $n = @$l;\n    if ($n <= 1) {\n       \
    \ return $l->[0];\n    }\n    my $mid = int(($n - 1) / 2);\n    my $median = $l->[$mid];\n\
    \    my $i = 0;\n    my $j = $n;\n    while ($i < $mid) {\n        $median = $l->[$i]\
    \ if $l->[$i] > $median;\n        $i++;\n    }\n    while ($j > $mid) {\n    \
    \    $median = $l->[$j] if $l->[$j] < $median;\n        $j--;\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    if ($n == 0) {\n        return 0;\n   \
    \ }\n    my $mid = int(($n - 1) / 2);\n    my $median = $l->[$mid];\n    my $i\
    \ = 0;\n    my $j = $n - 1;\n    while ($i < $mid) {\n        my $tmp = $l->[$i];\n\
    \        $l->[$i] = $l->[$j];\n        $l->[$j] = $tmp;\n        $i++;\n     \
    \   $j--;\n    }\n    return $median;\n}", "    my $n = @$l;\n    my $m = $n /\
    \ 2;\n    if ($n % 2) {\n        return $l->[$m];\n    }\n    else {\n       \
    \ return $l->[$m-1] + $l->[$m];\n    }\n}", "    my $n = @$l;\n    my $m = $n\
    \ / 2;\n    my $median;\n    if ($n % 2) {\n        $median = $l->[$m];\n    }\
    \ else {\n        $median = ($l->[$m] + $l->[$m - 1]) / 2;\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if\
    \ ($n % 2 == 0) {\n        $median = $l->[$m];\n    }\n    else {\n        $median\
    \ = ($l->[$m] + $l->[$m - 1]) / 2;\n    }\n    return $median;\n}", "    my $n\
    \ = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n        return $l->[$m];\n \
    \   }\n    else {\n        return ($l->[$m] + $l->[$m-1]) / 2;\n    }\n}", " \
    \   my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2 == 0) {\n        return\
    \ $l->[$m];\n    }\n    else {\n        return $l->[$m] + $l->[$n - 1];\n    }\n\
    }", "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n        return\
    \ $l->[$m];\n    }\n    return $l->[$m-1] + $l->[$m];\n}", "    my $n = @$l;\n\
    \    my $median;\n    if ($n > 0) {\n        my $mid = $n / 2;\n        $median\
    \ = $l->[$mid];\n        for my $i ($mid + 1, $n) {\n            $median = min\
    \ $median, $l->[$i];\n        }\n    }\n    return $median;\n}", "    my $n =\
    \ @$l;\n    if ($n == 0) {\n        return 0;\n    }\n    my $m = $n / 2;\n  \
    \  my $median;\n    if ($n % 2 == 0) {\n        $median = $l->[$m];\n    }\n \
    \   else {\n        $median = ($l->[$m-1] + $l->[$m+1]) / 2;\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    if ($n == 0) {\n        return 0;\n   \
    \ }\n    my $mid = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n        $median\
    \ = $l->[$mid];\n    } else {\n        $median = ($l->[$mid - 1] + $l->[$mid])\
    \ / 2;\n    }\n    return $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n\
    \    if ($n % 2) {\n        return $l->[$m];\n    }\n    my $median;\n    my $i;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($l->[$i] <= $l->[$m]) {\n    \
    \        $median = $l->[$i];\n        }\n    }\n    return $median;\n}", "   \
    \ my $n = @$l;\n    if ($n == 0) {\n        return 0;\n    }\n    my $mid = int(($n\
    \ - 1) / 2);\n    my $median;\n    if ($n & 1) {\n        $median = $l->[$mid];\n\
    \    }\n    else {\n        $median = ($l->[$mid - 1] + $l->[$mid]) / 2;\n   \
    \ }\n    return $median;\n}", "    my $n = @$l;\n    if ($n <= 1) {\n        return\
    \ $l->[0];\n    }\n    my $mid = $n / 2;\n    my $median;\n    my $median_index\
    \ = 0;\n    my $median_value;\n    my $i;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        if ($i < $mid) {\n            $median_value = $l->[$i];\n        }\n\
    \        else {\n            $median_value = $l->[$i];\n        }\n        if\
    \ ($median_value >= $l->[$median_index]) {\n            $median_index++;\n   \
    \     }\n    }\n    $median = $l->[$median_index];\n    return $median;\n}", " \
    \   my $n = @$l;\n    my $median;\n    if ($n <= 1) {\n        return $l->[0];\n\
    \    }\n    my $mid = $n / 2;\n    my $median = $l->[$mid];\n    my $i = 1;\n\
    \    my $j = $n - 1;\n    while ($i <= $j) {\n        my $m = ($i + $j) / 2;\n\
    \        if ($l->[$m] < $median) {\n            $i = $m + 1;\n        } elsif\
    \ ($l->[$m] > $median) {\n            $j = $m - 1;\n        } else {\n       \
    \     $median = $l->[$m];\n        }\n    }\n    return $median;\n}", "    my\
    \ $n = @$l;\n    if ($n <= 1) {\n        return $l->[0];\n    }\n    my $mid =\
    \ int(($n - 1) / 2);\n    my $median = $l->[$mid];\n    for my $i ($mid + 1, $n)\
    \ {\n        my $x = $l->[$i];\n        if ($x < $median) {\n            $median\
    \ = $x;\n        }\n    }\n    return $median;\n}", "    my $n = @$l;\n    my\
    \ $m = $n / 2;\n    if ($n % 2) {\n        return $l->[$m];\n    }\n    return\
    \ $l->[$m-1] + $l->[$m];\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n\
    \ % 2) {\n        return $l->[$m];\n    }\n    else {\n        return ($l->[$m]\
    \ + $l->[$m-1]) / 2;\n    }\n}", "    my $n = @$l;\n    if ($n <= 1) {\n     \
    \   return $l->[0];\n    }\n    my $mid = int(($n - 1) / 2);\n    my $median =\
    \ $l->[$mid];\n    my $i = 1;\n    my $j = $n - 1;\n    my $median_index = 0;\n\
    \    my $median_value;\n    my $median_value_found;\n    my $median_value_found_index;\n\
    \    while ($i <= $j) {\n        if ($l->[$i] <= $median) {\n            $median_value\
    \ = $l->[$i];\n            $median_value_found = 1;\n            $median_value_found_index\
    \ = $i;\n        }\n        elsif ($l->[$j] >= $median) {\n            $median_value\
    \ = $l->[$j];\n            $median_value_found = 1;\n            $median_value_found_index\
    \ = $j;\n        }\n        else {\n            $median_value = $l->[$i];\n  \
    \          $median_value_found = 1;\n            $median_value_found_index = $i;\n\
    \        }\n        $i++;\n        $j--;\n    }\n    if ($median_value_found)\
    \ {\n        return $median_value;\n    }\n    else {\n        return $l->[$median_value_found_index];\n\
    \    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
