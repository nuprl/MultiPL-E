name: HumanEval_42_incr_list
language: humaneval_to_perl.py
prompt: "# Return list with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n\
  # [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4,\
  \ 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @r = ();\n    my $i = 0;\n    foreach my $x (@$l) {\n      \
    \  $r[$i] = $x + 1;\n        $i++;\n    }\n    return @r;\n}", "    my @r = ();\n\
    \    my $i = 0;\n    foreach my $x (@$l) {\n        $r[$i] = $x + 1;\n       \
    \ $i++;\n    }\n    return @r;\n}", "    my $i = 0;\n    map { $l[$i++] = $_ }\
    \ (@$l);\n    return @$l;\n}", "    my @r = ();\n    my $i = 0;\n    foreach my\
    \ $x (@$l) {\n        $r[$i++] = $x + 1;\n    }\n    return @r;\n}", "    my $i\
    \ = 0;\n    my @out;\n    foreach my $x (@$l) {\n        $i++;\n        push @out,\
    \ $x;\n    }\n    return @out;\n}", "    my $i = 0;\n    my @r = ();\n    foreach\
    \ my $x (@$l) {\n        $r[$i++] = $x;\n    }\n    return @r;\n}", "    my @l\
    \ = @$l;\n    my $i = 0;\n    foreach my $x (@l) {\n        $l[$i++]++;\n    }\n\
    \    return @l;\n}", "    my $i = 0;\n    my @out;\n    foreach my $x (@$l) {\n\
    \        $i++;\n        push(@out, $x);\n    }\n    return @out;\n}", "    my\
    \ $i = 0;\n    map { $l[$i++] = $_ } (@$l);\n    return @$l;\n}", "    my $i =\
    \ 0;\n    my @r;\n    foreach my $x (@$l) {\n        $i++;\n        push(@r, $x);\n\
    \    }\n    return @r;\n}", "    my @r = ();\n    my $i = 0;\n    my $n = @$l;\n\
    \    while ($i < $n) {\n        push @r, $l->[$i];\n        $i++;\n    }\n   \
    \ return @r;\n}", "    my @r;\n    my $i = 0;\n    foreach my $x (@$l) {\n   \
    \     $i++;\n        push @r, $x;\n    }\n    return @r;\n}", "    my $i = 0;\n\
    \    my @out = ();\n    foreach my $x (@$l) {\n        $out[$i++] = $x;\n    }\n\
    \    return @out;\n}", "    my @r;\n    my $i = 0;\n    foreach my $x (@$l) {\n\
    \        $i++;\n        push @r, $x;\n    }\n    return @r;\n}", "    my @out;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = $#$l;\n    my $max = @$l - 1;\n\
    \    while ($i < $len) {\n        $j++;\n        if ($j < $max) {\n          \
    \  $out[$i] = $l->[$j] + 1;\n        } else {\n            $out[$i] = $l->[$j];\n\
    \        }\n        $i++;\n    }\n    return @out;\n}", "    my @r = ();\n   \
    \ my $i = 0;\n    foreach my $x (@$l) {\n        $r[$i++] = $x + 1;\n    }\n \
    \   return @r;\n}", "    my @r = ();\n    my $i = 0;\n    foreach my $x (@$l)\
    \ {\n        $r[$i++] = $x + 1;\n    }\n    return @r;\n}", "    my @r;\n    my\
    \ $i = 0;\n    foreach my $x (@$l) {\n        $r[$i++] = $x + 1;\n    }\n    return\
    \ @r;\n}", "    my @r = ();\n    my $i = 0;\n    foreach my $x (@$l) {\n     \
    \   $r[$i] = $x + 1;\n        $i++;\n    }\n    return @r;\n}", "    my $i = 0;\n\
    \    my @res;\n    foreach my $x (@$l) {\n        $res[$i++] = $x;\n    }\n  \
    \  return @res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
