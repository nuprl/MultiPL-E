name: HumanEval_80_is_happy
language: humaneval_to_perl.py
prompt: "# You are given a string s.\n# Your task is to check if the string is happy\
  \ or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa) =>\
  \ False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb) =>\
  \ True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n\
  \        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return length($s) >= 3 && grep(!($s =~ /([a-z])\\1/), 0..2);\n}",
  "    my $len = length($s);\n    return $len >= 3 && $len % 3 == 0 && grep(!$seen{$_},\
    \ split //, $s);\n}", "    return length($s) >= 3 && grep(!($s =~ /((.)\\2*)/),\
    \ 0..2);\n}", "    return length($s) >= 3 && $s =~ /^[a-z]{3}$/i;\n}", "    return\
    \ length($s) >= 3 && grep { !$seen{$_}++ } split //, $s;\n}", "    return length($s)\
    \ >= 3 && grep(!($s =~ /((.)\\2{2,})/), 0..($s - 1));\n}", "    my $len = length($s);\n\
    \    return $len >= 3 && $len %3 != 0;\n}", "    return length($s) >= 3 && grep(!$seen{$_}++,\
    \ unpack(\"C*\", $s));\n}", "    my $len = length($s);\n    return $len >= 3 &&\
    \ $len % 3 != 0 && grep(!$seen{$_}, split(//, $s));\n}", "    return length($s)\
    \ >= 3 && grep(!($s =~ /([a-z])\\1/), 0..2);\n}", "    return length($s) >= 3\
    \ && grep(!$seen{$_}++, split //, $s);\n}", "    return length($s) >= 3 && grep(!($s\
    \ =~ /((.)\\2*)/), 0..2);\n}", "    my $len = length($s);\n    return $len >=\
    \ 3 && $len % 3 == 0 && grep(!$seen{$_}, split //, $s);\n}", "    return length($s)\
    \ >= 3 && grep(!($s =~ /([a-z])\\1/), 0..2);\n}", "    return length($s) >= 3\
    \ && grep(!$seen{$_}++,split('',$s));\n}", "    return length($s) >= 3 && $s =~\
    \ /^(.)\\1{3}$/;\n}", "    return length($s) >= 3 && grep(!($s =~ /([a-z])\\1/),\
    \ 0..2);\n}", "    my $len = length($s);\n    return $len >= 3 && $len % 3 ==\
    \ 0 && grep(!$seen{$_}, split('', $s));\n}", "    my $len = length($s);\n    return\
    \ $len >= 3 && $len % 3 != 0 && $s =~ /^(.)\\1\\1\\1$/;\n}", "    my $len = length($s);\n\
    \    return $len >= 3 && $len % 3 != 0 && $s =~ /((.)\\2{2,})/;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
