name: HumanEval_43_pairs_sum_to_zero
language: humaneval_to_perl.py
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n# False\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n# True\n# >>> pairs_sum_to_zero([1])\n# False\nsub pairs_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2,\
  \ 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5,\
  \ 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $i (@$l) {\n        $sum += $i;\n\
    \    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    foreach my $x (@$l)\
    \ {\n        next unless defined $x;\n        $sum += $x;\n    }\n    return 0\
    \ if $sum == 0;\n    return 1 if $sum == 1;\n    return $sum == 2;\n}", "    my\
    \ $sum = 0;\n    foreach my $pair (@$l) {\n        my $n = $pair->[0];\n     \
    \   my $m = $pair->[1];\n        $sum += $n;\n        $sum += $m;\n    }\n   \
    \ return $sum == 0;\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n      \
    \  my $j = 0;\n        foreach my $j (@$l) {\n            next if $i == $j;\n\
    \            $sum += $j if $j > $i;\n        }\n        return 0 if $sum == 0;\n\
    \    }\n    return 1;\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n    \
    \    $sum += $i;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    foreach\
    \ my $i (@$l) {\n        $sum += $i;\n    }\n    return $sum == 0;\n}", "    my\
    \ $sum = 0;\n    my $found = 0;\n    foreach my $i (@$l) {\n        if ($i ==\
    \ 0) {\n            $found = 1;\n        }\n        $sum += $i;\n    }\n    return\
    \ $found == 2;\n}", "    my $sum = 0;\n    foreach my $x (@$l) {\n        $sum\
    \ += $x;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    foreach my\
    \ $x (@$l) {\n        my $y = $x + $sum;\n        $sum = $y if $y > 0;\n    }\n\
    \    return $sum == 0;\n}", "    my $sum = 0;\n    foreach my $pair (@$l) {\n\
    \        my $n = $pair->[0];\n        my $m = $pair->[1];\n        $sum += $n;\n\
    \        $sum += $m;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n  \
    \  foreach my $i (@$l) {\n        next unless $i =~ /^-?\\d+$/;\n        $sum\
    \ += $i;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    my $found =\
    \ 0;\n    foreach my $i (@$l) {\n        $sum += $i;\n        if ($sum == 0) {\n\
    \            $found = 1;\n            last;\n        }\n    }\n    return $found;\n\
    }", "    my $sum = 0;\n    foreach my $i (@$l) {\n        next unless $i =~ /^-?\\\
    d+$/;\n        $sum += $i;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n\
    \    foreach my $i (@$l) {\n        $sum += $i;\n    }\n    return $sum == 0;\n\
    }", "    my $sum = 0;\n    foreach my $i (@$l) {\n        next unless $i =~ /^-?\\\
    d+$/;\n        $sum += $i;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n\
    \    foreach my $i (@$l) {\n        $sum += $i;\n    }\n    return $sum == 0;\n\
    }", "    my $sum = 0;\n    foreach my $i (@$l) {\n        next if $i == 0;\n \
    \       $sum += $i;\n    }\n    return 0 if $sum == 0;\n    my $found = 0;\n \
    \   foreach my $i (@$l) {\n        next if $i == 0;\n        my $j = 0;\n    \
    \    foreach my $j (@$l) {\n            next if $j == 0;\n            next if\
    \ $i == $j;\n            $found++;\n        }\n    }\n    return $found;\n}",
  "    my $sum = 0;\n    foreach my $i (@$l) {\n        $sum += $i;\n    }\n    return\
    \ $sum == 0;\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n        my $j\
    \ = $i;\n        $sum += $j;\n        if ($sum == 0) {\n            return 1;\n\
    \        }\n    }\n    return 0;\n}", "    my $sum = 0;\n    foreach my $i (@$l)\
    \ {\n        my $j = $i;\n        $sum += $j;\n        last if $sum == 0;\n  \
    \  }\n    return $sum == 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
