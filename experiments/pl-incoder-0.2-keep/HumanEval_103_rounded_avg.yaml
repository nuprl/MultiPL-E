name: HumanEval_103_rounded_avg
language: humaneval_to_perl.py
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\n# rounded_avg(1, 5) => \"0b11\"\n# rounded_avg(7,\
  \ 5) => -1\n# rounded_avg(10, 20) => \"0b1111\"\n# rounded_avg(20, 33) => \"0b11010\"\
  \nsub rounded_avg {\n    my($n, $m) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rounded_avg;\n\
  \        if(eq_deeply($candidate->(1, 5),\"0b11\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 13),\"0b1010\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(964,\
  \ 977),\"0b1111001010\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(996, 997),\"0b1111100100\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(560,\
  \ 851),\"0b1011000010\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(185, 546),\"0b101101110\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(362,\
  \ 496),\"0b110101101\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->(350, 902),\"0b1001110010\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(197,\
  \ 233),\"0b11010111\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(7, 5),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 1),-1)) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
  \ 5),\"0b101\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $avg = (($n + $m) / 2);\n    $avg = ($avg + $avg / 2);\n   \
    \ $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg +\
    \ $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n \
    \   $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n\
    \    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n\
    \    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n\
    \    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n\
    \    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n\
    \    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n\
    \    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n\
    \    $avg = ($avg + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg\
    \ + $avg / 2);\n    $avg = ($avg + $avg / 2);\n    $avg = ($avg + ", "    my $avg\
    \ = sprintf(\"%b\", $n + ($m - $n));\n    return -1 if $avg > $m;\n    return\
    \ $avg;\n}", "    my $avg = sprintf(\"%b\", $n + ($m - $n));\n    my $bin = sprintf(\"\
    %b\", $avg);\n    return $bin if $bin =~ /^0*1$/;\n    return -1;\n}", "    my\
    \ $avg = int(($n + $m) / 2);\n    return -1 if $avg > $m;\n    return $avg;\n}",
  "    my $sum = 0;\n    my $i = 0;\n    while($i < $n) {\n        $sum += $i;\n \
    \       $i++;\n    }\n    while($i < $m) {\n        $sum += $i;\n        $i++;\n\
    \    }\n    return $sum / $m;\n}", "    my $sum = 0;\n    my $count = 0;\n   \
    \ \n    while ($n <= $m) {\n        $sum += $n;\n        $count++;\n        $n++;\n\
    \    }\n    \n    return $sum / $count if $count > 0;\n    return -1;\n}", " \
    \   $n += $m;\n    $n -= $m if $n > $m;\n    $n -= $m if $n < $m;\n    return\
    \ $n >= $m ? $n : -1;\n}", "    my $avg = (($n - $m) / $m) * $m;\n    return $avg\
    \ if $avg < $n;\n    return -1;\n}", "    my $sum = 0;\n    my $count = 0;\n \
    \   \n    for(my $i = $n; $i <= $m; $i++) {\n        $sum += $i;\n        $count++;\n\
    \    }\n    \n    return $sum / $count if $count > 0;\n    return -1;\n}", " \
    \   return -1 if $n > $m;\n    return -1 if $n == $m;\n    return $n if $n ==\
    \ 0;\n    return $m if $m == 0;\n    return sprintf(\"0b%b\", $n + ($m - $n) /\
    \ 2);\n}", "    my $sum = 0;\n    my $count = 0;\n    \n    for(my $i = $n; $i\
    \ <= $m; $i++) {\n        $sum += $i;\n        $count++;\n    }\n    \n    return\
    \ -1 if $n == $m;\n    \n    return sprintf(\"0b%b\", $sum / $count) if ($sum\
    \ / $count) == $sum;\n    \n    return -1;\n}", "    my $sum = 0;\n    my $count\
    \ = 0;\n    \n    for(my $i = $n; $i <= $m; $i++) {\n        $sum += $i;\n   \
    \     $count++;\n    }\n    \n    return $sum / $count if $count > 0;\n    return\
    \ -1;\n}", "    return -1 if $n > $m;\n    return -1 if $n == $m;\n    return\
    \ sprintf(\"0b%b\", $n + ($m - $n) / 2);\n}", "    my $avg = int(($n + $m) / 2);\n\
    \    return -1 if $avg > $m;\n    return sprintf(\"0b%b\", $avg);\n}", "    return\
    \ -1 unless $n >= $m;\n    my $sum = 0;\n    for (my $i = $n; $i <= $m; $i++)\
    \ {\n        $sum += $i;\n    }\n    return sprintf(\"0b%b\", $sum / $m) if $sum\
    \ / $m != $sum;\n    return -1;\n}", "    return -1 unless $n >= $m;\n    my $avg\
    \ = (($n - $m) / $m) * $m;\n    my $bin = Math::BigInt->new($avg);\n    return\
    \ $bin->as_hex();\n}", "    $n += $m if $n > $m;\n    return -1 if $n > $m;\n\
    \    my $s = \"\";\n    my $i = $n;\n    while ($i > $m) {\n        $s = $i &\
    \ 1 ? \"1\" : \"0\";\n        $i >>= 1;\n    }\n    $s = $i & 1 ? \"1\" : \"0\"\
    ;\n    $s = $s . $s;\n    return $s;\n}", "    my $avg = round(($n - $m) / 2);\n\
    \    my $bin = sprintf(\"%b\", $avg);\n    return $bin if $bin =~ /^[01]*$/;\n\
    \    return -1;\n}", "    my $avg = int(($n + $m) / 2);\n    return -1 if $avg\
    \ > $m;\n    return sprintf(\"0b%b\", $avg);\n}", "    my $avg = sprintf(\"%b\"\
    , $n + ($m - $n));\n    return $avg if $avg =~ /^0b/;\n    return -1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
