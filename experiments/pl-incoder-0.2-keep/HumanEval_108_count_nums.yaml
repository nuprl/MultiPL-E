name: HumanEval_108_count_nums
language: humaneval_to_perl.py
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n#\
  \ >>> count_nums([1, 1, 2]) == 3\nsub count_nums {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n\
  \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 2, -2, 3, 4, 5]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 100, 98, -7, 1, -1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum += $num\
    \ if $num > 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my\
    \ $num (@$arr) {\n        $sum += $num if $num > 0;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n    \
    \    $sum += $num;\n        $sign = 1 if $num < 0;\n    }\n    return $sum if\
    \ $sum > 0;\n    return $sign if $sign < 0;\n    return 0;\n}", "    my $count\
    \ = 0;\n    foreach my $num (@$arr) {\n        if ($num < 0) {\n            $num\
    \ *= -1;\n        }\n        my $digits = 0;\n        while ($num > 0) {\n   \
    \         $digits += $num % 10;\n            $num = int($num / 10);\n        }\n\
    \        if ($digits > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    foreach my $num (@$arr) {\n        $count\
    \ += $num > 0 ? $num : -$num;\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    foreach my $num (@$arr) {\n        if ($num < 0) {\n            $num\
    \ *= -1;\n        }\n        $count += $num % 10;\n    }\n    return $count;\n\
    }", "    my $sum = 0;\n    foreach my $num (@$arr) {\n        if ($num < 0) {\n\
    \            $sum -= $num;\n            $num *= -1;\n        }\n        $sum +=\
    \ $num;\n    }\n    return $sum;\n}", "    my $count = 0;\n    foreach my $num\
    \ (@$arr) {\n        if ($num < 0) {\n            $num *= -1;\n        }\n   \
    \     my $digits = $num % 10;\n        if ($digits > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach my\
    \ $num (@$arr) {\n        if ($num < 0) {\n            $num *= -1;\n        }\n\
    \        $count += $num % 10;\n        $num = $num / 10;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    foreach my $num (@$arr) {\n        if ($num < 0)\
    \ {\n            $num *= -1;\n        }\n        my $digits = 0;\n        while\
    \ ($num > 0) {\n            $digits += $num % 10;\n            $num /= 10;\n \
    \       }\n        if ($digits > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    foreach my $num (@$arr) {\n\
    \        my $digits = 0;\n        my $sign = 1;\n        my $first_digit = 0;\n\
    \        my $last_digit = 0;\n        my $first_negative = 0;\n        my $last_negative\
    \ = 0;\n        my $first_positive = 0;\n        my $last_positive = 0;\n    \
    \    my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        my $last_positive = 0;\n        my $first_negative = 0;\n    \
    \    my $last_negative = 0;\n        my $first_positive = 0;\n        my $last_positive\
    \ = 0;\n        my $first_zero = 0;\n        my $last_zero = 0;\n        my $first_positive\
    \ = 0;\n        ", "    my $count = 0;\n    foreach my $num (@$arr) {\n      \
    \  if ($num < 0) {\n            $num *= -1;\n        }\n        my $digits = $num\
    \ % 10;\n        if ($digits > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    foreach my $num (@$arr) {\n\
    \        if ($num < 0) {\n            $num *= -1;\n        }\n        my $digits\
    \ = 0;\n        while ($num >= 10) {\n            $digits += 1;\n            $num\
    \ -= 10;\n        }\n        $count += $digits;\n    }\n    return $count;\n}",
  "    my $count = 0;\n    foreach my $num (@$arr) {\n        if ($num < 0) {\n  \
    \          $num *= -1;\n        }\n        if ($num > 0) {\n            $count\
    \ += $num % 10;\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    foreach my $num (@$arr) {\n        if ($num < 0) {\n            $num *= -1;\n\
    \        }\n        my $digits = 0;\n        while ($num > 0) {\n            $digits\
    \ += $num % 10;\n            $num /= 10;\n        }\n        if ($digits > 0)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    foreach my $num (@$arr) {\n        if ($num < 0) {\n      \
    \      $num *= -1;\n        }\n        if ($num > 0) {\n            $count +=\
    \ $num;\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num < 0) {\n            $num *= -1;\n      \
    \  }\n        $count += $num % 10;\n        $num = $num / 10;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num < 0) {\n            $num *= -1;\n        }\n        if ($num == 0) {\n\
    \            $count++;\n        }\n        else {\n            my $digits = 0;\n\
    \            while (1) {\n                $digits += $num % 10;\n            \
    \    $num /= 10;\n                if ($num == 0) {\n                    last;\n\
    \                }\n            }\n            if ($digits > 0) {\n          \
    \      $count++;\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    foreach my $num (@$arr) {\n        my $digits = $num;\n\
    \        if ($num < 0) {\n            $digits = $num - $num % 10;\n        }\n\
    \        $count += $digits > 0 ? 1 : 0;\n    }\n    return $count;\n}", "    my\
    \ $sum = 0;\n    foreach my $num (@$arr) {\n        $sum += $num if $num > 0;\n\
    \    }\n    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
