name: HumanEval_58_common
language: humaneval_to_perl.py
prompt: "# Return sorted unique common elements for two lists.\n# >>> common([1, 4,\
  \ 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n\
  \        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %seen;\n    my @common;\n    foreach my $i (0 .. $#$l1) {\n\
    \        my $j = $i + 1;\n        next if $j > $#$l2;\n        next if $seen{$l1->[$i]}\
    \ && $seen{$l2->[$j]};\n        push(@common, $l1->[$i]);\n        $seen{$l1->[$i]}++;\n\
    \        $seen{$l2->[$j]}++;\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $l1_count = scalar @$l1;\n    my $l2_count = scalar @$l2;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < $l1_count && $j < $l2_count)\
    \ {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] <  $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] >  $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my %seen;\n    foreach my $x (@$l1, @$l2)\
    \ {\n        if (!defined $seen{$x}) {\n            $seen{$x} = 1;\n         \
    \   push @$out, $x;\n        }\n    }\n    return @$out;\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    my @common;\n    while($i < @$l1 && $j < @$l2) {\n      \
    \  if($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n      \
    \      $i++;\n            $j++;\n        } elsif($l1->[$i] <  $l2->[$j]) {\n \
    \           $i++;\n        } elsif($l1->[$i] >  $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        }\n    }\n    return @common;\n}", "    my %seen;\n\
    \    my @common;\n    foreach my $l (@$l1, @$l2) {\n        if (!exists $seen{$l})\
    \ {\n            push @common, $l;\n            $seen{$l} = 1;\n        }\n  \
    \  }\n    return @common;\n}", "    my %seen;\n    foreach my $elem (@$l1) {\n\
    \        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2) {\n        $seen{$elem}--;\n\
    \    }\n    return sort keys %seen;\n}", "    my @common;\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $l1 = 0;\n    my $l2 = 0;\n    my $l3 = 0;\n    my $l4 = 0;\n    my $l5\
    \ = 0;\n    my $l6 = 0;\n    my $l7 = 0;\n    my $l8 = 0;\n    my $l9 = 0;\n \
    \   my $l10 = 0;\n    my $l11 = 0;\n    my $l12 = 0;\n    my $l13 = 0;\n    my\
    \ $l14 = 0;\n    my $l15 = 0;\n    my $l16 = 0;\n    my $l17 = 0;\n    my $l18\
    \ = 0;\n    my $l19 = 0;\n    my $l20 = 0;\n    my $l21 = 0;\n    my $l22 = 0;\n\
    \    my $l23 = 0;\n    my $l24 = 0;\n    my $l25 = 0;\n    my $l26 = 0;\n    my\
    \ $l27 = 0;\n    my $l28 = 0;\n    my $l29 = 0;\n    my $l30 = 0;\n    my $l31\
    \ = 0;\n    my $l32 = 0;\n    my $l33 = 0;\n    my $l34 = 0;\n    my $l35 = 0;\n\
    \    my $l36 = 0;\n    my $l37 = 0;\n    my $l38 = 0;\n    my $l39 = 0;\n    my\
    \ $l40 = 0;\n    my $l41 = 0;\n    my $l42 = 0;\n    my $l43 = 0;\n    my $l44\
    \ = 0;\n    my $l45 = 0;\n    my $l46 = 0;\n    my $l47 = 0;\n    my $l48 = 0;\n\
    \    my $l49 = 0;\n    my $l50 = 0;\n    my $l51 = 0;\n    my $l52 = 0;\n    my\
    \ $l53 = 0;\n    my $l54 = 0;\n    my $l55 = 0;\n    my $l56 = 0;\n    my $l57\
    \ = 0;\n    my $l58 = 0;\n    my $l59 = 0;\n    my $l60 = 0;\n    my $l61 = 0;\n\
    \    my $l62 = 0;\n    my $l63 = 0;\n    my $l64 = 0;\n    my $l65 = 0;\n    my\
    \ $l66 = 0;\n    my $l67 = 0;\n    my $l68 = 0;\n    my $l69 = 0;\n    my $l70\
    \ = 0;\n    my $l71 = 0;\n    my $l72 = 0;\n    my $l73 = 0;\n    my $l74 = 0;\n\
    \    my $l75 = 0;\n    my $l76 = 0;\n    my $l77 = 0;\n    my $l78 = 0;\n    my\
    \ $l79 = 0;\n    my $l80 = 0;\n    my $l", "    my @common;\n    my $l1_count\
    \ = scalar @$l1;\n    my $l2_count = scalar @$l2;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    while ($i < $l1_count && $j < $l2_count) {\n       \
    \ if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n      \
    \      $i++;\n            $j++;\n        } elsif ($l1->[$i] <  $l2->[$j]) {\n\
    \            $i++;\n        } elsif ($l1->[$i] >  $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my @common;\n    my $l1_pos = 0;\n    my $l2_pos\
    \ = 0;\n    my $l1_len = $#l1;\n    my $l2_len = $#l2;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $common_len = 0;\n    my $l1_common = 0;\n    my $l2_common\
    \ = 0;\n    my $common_element;\n    my $l1_element;\n    my $l2_element;\n  \
    \  my $l1_common_index;\n    my $l2_common_index;\n    my $l1_common_element;\n\
    \    my $l2_common_element;\n    my $common_element_index;\n    my $l1_common_element_index;\n\
    \    my $l2_common_element_index;\n    my $common_element_value;\n    my $l1_common_element_value;\n\
    \    my $l2_common_element_value;\n    my $l1_common_element_value_pos;\n    my\
    \ $l2_common_element_value_pos;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_common_element_value_len;\n    my\
    \ $l2_common_element_value_len;\n    my $l1_", "    my $n1 = scalar(@$l1);\n \
    \   my $n2 = scalar(@$l2);\n    my $i = 0;\n    my $j = 0;\n    my @common;\n\
    \    while($i < $n1 && $j < $n2) {\n        if($l1->[$i] eq $l2->[$j]) {\n   \
    \         push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n  \
    \      } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n  \
    \          $j++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $l1_len = $l1 ? @$l1 : 0;\n    my $l2_len\
    \ = $l2 ? @$l2 : 0;\n    while($i < $l1_len && $j < $l2_len) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            push @common, $l1->[$i];\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my @common;\n    my $l1_pos =\
    \ 0;\n    my $l2_pos = 0;\n    my $l1_len = @$l1;\n    my $l2_len = @$l2;\n  \
    \  while ($l1_pos < $l1_len && $l2_pos < $l2_len) {\n        my $cmp = $l1->[$l1_pos]\
    \ <=> $l2->[$l2_pos];\n        if ($cmp == 0) {\n            push @common, $l1->[$l1_pos];\n\
    \            $l1_pos++;\n            $l2_pos++;\n        } elsif ($cmp < 0) {\n\
    \            $l1_pos++;\n        } else {\n            $l2_pos++;\n        }\n\
    \    }\n    return @common;\n}", "    my @common;\n    my $l1_count = @$l1;\n\
    \    my $l2_count = @$l2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n  \
    \  while ($i < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j])\
    \ {\n            push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] <  $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] >  $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ @common;\n    my $l1_count = scalar @$l1;\n    my $l2_count = scalar @$l2;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < $l1_count && $j < $l2_count)\
    \ {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] <  $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] >  $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            push @common, $l1->[$i];\n          \
    \  $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n \
    \   my $l1 = 0;\n    my $l2 = 0;\n    my $len1 = scalar @$l1;\n    my $len2 =\
    \ scalar @$l2;\n    my $len = 0;\n    my $flag = 0;\n    my $flag2 = 0;\n    my\
    \ $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n  \
    \  my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n\
    \    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14\
    \ = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my\
    \ $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n\
    \    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25\
    \ = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my\
    \ $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n\
    \    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36\
    \ = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my\
    \ $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n\
    \    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47\
    \ = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my\
    \ $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n\
    \    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58\
    \ = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my\
    \ $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n\
    \    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69\
    \ = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my\
    \ $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n\
    \    my $", "    my %seen;\n    my @common;\n    foreach my $x (@$l1) {\n    \
    \    next if $seen{$x}++;\n        push(@common, $x);\n    }\n    foreach my $x\
    \ (@$l2) {\n        next if $seen{$x}++;\n        push(@common, $x);\n    }\n\
    \    return @common;\n}", "    my $l1_len = @$l1;\n    my $l2_len = @$l2;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my @common;\n    while($i < $l1_len && $j <\
    \ $l2_len) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push(@common,\
    \ $l1->[$i]);\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ <  $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] >  $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my %seen;\n    foreach my $x\
    \ (@$l1) {\n        $seen{$x}++;\n    }\n    foreach my $x (@$l2) {\n        $seen{$x}--;\n\
    \    }\n    return grep { $seen{$_} > 0 } keys %seen;\n}", "    my %seen;\n  \
    \  my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $len1 =\
    \ scalar @$l1;\n    my $len2 = scalar @$l2;\n    while ($i < $len1 && $j < $len2)\
    \ {\n        my $cmp = $l1->[$i] <=> $l2->[$j];\n        if ($cmp == 0) {\n  \
    \          $i++;\n            $j++;\n        } elsif ($cmp < 0) {\n          \
    \  $i++;\n        } elsif ($cmp > 0) {\n            $j++;\n        } else {\n\
    \            push @common, $l1->[$i];\n            $i++;\n            $j++;\n\
    \        }\n    }\n    while ($i < $len1) {\n        push @common, $l1->[$i];\n\
    \        $i++;\n    }\n    while ($j < $len2) {\n        push @common, $l2->[$j];\n\
    \        $j++;\n    }\n    return @common;\n}", "    my %seen;\n    my @common;\n\
    \    foreach my $i (@$l1) {\n\tnext if $seen{$i}++;\n\tpush(@common, $i);\n  \
    \  }\n    foreach my $i (@$l2) {\n\tnext if $seen{$i}++;\n\tpush(@common, $i);\n\
    \    }\n    return @common;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
