name: HumanEval_155_even_odd_count
language: humaneval_to_perl.py
prompt: "# Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n# Example:\n# even_odd_count(-12) ==> (1, 1)\n# even_odd_count(123)\
  \ ==> (1, 2)\nsub even_odd_count {\n    my($num) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n\
  \        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($even, $odd) = (0,0);\n    while($num > 0) {\n        $even++;\n\
    \        $num = $num / 10;\n    }\n    while($num > 0) {\n        $odd++;\n  \
    \      $num = $num / 10;\n    }\n    return ($even, $odd);\n}", "    my $even\
    \ = 0;\n    my $odd = 0;\n    while($num > 0) {\n        $even = $even + $num\
    \ % 2;\n        $odd = $odd + $num / 2;\n        $num = $num / 10;\n    }\n  \
    \  return ($even, $odd);\n}", "    my($even, $odd);\n    if ($num < 0) {\n   \
    \     $even = $odd = -1;\n    } else {\n        $even = $odd = 0;\n        while\
    \ ($num > 0) {\n            $num = $num / 10;\n            $odd++;\n        }\n\
    \        while ($num > 0) {\n            $num = $num / 10;\n            $even++;\n\
    \        }\n    }\n    return ($even, $odd);\n}", "    my($even, $odd);\n    if\
    \ ($num < 0) {\n        $even = $odd = 0;\n    }\n    else {\n        $even =\
    \ $num % 2 == 0 ? 1 : 0;\n        $odd = $num % 2 != 0 ? 1 : 0;\n        $num\
    \ = $num / 2;\n    }\n    return ($even, $odd);\n}", "    my($even, $odd) = (0,\
    \ 0);\n    while($num > 0) {\n        $even++;\n        $num = $num / 10;\n  \
    \  }\n    while($num > 0) {\n        $odd++;\n        $num = $num / 10;\n    }\n\
    \    return ($even, $odd);\n}", "    my($even, $odd) = (0, 0);\n    while ($num\
    \ > 0) {\n        $even++ if $num % 2 == 0;\n        $odd++ if $num % 2 != 0;\n\
    \        $num = int($num / 10);\n    }\n    return ($even, $odd);\n}", "    my($even,\
    \ $odd) = (0,0);\n    while($num > 0) {\n        $even++;\n        $num = $num\
    \ / 10;\n    }\n    while($num > 0) {\n        $odd++;\n        $num = $num /\
    \ 10;\n    }\n    return ($even, $odd);\n}", "    my($even, $odd);\n    $num =~\
    \ s/^-?//;\n    $num =~ s/^0+//;\n    $num =~ s/^([1-9])/$1/ if $num =~ /^[1-9]$/;\n\
    \    $num =~ s/^([1-9][0-9]*)$/$1/;\n    $even = $1 if $num =~ /^([1-9])/;\n \
    \   $odd = $1 if $num =~ /^([1-9][0-9]*)$/;\n    return ($even, $odd);\n}", " \
    \   my($even, $odd);\n    if ($num < 0) {\n        $even = $odd = 0;\n    }\n\
    \    else {\n        $even = $num / 2;\n        $odd = $num % 2;\n    }\n    return\
    \ ($even, $odd);\n}", "    my $even = 0;\n    my $odd = 0;\n    while($num > 0)\
    \ {\n        $even = $even + $num % 2;\n        $odd = $odd + $num / 2;\n    \
    \    $num = $num / 10;\n    }\n    return ($even, $odd);\n}", "    my $even =\
    \ 0;\n    my $odd = 0;\n    while($num > 0) {\n        $num = $num / 10;\n   \
    \     $even++;\n    }\n    while($num > 0) {\n        $num = $num / 10;\n    \
    \    $odd++;\n    }\n    return ($even, $odd);\n}", "    my($even, $odd);\n  \
    \  \n    $num =~ s/^-?//;\n    $num =~ s/^0+//;\n    $num =~ s/^([1-9][0-9]*)//;\n\
    \    $even = $1 if $1 =~ /[02468]$/;\n    $odd = $1 if $1 =~ /[13579]$/;\n   \
    \ \n    return ($even, $odd);\n}", "    my $even = 0;\n    my $odd = 0;\n    while($num\
    \ > 0) {\n        $even = $even * 10 + ($num % 10);\n        $num = $num / 10;\n\
    \    }\n    while($num > 0) {\n        $odd = $odd * 10 + ($num % 10);\n     \
    \   $num = $num / 10;\n    }\n    return ($even, $odd);\n}", "    my($even, $odd)\
    \ = (0, 0);\n    while ($num > 0) {\n        $even++ if $num % 2 == 0;\n     \
    \   $odd++ if $num % 2 == 1;\n        $num = ($num / 2);\n    }\n    return ($even,\
    \ $odd);\n}", "    my($even, $odd) = (0, 0);\n    while ($num > 0) {\n       \
    \ $even++ if $num % 2 == 0;\n        $odd++ if $num % 2 != 0;\n        $num =\
    \ $num / 10;\n    }\n    return ($even, $odd);\n}", "    my($even, $odd);\n  \
    \  $even = $odd = 0;\n    while($num > 0) {\n        $even++;\n        $num =\
    \ $num / 10;\n    }\n    while($num > 0) {\n        $odd++;\n        $num = $num\
    \ / 10;\n    }\n    return ($even, $odd);\n}", "    my($even, $odd);\n    if ($num\
    \ < 0) {\n        $even = $odd = 0;\n    } else {\n        $even = $num % 2;\n\
    \        $odd = $num / 2;\n    }\n    return ($even, $odd);\n}", "    my($even,\
    \ $odd);\n    \n    if ($num < 0) {\n        $num *= -1;\n        $even = $odd\
    \ = 0;\n    }\n    else {\n        $even = $odd = 0;\n    }\n    \n    while ($num\
    \ > 0) {\n        $even++;\n        $num = $num / 10;\n    }\n    \n    while\
    \ ($num > 0) {\n        $odd++;\n        $num = $num / 10;\n    }\n    \n    return\
    \ ($even, $odd);\n}", "    my($even, $odd);\n    if ($num < 0) {\n        ($even,\
    \ $odd) = (0, 1)\n    }\n    else {\n        ($even, $odd) = (0, 1)\n    }\n \
    \   while ($num > 0) {\n        if ($num % 2 == 0) {\n            $even++;\n \
    \       }\n        else {\n            $odd++;\n        }\n        $num = $num\
    \ / 2;\n    }\n    return ($even, $odd);\n}", "    my($even, $odd) = (0, 0);\n\
    \    while($num > 0) {\n        $even++;\n        $num = $num / 10;\n    }\n \
    \   while($num > 0) {\n        $odd++;\n        $num = $num / 10;\n    }\n   \
    \ return ($even, $odd);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
