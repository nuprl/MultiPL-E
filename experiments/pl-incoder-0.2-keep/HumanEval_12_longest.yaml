name: HumanEval_12_longest
language: humaneval_to_perl.py
prompt: "# Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return None in case the input\
  \ list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b', 'c'])\n# 'a'\n# >>>\
  \ longest(['a', 'bb', 'ccc'])\n# 'ccc'\nsub longest {\n    my($strings) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n\
  \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
  abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $longest;\n    my $length = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $len = length($string);\n        if ($len > $length) {\n     \
    \       $longest = $string;\n            $length = $len;\n        }\n    }\n \
    \   return $longest if $length;\n    return;\n}", "    my $longest = undef;\n\
    \    my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($length > $longestLength) {\n      \
    \      $longest = $string;\n            $longestLength = $length;\n        }\n\
    \    }\n    return $longest if defined $longest;\n    return;\n}", "    my $longest;\n\
    \    my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($longestLength == 0) {\n           \
    \ $longest = $string;\n            $longestLength = $length;\n        } elsif\
    \ ($length > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest if $longestLength > 0;\n \
    \   return;\n}", "    my $longest;\n    my $length = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $len = length($string);\n        if ($len > $length)\
    \ {\n            $longest = $string;\n            $length = $len;\n        }\n\
    \    }\n    return $longest if $length;\n    return;\n}", "    my $longest;\n\
    \    foreach my $s (@$strings) {\n        my $len = length($s);\n        if ($len\
    \ > length($longest)) {\n            $longest = $s;\n        }\n    }\n    return\
    \ $longest if defined $longest;\n    return;\n}", "    my $longest = undef;\n\
    \    foreach my $string (@$strings) {\n        if (defined $longest) {\n     \
    \       last if length($string) > length($longest);\n        }\n        $longest\
    \ = $string;\n    }\n    return $longest if defined $longest;\n    return;\n}",
  "    my $longest = undef;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest if defined $longest;\n    return;\n}",
  "    my $longest = undef;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest if defined $longest;\n    return;\n}",
  "    my $longest = undef;\n    foreach my $string (@$strings) {\n        if (defined\
    \ $longest) {\n            last if (length $string > length $longest);\n     \
    \   }\n        $longest = $string;\n    }\n    return $longest;\n}", "    my $longest;\n\
    \    my $length = 0;\n    foreach my $string (@$strings) {\n        my $len =\
    \ length($string);\n        if ($len > $length) {\n            $longest = $string;\n\
    \            $length = $len;\n        }\n    }\n    return $longest if $length;\n\
    \    return;\n}", "    my $longest;\n    my $longestLength = 0;\n    foreach my\
    \ $string (@$strings) {\n        my $length = length($string);\n        if ($length\
    \ > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest if $longestLength > 0;\n \
    \   return;\n}", "    my $longest;\n    my $length = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $length = length $string;\n        if ($length > $length)\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest if\
    \ defined $longest;\n    return;\n}", "    my $longest;\n    my $length = 0;\n\
    \    foreach my $string (@$strings) {\n        $length += length($string);\n \
    \       if ($length > $longest) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest if defined $longest;\n    return;\n}", "    my $longest;\n\
    \    my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($length > $longestLength) {\n      \
    \      $longest = $string;\n            $longestLength = $length;\n        }\n\
    \    }\n    return $longest if $longestLength > 0;\n    return;\n}", "    my $longest;\n\
    \    my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($length > $longestLength) {\n      \
    \      $longest = $string;\n            $longestLength = $length;\n        }\n\
    \    }\n    return $longest if $longestLength > 0;\n    return $strings[0];\n}",
  "    my $longest;\n    my $length = 0;\n    foreach my $string (@$strings) {\n \
    \       my $len = length($string);\n        if ($len > $length) {\n          \
    \  $longest = $string;\n            $length = $len;\n        }\n    }\n    return\
    \ $longest if defined $longest;\n    return;\n}", "    my $longest;\n    my $longestLength\
    \ = -1;\n    foreach my $string (@$strings) {\n        my $length = length($string);\n\
    \        if ($longestLength < $length) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest if\
    \ $longestLength > 0;\n    return;\n}", "    my $longest;\n    foreach my $string\
    \ (@$strings) {\n        my $length = length($string);\n        if ($length >\
    \ length($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest if defined $longest;\n    return;\n}", "    my $longest;\n \
    \   my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my $length\
    \ = length($string);\n        if ($length > $longestLength) {\n            $longest\
    \ = $string;\n            $longestLength = $length;\n        }\n    }\n    return\
    \ $longest if $longestLength > 0;\n    return $strings[0];\n}", "    my $longest;\n\
    \    my $length = 0;\n    foreach my $string (@$strings) {\n        my $len =\
    \ length($string);\n        if ($len > $length) {\n            $longest = $string;\n\
    \            $length = $len;\n        }\n    }\n    return $longest if $length;\n\
    \    return;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
