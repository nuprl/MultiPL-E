completions:
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    \n    # Find out\
  \ if x is even or odd\n    if ($x % 2 == 0) {\n        $even = 1;\n    } else {\n\
  \        $odd = 1;\n    }\n    \n    # Find out if y is even or odd\n    if ($y\
  \ % 2 == 0) {\n        $even = 1;\n    } else {\n        $odd = 1;\n    }\n    \n\
  \    # Find out if x is greater than y\n    if ($x > $y) {\n        $result = $x;\n\
  \    } else {\n        $result = $y;\n    }\n    \n    # Find out if x is smaller\
  \ than y\n    if ($x < $y) {\n        $result = $y;\n    }\n    \n    # Find out\
  \ if x is equal to y\n    if ($x == $y) {\n        $result = $x;\n    }\n    \n\
  \    # Find out if x is less than y\n    if ($x < $y) {\n        $result = $y;\n\
  \    }\n    \n    # Find out if x is greater than y\n    if ($x > $y) {\n      \
  \  $result = $x;\n    }\n    \n    # Return result\n    return $result;\n}"
- "    my $result;\n    my $even = 1;\n    my $biggest = $x;\n    my $biggest_even\
  \ = $x;\n    my $biggest_odd = $y;\n    my $biggest_odd_even = $y;\n    my $biggest_odd_odd\
  \ = $y;\n    my $biggest_odd_odd_even = $y;\n    my $biggest_odd_odd_odd = $y;\n\
  \    my $biggest_odd_odd_odd_even = $y;\n    my $biggest_odd_odd_odd_odd = $y;\n\
  \    my $biggest_odd_odd_odd_odd_even = $y;\n    my $biggest_odd_odd_odd_odd_odd\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_odd_even = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_even = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_even = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_even = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd_even = $y;\n    my\
  \ $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd_even\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd = $y;\n    my $biggest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even\
  \ = $y;\n    my $biggest_odd_odd_odd_odd_"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ my $i;"
- "    my $min = $x > $y ? $x : $y;\n    my $max = $x > $y ? $y : $x;\n    my $ans\
  \ = -1;\n    for(my $i = $min; $i <= $max; $i++) {\n        my $num = $i;\n    \
  \    for(my $j = 1; $j <= $i; $j++) {\n            next if $num % $j == 0;\n   \
  \         $num = $j;\n        }\n        $ans = $num if $num > $ans;\n    }\n  \
  \  return $ans;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max - $min;\n    my $increment = $step / 2;\n    my $counter\
  \ = 0;\n    \n    while($counter < $step) {\n        $result = $min + $counter;\n\
  \        $counter++;\n        if ($result % 2 == 0) {\n            return $result;\n\
  \        }\n    }\n    return -1;\n}"
- "    my $result = -1;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    \n\
  \    while ($min <= $max) {\n        $mid = $min + ($max - $min) / 2;\n        if\
  \ ($mid % 2 == 0) {\n            $result = $mid;\n            $min = $mid + 1;\n\
  \        } else {\n            $max = $mid - 1;\n        }\n    }\n    return $result;\n\
  }"
- "    my $result = -1;\n    my $limit = $y;\n    my $counter = 0;\n    while($counter\
  \ < $x) {\n        if($result < $limit) {\n            $result = $limit;\n     \
  \   }\n        $limit = $limit + 2;\n        $counter++;\n    }\n    return $result;\n\
  }"
- "    my $max = $x;\n    my $min = $y;\n    my $num = $min;\n    while ($num < $max)\
  \ {\n        $num += 2;\n        if ($num > $max) {\n            $max = $num;\n\
  \        }\n        if ($num < $min) {\n            $min = $num;\n        }\n  \
  \  }\n    return $min;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $x > $y ? 1 : -1;\n    my $i = $min;\n    my $found = 0;\n\
  \    \n    while ($i <= $max) {\n        if ($i % 2 == 0) {\n            $result\
  \ = $i;\n            $found = 1;\n            last;\n        }\n        $i += $step;\n\
  \    }\n    \n    return $found ? $result : -1;\n}"
- "    my $result;\n    my $min = $x if $x < $y;\n    my $max = $y if $x > $y;\n \
  \   my $mid = ($min + $max) / 2;\n    my $is_even = ($mid % 2) == 0;\n    if ($is_even)\
  \ {\n        $result = $mid;\n    } else {\n        $result = $min;\n    }\n   \
  \ return $result;\n}"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        if($i\
  \ & 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n\
  \    return $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return -1 if $x == $y\
  \ || $x < $y;\n    return $x if $x % 2 == 0;\n    return $y if $y % 2 == 0;\n  \
  \  return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $y if $x % 2 == 0 && $y\
  \ % 2 == 1;\n    return $x if $x % 2 == 1 && $y % 2 == 0;\n    return $y if $x %\
  \ 2 == 1 && $y % 2 == 1;\n    return -1;\n}"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    \n    for(my $i\
  \ = $x; $i <= $y; $i++) {\n        if($i % 2 == 0) {\n            $even++;\n   \
  \     }\n        else {\n            $odd++;\n        }\n    }\n    \n    if($even\
  \ > $odd) {\n        $result = $even;\n    }\n    else {\n        $result = $odd;\n\
  \    }\n    \n    return $result;\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $odds;\n\
  \    my $evens;\n    my $odds_max;\n    my $evens_max;\n    my $odds_min;\n    my\
  \ $evens_min;\n    my $odds_mid;\n    my $evens_mid;\n    my $odds_max2;\n    my\
  \ $evens_max2;\n    my $odds_min2;\n    my $evens_min2;\n    my $odds_mid2;\n  \
  \  my $evens_mid2;\n    my $odds_max3;\n    my $evens_max3;\n    my $odds_min3;\n\
  \    my $evens_min3;\n    my $odds_mid3;\n    my $evens_mid3;\n    my $odds_max4;\n\
  \    my $evens_max4;\n    my $odds_min4;\n    my $evens_min4;\n    my $odds_mid4;\n\
  \    my $evens_mid4;\n    my $odds_max5;\n    my $evens_max5;\n    my $odds_min5;\n\
  \    my $evens_min5;\n    my $odds_mid5;\n    my $evens_mid5;\n    my $odds_max6;\n\
  \    my $evens_max6;\n    my $odds_min6;\n    my $evens_min6;\n    my $odds_mid6;\n\
  \    my $evens_mid6;\n    my $odds_max7;\n    my $evens_max7;\n    my $odds_min7;\n\
  \    my $evens_min7;\n    my $odds_mid7;\n    my $evens_mid7;\n    my $odds_max8;\n\
  \    my $evens_max8;\n    my $odds_min8;\n    my $evens_min8;\n    my $odds_mid8;\n\
  \    my $evens_mid8;\n    my $odds_max9;\n    my $evens_max9;\n    my $odds_min9;\n\
  \    my $evens_min9;\n    my $odds_mid9;\n    my $evens_mid9;\n    my $odds_max10;\n\
  \    my $evens_max10;\n    my $odds_min10;\n    my $evens_min10;\n    my $odds_mid10;\n\
  \    my $evens_mid10;\n    my $odds_max11;\n    my $evens_max11;\n    my $odds_min11;\n\
  \    my $evens_min11;\n    my $odds_mid11;\n"
- "    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $res;\n\
  \    my $i = 1;\n    while($i <= $max) {\n        $res = $i if ($i % 2 == 0);\n\
  \        $i++;\n    }\n    return $res if $res != -1;\n    return -1;\n}"
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $limit2 = $limit * $limit;\n\
  \    my $limit3 = $limit2 * $limit;\n    my $limit4 = $limit3 * $limit;\n    my\
  \ $limit5 = $limit4 * $limit;\n    my $limit6 = $limit5 * $limit;\n    my $limit7\
  \ = $limit6 * $limit;\n    my $limit8 = $limit7 * $limit;\n    my $limit9 = $limit8\
  \ * $limit;\n    my $limit10 = $limit9 * $limit;\n    my $limit11 = $limit10 * $limit;\n\
  \    my $limit12 = $limit11 * $limit;\n    my $limit13 = $limit12 * $limit;\n  \
  \  my $limit14 = $limit13 * $limit;\n    my $limit15 = $limit14 * $limit;\n    my\
  \ $limit16 = $limit15 * $limit;\n    my $limit17 = $limit16 * $limit;\n    my $limit18\
  \ = $limit17 * $limit;\n    my $limit19 = $limit18 * $limit;\n    my $limit20 =\
  \ $limit19 * $limit;\n    my $limit21 = $limit20 * $limit;\n    my $limit22 = $limit21\
  \ * $limit;\n    my $limit23 = $limit22 * $limit;\n    my $limit24 = $limit23 *\
  \ $limit;\n    my $limit25 = $limit24 * $limit;\n    my $limit26 = $limit25 * $limit;\n\
  \    my $limit27 = $limit26 * $limit;\n    my $limit28 = $limit27 * $limit;\n  \
  \  my $limit29 = $limit28 * $limit;\n    my $limit30 = $limit29 * $limit;\n    my\
  \ $limit31 = $limit30 * $limit;\n    my $limit32 = $limit31 * $limit;\n    my $limit33\
  \ = $limit32 * $limit;\n    my $limit34 = $limit33 * $limit;\n    my $limit35 =\
  \ $limit34 * $limit;\n    my $limit36 = $limit35 * $limit;\n    my $limit37 = $limit36\
  \ * $limit;\n    my $limit38 = $limit37 * $limit;\n    my $limit39 = $limit38 *\
  \ $limit;\n    my $limit40 = $limit39 * $limit;\n    my $limit41 = $limit40 * $limit;\n\
  \    my $limit42 = $limit41 * $limit;\n    my $limit43 = $limit42 * "
- "    my $result;\n    \n    # If the range is empty, then return -1\n    return\
  \ -1 if $x == $y;\n    \n    # If the range is [x, y], then return x\n    return\
  \ $x if $x == $y;\n    \n    # If the range is [y, x], then return y\n    return\
  \ $y if $x > $y;\n    \n    # Otherwise, find the midpoint\n    my $mid = ($x +\
  \ $y) / 2;\n    \n    # If the midpoint is even, then return choose_num(mid, y)\n\
  \    return $mid if $mid % 2 == 0;\n    \n    # If the midpoint is odd, then return\
  \ choose_num(x, mid)\n    return $x if $mid % 2 == 1;\n}"
- "    my $result;\n    \n    if ($x < $y) {\n        $result = $x;\n    } elsif ($x\
  \ > $y) {\n        $result = $y;\n    } else {\n        $result = $x;\n    }\n \
  \   \n    while ($result % 2 == 0) {\n        $result /= 2;\n    }\n    \n    return\
  \ $result;\n}"
- "    my $result = -1;\n    \n    if ($x < $y) {\n        $result = $x if ($x % 2\
  \ == 0);\n        $result = $y if ($y % 2 == 0);\n    }\n    else {\n        $result\
  \ = $y if ($y % 2 == 0);\n        $result = $x if ($x % 2 == 0);\n    }\n    \n\
  \    return $result;\n}"
- "    my $max_num = $x;\n    my $min_num = $y;\n    my $max_even;\n    my $min_even;\n\
  \    \n    while ($max_num < $min_num) {\n        $max_even = $max_num % 2 == 0\
  \ ? $max_num : $max_num - 1;\n        $min_even = $min_num % 2 == 0 ? $min_num :\
  \ $min_num + 1;\n        if ($max_even < $min_even) {\n            $max_num = $max_even;\n\
  \            $min_num = $min_even;\n        } else {\n            $max_num = $max_num\
  \ + 1;\n            $min_num = $min_num + 1;\n        }\n    }\n    return $max_num;\n\
  }"
- "    my $result;\n    my $remainder;\n    \n    # if the range is empty, return\
  \ -1\n    return -1 if $x == $y;\n    \n    # if the range is [x, y] inclusive,\
  \ return x\n    return $x if $x == $y;\n    \n    # if the range is [y, x] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, x] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [x, x] exclusive,\
  \ return x\n    return $x if $x == $y;\n    \n    # if the range is [x, x] inclusive,\
  \ return x\n    return $x if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] exclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range is [y, y] inclusive,\
  \ return y\n    return $y if $x == $y;\n    \n    # if the range "
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $counter = 0;\n    my\
  \ $even = 0;\n    my $odd = 0;\n    for(my $i = $x; $i <= $y; $i++) {\n        if\
  \ ($i % 2 == 0) {\n            $even++;\n        }\n        else {\n           \
  \ $odd++;\n        }\n    }\n    if ($even > $odd) {\n        $result = $x;\n  \
  \  }\n    elsif ($even < $odd) {\n        $result = $y;\n    }\n    elsif ($even\
  \ == $odd) {\n        $result = $x;\n    }\n    return $result;\n}"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $biggest = 0;\n\
  \    \n    # Check if x is bigger than y\n    if ($x > $y) {\n        $biggest =\
  \ $x;\n        $even = $y;\n        $odd = $x;\n    }\n    elsif ($x == $y) {\n\
  \        $biggest = $x;\n        $even = $x;\n        $odd = $y;\n    }\n    \n\
  \    # Check if x is smaller than y\n    else {\n        $biggest = $y;\n      \
  \  $even = $x;\n        $odd = $y;\n    }\n    \n    # Check if x is even\n    if\
  \ ($even % 2 == 0) {\n        $result = $even;\n    }\n    \n    # Check if x is\
  \ odd\n    else {\n        $result = $odd;\n    }\n    \n    return $result;\n}"
- "    my $result = -1;\n    \n    for(my $i = 0; $i < $y; $i++) {\n        my $num\
  \ = $x;\n        $num *= 2;\n        $num += $i;\n        $result = $num if $num\
  \ > $result;\n    }\n    \n    return $result;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $counter = 0;\n    \n    while ($min <=\
  \ $max) {\n        $result = $min + $step;\n        $counter++;\n        if ($counter\
  \ > 100) {\n            $result = -1;\n            last;\n        }\n        if\
  \ ($result % 2 == 0) {\n            $min = $result + 1;\n        } else {\n    \
  \        $max = $result;\n        }\n    }\n    return $result;\n}"
- "    my $even;\n    my $even_in_range;\n    my $even_in_range_in_range;\n    my\
  \ $even_in_range_in_range_in_range;\n    my $even_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range;\n    my $even_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range;\n\
  \    my $even_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range"
- "    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $num\
  \ = $min;\n    my $found = 0;\n    my $i;\n    \n    for($i = $min; $i <= $max;\
  \ $i++) {\n        $num += $i;\n        if($num % 2 == 0) {\n            $found\
  \ = 1;\n            last;\n        }\n    }\n    \n    return -1 if $found == 0;\n\
  \    return $num;\n}"
- "    my $result = -1;\n    \n    if ($x < $y) {\n        $result = $x if $x % 2\
  \ == 0;\n        $result = $y if $y % 2 == 0;\n    }\n    else {\n        $result\
  \ = $y if $y % 2 == 0;\n        $result = $x if $x % 2 == 0;\n    }\n    \n    return\
  \ $result;\n}"
- "    my $result;\n    my $even;\n    my $i;\n    my $j;\n    my $k;\n    my $evens;\n\
  \    my $odds;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_max;\n    my $odds_max;\n    my $evens_min;\n\
  \    my $odds_min;\n    \n    # Initialize variables\n    $even = 0;\n    $odd =\
  \ 0;\n    $evens = 0;\n    $odds = 0;\n    $evens_count = 0;\n    $odds_count =\
  \ 0;\n    $evens_sum = 0;\n    $odds_sum = 0;\n    $evens_max = 0;\n    $odds_max\
  \ = 0;\n    $evens_min = 0;\n    $odds_min = 0;\n    \n    # Calculate even and\
  \ odd numbers\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n\
  \            $even = $even * 2 + $i;\n            $evens = $evens + 1;\n       \
  \ }\n        else {\n            $odd = $odd * 2 + $i;\n            $odds = $odds\
  \ + 1;\n        }\n    }\n    \n    # Calculate even and odd numbers\n    for ($i\
  \ = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even = $even\
  \ * 2 + $i;\n            $evens_sum = $evens_sum + $even;\n            $evens_count\
  \ = $evens_count + 1;\n        }\n        else {\n            $odd = $odd * 2 +\
  \ $i;\n            $odds_sum = $odds_sum + $odd;\n            $odds_count = $odds_count\
  \ + 1;\n        }\n    }\n    \n    # Calculate even and odd numbers\n    for ($i\
  \ = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even = $even\
  \ * 2 + $i;\n            $evens_max = $evens_max < $even ? $even : $evens_max;\n\
  \            $evens_min = $evens_min > $even ? $even : $evens_min;\n        }\n\
  \        else {\n            $odd = $odd * 2 + $i;\n            $odds_max = $odds_max\
  \ < $odd ? $odd : $odds_max;\n            $odds_min = $odds_min > $odd ? $odd :\
  \ $odds_min;\n        }\n    }\n    \n    # Calculate even and odd numbers\n   \
  \ for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even\
  \ = $even * 2 + $i;\n            $evens_sum = $evens_sum + $"
- "    my $even = 1;\n    my $biggest = $x;\n    my $smaller = $y;\n    \n    while($biggest\
  \ < $smaller){\n        $biggest = $biggest + $even;\n        $even = $even * 2;\n\
  \    }\n    \n    return $biggest if $biggest < $smaller;\n    return -1;\n}"
- "    my $even;\n    my $even_in_range;\n    my $even_in_range_min;\n    my $even_in_range_max;\n\
  \    my $even_in_range_min_max;\n    my $even_in_range_min_max_diff;\n    my $even_in_range_min_max_diff_max;\n\
  \    my $even_in_range_min_max_diff_min;\n    my $even_in_range_min_max_diff_min2;\n\
  \    my $even_in_range_min_max_diff_min3;\n    my $even_in_range_min_max_diff_min4;\n\
  \    my $even_in_range_min_max_diff_min5;\n    my $even_in_range_min_max_diff_min6;\n\
  \    my $even_in_range_min_max_diff_min7;\n    my $even_in_range_min_max_diff_min8;\n\
  \    my $even_in_range_min_max_diff_min9;\n    my $even_in_range_min_max_diff_min10;\n\
  \    my $even_in_range_min_max_diff_min11;\n    my $even_in_range_min_max_diff_min12;\n\
  \    my $even_in_range_min_max_diff_min13;\n    my $even_in_range_min_max_diff_min14;\n\
  \    my $even_in_range_min_max_diff_min15;\n    my $even_in_range_min_max_diff_min16;\n\
  \    my $even_in_range_min_max_diff_min17;\n    my $even_in_range_min_max_diff_min18;\n\
  \    my $even_in_range_min_max_diff_min19;\n    my $even_in_range_min_max_diff_min20;\n\
  \    my $even_in_range_min_max_diff_min21;\n    my $even_in_range_min_max_diff_min22;\n\
  \    my $even_in_range_min_max_diff_min23;\n    my $even_in_range_min_max_diff_min24;\n\
  \    my $even_in_range_min_max_diff_min25;\n    my $even_in_range_min_max_diff_min26;\n\
  \    my $even_in_range_min_max_diff_min27;\n    my $even_in_range_min_max_diff_min28;\n\
  \    my $even_in_range_min_max_diff_min29;\n    my $even_in_range_min_max_diff_min30;\n\
  \    my $even_in_range_min_max_diff_min31;\n    my $even_in_range_min_max_diff_min32;\n\
  \    my $even_in_range_min_max_diff_min33;\n    my $even_in_range_min_max_diff_min34;\n\
  \    my $even_in_range_min_max_diff_min35;\n    my $even_in_range_min_max_diff_min36;\n\
  \    my $even_in_range_min_max_diff_min37;\n    my $even_in_range_min_max_diff_min38;\n\
  \    my $even_in_range_min_max_diff_min39;\n    my $even_in_range_"
- "    my $result = -1;\n    my $x_even = $x % 2 == 0;\n    my $y_even = $y % 2 ==\
  \ 0;\n    \n    if ($x_even && $y_even) {\n        $result = $x if $x > $y;\n  \
  \      $result = $y if $x < $y;\n    } elsif ($x_even) {\n        $result = $x;\n\
  \    } elsif ($y_even) {\n        $result = $y;\n    }\n    \n    return $result;\n\
  }"
- "    my $result;\n    my $even = 1;\n    my $odd = 1;\n    my $min = $x;\n    my\
  \ $max = $y;\n    my $mid;"
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $step = $limit / 2;\n\
  \    my $counter = 0;\n    my $limit2 = $limit / 2;\n    while ($counter < $limit2)\
  \ {\n        if ($x % $step == 0) {\n            $result = $x;\n            last;\n\
  \        }\n        $counter++;\n        $step = $step / 2;\n    }\n    return $result;\n\
  }"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ my $num;\n    \n    while ($min < $max) {\n        $num = $min + $max;\n     \
  \   if ($num % 2 == 0) {\n            $even++;\n        }\n        else {\n    \
  \        $odd++;\n        }\n        $min++;\n        $max--;\n    }\n    \n   \
  \ if ($even > $odd) {\n        return $even;\n    }\n    else {\n        return\
  \ $odd;\n    }\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $mid = $min + ($max - $min) / 2;\n    while ($min <= $max) {\n   \
  \     $result = $mid + ($mid - $min) / 2;\n        if ($result >= $x && $result\
  \ <= $y) {\n            return $result;\n        }\n        $min = $mid + 1;\n \
  \       $mid = $mid + ($max - $min) / 2;\n    }\n    return -1;\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while ($min <= $max) {\n        $even = $min + $even;\n        $odd = $min\
  \ + $odd;\n        $min = $min + 1;\n    }\n    \n    if ($even > $odd) {\n    \
  \    return $even;\n    }\n    else {\n        return $odd;\n    }\n}"
- "    return -1 if $x < $y;\n    return -1 if $x > $y;\n    return $x if $x % 2 ==\
  \ 0;\n    return $y if $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n\
  \    return $y if $x % 2 == 0 && $y % 2 == 1;\n    return $x if $x % 2 == 1 && $y\
  \ % 2 == 0;\n    return $y if $x % 2 == 1 && $y % 2 == 1;\n    return -1;\n}"
- "    my $max = -1;\n    my $i;\n    my $even;\n    \n    for ($i = $x; $i <= $y;\
  \ $i++) {\n        $even = 0;\n        if ($i % 2 == 0) {\n            $even = 1;\n\
  \        }\n        if ($even > $max) {\n            $max = $even;\n        }\n\
  \    }\n    return $max;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return -1 if $x > $y;\n\
  \    return $x if $x % 2 == 0;\n    return $y if $y % 2 == 0;\n    return $x + $y\
  \ - 1;\n}"
- "    my $result = -1;\n    my $xx = $x;\n    my $yy = $y;\n    while($xx <= $yy)\
  \ {\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result =\
  \ $xx if ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n \
  \       $xx >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n  \
  \      $result = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if\
  \ ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx\
  \ >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result\
  \ = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n\
  \        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n \
  \       $result = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if\
  \ ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx\
  \ >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result\
  \ = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n\
  \        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n \
  \       $result = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if\
  \ ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx\
  \ >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result\
  \ = $xx if ($xx & 1);\n        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n\
  \        $xx >>= 1;\n        $result = $xx if ($xx & 1);\n        $xx >>= 1;\n \
  \       $result = $xx if ($xx "
- "    my $result = -1;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $flag\
  \ = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5\
  \ = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9\
  \ = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13\
  \ = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17\
  \ = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21\
  \ = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25\
  \ = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29\
  \ = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33\
  \ = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37\
  \ = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41\
  \ = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45\
  \ = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49\
  \ = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53\
  \ = 0;\n    my $flag54 = 0;\n    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57\
  \ = 0;\n    my $flag58 = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my $flag61\
  \ = 0;\n    my $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65\
  \ = 0;\n    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69\
  \ = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my $flag73\
  \ = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n    my $flag77\
  \ = 0;\n    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80 = 0;\n    my $flag81\
  \ = 0;\n    my $flag82 = 0;\n    my $flag83 = 0;\n"
- "    my $result;\n    if ($x < $y) {\n        $result = $x;\n        $x = $y;\n\
  \        $y = $result;\n    }\n    my $x_even = $x % 2 == 0;\n    my $y_even = $y\
  \ % 2 == 0;\n    if ($x_even && $y_even) {\n        $result = $x + ($y - $x) / 2;\n\
  \    } elsif ($x_even && !$y_even) {\n        $result = $x - $y / 2;\n    } elsif\
  \ (!$x_even && $y_even) {\n        $result = $y + ($x - $y) / 2;\n    } else {\n\
  \        $result = -1;\n    }\n    return $result;\n}"
- "    my $result = -1;\n    my $i = 0;\n    while($i < $x && $i < $y) {\n       \
  \ $result = $i if ($i % 2 == 0);\n        $i++;\n    }\n    return $result;\n}"
- "    my $result = -1;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ?\
  \ $y : $x;\n    for(my $i = $min; $i <= $max; $i++) {\n        if($i % 2 == 0) {\n\
  \            $result = $i;\n            last;\n        }\n    }\n    return $result;\n\
  }"
- "    my $result = -1;\n    \n    my $x_even = $x % 2 == 0;\n    my $y_even = $y\
  \ % 2 == 0;\n    \n    if ($x_even && $y_even) {\n        $result = $x if $x > $y;\n\
  \        $result = $y if $x < $y;\n    }\n    elsif ($x_even) {\n        $result\
  \ = $x;\n    }\n    elsif ($y_even) {\n        $result = $y;\n    }\n    \n    return\
  \ $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return -1 if $x > $y;\n\
  \    my $even = 0;\n    my $odd = 1;\n    my $min = $x;\n    my $max = $y;\n   \
  \ my $diff = $max - $min;\n    my $step = $diff / 2;\n    my $num = $min;\n    my\
  \ $found = 0;\n    my $counter = 0;\n    my $maxcounter = 0;\n    my $maxeven =\
  \ 0;\n    my $maxodd = 0;\n    my $maxeveneven = 0;\n    my $maxoddodd = 0;\n  \
  \  my $maxevenodd = 0;\n    my $maxoddeven = 0;\n    my $maxoddodd = 0;\n    my\
  \ $maxeveneveneven = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven = 0;\n\
  \    my $maxoddoddeven = 0;\n    my $maxevenevenodd = 0;\n    my $maxoddevenodd\
  \ = 0;\n    my $maxevenoddeven = 0;\n    my $maxoddoddeven = 0;\n    my $maxeveneveneven\
  \ = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven = 0;\n    my $maxoddoddeven\
  \ = 0;\n    my $maxevenevenodd = 0;\n    my $maxoddoddeven = 0;\n    my $maxeveneveneven\
  \ = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven = 0;\n    my $maxoddoddeven\
  \ = 0;\n    my $maxeveneveneven = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven\
  \ = 0;\n    my $maxoddoddeven = 0;\n    my $maxevenevenodd = 0;\n    my $maxoddevenodd\
  \ = 0;\n    my $maxevenoddeven = 0;\n    my $maxoddoddeven = 0;\n    my $maxeveneveneven\
  \ = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven = 0;\n    my $maxoddoddeven\
  \ = 0;\n    my $maxeveneveneven = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven\
  \ = 0;\n    my $maxoddoddeven = 0;\n    my $maxeveneveneven = 0;\n    my $maxoddeveneven\
  \ = 0;\n    my $maxevenoddeven = 0;\n    my $maxoddoddeven = 0;\n    my $maxeveneveneven\
  \ = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven = 0;\n    my $maxoddoddeven\
  \ = 0;\n    my $maxeveneveneven = 0;\n    my $maxoddeveneven = 0;\n    my $maxevenoddeven\
  \ = 0;\n    my $maxoddoddeven = 0;\n    my $maxeveneveneven = 0;\n    my $"
- "    my $result;\n    \n    my $x_even = $x % 2 == 0;\n    my $y_even = $y % 2 ==\
  \ 0;\n    \n    if ($x_even && $y_even) {\n        $result = $x if $x > $y;\n  \
  \      $result = $y if $x < $y;\n    }\n    elsif ($x_even) {\n        $result =\
  \ $x;\n    }\n    elsif ($y_even) {\n        $result = $y;\n    }\n    else {\n\
  \        $result = -1;\n    }\n    \n    return $result;\n}"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        if($i\
  \ & 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n\
  \    return $result;\n}"
- "    my $result;\n    my $x_even = $x % 2 != 0;\n    my $y_even = $y % 2 != 0;\n\
  \    my $x_even_in_range = $x_even && $x >= $y;\n    my $y_even_in_range = $y_even\
  \ && $y >= $x;\n    if ($x_even_in_range && $y_even_in_range) {\n        $result\
  \ = $x;\n    } elsif ($x_even_in_range) {\n        $result = $y;\n    } elsif ($y_even_in_range)\
  \ {\n        $result = $x;\n    } else {\n        $result = -1;\n    }\n    return\
  \ $result;\n}"
- "    my $result = -1;\n    \n    if ($x < $y) {\n        $result = $x if ($x % 2\
  \ == 0);\n        $result = $y if ($y % 2 == 0);\n    }\n    else {\n        $result\
  \ = $y if ($y % 2 == 0);\n        $result = $x if ($x % 2 == 0);\n    }\n    \n\
  \    return $result;\n}"
- "    my $even = 1;\n    my $evennum = $x;\n    my $oddnum = $y;\n    my $biggest\
  \ = $evennum;\n    my $biggestnum = $evennum;\n    my $biggestevennum = $evennum;\n\
  \    my $biggestoddnum = $oddnum;\n    my $biggestevenevennum = $evennum;\n    my\
  \ $biggestoddoddnum = $oddnum;\n    my $biggestevenoddnum = $evennum;\n    my $biggestoddevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddoddevennum\
  \ = $oddnum;\n    my $biggestevenoddevennum = $evennum;\n    my $biggestoddoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $evennum;\n    my $biggestoddevenevennum\
  \ = $oddnum;\n    my $biggestevenevenoddnum = $even"
- "    my $even = 0;\n    my $evennum = 0;\n    my $oddnum = 0;\n    my $oddnum2 =\
  \ 0;\n    my $evennum2 = 0;\n    my $oddnum3 = 0;\n    my $evennum3 = 0;\n    my\
  \ $oddnum4 = 0;\n    my $evennum4 = 0;\n    my $oddnum5 = 0;\n    my $evennum5 =\
  \ 0;\n    my $oddnum6 = 0;\n    my $evennum6 = 0;\n    my $oddnum7 = 0;\n    my\
  \ $evennum7 = 0;\n    my $oddnum8 = 0;\n    my $evennum8 = 0;\n    my $oddnum9 =\
  \ 0;\n    my $evennum9 = 0;\n    my $oddnum10 = 0;\n    my $evennum10 = 0;\n   \
  \ my $oddnum11 = 0;\n    my $evennum11 = 0;\n    my $oddnum12 = 0;\n    my $evennum12\
  \ = 0;\n    my $oddnum13 = 0;\n    my $evennum13 = 0;\n    my $oddnum14 = 0;\n \
  \   my $evennum14 = 0;\n    my $oddnum15 = 0;\n    my $evennum15 = 0;\n    my $oddnum16\
  \ = 0;\n    my $evennum16 = 0;\n    my $oddnum17 = 0;\n    my $evennum17 = 0;\n\
  \    my $oddnum18 = 0;\n    my $evennum18 = 0;\n    my $oddnum19 = 0;\n    my $evennum19\
  \ = 0;\n    my $oddnum20 = 0;\n    my $evennum20 = 0;\n    my $oddnum21 = 0;\n \
  \   my $evennum21 = 0;\n    my $oddnum22 = 0;\n    my $evennum22 = 0;\n    my $oddnum23\
  \ = 0;\n    my $evennum23 = 0;\n    my $oddnum24 = 0;\n    my $evennum24 = 0;\n\
  \    my $oddnum25 = 0;\n    my $evennum25 = 0;\n    my $oddnum26 = 0;\n    my $evennum26\
  \ = 0;\n    my $oddnum27 = 0;\n    my $evennum27 = 0;\n    my $oddnum28 = 0;\n \
  \   my $evennum28 = 0;\n    my $oddnum29 = 0;\n    my $evennum29 = 0;\n    my $oddnum30\
  \ = 0;\n    my $evennum30 = 0;\n    my $oddnum31 = 0;\n    my $evennum31 = 0;\n\
  \    my $oddnum32 = 0;\n    my $evennum32 = 0;\n    my $oddnum33 = 0;\n    my $evennum33\
  \ = 0;\n    my $oddnum34 = 0;\n    my $evennum34 = 0;\n    my $oddnum35 = 0;\n \
  \   my $evennum35 = 0;\n    my $oddnum36 = 0;\n    my $evennum36 = 0;\n    my $oddnum37\
  \ = 0;\n    my $evennum37 = 0;"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $i;\n    for ($i = $min; $i <= $max; $i\
  \ += $step) {\n        if ($i % 2 == 0) {\n            $result = $i;\n         \
  \   last;\n        }\n    }\n    return $result if $result != -1;\n    return -1;\n\
  }"
- "    my $max_num = $x;\n    my $min_num = $y;\n    my $max_even;\n    my $min_even;\n\
  \    my $max_odd;\n    my $min_odd;\n    my $max_even_in_range;\n    my $min_even_in_range;\n\
  \    my $max_odd_in_range;\n    my $min_odd_in_range;\n    my $max_even_in_range_even;\n\
  \    my $min_even_in_range_even;\n    my $max_odd_in_range_odd;\n    my $min_odd_in_range_odd;\n\
  \    my $max_even_in_range_odd_even;\n    my $min_even_in_range_odd_even;\n    my\
  \ $max_odd_in_range_odd_odd;\n    my $min_odd_in_range_odd_odd;\n    my $max_even_in_range_odd_even_even;\n\
  \    my $min_even_in_range_odd_even_even;\n    my $max_odd_in_range_odd_even_odd;\n\
  \    my $min_odd_in_range_odd_even_odd;\n    my $max_even_in_range_odd_odd_even;\n\
  \    my $min_even_in_range_odd_odd_even;\n    my $max_odd_in_range_odd_odd_odd;\n\
  \    my $min_odd_in_range_odd_odd_odd;\n    my $max_even_in_range_odd_even_even_even;\n\
  \    my $min_even_in_range_odd_even_even_even;\n    my $max_odd_in_range_odd_even_even_odd;\n\
  \    my $min_odd_in_range_odd_even_even_odd;\n    my $max_even_in_range_odd_odd_even_even;\n\
  \    my $min_even_in_range_odd_odd_even_even;\n    my $max_odd_in_range_odd_odd_even_odd;\n\
  \    my $min_odd_in_range_odd_odd_even_odd;\n    my $max_even_in_range_odd_even_even_even_even;\n\
  \    my $min_even_in_range_odd_even_even_even_even;\n    my $max_odd_in_range_odd_even_even_even_odd;\n\
  \    my $min_odd_in_range_odd_even_even_even_odd;\n    my $max_even_in_range_odd_odd_even_even_even;\n\
  \    my $min_even_in_range_odd_odd_even_even_even;\n    my $max_odd_in_range_odd_even_even_even_odd;\n\
  \    my $"
- "    my $max = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $i;\n    \n    for\
  \ ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n    }\n    \n    if\
  \ ($even > $odd) {\n        $max = $x;\n    }\n    else {\n        $max = $y;\n\
  \    }\n    \n    return $max;\n}"
- "    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $even\
  \ = 0;\n    my $odd = 0;\n    my $num;\n    \n    for(my $i = $min; $i <= $max;\
  \ $i++) {\n        $num = $i;\n        if ($num % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n    }\n    \n    if\
  \ ($even > $odd) {\n        return $even;\n    }\n    else {\n        return $odd;\n\
  \    }\n}"
- "    return -1 if $x < $y;\n    return -1 if $x > $y;\n    return $x if $x == $y;\n\
  \    return $x if $x % 2 == 0;\n    return $y if $y % 2 == 0;\n    return $x + $y\
  \ - 1;\n}"
- "    my $max_even;\n    my $max_odd;\n    my $even;\n    my $odd;\n    my $i;\n\
  \    my $j;\n    my $k;\n    my $odds;\n    my $evens;\n    my $evens_count;\n \
  \   my $odds_count;\n    my $max_odd_count;\n    my $max_even_count;\n    my $max_odd_even_count;\n\
  \    my $max_evens_count;\n    my $max_odds_count;\n    my $max_evens_odds_count;\n\
  \    my $max_odds_evens_count;\n    my $max_evens_evens_odds_count;\n    my $max_odds_odds_evens_count;\n\
  \    my $max_evens_evens_odds_odds_count;\n    my $max_odds_evens_odds_evens_count;\n\
  \    my $max_evens_odds_evens_evens_odds_count;\n    my $max_odds_evens_evens_odds_evens_count;\n\
  \    my $max_evens_evens_odds_evens_odds_count;\n    my $max_odds_odds_evens_evens_evens_count;\n\
  \    my $max_evens_evens_odds_odds_evens_count;\n    my $max_odds_evens_evens_odds_evens_count;\n\
  \    my $max_evens_odds_evens_evens_odds_count;\n    my $max_odds_evens_odds_evens_evens_count;\n\
  \    my $max_evens_evens_odds_odds_evens_count;\n    my $max_odds_odds_evens_evens_evens_count;\n\
  \    my $max_evens_evens_odds_odds_evens_count;\n    my $max_odds_evens_evens_odds_evens_count;\n\
  \    my $max_evens_odds_evens_odds_evens_count;\n    my $max_odds_evens_evens_odds_evens_count;\n\
  \    my $max_evens_evens_odds_odds_evens_count;\n    my $max_odds_odds_evens_evens_evens_count;\n\
  \    my $max_evens_evens_odds_odds_evens_count;\n    my $max_odds_evens_evens_odds_evens_count;\n\
  \    my $max_evens_odds_evens_odds_evens_count;\n    my $max_odds_evens_odds_evens_evens_count;\n\
  \    my $max_evens_evens_odds_odds_evens_count;\n    my $max_odds_odds_evens_evens_evens_count;\n\
  \    my $max_evens_evens_odds_odds_evens_count;\n    my $max_odds_evens_"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return -1 if $x > $y;\n\
  \    \n    my $even = 1;\n    my $even2 = 1;\n    my $even3 = 1;\n    my $even4\
  \ = 1;\n    my $even5 = 1;\n    my $even6 = 1;\n    my $even7 = 1;\n    my $even8\
  \ = 1;\n    my $even9 = 1;\n    my $even10 = 1;\n    my $even11 = 1;\n    my $even12\
  \ = 1;\n    my $even13 = 1;\n    my $even14 = 1;\n    my $even15 = 1;\n    my $even16\
  \ = 1;\n    my $even17 = 1;\n    my $even18 = 1;\n    my $even19 = 1;\n    my $even20\
  \ = 1;\n    my $even21 = 1;\n    my $even22 = 1;\n    my $even23 = 1;\n    my $even24\
  \ = 1;\n    my $even25 = 1;\n    my $even26 = 1;\n    my $even27 = 1;\n    my $even28\
  \ = 1;\n    my $even29 = 1;\n    my $even30 = 1;\n    my $even31 = 1;\n    my $even32\
  \ = 1;\n    my $even33 = 1;\n    my $even34 = 1;\n    my $even35 = 1;\n    my $even36\
  \ = 1;\n    my $even37 = 1;\n    my $even38 = 1;\n    my $even39 = 1;\n    my $even40\
  \ = 1;\n    my $even41 = 1;\n    my $even42 = 1;\n    my $even43 = 1;\n    my $even44\
  \ = 1;\n    my $even45 = 1;\n    my $even46 = 1;\n    my $even47 = 1;\n    my $even48\
  \ = 1;\n    my $even49 = 1;\n    my $even50 = 1;\n    my $even51 = 1;\n    my $even52\
  \ = 1;\n    my $even53 = 1;\n    my $even54 = 1;\n    my $even55 = 1;\n    my $even56\
  \ = 1;\n    my $even57 = 1;\n    my $even58 = 1;\n    my $even59 = 1;\n    my $even60\
  \ = 1;\n    my $even61 = 1;\n    my $even62 = 1;\n    my $even63 = 1;\n    my $even64\
  \ = 1;\n    my $even65 = 1;\n    my $even66 = 1;\n    my $even67 = 1;\n    my $even68\
  \ = 1;\n    my $even69 = 1;\n    my $even70 = 1;\n    my $even71 = 1;\n    my $even72\
  \ = 1;\n    my $even73 = 1;\n    my $even74 = 1;\n    my $even75 = 1;\n    my $even76\
  \ = 1;\n    my $even77 = 1;\n    my $even78 = 1;\n    my $even79 = 1;\n    my $even80\
  \ = 1;\n    "
- "    my $even = 1;\n    my $max = $x;\n    my $min = $y;\n    my $temp;\n    \n\
  \    while ($min <= $max) {\n        $temp = $min + $max;\n        if ($temp % 2\
  \ == 0) {\n            $even = 0;\n        }\n        if ($temp > $max) {\n    \
  \        $max = $temp;\n        }\n        if ($temp < $min) {\n            $min\
  \ = $temp;\n        }\n    }\n    \n    if ($even) {\n        return $max;\n   \
  \ } else {\n        return -1;\n    }\n}"
- "    my $max = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $num = 0;\n    \n\
  \    # Check if x is bigger than y\n    if ($x > $y) {\n        $max = $x;\n   \
  \     $even = $y;\n        $odd = $x;\n    } elsif ($x < $y) {\n        $max = $y;\n\
  \        $even = $x;\n        $odd = $y;\n    } else {\n        $max = $x;\n   \
  \     $even = $x;\n        $odd = $y;\n    }\n    \n    # Check if x is even\n \
  \   if ($even % 2 == 0) {\n        $num = $even;\n    } else {\n        $num = $odd;\n\
  \    }\n    \n    return $max;\n}"
- "    my $result = -1;\n    \n    for(my $i = 0; $i <= $y; $i++) {\n        my $num\
  \ = $x;\n        $num += $i if $num % 2 == 0;\n        $result = $num if $num >\
  \ $result;\n    }\n    \n    return $result;\n}"
- "    my $result;\n    my $even;\n    my $odd;\n    my $min = $x;\n    my $max =\
  \ $y;\n    my $i;\n    my $j;\n    my $k;\n    my $evens = 0;\n    my $odds = 0;\n\
  \    \n    # find min and max number\n    for ($i = $min; $i <= $max; $i++) {\n\
  \        $even = 0;\n        $odd = 0;\n        for (my $j = $i; $j <= $max; $j++)\
  \ {\n            if ($j % 2 != 0) {\n                $even++;\n            }\n \
  \           else {\n                $odd++;\n            }\n        }\n        if\
  \ ($even > $odd) {\n            $min = $i;\n        }\n        else {\n        \
  \    $max = $i;\n        }\n    }\n    \n    # find even and odd numbers\n    for\
  \ ($i = $min; $i <= $max; $i++) {\n        $even = 0;\n        $odd = 0;\n     \
  \   for (my $j = $i; $j <= $max; $j++) {\n            if ($j % 2 == 0) {\n     \
  \           $even++;\n            }\n            else {\n                $odd++;\n\
  \            }\n        }\n        if ($even > $odd) {\n            $even = $i;\n\
  \        }\n        else {\n            $odd = $i;\n        }\n    }\n    \n   \
  \ # find biggest even number\n    for ($i = $min; $i <= $max; $i++) {\n        $even\
  \ = 0;\n        $odd = 0;\n        for (my $j = $i; $j <= $max; $j++) {\n      \
  \      if ($j % 2 == 0) {\n                $even++;\n            }\n           \
  \ else {\n                $odd++;\n            }\n        }\n        if ($even >\
  \ $odd) {\n            $result = $i;\n        }\n    }\n    \n    # find biggest\
  \ odd number\n    for ($i = $min; $i <= $max; $i++) {\n        $even = 0;\n    \
  \    $odd = 0;\n        for (my $j = $i; $j <= $max; $j++) {\n            if ($j\
  \ % 2 != 0) {\n                $even++;\n            }\n            else {\n   \
  \             $odd++;\n            }\n        }\n        if ($even > $odd) {\n \
  \           $result = $i;\n        }\n    }\n    \n    # return -1 if there's no\
  \ even or odd number\n    if ($result == -1) {\n        return -1;\n    }\n    \n\
  \    # return result\n    return $result;\n}"
- "    my $result = -1;\n    my $i = 1;\n    my $found = 0;\n    \n    while($i <=\
  \ $x) {\n        if($i % 2 == 0) {\n            $found = 1;\n            $result\
  \ = $i;\n        }\n        $i++;\n    }\n    \n    if($found == 0) {\n        $result\
  \ = -1;\n    }\n    \n    return $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x > $y;\n    return $x if $x == $y;\n\
  \    my $even = 0;\n    my $odd = 1;\n    my $result = -1;\n    my $i = $y;\n  \
  \  my $j = $x;\n    my $k = $x;\n    my $max = $x;\n    my $min = $y;\n    my $temp;\n\
  \    \n    while ($i <= $y) {\n        $temp = $i;\n        $i = $i + $odd;\n  \
  \      $odd = $temp % 2;\n        if ($odd != 0) {\n            $result = $i;\n\
  \        }\n    }\n    \n    while ($j <= $x) {\n        $temp = $j;\n        $j\
  \ = $j + $even;\n        $even = $temp % 2;\n        if ($even != 0) {\n       \
  \     $result = $j;\n        }\n    }\n    \n    while ($k <= $x) {\n        $temp\
  \ = $k;\n        $k = $k + $even;\n        $even = $temp % 2;\n        if ($even\
  \ != 0) {\n            $result = $k;\n        }\n    }\n    \n    if ($result ==\
  \ $x) {\n        $result = $max;\n    }\n    \n    return $result;\n}"
- "    my $result = -1;\n    my $even = 1;\n    my $odd = 0;\n    my $min = $x;\n\
  \    my $max = $y;\n    \n    while ($min <= $max) {\n        $result = $min + $even;\n\
  \        $even = $even + $odd;\n        $odd = $odd + $even;\n        $min = $min\
  \ + 1;\n    }\n    return $result;\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n        $min++;\n  \
  \  }\n    \n    if ($even > $odd) {\n        return $even;\n    }\n    else {\n\
  \        return $odd;\n    }\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ my $temp;\n    \n    while ($min <= $max) {\n        $temp = $min;\n        $min++;\n\
  \        if ($temp % 2 == 0) {\n            $even++;\n        }\n        else {\n\
  \            $odd++;\n        }\n    }\n    \n    if ($even > $odd) {\n        return\
  \ $max;\n    }\n    else {\n        return $min;\n    }\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n        $min++;\n  \
  \  }\n    \n    if ($even > $odd) {\n        return $max;\n    }\n    else {\n \
  \       return $min;\n    }\n}"
- "    my $result = -1;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ?\
  \ $y : $x;\n    my $mid = $min + ($max - $min) / 2;\n    while ($min <= $max) {\n\
  \        if ($mid % 2 == 0) {\n            $result = $mid;\n            last;\n\
  \        }\n        $min = $mid + 1;\n        $mid = $min + ($max - $min) / 2;\n\
  \    }\n    return $result;\n}"
- "    my $even = 0;\n    my $evennum = 0;\n    my $oddnum = 0;\n    my $odd = 0;\n\
  \    my $eveneven = 0;\n    my $evenodd = 0;\n    my $oddodd = 0;\n    my $eveneveneven\
  \ = 0;\n    my $evenoddodd = 0;\n    my $oddoddeven = 0;\n    my $oddeveneven =\
  \ 0;\n    my $evenevenodd = 0;\n    my $evenoddodd = 0;\n    my $oddoddeven = 0;\n\
  \    my $eveneveneven = 0;\n    my $evenoddodd = 0;\n    my $oddoddeven = 0;\n \
  \   my $eveneveneven = 0;\n    my $evenoddodd = 0;\n    my $oddoddeven = 0;\n  \
  \  my $eveneveneven = 0;\n    my $evenoddodd = 0;\n    my $oddoddeven = 0;\n   \
  \ my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven\
  \ = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n\
  \    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my\
  \ $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd\
  \ = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n\
  \    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my\
  \ $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven\
  \ = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n\
  \    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my\
  \ $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven\
  \ = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n\
  \    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my\
  \ $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd\
  \ = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n\
  \    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my\
  \ $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven\
  \ = 0;\n"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        my $num\
  \ = $i;\n        \n        for(my $j = $i; $j > 0; $j--) {\n            if($num\
  \ % 2 == 0) {\n                $num = $num / 2;\n            } else {\n        \
  \        $num = $num * 2;\n            }\n        }\n        \n        if($num ==\
  \ 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n \
  \   return $result;\n}"
- "    my $result = -1;\n    my $limit = $x - $y;\n    my $counter = 0;\n    my $temp;\n\
  \    \n    while ($counter < $limit) {\n        $temp = $x + $counter;\n       \
  \ if ($temp % 2 == 0) {\n            $result = $temp;\n            last;\n     \
  \   }\n        $counter++;\n    }\n    \n    return $result;\n}"
- "    my $even = 0;\n    my $biggest = -1;\n    my $i;\n    \n    for ($i = $x; $i\
  \ <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n        }\n\
  \        elsif ($even > $biggest) {\n            $biggest = $even;\n        }\n\
  \    }\n    \n    return $biggest;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $counter = 0;\n    while($counter < $step)\
  \ {\n        $result = $min + $counter;\n        if ($result % 2 == 0) {\n     \
  \       return $result;\n        }\n        $counter++;\n    }\n    return -1;\n\
  }"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $i;\n    for ($i = $min; $i <= $max; $i\
  \ += $step) {\n        if ($i % 2 == 0) {\n            $result = $i;\n         \
  \   last;\n        }\n    }\n    return $result if $result;\n    return -1;\n}"
- "    my $result = -1;\n    \n    for(my $i = 0; $i < $y; $i++) {\n        for(my\
  \ $j = 0; $j < $x; $j++) {\n            if($i + ($j / $x) % 2 == 0) {\n        \
  \        $result = $i + $j;\n                last;\n            }\n        }\n \
  \   }\n    \n    return $result;\n}"
- "    my $even = 0;\n    my $biggest = -1;\n    \n    for(my $i = 0; $i <= $y; $i++)\
  \ {\n        for(my $j = 0; $j <= $x; $j++) {\n            my $num = $i + $j;\n\
  \            if($num % 2 == 0) {\n                $even = 1;\n            }\n  \
  \          if($even != 1) {\n                $biggest = $num;\n            }\n \
  \       }\n    }\n    return $biggest;\n}"
- "    my $even = 1;\n    my $biggest = $x;\n    my $smallest = $y;\n    my $temp;\n\
  \    \n    while ($even != 0) {\n        $temp = $biggest;\n        $biggest = $smallest\
  \ - $temp;\n        $smallest = $temp;\n        $even = $even & 1;\n    }\n    return\
  \ $biggest;\n}"
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $counter = 0;\n    my\
  \ $even = 0;\n    my $odd = 0;\n    my $max = 0;\n    my $min = $x;\n    \n    while\
  \ ($counter < $limit) {\n        $counter++;\n        $even = $even + $x;\n    \
  \    $odd = $odd + $y;\n        if ($even > $odd) {\n            $max = $even;\n\
  \            $min = $odd;\n        }\n        if ($odd > $even) {\n            $max\
  \ = $odd;\n            $min = $even;\n        }\n    }\n    \n    return $max;\n\
  }"
- "    my $max = $x;\n    my $min = $y;\n    \n    while($min < $max) {\n        my\
  \ $mid = ($min + $max) / 2;\n        \n        if ($mid % 2 == 0) {\n          \
  \  $max = $mid;\n        } else {\n            $min = $mid;\n        }\n    }\n\
  \    \n    return $max;\n}"
- "    my $result = -1;\n    my $min = $x;\n    my $max = $y;\n    my $mid = $min\
  \ + $max / 2;\n    \n    while ($min < $max) {\n        if ($min + $max / 2 > $mid)\
  \ {\n            $result = $mid;\n            $min = $mid + 1;\n        } else {\n\
  \            $result = $min;\n            $max = $min + 1;\n        }\n    }\n \
  \   \n    return $result;\n}"
- "    my $result;\n    \n    if ($x < $y) {\n        $result = $x;\n    } elsif ($x\
  \ > $y) {\n        $result = $y;\n    } else {\n        $result = $x;\n    }\n \
  \   \n    while ($result % 2 == 0) {\n        $result /= 2;\n    }\n    \n    return\
  \ $result;\n}"
- "    my $min = $x if $x < $y;\n    my $max = $y if $x > $y;\n    my $mid = $min\
  \ + ($max - $min) / 2;\n    return $mid if $mid % 2 != 0;\n    return -1;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $mid = $min + ($max - $min) / 2;\n    my $is_even = $mid % 2 != 0;\n\
  \    my $is_larger = $mid > $max;\n    my $is_smaller = $mid < $min;\n    my $is_in_range\
  \ = $is_even || $is_larger;\n    if ($is_in_range) {\n        $result = $mid;\n\
  \    }\n    return $result;\n}"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $min = $x;\n\
  \    my $max = $y;\n    my $mid = $min + $max;\n    \n    while ($min <= $max) {\n\
  \        $even = $min + $max;\n        $odd = $min + $max;\n        $result = $min;\n\
  \        \n        if ($even % 2 != 0) {\n            $result = $even;\n       \
  \ }\n        \n        if ($odd % 2 == 0) {\n            $result = $odd;\n     \
  \   }\n        \n        $min = $min + 1;\n        $max = $max + 1;\n    }\n   \
  \ \n    return $result;\n}"
- "    my $result;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    my $midval;\n\
  \    my $midval2;\n    my $midval3;\n    my $midval4;\n    my $midval5;\n    my\
  \ $midval6;\n    my $midval7;\n    my $midval8;\n    my $midval9;\n    my $midval10;\n\
  \    my $midval11;\n    my $midval12;\n    my $midval13;\n    my $midval14;\n  \
  \  my $midval15;\n    my $midval16;\n    my $midval17;\n    my $midval18;\n    my\
  \ $midval19;\n    my $midval20;\n    my $midval21;\n    my $midval22;\n    my $midval23;\n\
  \    my $midval24;\n    my $midval25;\n    my $midval26;\n    my $midval27;\n  \
  \  my $midval28;\n    my $midval29;\n    my $midval30;\n    my $midval31;\n    my\
  \ $midval32;\n    my $midval33;\n    my $midval34;\n    my $midval35;\n    my $midval36;\n\
  \    my $midval37;\n    my $midval38;\n    my $midval39;\n    my $midval40;\n  \
  \  my $midval41;\n    my $midval42;\n    my $midval43;\n    my $midval44;\n    my\
  \ $midval45;\n    my $midval46;\n    my $midval47;\n    my $midval48;\n    my $midval49;\n\
  \    my $midval50;\n    my $midval51;\n    my $midval52;\n    my $midval53;\n  \
  \  my $midval54;\n    my $midval55;\n    my $midval56;\n    my $midval57;\n    my\
  \ $midval58;\n    my $midval59;\n    my $midval60;\n    my $midval61;\n    my $midval62;\n\
  \    my $midval63;\n    my $midval64;\n    my $midval65;\n    my $midval66;\n  \
  \  my $midval67;\n    my $midval68;\n    my $midval69;\n    my $midval70;\n    my\
  \ $midval71;\n    my $midval72;\n    my $midval73;\n    "
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $i = $min;\n    my $found = 0;\n    \n \
  \   while ($i <= $max) {\n        if ($i % 2 == 0) {\n            $found = 1;\n\
  \            $result = $i;\n            last;\n        }\n        $i += $step;\n\
  \    }\n    \n    return -1 if $found == 0;\n    return $result;\n}"
- "    my $max = -1;\n    my $even = 0;\n    my $odd = 0;\n    \n    for(my $i = $x;\
  \ $i <= $y; $i++) {\n        if ($i & 1) {\n            $even++;\n        }\n  \
  \      else {\n            $odd++;\n        }\n    }\n    \n    if ($even > $odd)\
  \ {\n        $max = $even;\n    }\n    else {\n        $max = $odd;\n    }\n   \
  \ \n    return $max;\n}"
- "    my $max_num = $x;\n    my $min_num = $y;\n    my $num_found = 0;\n    \n  \
  \  while ($num_found == 0) {\n        my $num = $min_num + int($max_num / $min_num);\n\
  \        if ($num > $max_num) {\n            $max_num = $num;\n        } elsif ($num\
  \ < $min_num) {\n            $min_num = $num;\n        } else {\n            $num_found\
  \ = 1;\n        }\n    }\n    return $max_num;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return -1 if $x == $y;\n\
  \    return $x if $x % 2 == 0;\n    return $y if $y % 2 == 0;\n    my $even = $x\
  \ / 2;\n    my $odd = $y / 2;\n    return $even if $even > $odd;\n    return $odd\
  \ if $even < $odd;\n    return $even;\n}"
- "    my $result = -1;\n    \n    if ($x < $y) {\n        $result = $x if ($x % 2\
  \ == 0);\n        $result = $y if ($y % 2 == 0);\n    }\n    else {\n        $result\
  \ = $y if ($y % 2 == 0);\n        $result = $x if ($x % 2 == 0);\n    }\n    \n\
  \    return $result;\n}"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        if($i\
  \ & 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n\
  \    return $result;\n}"
- "    my $result;\n    if ($x < $y) {\n        $result = $x;\n    } elsif ($x > $y)\
  \ {\n        $result = $y;\n    } else {\n        $result = $x;\n    }\n    while\
  \ ($result % 2 == 0) {\n        $result /= 2;\n    }\n    return $result;\n}"
- "    my $result = -1;\n    \n    for(my $i = 0; $i <= $y; $i++) {\n        if($x\
  \ % $i == 0) {\n            $result = $i;\n            last;\n        }\n    }\n\
  \    \n    return $result;\n}"
- "    my $n = $x;\n    my $m = $y;\n    my $temp;\n    my $even;\n    my $odd;\n\
  \    my $max;\n    my $min;\n    my $i;"
- "    my $result = -1;\n    \n    for(my $i = 0; $i <= $y; $i++) {\n        if($x\
  \ % $i == 0) {\n            $result = $i;\n            last;\n        }\n    }\n\
  \    \n    return $result;\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while ($min <= $max) {\n        $even = $min + $even;\n        $odd = $min\
  \ + $odd;\n        $min = $min + 1;\n    }\n    \n    if ($even > $odd) {\n    \
  \    return $even;\n    } else {\n        return $odd;\n    }\n}"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        if($i\
  \ & 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n\
  \    return $result;\n}"
- "    my $result = -1;\n    my $even = 1;\n    my $num;\n    \n    while ($x <= $y)\
  \ {\n        $num = $even * $x + $odd;\n        if ($num > $y) {\n            $result\
  \ = $num;\n        }\n        $even *= 2;\n        $odd *= 2;\n        $x++;\n \
  \   }\n    return $result;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $i;\n    my $found = 0;\n    for ($i = $min;\
  \ $i <= $max; $i += $step) {\n        if ($i % 2 == 0) {\n            $found = 1;\n\
  \            $result = $i;\n            last;\n        }\n    }\n    return $found\
  \ ? $result : -1;\n}"
- "    my $result = -1;\n    \n    if ($x < $y) {\n        chomp($x = <>);\n     \
  \   chomp($y = <>);\n    }\n    \n    while ($x <= $y) {\n        $result = $x if\
  \ ($x & 1);\n        $x = $x + 2;\n    }\n    \n    return $result;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $x > $y ? 1 : -1;\n    my $counter = 0;\n    for(my $i = $min;\
  \ $i <= $max; $i += $step) {\n        ++$counter;\n        if($counter % 2 == 0)\
  \ {\n            $result = $i;\n            last;\n        }\n    }\n    return\
  \ $result if $result;\n    return -1;\n}"
- "    my $result = -1;\n    my $limit = $y;\n    my $temp = $x;\n    while($temp\
  \ <= $limit) {\n        if($temp % 2 == 0) {\n            $result = $temp;\n   \
  \         last;\n        }\n        $temp++;\n    }\n    return $result;\n}"
- "    my $result;\n    \n    # check if x is bigger than y\n    if ($x > $y) {\n\
  \        $result = $y;\n    }\n    elsif ($x == $y) {\n        $result = $x;\n \
  \   }\n    \n    # check if x is smaller than y\n    elsif ($x < $y) {\n       \
  \ $result = $x;\n    }\n    \n    # check if x is equal to y\n    elsif ($x == $y)\
  \ {\n        $result = $x;\n    }\n    \n    # check if x is greater than y\n  \
  \  elsif ($x > $y) {\n        $result = $y;\n    }\n    \n    # check if x is smaller\
  \ than y\n    elsif ($x < $y) {\n        $result = $x;\n    }\n    \n    # check\
  \ if x is equal to y\n    elsif ($x == $y) {\n        $result = $x;\n    }\n   \
  \ \n    # check if x is greater than y\n    elsif ($x > $y) {\n        $result =\
  \ $y;\n    }\n    \n    # check if x is smaller than y\n    elsif ($x < $y) {\n\
  \        $result = $x;\n    }\n    \n    # check if x is equal to y\n    elsif ($x\
  \ == $y) {\n        $result = $x;\n    }\n    \n    # check if x is greater than\
  \ y\n    elsif ($x > $y) {\n        $result = $y;\n    }\n    \n    # check if x\
  \ is smaller than y\n    elsif ($x < $y) {\n        $result = $x;\n    }\n    \n\
  \    # check if x is equal to y\n    elsif ($x == $y) {\n        $result = $x;\n\
  \    }\n    \n    # check if x is greater than y\n    elsif ($x > $y) {\n      \
  \  $result = $y;\n    }\n    \n    # check if x is smaller than y\n    elsif ($x\
  \ < $y) {\n        $result = $x;\n    }\n    \n    # check if x is equal to y\n\
  \    elsif ($x == $y) {\n        $result = $x;\n    }\n    \n    # check if x is\
  \ greater than y\n    elsif ($x > $y) {\n        $result = $y;\n    }\n    \n  \
  \  # check if x is smaller than y\n    elsif ($x < $y) {\n        $result = $x;\n\
  \    }\n    \n    # check if x is equal to y\n    elsif ($x == $y) {\n        $result\
  \ = $x;\n    }\n    \n    # check if x is greater than y\n    elsif ($x > $y) {\n\
  \        $result = $y;\n    }\n    \n    # check if x is smaller than y\n    elsif\
  \ ($x < $y) {\n"
- "    my $result;\n    my $even = 1;\n    my $odd = 1;\n    my $min = $x;\n    my\
  \ $max = $y;\n    \n    # find min and max numbers\n    while ($min <= $max) {\n\
  \        $result = $min;\n        $even = $even + $min % 2;\n        $odd = $odd\
  \ + ($min % 2 ? 1 : 0);\n        $min = $min + 1;\n    }\n    \n    # check if min\
  \ is even or odd\n    if ($even < $odd) {\n        $result = $even;\n    } else\
  \ {\n        $result = $odd;\n    }\n    \n    return $result;\n}"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    \n    for(my $i\
  \ = 0; $i <= $y; $i++) {\n        $even = 0;\n        $odd = 0;\n        \n    \
  \    for(my $j = 0; $j <= $x; $j++) {\n            if($j % 2 == 0) {\n         \
  \       $even++;\n            }\n            else {\n                $odd++;\n \
  \           }\n        }\n        \n        if($even > $odd) {\n            $result\
  \ = $i;\n        }\n    }\n    \n    return $result;\n}"
- "    my $result;\n    if ($x < $y) {\n        $result = $x;\n    } elsif ($x > $y)\
  \ {\n        $result = $y;\n    } else {\n        $result = $x;\n    }\n    while\
  \ ($result % 2 == 0) {\n        $result /= 2;\n    }\n    return $result;\n}"
- "    my $even = 0;\n    my $evennum;\n    my $oddnum;\n    my $biggest;\n    my\
  \ $biggestnum;\n    my $biggestevennum;\n    my $biggestoddnum;\n    my $evenevennum;\n\
  \    my $evenoddnum;\n    my $oddoddnum;\n    my $evenevenevennum;\n    my $evenoddoddnum;\n\
  \    my $oddoddevennum;\n    my $oddoddoddnum;\n    my $evenevenevennum;\n    my\
  \ $evenoddoddevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevenevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevenevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevenevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevenevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevenevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $evenevenevenevenevennum;\n\
  \    my $evenoddoddevenevennum;\n    my $oddoddoddevennum;\n    my $eveneveneveneven"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n        $min++;\n  \
  \  }\n    \n    if ($even > $odd) {\n        return $even;\n    }\n    else {\n\
  \        return $odd;\n    }\n}"
- "    my $result = -1;\n    \n    for(my $i = 0; $i <= $y; $i++) {\n        my $tmp\
  \ = $x;\n        $tmp += $i;\n        $tmp %= $y;\n        if($tmp == 0) {\n   \
  \         $result = $i;\n            last;\n        }\n    }\n    return $result;\n\
  }"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $x > $y ? 1 : -1;\n    my $step2 = $x > $y ? -1 : 0;\n   \
  \ my $step3 = $x > $y ? 0 : 0;\n    my $step4 = $x > $y ? 1 : 0;\n    my $step5\
  \ = $x > $y ? 1 : 0;\n    my $step6 = $x > $y ? 1 : 0;\n    my $step7 = $x > $y\
  \ ? 1 : 0;\n    my $step8 = $x > $y ? 1 : 0;\n    my $step9 = $x > $y ? 1 : 0;\n\
  \    my $step10 = $x > $y ? 1 : 0;\n    my $step11 = $x > $y ? 1 : 0;\n    my $step12\
  \ = $x > $y ? 1 : 0;\n    my $step13 = $x > $y ? 1 : 0;\n    my $step14 = $x > $y\
  \ ? 1 : 0;\n    my $step15 = $x > $y ? 1 : 0;\n    my $step16 = $x > $y ? 1 : 0;\n\
  \    my $step17 = $x > $y ? 1 : 0;\n    my $step18 = $x > $y ? 1 : 0;\n    my $step19\
  \ = $x > $y ? 1 : 0;\n    my $step20 = $x > $y ? 1 : 0;\n    my $step21 = $x > $y\
  \ ? 1 : 0;\n    my $step22 = $x > $y ? 1 : 0;\n    my $step23 = $x > $y ? 1 : 0;\n\
  \    my $step24 = $x > $y ? 1 : 0;\n    my $step25 = $x > $y ? 1 : 0;\n    my $step26\
  \ = $x > $y ? 1 : 0;\n    my $step27 = $x > $y ? 1 : 0;\n    my $step28 = $x > $y\
  \ ? 1 : 0;\n    my $step29 = $x > $y ? 1 : 0;\n    my $step30 = $x > $y ? 1 : 0;\n\
  \    my $step31 = $x > $y ? 1 : 0;\n    my $step32 = $x > $y ? 1 : 0;\n    my $step33\
  \ = $x > $y ? 1 : 0;\n    my $step34 = $x > $y ? 1 : 0;\n    my $step35 = $x > $y\
  \ ? 1 : 0;\n    my $step36 = $x > $y ? 1 : 0;\n    my $step37 = $x > $y ? 1 : 0;\n\
  \    my $step38 = $x > $y ? 1 : 0;\n    my $step39 = $x > $y ? 1 : 0;\n    my $step40\
  \ = $x > $y ? 1 : 0;\n    my $step41 = $x > $y ? 1 : 0;\n    my $step42 = $x > $y\
  \ ? 1 : 0;\n    my $step43 = $x > $y ? 1 : 0;\n    my $"
- "    my $result;\n    my $even;\n    my $odd;\n    my $min = $x;\n    my $max =\
  \ $y;\n    my $mid;\n    my $i;\n    my $j;\n    my $k;\n    my $evens;\n    my\
  \ $odds;\n    my $evens_count;\n    my $odds_count;\n    my $i;\n    my $j;\n  \
  \  my $k;\n    my $evens_count;\n    my $odds_count;\n    my $evens;\n    my $odds;\n\
  \    my $even;\n    my $odd;\n    my $mid;\n    my $min = $x;\n    my $max = $y;\n\
  \    my $mid;\n    my $i;\n    my $j;\n    my $k;\n    my $evens_count;\n    my\
  \ $odds_count;\n    my $evens;\n    my $odds;\n    my $even;\n    my $odd;\n   \
  \ my $mid;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    my $i;\n   \
  \ my $j;\n    my $k;\n    my $evens_count;\n    my $odds_count;\n    my $evens;\n\
  \    my $odds;\n    my $even;\n    my $odd;\n    my $mid;\n    my $min = $x;\n \
  \   my $max = $y;\n    my $mid;\n    my $i;\n    my $j;\n    my $k;\n    my $evens_count;\n\
  \    my $odds_count;\n    my $evens;\n    my $odds;\n    my $even;\n    my $odd;\n\
  \    my $mid;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    my $i;\n\
  \    my $j;\n    my $k;\n    my $evens_count;\n    my $odds_count;\n    my $evens;\n\
  \    my $odds;\n    my $even;\n    my $odd;\n    my $mid;\n    my $min = $x;\n \
  \   my $max = $y;\n    my $mid;\n    my $i;\n    my $j;\n    my $k;\n    my $evens_count;\n\
  \    my $odds_count;\n    my $evens;\n    my $odds;\n    my $even;\n    my $odd;\n\
  \    my $mid;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    my $i;\n\
  \    my $j;\n    my $k;\n    my $evens_count;\n    my $odds_count;\n    my $evens;\n\
  \    my $odds;\n    my $even;\n    my $odd;"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $counter = 0;\n    my $limit = $max - $min;\n\
  \    my $counter2 = 0;\n    my $limit2 = $max - $min;\n    \n    while ($counter\
  \ < $limit) {\n        $counter2++;\n        if ($counter2 == $limit2) {\n     \
  \       $counter2 = 0;\n            $counter++;\n        }\n        if ($counter2\
  \ == $limit) {\n            $counter2 = 0;\n            $counter++;\n        }\n\
  \        if ($counter2 == $limit2) {\n            $counter2 = 0;\n            $counter++;\n\
  \        }\n        if ($counter2 == $limit) {\n            $counter2 = 0;\n   \
  \         $counter++;\n        }\n        if ($counter2 == $limit2) {\n        \
  \    $counter2 = 0;\n            $counter++;\n        }\n        if ($counter2 ==\
  \ $limit) {\n            $counter2 = 0;\n            $counter++;\n        }\n  \
  \      if ($counter2 == $limit2) {\n            $counter2 = 0;\n            $counter++;\n\
  \        }\n        if ($counter2 == $limit) {\n            $counter2 = 0;\n   \
  \         $counter++;\n        }\n        if ($counter2 == $limit2) {\n        \
  \    $counter2 = 0;\n            $counter++;\n        }\n        if ($counter2 ==\
  \ $limit) {\n            $counter2 = 0;\n            $counter++;\n        }\n  \
  \      if ($counter2 == $limit2) {\n            $counter2 = 0;\n            $counter++;\n\
  \        }\n        if ($counter2 == $limit) {\n            $counter2 = 0;\n   \
  \         $counter++;\n        }\n        if ($counter2 == $limit2) {\n        \
  \    $counter2 = 0;\n            $counter++;\n        }\n        if ($counter2 ==\
  \ $limit) {\n            $counter2 = 0;\n            $counter++;\n        }\n  \
  \      if ($counter2 == $limit2) {\n            $counter2 = 0;\n            $counter++;\n\
  \        }\n        if ($counter2 == $limit) {\n            $counter2 = 0;\n   \
  \         $counter++;\n        }\n        if ($counter2 == $limit2) {\n        \
  \    $counter2 = 0;\n            $counter++;\n        }\n        if ($counter2 ==\
  \ $limit) {\n            $counter2 = 0;\n            $counter++;\n        }\n  \
  \      if ($counter2 == $limit2) {\n            $counter2 = 0;\n            $counter++;\n\
  \        }\n        if ($counter2 == $limit) {\n            $counter2 = 0;\n   \
  \         $counter++;\n        }\n        if ($counter2 == $limit2) {\n        \
  \    $counter2 = 0;\n            $counter++;\n        }\n        if ($counter2 ==\
  \ $limit) {\n            $counter2 = 0;\n            $counter++;\n        }\n  \
  \      if ($counter2 == $limit2) {\n            $counter2 = 0;\n            $counter++;\n\
  \        }\n        if ($counter2 == $limit) {\n            $counter2 = 0;\n   \
  \         $counter++;\n"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $mid = $min + ($max - $min) / 2;\n    my $is_even = $mid % 2 != 0;\n\
  \    my $is_between = $min <= $mid && $mid <= $max;\n    my $is_in_range = $is_between\
  \ && $is_even;\n    if ($is_in_range) {\n        $result = $mid;\n    }\n    else\
  \ {\n        $result = -1;\n    }\n    return $result;\n}"
- "    my $max_num = $x;\n    my $min_num = $y;\n    my $max_even;\n    my $min_even;\n\
  \    my $even;\n    my $odd;\n    my $i;\n    my $j;\n    my $k;\n    my $evens;\n\
  \    my $odds;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;"
- "    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $even\
  \ = 0;\n    my $odd = 1;\n    my $result = -1;\n    \n    for(my $i = $min; $i <=\
  \ $max; $i++) {\n        $even = $odd % 2;\n        $odd = $even ? $odd : $even;\n\
  \        $result = $i if ($even && $odd == 0);\n    }\n    \n    return $result;\n\
  }"
- "    my $even = 0;\n    my $evennum = 0;\n    my $oddnum = 0;\n    my $odd = 0;\n\
  \    my $eveneven = 0;\n    my $evenodd = 0;\n    my $oddodd = 0;\n    my $evenoddeven\
  \ = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenoddodd =\
  \ 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenoddodd = 0;\n\
  \    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenoddodd = 0;\n \
  \   my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my\
  \ $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven\
  \ = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n\
  \    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my\
  \ $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven\
  \ = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n\
  \    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my\
  \ $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd\
  \ = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n\
  \    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my\
  \ $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven\
  \ = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n\
  \    my $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my\
  \ $eveneveneven = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven\
  \ = 0;\n    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n\
  \    my $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my\
  \ $evenodd = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd\
  \ = 0;\n    my $oddoddeven = 0;\n    my $eveneveneven = 0;\n    my $evenodd = 0;\n\
  \    my $"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $min = $x;\n\
  \    my $max = $y;\n    my $step = $max - $min;\n    \n    for(my $i = $min; $i\
  \ <= $max; $i += $step) {\n        $even = 0;\n        $odd = 0;\n        for(my\
  \ $j = $i; $j >= $min; $j -= $step) {\n            if($j % 2 == 0) {\n         \
  \       $even++;\n            }\n            else {\n                $odd++;\n \
  \           }\n        }\n        if($even > $odd) {\n            $result = $i;\n\
  \        }\n    }\n    return $result;\n}"
- "    my $min = $x if $x < $y;\n    my $max = $y if $x > $y;\n    my $mid = ($min\
  \ + $max) / 2;\n    return -1 if $mid == $min or $mid == $max;\n    return $mid\
  \ if $mid % 2 == 0;\n    return $mid - 1;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $mid = $min + ($max - $min) / 2;\n    my $step = $max - $min;\n  \
  \  my $step2 = $step * 2;\n    my $step3 = $step2 * 3;\n    my $step4 = $step3 *\
  \ 4;\n    my $step5 = $step4 * 5;\n    my $step6 = $step5 * 6;\n    my $step7 =\
  \ $step6 * 7;\n    my $step8 = $step7 * 8;\n    my $step9 = $step8 * 9;\n    my\
  \ $step10 = $step9 * 10;\n    my $step11 = $step10 * 11;\n    my $step12 = $step11\
  \ * 12;\n    my $step13 = $step12 * 13;\n    my $step14 = $step13 * 14;\n    my\
  \ $step15 = $step14 * 15;\n    my $step16 = $step15 * 16;\n    my $step17 = $step16\
  \ * 17;\n    my $step18 = $step17 * 18;\n    my $step19 = $step18 * 19;\n    my\
  \ $step20 = $step19 * 20;\n    my $step21 = $step20 * 21;\n    my $step22 = $step21\
  \ * 22;\n    my $step23 = $step22 * 23;\n    my $step24 = $step23 * 24;\n    my\
  \ $step25 = $step24 * 25;\n    my $step26 = $step25 * 26;\n    my $step27 = $step26\
  \ * 27;\n    my $step28 = $step27 * 28;\n    my $step29 = $step28 * 29;\n    my\
  \ $step30 = $step29 * 30;\n    my $step31 = $step30 * 31;\n    my $step32 = $step31\
  \ * 32;\n    my $step33 = $step32 * 33;\n    my $step34 = $step33 * 34;\n    my\
  \ $step35 = $step34 * 35;\n    my $step36 = $step35 * 36;\n    my $step37 = $step36\
  \ * 37;\n    my $step38 = $step37 * 38;\n    my $step39 = $step38 * 39;\n    my\
  \ $step40 = $step39 * 40;\n    my $step41 = $step40 * 41;\n    my $step42 = $step41\
  \ * 42;\n    my $step43 = $step42 * 43;\n    my $step44 = $step43 * 44;\n    my\
  \ $step45 = $step44"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x > $y ? $x :\
  \ $y;\n    my $step = $x > $y ? 1 : -1;\n    my $i = $min;\n    my $found = 0;\n\
  \    while($i <= $max) {\n        $result = $i;\n        $found = 1;\n        for(my\
  \ $j = $i + $step; $j <= $max; $j += $step) {\n            if($j % 2 != 0) {\n \
  \               $found = 0;\n            }\n        }\n        if($found) {\n  \
  \          return $result;\n        }\n        $i += $step;\n    }\n    return -1;\n\
  }"
- "    my $result = -1;\n    for(my $i = $x; $i <= $y; $i++) {\n        if($i & 1)\
  \ {\n            $result = $i;\n            last;\n        }\n    }\n    return\
  \ $result;\n}"
- "    my $result = -1;\n    my $even = 1;\n    my $odd = 0;\n    \n    for(my $i\
  \ = $x; $i <= $y; $i++) {\n        $even = $even + $i if $i % 2 eq 0;\n        $odd\
  \ = $odd + $i if $i % 2 eq 1;\n    }\n    \n    if($even > $odd) {\n        $result\
  \ = $even;\n    } else {\n        $result = $odd;\n    }\n    \n    return $result;\n\
  }"
- "    my $n = $x;\n    my $m = $y;\n    my $i = 1;\n    my $even = 0;\n    my $max\
  \ = $n;\n    \n    while($i <= $m) {\n        if($n % 2 == 0) {\n            $even++;\n\
  \        }\n        $n++;\n        $i++;\n    }\n    \n    if($even > $max) {\n\
  \        $max = $even;\n    }\n    \n    return $max;\n}"
- "    my $max = -1;\n    my $min = $x;\n    for(my $i = $x; $i <= $y; $i++) {\n \
  \       if($i % 2 == 0) {\n            $max = $i;\n            last;\n        }\n\
  \    }\n    return $max;\n}"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        my $num\
  \ = $i;\n        \n        while($num % 2 == 0) {\n            $num = $num / 2;\n\
  \        }\n        \n        if($num > $result) {\n            $result = $num;\n\
  \        }\n    }\n    \n    return $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x > $y;\n    return $x if $x == $y;\n\
  \    return $x if $x % 2 == 0;\n    return $x + 1 if $y % 2 == 0;\n    return $x\
  \ - 1 if $y % 2 == 1;\n}"
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $step = $limit / 2;\n\
  \    my $counter = 0;\n    \n    while ($counter < $limit) {\n        if ($x % $step\
  \ == 0) {\n            $result = $x;\n            $counter = $step;\n        }\n\
  \        $step = $step / 2;\n    }\n    \n    return $result;\n}"
- "    my $max = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $num;\n    \n  \
  \  for(my $i = $x; $i <= $y; $i++) {\n        $num = $i;\n        if ($num % 2 ==\
  \ 0) {\n            $even++;\n        }\n        else {\n            $odd++;\n \
  \       }\n        if ($even > $odd) {\n            $max = $num;\n        }\n  \
  \  }\n    return $max;\n}"
- "    my $even = 1;\n    my $biggest = $x;\n    my $smaller = $y;\n    my $smaller_even\
  \ = $smaller;\n    my $bigger_even = $biggest;\n    my $smaller_odd = $smaller;\n\
  \    my $bigger_odd = $biggest;\n    my $bigger_odd_even = $biggest;\n    my $smaller_odd_even\
  \ = $smaller;\n    my $bigger_odd_even = $biggest;\n    my $smaller_odd_odd = $smaller;\n\
  \    my $bigger_odd_odd = $biggest;\n    my $bigger_odd_odd_even = $biggest;\n \
  \   my $smaller_odd_odd_even = $smaller;\n    my $bigger_odd_odd_even = $biggest;\n\
  \    my $smaller_odd_odd_odd = $smaller;\n    my $bigger_odd_odd_odd = $biggest;\n\
  \    my $bigger_odd_odd_odd_even = $biggest;\n    my $smaller_odd_odd_odd_even =\
  \ $smaller;\n    my $bigger_odd_odd_odd_even = $biggest;\n    my $smaller_odd_odd_odd_odd\
  \ = $smaller;\n    my $bigger_odd_odd_odd_odd = $biggest;\n    my $bigger_odd_odd_odd_odd_even\
  \ = $biggest;\n    my $smaller_odd_odd_odd_odd_even = $smaller;\n    my $bigger_odd_odd_odd_odd_even\
  \ = $biggest;\n    my $smaller_odd_odd_odd_odd_odd = $smaller;\n    my $bigger_odd_odd_odd_odd_odd\
  \ = $biggest;\n    my $bigger_odd_odd_odd_odd_odd_even = $biggest;\n    my $smaller_odd_odd_odd_odd_odd_even\
  \ = $smaller;\n    my $bigger_odd_odd_odd_odd_odd_even = $biggest;\n    my $smaller_odd_odd_odd_odd_odd_odd\
  \ = $smaller;\n    my $bigger_odd_odd_odd_odd_odd_odd_even = $biggest;\n    my $smaller_odd_odd_odd_odd_odd_odd_even\
  \ = $smaller;\n    my $bigger_odd_odd_odd_odd_od"
- "    my $num = $x;\n    while($num < $y) {\n        $num += 2;\n    }\n    return\
  \ $num if $num % 2 == 0;\n    return -1;\n}"
- "    my $result;\n    my $x_even = ($x % 2 == 0);\n    my $y_even = ($y % 2 == 0);\n\
  \    \n    if ($x_even && $y_even) {\n        $result = $x if $x > $y;\n       \
  \ $result = $y if $x < $y;\n    } elsif ($x_even) {\n        $result = $x;\n   \
  \ } elsif ($y_even) {\n        $result = $y;\n    } else {\n        $result = -1;\n\
  \    }\n    \n    return $result;\n}"
- "    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $num\
  \ = $min;\n    my $found = 0;\n    while($num < $max) {\n        $num += 2;\n  \
  \      if($num > $max) {\n            $num = $min;\n            $found = 1;\n  \
  \      }\n    }\n    return $found ? $num : -1;\n}"
- "    my $max = -1;\n    my $i = 1;\n    my $found = 0;\n    while($i <= $x) {\n\
  \        if($i % 2 == 0) {\n            $found = 1;\n            $max = $i;\n  \
  \      }\n        $i++;\n    }\n    if(!$found) {\n        $max = -1;\n    }\n \
  \   return $max;\n}"
- "    my $result = -1;\n    my $even = 1;\n    my $odd = 0;\n    my $min = $x;\n\
  \    my $max = $y;\n    \n    # Check if x is smaller than y\n    if ($x < $y) {\n\
  \        $min = $y;\n        $max = $x;\n    }\n    \n    # Check if x is bigger\
  \ than y\n    if ($x > $y) {\n        $min = $x;\n        $max = $y;\n    }\n  \
  \  \n    # Check if x is equal to y\n    if ($x == $y) {\n        $result = $x;\n\
  \    }\n    \n    # Check if x is smaller than y\n    if ($x < $y) {\n        $even\
  \ = 0;\n        $odd = 1;\n    }\n    \n    # Check if x is bigger than y\n    if\
  \ ($x > $y) {\n        $even = 1;\n        $odd = 1;\n    }\n    \n    # Check if\
  \ x is smaller than y\n    if ($x == $y) {\n        $result = $x;\n    }\n    \n\
  \    # Check if x is bigger than y\n    if ($x > $y) {\n        $even = 1;\n   \
  \     $odd = 1;\n    }\n    \n    # Check if x is smaller than y\n    if ($x < $y)\
  \ {\n        $even = 0;\n        $odd = 1;\n    }\n    \n    # Check if x is bigger\
  \ than y\n    if ($x > $y) {\n        $even = 1;\n        $odd = 1;\n    }\n   \
  \ \n    # Check if x is smaller than y\n    if ($x < $y) {\n        $even = 0;\n\
  \        $odd = 1;\n    }\n    \n    # Check if x is bigger than y\n    if ($x >\
  \ $y) {\n        $even = 1;\n        $odd = 1;\n    }\n    \n    # Check if x is\
  \ smaller than y\n    if ($x < $y) {\n        $even = 0;\n        $odd = 1;\n  \
  \  }\n    \n    # Check if x is bigger than y\n    if ($x > $y) {\n        $even\
  \ = 1;\n        $odd = 1;\n    }\n    \n    # Check if x is smaller than y\n   \
  \ if ($x < $y) {\n        $even = 0;\n        $odd = 1;\n    }\n    \n    # Check\
  \ if x is bigger than y\n    if ($x > $y) {\n        $even = 1;\n        $odd =\
  \ 1;\n    }\n    \n    # Check if x is smaller than y\n    if ($x < $y) {\n    \
  \    $even = 0;\n        $odd = 1;\n    }\n    \n    # Check if x is bigger than\
  \ y\n    if ($x > $y) {\n        $even = 1;\n        $odd = 1;\n    }\n    \n  \
  \  # Check if x is smaller than y\n    if ($x < $y) {\n        $even = 0;\n    \
  \    $odd = 1;\n    }\n    \n    # Check if x is big"
- "    my $result = -1;\n    my $i = 0;\n    while($i < $x && $i < $y) {\n       \
  \ if($i & 1) {\n            $result = $i;\n        }\n        $i++;\n    }\n   \
  \ return $result;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $counter = 0;\n    my $limit = $max - $min;\n\
  \    \n    while ($counter < $limit) {\n        my $num = $min + $step;\n      \
  \  if ($num % 2 == 0) {\n            $result = $num;\n            last;\n      \
  \  }\n        $step = $step / 2;\n        $counter++;\n    }\n    return $result;\n\
  }"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        if($i\
  \ & 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n\
  \    return $result;\n}"
- "    my $result = -1;\n    \n    # Check if x is bigger than y\n    if ($x > $y)\
  \ {\n        $result = $x;\n    } else {\n        $result = $y;\n    }\n    \n \
  \   # Check if x is bigger than y\n    if ($x > $y) {\n        $result = $x;\n \
  \   } else {\n        $result = $y;\n    }\n    \n    # Check if x is bigger than\
  \ y\n    if ($x > $y) {\n        $result = $x;\n    } else {\n        $result =\
  \ $y;\n    }\n    \n    # Check if x is bigger than y\n    if ($x > $y) {\n    \
  \    $result = $x;\n    } else {\n        $result = $y;\n    }\n    \n    # Check\
  \ if x is bigger than y\n    if ($x > $y) {\n        $result = $x;\n    } else {\n\
  \        $result = $y;\n    }\n    \n    # Check if x is bigger than y\n    if ($x\
  \ > $y) {\n        $result = $x;\n    } else {\n        $result = $y;\n    }\n \
  \   \n    # Check if x is bigger than y\n    if ($x > $y) {\n        $result = $x;\n\
  \    } else {\n        $result = $y;\n    }\n    \n    # Check if x is bigger than\
  \ y\n    if ($x > $y) {\n        $result = $x;\n    } else {\n        $result =\
  \ $y;\n    }\n    \n    # Check if x is bigger than y\n    if ($x > $y) {\n    \
  \    $result = $x;\n    } else {\n        $result = $y;\n    }\n    \n    # Check\
  \ if x is bigger than y\n    if ($x > $y) {\n        $result = $x;\n    } else {\n\
  \        $result = $y;\n    }\n    \n    # Check if x is bigger than y\n    if ($x\
  \ > $y) {\n        $result = $x;\n    } else {\n        $result = $y;\n    }\n \
  \   \n    # Check if x is bigger than y\n    if ($x > $y) {\n        $result = $x;\n\
  \    } else {\n        $result = $y;\n    }\n    \n    # Check if x is bigger than\
  \ y\n    if ($x > $y) {\n        $result = $x;\n    } else {\n        $result =\
  \ $y;\n    }\n    \n    # Check if x is bigger than y\n    if ($x > $y) {\n    \
  \    $result = $x;\n    } else {\n        $result = $y;\n    }\n    \n    # Check\
  \ if x is bigger than y\n    if ($x > $y) {\n        $result = $x;\n    } else {\n\
  \        $result = $y;\n    }\n    \n    # Check if x is bigger than y\n    if ($x\
  \ > $y) {\n        $result = $x;\n    } else {\n        $result = $y;\n    }\n \
  \   \n    # Check if x is bigger than y\n"
- "    return -1 if $x < $y;\n    return -1 if $x > $y;\n    return $x if $x == $y;\n\
  \    my $even = 0;\n    my $odd = 1;\n    my $max = $x;\n    my $min = $y;\n   \
  \ my $i;\n    my $j;\n    for ($i = $min; $i <= $max; $i++) {\n        $j = $i;\n\
  \        while ($j > 0) {\n            $even = $even + $j % 2;\n            $j =\
  \ $j / 2;\n        }\n        $j = $i;\n        while ($j > 0) {\n            $odd\
  \ = $odd + $j % 2;\n            $j = $j / 2;\n        }\n        if ($even > $odd)\
  \ {\n            $max = $i;\n        }\n    }\n    return $max;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $x > $y ? 1 : -1;\n    my $limit = $max - $min;\n    my $counter\
  \ = 0;\n    \n    while ($counter < $limit) {\n        $result = $min + $step *\
  \ $counter;\n        if ($result >= $x && $result <= $y) {\n            return $result;\n\
  \        }\n        $counter++;\n    }\n    return -1;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return $x if $x % 2\
  \ == 0;\n    return $y if $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 ==\
  \ 0;\n    return $y if $x % 2 == 0 && $y % 2 == 1;\n    return $x if $x % 2 == 1\
  \ && $y % 2 == 0;\n    return $y if $x % 2 == 1 && $y % 2 == 1;\n    return -1;\n\
  }"
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $counter = 0;\n    my\
  \ $num;\n    \n    while ($counter < $limit) {\n        $num = $x + $counter;\n\
  \        if ($num % 2 == 0) {\n            $result = $num;\n            last;\n\
  \        }\n        $counter++;\n    }\n    return $result;\n}"
- "    my $result;\n    if ($x < $y) {\n        $result = $x;\n    } elsif ($x > $y)\
  \ {\n        $result = $y;\n    } else {\n        $result = $x;\n    }\n    while\
  \ ($result % 2 == 0) {\n        $result /= 2;\n    }\n    return $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x > $y;\n    return $x if $x % 2 ==\
  \ 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 != 0;\n    return $y\
  \ if $x % 2 != 0 && $y % 2 == 0;\n    return $y if $x % 2 != 0 && $y % 2 != 0;\n\
  \    return -1;\n}"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    \n    for(my $i\
  \ = $x; $i <= $y; $i++) {\n        if($i % 2 == 0) {\n            $even++;\n   \
  \     }\n        else {\n            $odd++;\n        }\n    }\n    \n    if($even\
  \ > $odd) {\n        $result = $even;\n    }\n    else {\n        $result = $odd;\n\
  \    }\n    \n    return $result;\n}"
- "    my $result = -1;\n    my $i;\n    for($i = $x; $i <= $y; $i++) {\n        if($i\
  \ % 2 == 0) {\n            $result = $i;\n            last;\n        }\n    }\n\
  \    return $result;\n}"
- "    my $max_num = $x;\n    my $min_num = $y;\n    my $max_even;\n    my $min_even;\n\
  \    my $even;\n    my $odd;\n    my $i;\n    my $j;\n    my $k;\n    my $evens;\n\
  \    my $odds;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;\n    my $evens_sum;\n\
  \    my $odds_sum;\n    my $evens_count;\n    my $odds_count;"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    \n    for(my $i\
  \ = $x; $i <= $y; $i++) {\n        if($i % 2 == 0) {\n            $even++;\n   \
  \     } else {\n            $odd++;\n        }\n    }\n    \n    if($even > $odd)\
  \ {\n        $result = $even;\n    } else {\n        $result = $odd;\n    }\n  \
  \  \n    return $result;\n}"
- "    my $result;\n    my $min = $x;\n    my $max = $y;\n    my $mid;"
- "    my $num = $x;\n    while($num < $y) {\n        $num += 2;\n    }\n    return\
  \ $num if $num % 2 == 0;\n    return -1;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max - $min;\n    my $limit = $step * 2;\n    my $counter\
  \ = 0;\n    \n    while ($counter < $limit) {\n        $result = $min + $step *\
  \ $counter;\n        if ($result % 2 != 0) {\n            return $result;\n    \
  \    }\n        $counter++;\n    }\n    return -1;\n}"
- "    my $result = -1;\n    for(my $i = 0; $i <= $y; $i++) {\n        if($x % 2 ==\
  \ 0) {\n            $result = $i;\n            last;\n        }\n    }\n    return\
  \ $result;\n}"
- "    my $result = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $i;\n    \n \
  \   for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n    }\n    \n    if\
  \ ($even > $odd) {\n        $result = $x;\n    }\n    else {\n        $result =\
  \ $y;\n    }\n    \n    return $result;\n}"
- "    my $result;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    my $even;\n\
  \    my $odd;\n    \n    # Find the midpoint\n    $mid = $min + ($max - $min) /\
  \ 2;\n    \n    # Find the even and odd numbers between the midpoints\n    $even\
  \ = $min + $mid / 2;\n    $odd = $max - $mid;\n    \n    # If the midpoint is even,\
  \ return the even number\n    if ($mid % 2 == 0) {\n        $result = $even;\n \
  \   }\n    \n    # If the midpoint is odd, return the odd number\n    else {\n \
  \       $result = $odd;\n    }\n    \n    # Return the result\n    return $result;\n\
  }"
- "    my $result;\n    \n    if ($x < $y) {\n        $result = $x;\n    } elsif ($x\
  \ > $y) {\n        $result = $y;\n    } else {\n        $result = $x;\n    }\n \
  \   \n    while ($result % 2 == 0) {\n        $result /= 2;\n    }\n    \n    return\
  \ $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return -1 if $x > $y;\n\
  \    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y\
  \ % 2 != 0;\n    return $y if $x % 2 != 0 && $y % 2 == 0;\n    return $y if $x %\
  \ 2 != 0 && $y % 2 != 0;\n    return -1;\n}"
- "    my $result = -1;\n    my $even = 1;\n    my $odd = 0;\n    \n    while ($x\
  \ <= $y) {\n        if ($even % 2 == 0) {\n            $result = $x;\n         \
  \   $even = $even + 1;\n        }\n        else {\n            $result = $y;\n \
  \           $odd = $odd + 1;\n        }\n        $x = $x + 1;\n        $y = $y -\
  \ 1;\n    }\n    return $result;\n}"
- "    my $result = -1;\n    \n    if ($x < $y) {\n        $result = $x if ($x % 2\
  \ != 0);\n        $result = $y if ($y % 2 != 0);\n    }\n    else {\n        $result\
  \ = $y if ($y % 2 != 0);\n        $result = $x if ($x % 2 != 0);\n    }\n    \n\
  \    return $result;\n}"
- "    my $result;\n    my $even;\n    my $odd;\n    my $min = $x < $y ? $x : $y;\n\
  \    my $max = $x < $y ? $y : $x;\n    my $step = $x > $y ? 1 : -1;\n    my $step2\
  \ = $x > $y ? -1 : 1;\n    my $step3 = $x > $y ? 1 : -1;\n    my $step4 = $x > $y\
  \ ? -1 : 1;\n    my $step5 = $x > $y ? 1 : -1;\n    my $step6 = $x > $y ? -1 : 1;\n\
  \    my $step7 = $x > $y ? 1 : -1;\n    my $step8 = $x > $y ? -1 : 1;\n    my $step9\
  \ = $x > $y ? 1 : -1;\n    my $step10 = $x > $y ? -1 : 1;\n    my $step11 = $x >\
  \ $y ? 1 : -1;\n    my $step12 = $x > $y ? -1 : 1;\n    my $step13 = $x > $y ? 1\
  \ : -1;\n    my $step14 = $x > $y ? -1 : 1;\n    my $step15 = $x > $y ? 1 : -1;\n\
  \    my $step16 = $x > $y ? -1 : 1;\n    my $step17 = $x > $y ? 1 : -1;\n    my\
  \ $step18 = $x > $y ? -1 : 1;\n    my $step19 = $x > $y ? 1 : -1;\n    my $step20\
  \ = $x > $y ? -1 : 1;\n    my $step21 = $x > $y ? 1 : -1;\n    my $step22 = $x >\
  \ $y ? -1 : 1;\n    my $step23 = $x > $y ? 1 : -1;\n    my $step24 = $x > $y ? -1\
  \ : 1;\n    my $step25 = $x > $y ? 1 : -1;\n    my $step26 = $x > $y ? -1 : 1;\n\
  \    my $step27 = $x > $y ? 1 : -1;\n    my $step28 = $x > $y ? -1 : 1;\n    my\
  \ $step29 = $x > $y ? 1 : -1;\n    my $step30 = $x > $y ? -1 : 1;\n    my $step31\
  \ = $x > $y ? 1 : -1;\n    my $step32 = $x > $y ? -1 : 1;\n    my $step33 = $x >\
  \ $y ? 1 : -1;\n    my $step34 = $x > $y ? -1 : 1;\n    my $step35 = $x > $y ? 1\
  \ : -1;\n    my $step36 = $x > $y ? -1 : 1;\n    my $step37 = $x > $y ? 1 : -1;\n\
  \    my $step38 = $x > $y ? -1 : 1;\n    my $step39 = $x > $y ? 1 : -1;\n    my\
  \ $step"
- "    my $even = 0;\n    my $evennum = 0;\n    my $oddnum = 0;\n    my $odd = 0;\n\
  \    my $max = 0;\n    my $min = 0;\n    \n    # Check if x is bigger than y\n \
  \   if($x > $y) {\n        $min = $x;\n        $max = $y;\n    }\n    else {\n \
  \       $min = $y;\n        $max = $x;\n    }\n    \n    # Check if x is even and\
  \ y is odd\n    if($x % 2 == 0 && $y % 2 == 1) {\n        $evennum = $x;\n     \
  \   $even = $evennum;\n    }\n    \n    # Check if x is odd and y is even\n    elsif($x\
  \ % 2 == 1 && $y % 2 == 0) {\n        $oddnum = $x;\n        $odd = $oddnum;\n \
  \   }\n    \n    # Check if x is even and y is odd\n    elsif($x % 2 == 1 && $y\
  \ % 2 == 1) {\n        $evennum = $x;\n        $even = $evennum;\n    }\n    \n\
  \    # Check if x is odd and y is even\n    elsif($x % 2 == 0 && $y % 2 == 0) {\n\
  \        $oddnum = $x;\n        $odd = $oddnum;\n    }\n    \n    # Check if x is\
  \ even and y is even\n    elsif($x % 2 == 0 && $y % 2 == 1) {\n        $evennum\
  \ = $x;\n        $even = $evennum;\n    }\n    \n    # Check if x is odd and y is\
  \ odd\n    elsif($x % 2 == 1 && $y % 2 == 0) {\n        $oddnum = $x;\n        $odd\
  \ = $oddnum;\n    }\n    \n    # Check if x is even and y is odd\n    elsif($x %\
  \ 2 == 1 && $y % 2 == 1) {\n        $evennum = $x;\n        $even = $evennum;\n\
  \    }\n    \n    # Check if x is odd and y is even\n    elsif($x % 2 == 0 && $y\
  \ % 2 == 0) {\n        $oddnum = $x;\n        $odd = $oddnum;\n    }\n    \n   \
  \ # Check if x is even and y is even\n    elsif($x % 2 == 0 && $y % 2 == 1) {\n\
  \        $evennum = $x;\n        $even = $evennum;\n    }\n    \n    # Check if\
  \ x is odd and y is odd\n    elsif($x % 2 == 1 && $y % 2 == 0) {\n        $oddnum\
  \ = $x;\n        $odd = $oddnum;\n    }\n    \n    # Check if x is even and y is\
  \ even\n    elsif($x % 2 == 1 && $y % 2 == 1) {\n        $evennum = $x;\n      \
  \  $even = $"
- "    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $num\
  \ = $min;\n    my $counter = 1;\n    while($num < $max) {\n        if($num % 2 ==\
  \ 0) {\n            $num += $counter;\n        }\n        $counter++;\n    }\n \
  \   return $num;\n}"
- "    my $max_num = $x;\n    my $min_num = $y;\n    my $num = $max_num;\n    my $num_found\
  \ = 0;\n    \n    while ($num >= $min_num) {\n        $num_found += $num % 2 ==\
  \ 0;\n        $num = $num / 2;\n    }\n    \n    if ($num_found == 0) {\n      \
  \  return -1;\n    }\n    \n    return $max_num;\n}"
- "    my $result = -1;\n    for(my $i = $x; $i <= $y; $i++) {\n        if($i & 1)\
  \ {\n            $result = $i;\n            last;\n        }\n    }\n    return\
  \ $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return -1 if $x == $y;\n\
  \    return $x if $x % 2 == 0;\n    return $x if $y % 2 == 0;\n    return $y if\
  \ $x % 2 == 0;\n    return $y if $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y\
  \ % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $y if $x %\
  \ 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return\
  \ $y if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n\
  \    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y\
  \ % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x %\
  \ 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return\
  \ $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n\
  \    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y\
  \ % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x %\
  \ 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return\
  \ $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n\
  \    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y\
  \ % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x %\
  \ 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return\
  \ $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == 0;\n\
  \    return $x if $x % 2 == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y\
  \ % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 == "
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $x > $y ? 1 : -1;\n    my $i = $min;\n    do {\n        $result\
  \ = $i;\n        $i += $step;\n    } while ($i <= $max);\n    return $result;\n}"
- "    my $max = -1;\n    my $even = 0;\n    my $odd = 0;\n    my $i;\n    for ($i\
  \ = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n  \
  \      }\n        else {\n            $odd++;\n        }\n    }\n    if ($even >\
  \ $odd) {\n        $max = $x;\n    }\n    else {\n        $max = $y;\n    }\n  \
  \  return $max;\n}"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        if($i\
  \ & 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n\
  \    return $result;\n}"
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $step = $limit / 2;\n\
  \    my $start = $x - $step;\n    my $end = $x + $step;\n    my $num;\n    \n  \
  \  while ($start <= $end) {\n        $num = $start + $step;\n        if ($num >\
  \ $limit) {\n            $num = $num - $limit;\n        }\n        if ($num % 2\
  \ == 0) {\n            $result = $num;\n        }\n        $start = $start + $step;\n\
  \    }\n    return $result;\n}"
- "    return -1 if $x < $y;\n    return -1 if $x == $y;\n    return $x if $x % 2\
  \ == 0 && $y % 2 == 0;\n    return $x if $x % 2 == 0 && $y % 2 != 0;\n    return\
  \ $y if $x % 2 != 0 && $y % 2 == 0;\n    return $y if $x % 2 != 0 && $y % 2 != 0;\n\
  \    return -1;\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while ($min <= $max) {\n        if ($min % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n        $min++;\n  \
  \  }\n    \n    if ($even > $odd) {\n        return $even;\n    }\n    else {\n\
  \        return $odd;\n    }\n}"
- "    my $result = -1;\n    my $i = 0;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while($i <= $x) {\n        $even = $even + $i;\n        $odd = $odd + $i;\n\
  \        $i++;\n    }\n    \n    while($i <= $y) {\n        $even = $even + $i;\n\
  \        $odd = $odd + $i;\n        $i++;\n    }\n    \n    if($even > $odd) {\n\
  \        $result = $even;\n    } else {\n        $result = $odd;\n    }\n    \n\
  \    return $result;\n}"
- "    my $result = -1;\n    my $even = 1;\n    my $odd = 0;\n    my $temp;\n    \n\
  \    # Check if x is greater than y\n    if ($x > $y) {\n        $temp = $x;\n \
  \       $x = $y;\n        $y = $temp;\n    }\n    \n    # Check if x is equal to\
  \ y\n    if ($x == $y) {\n        return $x;\n    }\n    \n    # Check if x is less\
  \ than y\n    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y\
  \ = $temp;\n    }\n    \n    # Check if x is greater than or equal to y\n    if\
  \ ($x >= $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n   \
  \ }\n    \n    # Check if x is less than or equal to y\n    if ($x <= $y) {\n  \
  \      $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n    # Check\
  \ if x is even\n    if ($x % 2 == 0) {\n        $even = 1;\n    }\n    \n    # Check\
  \ if x is odd\n    if ($x % 2 != 0) {\n        $even = 0;\n    }\n    \n    # Check\
  \ if y is even\n    if ($y % 2 == 0) {\n        $even = 1;\n    }\n    \n    # Check\
  \ if y is odd\n    if ($y % 2 != 0) {\n        $even = 0;\n    }\n    \n    # Check\
  \ if x is greater than y\n    if ($x > $y) {\n        $temp = $x;\n        $x =\
  \ $y;\n        $y = $temp;\n    }\n    \n    # Check if x is equal to y\n    if\
  \ ($x == $y) {\n        return $x;\n    }\n    \n    # Check if x is less than y\n\
  \    if ($x < $y) {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n\
  \    }\n    \n    # Check if x is greater than or equal to y\n    if ($x >= $y)\
  \ {\n        $temp = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n \
  \   # Check if x is less than or equal to y\n    if ($x <= $y) {\n        $temp\
  \ = $x;\n        $x = $y;\n        $y = $temp;\n    }\n    \n    # Check if x is\
  \ even\n    if ($x % 2 == 0) {\n        $even = 1;\n    }\n    \n    # Check if\
  \ x is odd\n    if ($x % 2 != 0) {\n        $even = 0;\n    }\n    \n    # Check\
  \ if y is even\n    if ($y % 2 == 0) {\n        $even = 1;\n    }\n    \n    # Check\
  \ if y is odd\n    if ($y % 2 != 0) {\n        $even = 0;\n    }\n    \n    # Check\
  \ if x is greater than y\n    if ("
- "    my $even = 1;\n    my $result = -1;\n    for(my $i = $x; $i <= $y; $i++) {\n\
  \        $even = $even % 2;\n        if($even != 0) {\n            $result = $i;\n\
  \            last;\n        }\n    }\n    return $result;\n}"
- "    my $result = -1;\n    \n    for(my $i = 0; $i <= $y; $i++) {\n        if($x\
  \ % 2 == 0) {\n            $result = $i;\n            last;\n        }\n    }\n\
  \    \n    return $result;\n}"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        if($i\
  \ & 1) {\n            $result = $i;\n            last;\n        }\n    }\n    \n\
  \    return $result;\n}"
- "    my $result = -1;\n    my $limit = $y - $x + 1;\n    my $remainder = $x % $y;\n\
  \    my $counter = 1;\n    my $max_counter = 0;\n    my $max_number = $x;\n    \n\
  \    while ($counter <= $limit) {\n        if ($remainder == 0) {\n            $result\
  \ = $max_number;\n            $counter = $max_counter + 1;\n            $max_number\
  \ = $x;\n            $max_counter = $counter;\n        }\n        $remainder = $remainder\
  \ / $y;\n        $counter++;\n    }\n    return $result;\n}"
- "    my $result;\n    my $x_even = $x % 2 == 0;\n    my $y_even = $y % 2 == 0;\n\
  \    if ($x_even && $y_even) {\n        $result = $x if $x > $y;\n        $result\
  \ = $y if $x < $y;\n    } elsif ($x_even) {\n        $result = $y;\n    } elsif\
  \ ($y_even) {\n        $result = $x;\n    } else {\n        $result = -1;\n    }\n\
  \    return $result;\n}"
- "    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $even\
  \ = $min % 2 == 0;\n    my $even_in_range = $min <= $max && $max <= $x;\n    my\
  \ $odd = $min % 2 != 0;\n    my $odd_in_range = $min <= $max && $max <= $y;\n  \
  \  my $even_in_range2 = $min <= $max && $max <= $x;\n    my $odd_in_range2 = $min\
  \ <= $max && $max <= $y;\n    my $even_in_range3 = $min <= $max && $max <= $x;\n\
  \    my $odd_in_range3 = $min <= $max && $max <= $y;\n    my $even_in_range4 = $min\
  \ <= $max && $max <= $x;\n    my $odd_in_range4 = $min <= $max && $max <= $y;\n\
  \    my $even_in_range5 = $min <= $max && $max <= $x;\n    my $odd_in_range5 = $min\
  \ <= $max && $max <= $y;\n    my $even_in_range6 = $min <= $max && $max <= $x;\n\
  \    my $odd_in_range6 = $min <= $max && $max <= $y;\n    my $even_in_range7 = $min\
  \ <= $max && $max <= $x;\n    my $odd_in_range7 = $min <= $max && $max <= $y;\n\
  \    my $even_in_range8 = $min <= $max && $max <= $x;\n    my $odd_in_range8 = $min\
  \ <= $max && $max <= $y;\n    my $even_in_range9 = $min <= $max && $max <= $x;\n\
  \    my $odd_in_range9 = $min <= $max && $max <= $y;\n    my $even_in_range10 =\
  \ $min <= $max && $max <= $x;\n    my $odd_in_range10 = $min <= $max && $max <=\
  \ $y;\n    my $even_in_range11 = $min <= $max && $max <= $x;\n    my $odd_in_range11\
  \ = $min <= $max && $max <= $y;\n    my $even_in_range12 = $min <= $max && $max\
  \ <= $x;\n    my $odd_in_range12 = $min <= $max && $max <= $y;\n    my $even_in_range13\
  \ = $min <= $max && $max <= $x;\n    my $odd_in_range"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max - $min;\n    my $range = $max - $min;\n    my $step2\
  \ = $range / 2;\n    my $step3 = $range / 3;\n    my $step4 = $range / 4;\n    my\
  \ $step5 = $range / 5;\n    my $step6 = $range / 6;\n    my $step7 = $range / 7;\n\
  \    my $step8 = $range / 8;\n    my $step9 = $range / 9;\n    my $step10 = $range\
  \ / 10;\n    my $step11 = $range / 11;\n    my $step12 = $range / 12;\n    my $step13\
  \ = $range / 13;\n    my $step14 = $range / 14;\n    my $step15 = $range / 15;\n\
  \    my $step16 = $range / 16;\n    my $step17 = $range / 17;\n    my $step18 =\
  \ $range / 18;\n    my $step19 = $range / 19;\n    my $step20 = $range / 20;\n \
  \   my $step21 = $range / 21;\n    my $step22 = $range / 22;\n    my $step23 = $range\
  \ / 23;\n    my $step24 = $range / 24;\n    my $step25 = $range / 25;\n    my $step26\
  \ = $range / 26;\n    my $step27 = $range / 27;\n    my $step28 = $range / 28;\n\
  \    my $step29 = $range / 29;\n    my $step30 = $range / 30;\n    my $step31 =\
  \ $range / 31;\n    my $step32 = $range / 32;\n    my $step33 = $range / 33;\n \
  \   my $step34 = $range / 34;\n    my $step35 = $range / 35;\n    my $step36 = $range\
  \ / 36;\n    my $step37 = $range / 37;\n    my $step38 = $range / 38;\n    my $step39\
  \ = $range / 39;\n    my $step40 = $range / 40;\n    my $step41 = $range / 41;\n\
  \    my $step42 = $range / 42;\n    my $step43 = $range / 43;\n    my $step44 =\
  \ $range / 44;\n    my $step45 = $range / 45;\n    my $step46 = $range / 46;\n \
  \   my $step47 = $range / 47;\n    my $step48 = $range / 48;\n    my $step49 = $range "
- "    my $result = -1;\n    my $even = 1;\n    my $odd = 0;\n    \n    while ($x\
  \ <= $y) {\n        if ($even % 2 == 0) {\n            $result = $x;\n         \
  \   $even = $even + 1;\n        }\n        else {\n            $result = $y;\n \
  \           $odd = $odd + 1;\n        }\n        $x = $x + 1;\n        $y = $y -\
  \ 1;\n    }\n    return $result;\n}"
- "    my $result = -1;\n    my $xx = $x;\n    my $yy = $y;\n    my $xy = $x * $y;\n\
  \    my $yx = $y * $x;\n    my $xx = $x * $x;\n    my $yy = $y * $y;\n    my $xy\
  \ = $x * $y;\n    my $yx = $y * $x;\n    my $xx = $x * $x;\n    my $yy = $y * $y;\n\
  \    my $xy = $x * $y;\n    my $yx = $y * $x;\n    my $xx = $x * $x;\n    my $yy\
  \ = $y * $y;\n    my $xy = $x * $y;\n    my $yx = $y * $x;\n    my $xx = $x * $x;\n\
  \    my $yy = $y * $y;\n    my $xy = $x * $y;\n    my $yx = $y * $x;\n    my $xx\
  \ = $x * $x;\n    my $yy = $y * $y;\n    my $xy = $x * $y;\n    my $yx = $y * $x;\n\
  \    my $xx = $x * $x;\n    my $yy = $y * $y;\n    my $xy = $x * $y;\n    my $yx\
  \ = $y * $x;\n    my $xx = $x * $x;\n    my $yy = $y * $y;\n    my $xy = $x * $y;\n\
  \    my $yx = $y * $x;\n    my $xx = $x * $x;\n    my $yy = $y * $y;\n    my $xy\
  \ = $x * $y;\n    my $yx = $y * $x;\n    my $xx = $x * $x;\n    my $yy = $y * $y;\n\
  \    my $xy = $x * $y;\n    my $yx = $y * $x;\n    my $xx = $x * $x;\n    my $yy\
  \ = $y * $y;\n    my $xy = $x * $y;\n    my $yx = $y * $x;\n    my $xx = $x * $x;\n\
  \    my $yy = $y * $y;\n    my $xy = $x * $y;\n    my $yx = $y * $x;\n    my $xx\
  \ = $x * $x;\n    my $yy = $y * $y;\n    my $xy = $x * $y;\n    my $yx = $y * $x;\n\
  \    my $xx = $x * $x;\n    my $yy = $y * $y;\n    my $xy = $x * $y;\n    my $yx\
  \ = $y * $x;\n    my $xx = $x * $"
- "    my $even = 0;\n    my $biggest = -1;\n    my $temp;\n    \n    for(my $i =\
  \ 0; $i < $y; $i++) {\n        $temp = $x;\n        $temp += $i;\n        $temp\
  \ = $temp % $y;\n        $even = $temp == 0;\n        if($even) {\n            $biggest\
  \ = $i;\n        }\n    }\n    return $biggest;\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ \n    while ($min < $max) {\n        if ($min % 2 == 0) {\n            $even++;\n\
  \        }\n        else {\n            $odd++;\n        }\n        $min++;\n  \
  \  }\n    \n    if ($even > $odd) {\n        return $max;\n    }\n    else {\n \
  \       return $min;\n    }\n}"
- "    my $result;\n    my $x_even = $x % 2 == 0;\n    my $y_even = $y % 2 == 0;\n\
  \    \n    if ($x_even && $y_even) {\n        $result = $x if $x > $y;\n       \
  \ $result = $y if $x < $y;\n    } elsif ($x_even) {\n        $result = $x;\n   \
  \ } elsif ($y_even) {\n        $result = $y;\n    } else {\n        $result = -1;\n\
  \    }\n    \n    return $result;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $mid = $min + ($max - $min) / 2;\n    my $is_even = ($mid % 2) ==\
  \ 0;\n    my $is_odd = !$is_even;\n    \n    if ($is_even) {\n        $result =\
  \ $mid;\n    } else {\n        $result = $mid - 1;\n    }\n    \n    return $result\
  \ if $result >= $min && $result <= $max;\n    return -1;\n}"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ my $temp;\n    \n    while ($min <= $max) {\n        $temp = $min;\n        $even\
  \ = 0;\n        $odd = 0;\n        while ($temp % 2 == 0) {\n            $even++;\n\
  \            $temp = $temp / 2;\n        }\n        while ($temp % 2 == 1) {\n \
  \           $odd++;\n            $temp = $temp / 2;\n        }\n        if ($even\
  \ > $odd) {\n            $max = $min + 1;\n        } elsif ($even < $odd) {\n  \
  \          $min = $max + 1;\n        } else {\n            return $min;\n      \
  \  }\n    }\n    return -1;\n}"
- "    my $result;\n    my $even;\n    my $odd;\n    my $min = $x;\n    my $max =\
  \ $y;\n    my $mid;\n    \n    while ($min <= $max) {\n        $mid = ($min + $max)\
  \ / 2;\n        $even = $min + $mid / 2;\n        $odd = $mid - $even;\n       \
  \ if ($even > $odd) {\n            $min = $mid + 1;\n        } elsif ($even < $odd)\
  \ {\n            $max = $mid - 1;\n        } else {\n            $result = $mid;\n\
  \        }\n    }\n    return $result;\n}"
- "    my $result;\n    \n    # Check if x is bigger than y\n    if ($x > $y) {\n\
  \        $result = $x;\n        $x = $y;\n        $y = $result;\n    }\n    \n \
  \   # Check if x is smaller than y\n    if ($x < $y) {\n        $result = $y;\n\
  \        $x = $y;\n        $y = $result;\n    }\n    \n    # Check if x is equal\
  \ to y\n    if ($x == $y) {\n        $result = $x;\n    }\n    \n    # Check if\
  \ x is bigger than or equal to y\n    if ($x >= $y) {\n        $result = $x;\n \
  \   }\n    \n    # Check if x is smaller than or equal to y\n    if ($x <= $y) {\n\
  \        $result = $y;\n    }\n    \n    return $result;\n}"
- "    my $even = 0;\n    my $evennum = 0;\n    my $evennum2 = 0;\n    my $evennum3\
  \ = 0;\n    my $evennum4 = 0;\n    my $evennum5 = 0;\n    my $evennum6 = 0;\n  \
  \  my $evennum7 = 0;\n    my $evennum8 = 0;\n    my $evennum9 = 0;\n    my $evennum10\
  \ = 0;\n    my $evennum11 = 0;\n    my $evennum12 = 0;\n    my $evennum13 = 0;\n\
  \    my $evennum14 = 0;\n    my $evennum15 = 0;\n    my $evennum16 = 0;\n    my\
  \ $evennum17 = 0;\n    my $evennum18 = 0;\n    my $evennum19 = 0;\n    my $evennum20\
  \ = 0;\n    my $evennum21 = 0;\n    my $evennum22 = 0;\n    my $evennum23 = 0;\n\
  \    my $evennum24 = 0;\n    my $evennum25 = 0;\n    my $evennum26 = 0;\n    my\
  \ $evennum27 = 0;\n    my $evennum28 = 0;\n    my $evennum29 = 0;\n    my $evennum30\
  \ = 0;\n    my $evennum31 = 0;\n    my $evennum32 = 0;\n    my $evennum33 = 0;\n\
  \    my $evennum34 = 0;\n    my $evennum35 = 0;\n    my $evennum36 = 0;\n    my\
  \ $evennum37 = 0;\n    my $evennum38 = 0;\n    my $evennum39 = 0;\n    my $evennum40\
  \ = 0;\n    my $evennum41 = 0;\n    my $evennum42 = 0;\n    my $evennum43 = 0;\n\
  \    my $evennum44 = 0;\n    my $evennum45 = 0;\n    my $evennum46 = 0;\n    my\
  \ $evennum47 = 0;\n    my $evennum48 = 0;\n    my $evennum49 = 0;\n    my $evennum50\
  \ = 0;\n    my $evennum51 = 0;\n    my $evennum52 = 0;\n    my $evennum53 = 0;\n\
  \    my $evennum54 = 0;\n    my $evennum55 = 0;\n    my $evennum56 = 0;\n    my\
  \ $evennum57 = 0;\n    my $evennum58 = 0;\n    my $evennum59 = 0;\n    my $evennum60\
  \ = 0;\n    my $evennum61 = 0;\n    my $evennum62 = 0;\n    my $evennum63 = 0;\n\
  \    my $evennum64 = 0;\n    my $evennum65 = 0;\n    my $evennum66 = 0;\n    my\
  \ $evennum67 = 0;\n    my $evennum68 = 0;\n    my $evennum69 = 0;\n    my $evennum70\
  \ = 0;\n    my $evennum71 = 0;\n    my $evennum72 = 0;\n    my $evennum73 = 0;\n\
  \    "
- "    my $result;\n    my $x_even = $x % 2 == 0;\n    my $y_even = $y % 2 == 0;\n\
  \    my $x_odd = $x % 2 == 1;\n    my $y_odd = $y % 2 == 1;\n    if ($x_even &&\
  \ $y_even) {\n        $result = $x;\n    } elsif ($x_odd && $y_odd) {\n        $result\
  \ = $y;\n    } else {\n        $result = -1;\n    }\n    return $result;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $max / 2;\n    my $i = $min;\n    my $found = 0;\n    while\
  \ ($i <= $max) {\n        if ($i % 2 == 0) {\n            $result = $i;\n      \
  \      $found = 1;\n            last;\n        }\n        $i += $step;\n    }\n\
  \    return $found ? $result : -1;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $mid = $min + ($max - $min) / 2;\n    my $counter = 0;\n    \n   \
  \ while ($min <= $max) {\n        $counter++;\n        if ($counter % 2 == 0) {\n\
  \            $result = $min;\n            last;\n        }\n        $min = $mid\
  \ + 1;\n    }\n    \n    return $result if $result != -1;\n    return -1;\n}"
- "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
  \ $x;\n    my $step = $x > $y ? 1 : -1;\n    my $i = $min;\n    do {\n        $result\
  \ = $i;\n        $i += $step;\n    } while ($i <= $max);\n    return $result;\n}"
- "    my $even = 1;\n    my $biggest = $x;\n    my $smaller = $y;\n    my $smaller_even\
  \ = $smaller;\n    my $bigger_even = $biggest;\n    my $bigger = $y;\n    my $smaller\
  \ = $x;\n    my $smaller_even = $smaller;\n    my $bigger_even = $biggest;\n   \
  \ my $bigger = $y;\n    my $smaller = $x;\n    my $smaller_even = $smaller;\n  \
  \  my $bigger_even = $biggest;\n    my $bigger = $y;\n    my $smaller = $x;\n  \
  \  my $smaller_even = $smaller;\n    my $bigger_even = $biggest;\n    my $bigger\
  \ = $y;\n    my $smaller = $x;\n    my $smaller_even = $smaller;\n    my $bigger_even\
  \ = $biggest;\n    my $bigger = $y;\n    my $smaller = $x;\n    my $smaller_even\
  \ = $smaller;\n    my $bigger_even = $biggest;\n    my $bigger = $y;\n    my $smaller\
  \ = $x;\n    my $smaller_even = $smaller;\n    my $bigger_even = $biggest;\n   \
  \ my $bigger = $y;\n    my $smaller = $x;\n    my $smaller_even = $smaller;\n  \
  \  my $bigger_even = $biggest;\n    my $bigger = $y;\n    my $smaller = $x;\n  \
  \  my $smaller_even = $smaller;\n    my $bigger_even = $biggest;\n    my $bigger\
  \ = $y;\n    my $smaller = $x;\n    my $smaller_even = $smaller;\n    my $bigger_even\
  \ = $biggest;\n    my $bigger = $y;\n    my $smaller = $x;\n    my $smaller_even\
  \ = $smaller;\n    my $bigger_even = $biggest;\n    my $bigger = $y;\n    my $smaller\
  \ = $x;\n    my $smaller_even = $smaller;\n    my $bigger_even = $biggest;\n   \
  \ my $bigger = $y;\n    my $smaller = $x;\n    my $smaller_even = $smaller;\n  \
  \  my $bigger_even = $biggest;\n    my $bigger = $y;\n    my $smaller = $x;\n  \
  \  my $smaller_even = $smaller;\n    my $bigger_even = $biggest;\n    my $bigger\
  \ = $y;\n    my $smaller = $x;\n    my $small"
- "    my $max = $x;\n    my $min = $y;\n    my $even = 0;\n    my $odd = 0;\n   \
  \ my $eveneven = 0;\n    my $evenodd = 0;\n    my $oddodd = 0;\n    my $eveneveneven\
  \ = 0;\n    my $evenoddodd = 0;\n    my $oddoddeven = 0;\n    my $oddoddodd = 0;\n\
  \    my $eveneveneveneven = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven\
  \ = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddoddeven\
  \ = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven\
  \ = 0;\n    my $evenoddoddoddeven = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd\
  \ = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven\
  \ = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven\
  \ = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven\
  \ = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd\
  \ = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven\
  \ = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven\
  \ = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven\
  \ = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd\
  \ = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven\
  \ = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven\
  \ = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven\
  \ = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven = 0;\n    my $oddoddoddodd\
  \ = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven = 0;\n    my $oddoddoddeven\
  \ = 0;\n    my $oddoddoddodd = 0;\n    my $eveneveneveneven = 0;\n    my $evenoddoddeven\
  \ = 0;\n    my $oddoddoddeven = 0;\n    my $"
- "    my $result = -1;\n    \n    for(my $i = $x; $i <= $y; $i++) {\n        my $num\
  \ = $i;\n        \n        for(my $j = 1; $j <= $i; $j++) {\n            if($num\
  \ % $j == 0) {\n                $result = $j;\n                last;\n         \
  \   }\n        }\n    }\n    \n    return $result;\n}"
- "    my $result;\n    my $x_even = $x % 2 == 0;\n    my $y_even = $y % 2 == 0;\n\
  \    \n    if ($x_even && $y_even) {\n        $result = $x;\n    } elsif ($x_even\
  \ && !$y_even) {\n        $result = $y;\n    } elsif (!$x_even && $y_even) {\n \
  \       $result = $y;\n    } else {\n        $result = -1;\n    }\n    \n    return\
  \ $result;\n}"
language: pl
name: HumanEval_102_choose_num
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# choose_num(12,\
  \ 15) = 14\n# choose_num(13, 12) = -1\nsub choose_num {\n    my($x, $y) = @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n\
  \        if(eq_deeply($candidate->(12, 15),14)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33,\
  \ 12354),12354)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(5234, 5233),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27,\
  \ 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(7, 7),-1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
