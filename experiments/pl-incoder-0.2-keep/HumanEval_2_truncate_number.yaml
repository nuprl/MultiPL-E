name: HumanEval_2_truncate_number
language: humaneval_to_perl.py
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
  \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($decimal) = $number % 1;\n    $number -= $decimal;\n    $number\
    \ /= 1;\n    return $number;\n}", "    my $decimals = $number % 1;\n    $number\
    \ -= $decimals;\n    return $number;\n}", "    my $decimals = $number % 1;\n \
    \   $number -= $decimals;\n    $number /= 1;\n    return $number;\n}", "    my($decimal)\
    \ = $number % 1;\n    $number -= $decimal;\n    return $number;\n}", "    my($decimals)\
    \ = 0;\n    my($integer) = 0;\n    my($remainder) = 0;\n    my($remainder_float)\
    \ = 0;\n    my($remainder_int) = 0;", "    my($integer, $decimals) = (0, 0);\n\
    \    my $remainder = $number;\n    my $sign = 1;\n    if ($number < 0) {\n   \
    \     $sign = -1;\n        $remainder = -$number;\n    }\n    while ($remainder\
    \ >= 1) {\n        $remainder -= 1;\n        $integer += 1;\n        $decimals\
    \ += 1;\n    }\n    return $sign * $integer + $decimals;\n}", "    my $decimals\
    \ = $number % 1;\n    $number -= $decimals;\n    $number /= 1;\n    return $number;\n\
    }", "    my $decimals = $number % 1;\n    my $integer = $number - $decimals;\n\
    \    return $decimals;\n}", "    my($decimals) = 0;\n    my($integer) = 0;\n \
    \   my($remainder) = 0;\n    my($remainder_decimals) = 0;\n    my($remainder_integer)\
    \ = 0;\n    my($remainder_remainder) = 0;\n    my($remainder_remainder_decimals)\
    \ = 0;\n    my($remainder_remainder_integer) = 0;\n    my($remainder_remainder_remainder)\
    \ = 0;\n    my($remainder_remainder_remainder_decimals) = 0;\n    my($remainder_remainder_remainder_integer)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder) = 0;\n    my($remainder_remainder_remainder_remainder_decimals)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_integer) = 0;\n    my($remainder_remainder_remainder_remainder_remainder)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_decimals) =\
    \ 0;\n    my($remainder_remainder_remainder_remainder_remainder_integer) = 0;\n\
    \    my($remainder_remainder_remainder_remainder_remainder_remainder) = 0;\n \
    \   my($remainder_remainder_remainder_remainder_remainder_remainder_decimals)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_integer)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_decimals)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_integer)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_decimals)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_integer)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_decimals)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_integer)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_decimals)\
    \ = 0;\n    my($remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_integer)\
    \ = 0;\n", "    my $decimals = $number % 1;\n    my $integer = $number - $decimals;\n\
    \    return $decimals if $decimals > 0;\n    return $integer;\n}", "    my $decimals\
    \ = $number % 1;\n    $number -= $decimals;\n    $number /= 1;\n    return $number;\n\
    }", "    my($decimals) = 0;\n    my($integer) = 0;\n    my($remainder) = 0;\n\
    \    my($sign) = 0;", "    my($decimal) = $number % 1;\n    $number -= $decimal;\n\
    \    $number /= 1;\n    return $number;\n}", "    my($integer) = $number =~ /\\\
    d+/;\n    my($decimal) = $number =~ /\\.(\\d+)/;\n    return $decimal if $decimal\
    \ > 1;\n    return $integer if $integer < $number;\n    return $number;\n}", " \
    \   my($integer, $decimals) = Math::BigInt->new($number)->as_int();\n    return\
    \ $decimal if $decimals < 1;\n    return $number;\n}", "    my($decimals) = 0;\n\
    \    my($integer) = 0;", "    my($decimals) = 0;\n    my($integer) = 0;\n    my($remainder)\
    \ = 0;\n    my($remainder_decimals) = 0;\n    my($remainder_integer) = 0;", " \
    \   my($integer) = $number % 1;\n    my($decimal) = ($number - $integer) / 1;\n\
    \    return $decimal if $decimal > 1;\n    return $integer;\n}", "    my($decimal)\
    \ = $number % 1;\n    $number -= $decimal;\n    $number /= 1;\n    return $number;\n\
    }", "    my $decimals = $number % 1;\n    my $integer = $number - $decimals;\n\
    \    return $decimals;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
