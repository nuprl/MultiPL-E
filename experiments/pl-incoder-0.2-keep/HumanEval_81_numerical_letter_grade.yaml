name: HumanEval_81_numerical_letter_grade
language: humaneval_to_perl.py
prompt: "# It is the last week of the semester and the teacher has to give the grades\n\
  # to students. The teacher has been making her own algorithm for grading.\n# The\
  \ only problem is, she has lost the code she used for grading.\n# She has given\
  \ you a list of GPAs for some students and you have to write \n# a function that\
  \ can output a list of letter grades using the following table:\n# GPA       | \
  \   Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3  \
  \              A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3\
  \                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3\
  \                C-\n# > 1.0                D+ \n# > 0.7                D \n# >\
  \ 0.0                D-\n# 0.0                E\n# Example:\n# grade_equation([4.0,\
  \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nsub numerical_letter_grade\
  \ {\n    my($grades) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
  \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
  , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"D-\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
  E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
  \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n}\n\ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
