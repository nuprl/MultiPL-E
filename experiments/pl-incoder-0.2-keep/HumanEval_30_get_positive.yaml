name: HumanEval_30_get_positive
language: humaneval_to_perl.py
prompt: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2, -4,\
  \ 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  # [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n\
  \        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n    \
    \        push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n  \
    \  foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n \
    \       }\n    }\n    return @r;\n}", "    my @r = ();\n    foreach my $x (@$l)\
    \ {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n   \
    \         push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r = ();\n\
    \    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n\
    \        }\n    }\n    return @r;\n}", "    my @r;\n    foreach my $x (@$l) {\n\
    \        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r;\n    my $neg;\n    foreach my $x (@$l) {\n        if ($x\
    \ > 0) {\n            push @r, $x;\n        }\n        else {\n            $neg\
    \ = 1;\n        }\n    }\n    return @r unless $neg;\n    return @r;\n}", "  \
    \  my @r = ();\n    foreach my $x (@$l) {\n        if ($x > 0) {\n           \
    \ push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n    my $neg;\n\
    \    my $i;\n    my $max;\n    my $pos;\n    my $negmax;\n    my $negpos;\n  \
    \  my $negneg;\n    my $negposmax;\n    my $negnegmax;\n    my $negnegpos;\n \
    \   my $negnegneg;\n    my $negnegnegmax;\n    my $negnegnegpos;\n    my $negnegnegnegmax;\n\
    \    my $negnegnegnegpos;\n    my $negnegnegnegnegmax;\n    my $negnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegmax;\n    my $negnegnegnegnegnegpos;\n    my $negnegnegnegnegnegmax;\n\
    \    my $negnegnegnegnegnegpos;\n    my $negnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegnegpos;\n\
    \    my $negnegnegnegnegnegnegnegnegnegnegnegnegmax;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegnegpos;\n",
  "    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r,\
    \ $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n    my $i = 0;\n  \
    \  my $neg = 0;\n    my $negneg = 0;\n    my $negpos = 0;\n    my $pos = 0;\n\
    \    my $negnegpos = 0;\n    my $negnegneg = 0;\n    my $negnegnegpos = 0;\n \
    \   my $negnegnegneg = 0;\n    my $negnegnegnegpos = 0;\n    my $negnegnegnegneg\
    \ = 0;\n    my $negnegnegnegnegpos = 0;\n    my $negnegnegnegnegneg = 0;\n   \
    \ my $negnegnegnegnegnegpos = 0;\n    my $negnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegnegpos\
    \ = 0;\n    my $negnegnegnegnegnegnegnegnegnegnegnegnegneg = 0;\n    my $negnegnegnegnegnegneg",
  "    my @positive;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n         \
    \   push(@positive, $x);\n        }\n    }\n    return @positive;\n}", "    my\
    \ @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r,\
    \ $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n    foreach my $x (@$l)\
    \ {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n   \
    \         push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n \
    \   my $neg;\n    my $i;\n    my $j;\n    my $k;\n    my $max;\n    my $maxi;\n\
    \    my $maxj;\n    my $maxk;\n    my $maxmax;\n    my $maxmaxi;\n    my $maxmaxj;\n\
    \    my $maxmaxk;\n    my $maxmaxmax;\n    my $maxmaxmaxi;\n    my $maxmaxmaxj;\n\
    \    my $maxmaxmaxk;\n    my $maxmaxmaxmax;\n    my $maxmaxmaxmaxi;\n    my $maxmaxmaxmaxj;\n\
    \    my $maxmaxmaxmaxk;\n    my $maxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxi;\n\
    \    my $maxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxk;\n    my $maxmaxmaxmaxmaxmax;\n\
    \    my $maxmaxmaxmaxmaxmaxi;\n    my $maxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxmaxk;\n\
    \    my $maxmaxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmaxmaxi;\n    my $maxmaxmaxmaxmaxmaxmaxj;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxk;\n    my $maxmaxmaxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmaxmaxmaxi;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxmaxmaxk;\n    my $maxmaxmaxmaxmaxmaxmaxmax;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxi;\n    my $maxmaxmaxmaxmaxmaxmaxmaxj;\n    my\
    \ $maxmaxmaxmaxmaxmaxmaxmaxk;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxi;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxk;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxi;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxk;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmax;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxi;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxj;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxk;",
  "    my @r = ();\n    my $neg = 0;\n    foreach my $x (@$l) {\n        if ($x >\
    \ 0) {\n            $neg = 0;\n        }\n        elsif ($x < 0) {\n         \
    \   $neg = 1;\n        }\n        elsif ($x == 0) {\n            $neg = 1;\n \
    \       }\n        elsif ($x == -0 && !$neg) {\n            $neg = 1;\n      \
    \  }\n        elsif ($x == -0 && !$neg) {\n            $neg = 1;\n        }\n\
    \        elsif ($neg) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n   \
    \         push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @a;\n \
    \   foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@a, $x);\n\
    \        }\n    }\n    return @a;\n}", "    my @r;\n    my $sign = 1;\n    foreach\
    \ my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n        } else\
    \ {\n            push(@r, $sign * $x);\n            $sign = -$sign;\n        }\n\
    \    }\n    return @r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
