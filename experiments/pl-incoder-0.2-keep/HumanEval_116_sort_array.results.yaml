language: pl
name: HumanEval_116_sort_array
results:
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $tmp;\n    my $cmp = 0;\n    my $cmp2 = 0;\n    my $cmp3 = 0;\n\
    \    my $cmp4 = 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n    my $cmp7 = 0;\n\
    \    my $cmp8 = 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n    my $cmp11 = 0;\n\
    \    my $cmp12 = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n    my $cmp15 = 0;\n\
    \    my $cmp16 = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n    my $cmp19 = 0;\n\
    \    my $cmp20 = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n    my $cmp23 = 0;\n\
    \    my $cmp24 = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n    my $cmp27 = 0;\n\
    \    my $cmp28 = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n    my $cmp31 = 0;\n\
    \    my $cmp32 = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n    my $cmp35 = 0;\n\
    \    my $cmp36 = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n    my $cmp39 = 0;\n\
    \    my $cmp40 = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n    my $cmp43 = 0;\n\
    \    my $cmp44 = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n    my $cmp47 = 0;\n\
    \    my $cmp48 = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n    my $cmp51 = 0;\n\
    \    my $cmp52 = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n    my $cmp55 = 0;\n\
    \    my $cmp56 = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n    my $cmp59 = 0;\n\
    \    my $cmp60 = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n    my $cmp63 = 0;\n\
    \    my $cmp64 = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n    my $cmp67 = 0;\n\
    \    my $cmp68 = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n    my $cmp71 = 0;\n\
    \    my $cmp72 = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n    my $cmp75 = 0;\n\
    \    my $cmp76 = 0;\n    my $cmp77 = 0;\n    my $cmp78 = 0;\n    my $cmp79 = 0;\n\
    \    my $cmp80 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpg121lbxp.pl line 137,
    at end of line

    syntax error at /tmp/tmpg121lbxp.pl line 137, at EOF

    Execution of /tmp/tmpg121lbxp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $max = 0;\n\
    \    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5 = 0;\n\
    \    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9 = 0;\n\
    \    my $max10 = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13 = 0;\n\
    \    my $max14 = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17 = 0;\n\
    \    my $max18 = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21 = 0;\n\
    \    my $max22 = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25 = 0;\n\
    \    my $max26 = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29 = 0;\n\
    \    my $max30 = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33 = 0;\n\
    \    my $max34 = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37 = 0;\n\
    \    my $max38 = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41 = 0;\n\
    \    my $max42 = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45 = 0;\n\
    \    my $max46 = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49 = 0;\n\
    \    my $max50 = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53 = 0;\n\
    \    my $max54 = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57 = 0;\n\
    \    my $max58 = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61 = 0;\n\
    \    my $max62 = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65 = 0;\n\
    \    my $max66 = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69 = 0;\n\
    \    my $max70 = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73 = 0;\n\
    \    my $max74 = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77 = 0;\n\
    \    my $max78 = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81 = 0;\n\
    \    my $max82 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyq_mz_27.pl line 98, at end
    of line

    syntax error at /tmp/tmpyq_mz_27.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyq_mz_27.pl line 137, at end
    of line

    syntax error at /tmp/tmpyq_mz_27.pl line 137, at EOF

    Execution of /tmp/tmpyq_mz_27.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbj6opm3r.pl line 137,
    at end of line

    syntax error at /tmp/tmpbj6opm3r.pl line 137, at EOF

    Execution of /tmp/tmpbj6opm3r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $k, $n);\n    my($ones);\n    my($dec);\n    my($tmp);\n    my($tmp2);\n\
    \    my($tmp3);\n    my($tmp4);\n    my($tmp5);\n    my($tmp6);\n    my($tmp7);\n\
    \    my($tmp8);\n    my($tmp9);\n    my($tmp10);\n    my($tmp11);\n    my($tmp12);\n\
    \    my($tmp13);\n    my($tmp14);\n    my($tmp15);\n    my($tmp16);\n    my($tmp17);\n\
    \    my($tmp18);\n    my($tmp19);\n    my($tmp20);\n    my($tmp21);\n    my($tmp22);\n\
    \    my($tmp23);\n    my($tmp24);\n    my($tmp25);\n    my($tmp26);\n    my($tmp27);\n\
    \    my($tmp28);\n    my($tmp29);\n    my($tmp30);\n    my($tmp31);\n    my($tmp32);\n\
    \    my($tmp33);\n    my($tmp34);\n    my($tmp35);\n    my($tmp36);\n    my($tmp37);\n\
    \    my($tmp38);\n    my($tmp39);\n    my($tmp40);\n    my($tmp41);\n    my($tmp42);\n\
    \    my($tmp43);\n    my($tmp44);\n    my($tmp45);\n    my($tmp46);\n    my($tmp47);\n\
    \    my($tmp48);\n    my($tmp49);\n    my($tmp50);\n    my($tmp51);\n    my($tmp52);\n\
    \    my($tmp53);\n    my($tmp54);\n    my($tmp55);\n    my($tmp56);\n    my($tmp57);\n\
    \    my($tmp58);\n    my($tmp59);\n    my($tmp60);\n    my($tmp61);\n    my($tmp62);\n\
    \    my($tmp63);\n    my($tmp64);\n    my($tmp65);\n    my($tmp66);\n    my($tmp67);\n\
    \    my($tmp68);\n    my($tmp69);\n    my($tmp70);\n    my($tmp71);\n    my($tmp72\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpiz8vhtdv.pl line 86, at end
    of line

    syntax error at /tmp/tmpiz8vhtdv.pl line 86, near "$tmp72

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpiz8vhtdv.pl line 125, at end
    of line

    syntax error at /tmp/tmpiz8vhtdv.pl line 125, at EOF

    Execution of /tmp/tmpiz8vhtdv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $n = @$arr;\n    my $max = -1;\n    my\
    \ $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprpim5rnn.pl line 137,
    at end of line

    syntax error at /tmp/tmprpim5rnn.pl line 137, at EOF

    Execution of /tmp/tmprpim5rnn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $count\
    \ = 0;\n    my $max = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 =\
    \ 0;\n    my $max5 = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 =\
    \ 0;\n    my $max9 = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12\
    \ = 0;\n    my $max13 = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16\
    \ = 0;\n    my $max17 = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20\
    \ = 0;\n    my $max21 = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24\
    \ = 0;\n    my $max25 = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28\
    \ = 0;\n    my $max29 = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32\
    \ = 0;\n    my $max33 = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36\
    \ = 0;\n    my $max37 = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40\
    \ = 0;\n    my $max41 = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44\
    \ = 0;\n    my $max45 = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48\
    \ = 0;\n    my $max49 = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52\
    \ = 0;\n    my $max53 = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56\
    \ = 0;\n    my $max57 = 0;\n    my $max58 = 0;\n    my $max59 = 0;\n    my $max60\
    \ = 0;\n    my $max61 = 0;\n    my $max62 = 0;\n    my $max63 = 0;\n    my $max64\
    \ = 0;\n    my $max65 = 0;\n    my $max66 = 0;\n    my $max67 = 0;\n    my $max68\
    \ = 0;\n    my $max69 = 0;\n    my $max70 = 0;\n    my $max71 = 0;\n    my $max72\
    \ = 0;\n    my $max73 = 0;\n    my $max74 = 0;\n    my $max75 = 0;\n    my $max76\
    \ = 0;\n    my $max77 = 0;\n    my $max78 = 0;\n    my $max79 = 0;\n    my $max80\
    \ = 0;\n    my $max81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpvayawpuz.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpvayawpuz.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpvayawpuz.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpvayawpuz.pl line 137, at EOF\nExecution of /tmp/tmpvayawpuz.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $ones =\
    \ 0;\n    my $dec = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n\
    \    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n\
    \    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n\
    \    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n\
    \    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpq3ib_fxc.pl line 137,
    at end of line

    syntax error at /tmp/tmpq3ib_fxc.pl line 137, at EOF

    Execution of /tmp/tmpq3ib_fxc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max_bits = $len\
    \ * 8;\n    my $max_int = $max_bits - 1;\n    my $max_dec = ($max_int + 1) * 10;\n\
    \    my $max_hex = hex($max_dec);\n    my $max_bin = sprintf(\"%b\", $max_dec);\n\
    \    my $max_bin2 = sprintf(\"%b\", $max_dec * 2);\n    my $max_hex2 = hex($max_dec\
    \ * 2);\n    my $max_bin3 = sprintf(\"%b\", $max_dec * 3);\n    my $max_hex3 =\
    \ hex($max_dec * 3);\n    my $max_bin4 = sprintf(\"%b\", $max_dec * 4);\n    my\
    \ $max_hex4 = hex($max_dec * 4);\n    my $max_bin5 = sprintf(\"%b\", $max_dec\
    \ * 5);\n    my $max_hex5 = hex($max_dec * 5);\n    my $max_bin6 = sprintf(\"\
    %b\", $max_dec * 6);\n    my $max_hex6 = hex($max_dec * 6);\n    my $max_bin7\
    \ = sprintf(\"%b\", $max_dec * 7);\n    my $max_hex7 = hex($max_dec * 7);\n  \
    \  my $max_bin8 = sprintf(\"%b\", $max_dec * 8);\n    my $max_hex8 = hex($max_dec\
    \ * 8);\n    my $max_bin9 = sprintf(\"%b\", $max_dec * 9);\n    my $max_hex9 =\
    \ hex($max_dec * 9);\n    my $max_bin10 = sprintf(\"%b\", $max_dec * 10);\n  \
    \  my $max_hex10 = hex($max_dec * 10);\n    my $max_bin11 = sprintf(\"%b\", $max_dec\
    \ * 11);\n    my $max_hex11 = hex($max_dec * 11);\n    my $max_bin12 = sprintf(\"\
    %b\", $max_dec * 12);\n    my $max_hex12 = hex($max_dec * 12);\n    my $max_bin13\
    \ = sprintf(\"%b\", $max_dec * 13);\n    my $max_hex13 = hex($max_dec * 13);\n\
    \    my $max_bin14 = sprintf(\"%b\", $max_dec * 14);\n    my $max_hex14 = hex($max_dec\
    \ * 14);\n    my $max_bin15 = sprintf(\"%b\", $max_dec * 15);\n    my $max_hex15\
    \ = hex($max_dec * 15);\n    my $max_bin16 = sprintf(\"%b\", $max_dec * 16);\n\
    \    my $max_hex16 = hex($max_dec * 16);\n    my $max_bin17 = sprintf(\"%b\",\
    \ $max_dec * 17);\n    my $max_\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7n8dkjbg.pl line 51, at end
    of line

    syntax error at /tmp/tmp7n8dkjbg.pl line 51, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7n8dkjbg.pl line 90, at end of
    line

    syntax error at /tmp/tmp7n8dkjbg.pl line 90, at EOF

    Execution of /tmp/tmp7n8dkjbg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = -1;\n    my $min = 0;\n    my $temp;\n    my $tmp;\n    my $flag = 0;\n  \
    \  my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n\
    \    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n\
    \    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13\
    \ = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my\
    \ $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n\
    \    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24\
    \ = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my\
    \ $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n\
    \    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35\
    \ = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my\
    \ $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n\
    \    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46\
    \ = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my\
    \ $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n\
    \    my $flag54 = 0;\n    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57\
    \ = 0;\n    my $flag58 = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my\
    \ $flag61 = 0;\n    my $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n\
    \    my $flag65 = 0;\n    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68\
    \ = 0;\n    my $flag69 = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my\
    \ $flag72 = 0;\n    my $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n\
    \    my $flag76 = 0;\n    my $flag77 = 0;\n    my $flag78 = 0;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5hgaw9ik.pl line 137,
    at end of line

    syntax error at /tmp/tmp5hgaw9ik.pl line 137, at EOF

    Execution of /tmp/tmp5hgaw9ik.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max_ones = 0;\n\
    \    my $max_dec = 0;\n    my $max_dec_index = 0;\n    my $max_dec_val = 0;\n\
    \    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_len = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_len = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp31d_qcoy.pl line 115,
    at end of line

    syntax error at /tmp/tmp31d_qcoy.pl line 115, at EOF

    Execution of /tmp/tmp31d_qcoy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n\
    \    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n\
    \    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpg6bovw3v.pl line 98, at end
    of line

    syntax error at /tmp/tmpg6bovw3v.pl line 98, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpg6bovw3v.pl line 137, at end
    of line

    syntax error at /tmp/tmpg6bovw3v.pl line 137, at EOF

    Execution of /tmp/tmpg6bovw3v.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my\
    \ $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4yqz57st.pl line 137,
    at end of line

    syntax error at /tmp/tmp4yqz57st.pl line 137, at EOF

    Execution of /tmp/tmp4yqz57st.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $tmp = 0;\n    my $cmp = 0;\n    my $cmp2 = 0;\n\
    \    my $cmp3 = 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n\
    \    my $cmp7 = 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n\
    \    my $cmp11 = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n\
    \    my $cmp15 = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n\
    \    my $cmp19 = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n\
    \    my $cmp23 = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n\
    \    my $cmp27 = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n\
    \    my $cmp31 = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n\
    \    my $cmp35 = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n\
    \    my $cmp39 = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n\
    \    my $cmp43 = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n\
    \    my $cmp47 = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n\
    \    my $cmp51 = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n\
    \    my $cmp55 = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n\
    \    my $cmp59 = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n\
    \    my $cmp63 = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n\
    \    my $cmp67 = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n\
    \    my $cmp71 = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n\
    \    my $cmp75 = 0;\n    my $cmp76 = 0;\n    my $cmp77 = 0;\n    my $cmp78 = 0;\n\
    \    my $cmp79 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpsxn1trn7.pl line 137,
    at end of line

    syntax error at /tmp/tmpsxn1trn7.pl line 137, at EOF

    Execution of /tmp/tmpsxn1trn7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_count = 0;\n    my $max_num = 0;\n    my $max_dec = 0;\n    my $max_bin\
    \ = 0;\n    my $max_bin2 = 0;\n    my $max_bin3 = 0;\n    my $max_bin4 = 0;\n\
    \    my $max_bin5 = 0;\n    my $max_bin6 = 0;\n    my $max_bin7 = 0;\n    my $max_bin8\
    \ = 0;\n    my $max_bin9 = 0;\n    my $max_bin10 = 0;\n    my $max_bin11 = 0;\n\
    \    my $max_bin12 = 0;\n    my $max_bin13 = 0;\n    my $max_bin14 = 0;\n    my\
    \ $max_bin15 = 0;\n    my $max_bin16 = 0;\n    my $max_bin17 = 0;\n    my $max_bin18\
    \ = 0;\n    my $max_bin19 = 0;\n    my $max_bin20 = 0;\n    my $max_bin21 = 0;\n\
    \    my $max_bin22 = 0;\n    my $max_bin23 = 0;\n    my $max_bin24 = 0;\n    my\
    \ $max_bin25 = 0;\n    my $max_bin26 = 0;\n    my $max_bin27 = 0;\n    my $max_bin28\
    \ = 0;\n    my $max_bin29 = 0;\n    my $max_bin30 = 0;\n    my $max_bin31 = 0;\n\
    \    my $max_bin32 = 0;\n    my $max_bin33 = 0;\n    my $max_bin34 = 0;\n    my\
    \ $max_bin35 = 0;\n    my $max_bin36 = 0;\n    my $max_bin37 = 0;\n    my $max_bin38\
    \ = 0;\n    my $max_bin39 = 0;\n    my $max_bin40 = 0;\n    my $max_bin41 = 0;\n\
    \    my $max_bin42 = 0;\n    my $max_bin43 = 0;\n    my $max_bin44 = 0;\n    my\
    \ $max_bin45 = 0;\n    my $max_bin46 = 0;\n    my $max_bin47 = 0;\n    my $max_bin48\
    \ = 0;\n    my $max_bin49 = 0;\n    my $max_bin50 = 0;\n    my $max_bin51 = 0;\n\
    \    my $max_bin52 = 0;\n    my $max_bin53 = 0;\n    my $max_bin54 = 0;\n    my\
    \ $max_bin55 = 0;\n    my $max_bin56 = 0;\n    my $max_bin57 = 0;\n    my $max_bin58\
    \ = 0;\n    my $max_bin59 = 0;\n    my $max_bin60 = 0;\n    my $max_bin61 = 0;\n\
    \    my $max_bin62 = 0;\n    my $max_bin63 = 0;\n    my $max_bin64 = 0;\n    my\
    \ $max_bin65 = 0;\n    my $max_bin66 = 0;\n    my $max_bin67 = 0;\n    my $max_bin68\
    \ = 0;\n    my $max_bin69 = 0;\n    my $max_bin70 = 0;\n    my $max_bin\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyytcn_ng.pl line 85, at end
    of line

    syntax error at /tmp/tmpyytcn_ng.pl line 85, near "$max_bin

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyytcn_ng.pl line 124, at end
    of line

    syntax error at /tmp/tmpyytcn_ng.pl line 124, at EOF

    Execution of /tmp/tmpyytcn_ng.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt = 0;\n\
    \    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n\
    \    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n\
    \    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n\
    \    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n\
    \    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n\
    \    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n\
    \    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n\
    \    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n\
    \    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n\
    \    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n\
    \    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n\
    \    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n\
    \    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n\
    \    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n\
    \    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n\
    \    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n\
    \    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n\
    \    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n\
    \    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n\
    \    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81 = 0;\n\
    \    my $cnt82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_824ozmp.pl line 137,
    at end of line

    syntax error at /tmp/tmp_824ozmp.pl line 137, at EOF

    Execution of /tmp/tmp_824ozmp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $max2 = 0;\n    my $max3 =\
    \ 0;\n    my $max4 = 0;\n    my $max5 = 0;\n    my $max6 = 0;\n    my $max7 =\
    \ 0;\n    my $max8 = 0;\n    my $max9 = 0;\n    my $max10 = 0;\n    my $max11\
    \ = 0;\n    my $max12 = 0;\n    my $max13 = 0;\n    my $max14 = 0;\n    my $max15\
    \ = 0;\n    my $max16 = 0;\n    my $max17 = 0;\n    my $max18 = 0;\n    my $max19\
    \ = 0;\n    my $max20 = 0;\n    my $max21 = 0;\n    my $max22 = 0;\n    my $max23\
    \ = 0;\n    my $max24 = 0;\n    my $max25 = 0;\n    my $max26 = 0;\n    my $max27\
    \ = 0;\n    my $max28 = 0;\n    my $max29 = 0;\n    my $max30 = 0;\n    my $max31\
    \ = 0;\n    my $max32 = 0;\n    my $max33 = 0;\n    my $max34 = 0;\n    my $max35\
    \ = 0;\n    my $max36 = 0;\n    my $max37 = 0;\n    my $max38 = 0;\n    my $max39\
    \ = 0;\n    my $max40 = 0;\n    my $max41 = 0;\n    my $max42 = 0;\n    my $max43\
    \ = 0;\n    my $max44 = 0;\n    my $max45 = 0;\n    my $max46 = 0;\n    my $max47\
    \ = 0;\n    my $max48 = 0;\n    my $max49 = 0;\n    my $max50 = 0;\n    my $max51\
    \ = 0;\n    my $max52 = 0;\n    my $max53 = 0;\n    my $max54 = 0;\n    my $max55\
    \ = 0;\n    my $max56 = 0;\n    my $max57 = 0;\n    my $max58 = 0;\n    my $max59\
    \ = 0;\n    my $max60 = 0;\n    my $max61 = 0;\n    my $max62 = 0;\n    my $max63\
    \ = 0;\n    my $max64 = 0;\n    my $max65 = 0;\n    my $max66 = 0;\n    my $max67\
    \ = 0;\n    my $max68 = 0;\n    my $max69 = 0;\n    my $max70 = 0;\n    my $max71\
    \ = 0;\n    my $max72 = 0;\n    my $max73 = 0;\n    my $max74 = 0;\n    my $max75\
    \ = 0;\n    my $max76 = 0;\n    my $max77 = 0;\n    my $max78 = 0;\n    my $max79\
    \ = 0;\n    my $max80 = 0;\n    my $max81 = 0;\n    my $max82 = 0;\n    my $max83\
    \ = 0;\n    my $max84 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9reodvcc.pl line 137,
    at end of line

    syntax error at /tmp/tmp9reodvcc.pl line 137, at EOF

    Execution of /tmp/tmp9reodvcc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjqcv9rx5.pl line 98, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjqcv9rx5.pl line 137, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 137, at EOF

    Execution of /tmp/tmpjqcv9rx5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_bits = $arr->[0];\n    my $max_val = 0;\n    my $min_val = 1;\n \
    \   my $min_bits = $arr->[0];\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $count\
    \ = 0;\n    my $val = 0;\n    my $bits = 0;\n    my $tmp = 0;\n    my $tmp2 =\
    \ 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 =\
    \ 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 =\
    \ 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpn8hux8hl.pl line 97, at end
    of line

    syntax error at /tmp/tmpn8hux8hl.pl line 97, near "$tmp73

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpn8hux8hl.pl line 136, at end
    of line

    syntax error at /tmp/tmpn8hux8hl.pl line 136, at EOF

    Execution of /tmp/tmpn8hux8hl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 =\
    \ 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 =\
    \ 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 =\
    \ 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 =\
    \ 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10\
    \ = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12\
    \ = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14\
    \ = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16\
    \ = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18\
    \ = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20\
    \ = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22\
    \ = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24\
    \ = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26\
    \ = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28\
    \ = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30\
    \ = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32\
    \ = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34\
    \ = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36\
    \ = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38\
    \ = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40\
    \ = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwedqqix5.pl line 138,
    at end of line

    syntax error at /tmp/tmpwedqqix5.pl line 138, at EOF

    Execution of /tmp/tmpwedqqix5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp141b4epn.pl line 98, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp141b4epn.pl line 137, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 137, at EOF

    Execution of /tmp/tmp141b4epn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $max =\
    \ 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj2 = 0;\n    my $maxj3\
    \ = 0;\n    my $maxj4 = 0;\n    my $maxj5 = 0;\n    my $maxj6 = 0;\n    my $maxj7\
    \ = 0;\n    my $maxj8 = 0;\n    my $maxj9 = 0;\n    my $maxj10 = 0;\n    my $maxj11\
    \ = 0;\n    my $maxj12 = 0;\n    my $maxj13 = 0;\n    my $maxj14 = 0;\n    my\
    \ $maxj15 = 0;\n    my $maxj16 = 0;\n    my $maxj17 = 0;\n    my $maxj18 = 0;\n\
    \    my $maxj19 = 0;\n    my $maxj20 = 0;\n    my $maxj21 = 0;\n    my $maxj22\
    \ = 0;\n    my $maxj23 = 0;\n    my $maxj24 = 0;\n    my $maxj25 = 0;\n    my\
    \ $maxj26 = 0;\n    my $maxj27 = 0;\n    my $maxj28 = 0;\n    my $maxj29 = 0;\n\
    \    my $maxj30 = 0;\n    my $maxj31 = 0;\n    my $maxj32 = 0;\n    my $maxj33\
    \ = 0;\n    my $maxj34 = 0;\n    my $maxj35 = 0;\n    my $maxj36 = 0;\n    my\
    \ $maxj37 = 0;\n    my $maxj38 = 0;\n    my $maxj39 = 0;\n    my $maxj40 = 0;\n\
    \    my $maxj41 = 0;\n    my $maxj42 = 0;\n    my $maxj43 = 0;\n    my $maxj44\
    \ = 0;\n    my $maxj45 = 0;\n    my $maxj46 = 0;\n    my $maxj47 = 0;\n    my\
    \ $maxj48 = 0;\n    my $maxj49 = 0;\n    my $maxj50 = 0;\n    my $maxj51 = 0;\n\
    \    my $maxj52 = 0;\n    my $maxj53 = 0;\n    my $maxj54 = 0;\n    my $maxj55\
    \ = 0;\n    my $maxj56 = 0;\n    my $maxj57 = 0;\n    my $maxj58 = 0;\n    my\
    \ $maxj59 = 0;\n    my $maxj60 = 0;\n    my $maxj61 = 0;\n    my $maxj62 = 0;\n\
    \    my $maxj63 = 0;\n    my $maxj64 = 0;\n    my $maxj65 = 0;\n    my $maxj66\
    \ = 0;\n    my $maxj67 = 0;\n    my $maxj68 = 0;\n    my $maxj69 = 0;\n    \n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpc84mvlkb.pl line 126,
    at end of line

    syntax error at /tmp/tmpc84mvlkb.pl line 126, at EOF

    Execution of /tmp/tmpc84mvlkb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $num_ones\
    \ = 0;\n    my $num_zeros = 0;\n    my $num_negative = 0;\n    my $num_positive\
    \ = 0;\n    my $num_zeros_at_start = 0;\n    my $num_ones_at_start = 0;\n    my\
    \ $num_negative_at_start = 0;\n    my $num_positive_at_start = 0;\n    my $num_zeros_at_end\
    \ = 0;\n    my $num_ones_at_end = 0;\n    my $num_negative_at_end = 0;\n    my\
    \ $num_positive_at_end = 0;\n    my $num_zeros_at_middle = 0;\n    my $num_ones_at_middle\
    \ = 0;\n    my $num_negative_at_middle = 0;\n    my $num_positive_at_middle =\
    \ 0;\n    my $num_zeros_at_end = 0;\n    my $num_ones_at_end = 0;\n    my $num_negative_at_end\
    \ = 0;\n    my $num_positive_at_end = 0;\n    my $num_zeros_at_middle = 0;\n \
    \   my $num_ones_at_middle = 0;\n    my $num_negative_at_middle = 0;\n    my $num_positive_at_middle\
    \ = 0;\n    my $num_zeros_at_start = 0;\n    my $num_ones_at_start = 0;\n    my\
    \ $num_negative_at_start = 0;\n    my $num_positive_at_start = 0;\n    my $num_zeros_at_end\
    \ = 0;\n    my $num_ones_at_end = 0;\n    my $num_negative_at_end = 0;\n    my\
    \ $num_positive_at_end = 0;\n    my $num_zeros_at_middle = 0;\n    my $num_ones_at_middle\
    \ = 0;\n    my $num_negative_at_middle = 0;\n    my $num_positive_at_middle =\
    \ 0;\n    my $num_zeros_at_start = 0;\n    my $num_ones_at_start = 0;\n    my\
    \ $num_negative_at_start = 0;\n    my $num_positive_at_start = 0;\n    my $num_zeros_at_end\
    \ = 0;\n    my $num_ones_at_end = 0;\n    my $num_negative_at_end = 0;\n    my\
    \ $num_positive_at_end = 0;\n    my $num_zeros_at_middle = 0;\n    my $num_ones_at_middle\
    \ = 0;\n    my $num_negative_at_middle = 0;\n    my $num_positive_at_middle =\
    \ 0;\n    my $num_zeros_at_start = 0;\n    my $num_ones_at_start = 0;\n    my\
    \ $num_negative_at_start = 0;\n    my $num_positive_at_start = 0;\n    my $num_zeros_at_end\
    \ = 0;\n    my $num_ones_at_end = 0;\n    my $num_negative_at_end = 0;\n    my\
    \ $num_positive_at_end = 0;\n    my $num_zeros_at_middle = 0;\n    my $num_ones_at_middle\
    \ = 0;\n    my $num_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp8d5by3wz.pl line 74, at end
    of line

    syntax error at /tmp/tmp8d5by3wz.pl line 74, near "$num_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp8d5by3wz.pl line 113, at end
    of line

    syntax error at /tmp/tmp8d5by3wz.pl line 113, at EOF

    Execution of /tmp/tmp8d5by3wz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp6xlh_xd.pl line 97, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 97, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp6xlh_xd.pl line 136, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 136, at EOF

    Execution of /tmp/tmpp6xlh_xd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $size = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 =\
    \ 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 =\
    \ 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpql0wdhm4.pl line 137,
    at end of line

    syntax error at /tmp/tmpql0wdhm4.pl line 137, at EOF

    Execution of /tmp/tmpql0wdhm4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $tmp;\n    my $cnt = 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my\
    \ $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my\
    \ $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my\
    \ $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n  \
    \  my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n\
    \    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n\
    \    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n\
    \    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n\
    \    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n\
    \    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n\
    \    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n\
    \    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n\
    \    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n\
    \    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n\
    \    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n\
    \    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n\
    \    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n\
    \    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n\
    \    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n\
    \    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n\
    \    my $cnt80 = 0;\n    my $cnt81\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp3auuqkdz.pl line 98, at end
    of line

    syntax error at /tmp/tmp3auuqkdz.pl line 98, near "$cnt81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp3auuqkdz.pl line 137, at end
    of line

    syntax error at /tmp/tmp3auuqkdz.pl line 137, at EOF

    Execution of /tmp/tmp3auuqkdz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5\
    \ = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9\
    \ = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13\
    \ = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17\
    \ = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21\
    \ = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25\
    \ = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29\
    \ = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33\
    \ = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37\
    \ = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41\
    \ = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45\
    \ = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49\
    \ = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53\
    \ = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57\
    \ = 0;\n    my $max58 = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61\
    \ = 0;\n    my $max62 = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65\
    \ = 0;\n    my $max66 = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69\
    \ = 0;\n    my $max70 = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73\
    \ = 0;\n    my $max74 = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77\
    \ = 0;\n    my $max78 = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81\
    \ = 0;\n    my $max82 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpxa4oh8ef.pl line 137,
    at end of line

    syntax error at /tmp/tmpxa4oh8ef.pl line 137, at EOF

    Execution of /tmp/tmpxa4oh8ef.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = $#{$arr};\n    my $max = -1;\n    my $maxi = 0;\n    my $maxj = 0;\n    my\
    \ $maxlen = 0;\n    my $maxmax = 0;\n    my $maxmaxlen = 0;\n    my $maxmaxmax\
    \ = 0;\n    my $maxmaxmaxlen = 0;\n    my $maxmaxmaxmax = 0;\n    my $maxmaxmaxmaxlen\
    \ = 0;\n    my $maxmaxmaxmaxmax = 0;\n    my $maxmaxmaxmaxmaxlen = 0;\n    my\
    \ $maxmaxmaxmaxmaxmax = 0;\n    my $maxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmax = 0;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmax = 0;\n\
    \    my $maxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxlen = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdk7cc_gq.pl line 96, at
    end of line

    syntax error at /tmp/tmpdk7cc_gq.pl line 96, at EOF

    Execution of /tmp/tmpdk7cc_gq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max = 0;\n    my $min = 0;\n    my $cnt = 0;\n    my $cnt2 = 0;\n   \
    \ my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n   \
    \ my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n  \
    \  my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n\
    \    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n\
    \    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n\
    \    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n\
    \    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n\
    \    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n\
    \    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n\
    \    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n\
    \    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n\
    \    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n\
    \    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n\
    \    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n\
    \    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n\
    \    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n\
    \    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n\
    \    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n\
    \    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n\
    \    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81 = 0;\n    my $cnt82 = 0;\n\
    \    my $cnt83 = 0;\n    my $cnt\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvnp2y78t.pl line 97, at end
    of line

    syntax error at /tmp/tmpvnp2y78t.pl line 97, near "$cnt

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvnp2y78t.pl line 136, at end
    of line

    syntax error at /tmp/tmpvnp2y78t.pl line 136, at EOF

    Execution of /tmp/tmpvnp2y78t.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n  \
    \  my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n   \
    \ my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_rdjelu0.pl line 139,
    at end of line

    syntax error at /tmp/tmp_rdjelu0.pl line 139, at EOF

    Execution of /tmp/tmp_rdjelu0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt;\n    my\
    \ $cnt2;\n    my $cnt3;\n    my $cnt4;\n    my $cnt5;\n    my $cnt6;\n    my $cnt7;\n\
    \    my $cnt8;\n    my $cnt9;\n    my $cnt10;\n    my $cnt11;\n    my $cnt12;\n\
    \    my $cnt13;\n    my $cnt14;\n    my $cnt15;\n    my $cnt16;\n    my $cnt17;\n\
    \    my $cnt18;\n    my $cnt19;\n    my $cnt20;\n    my $cnt21;\n    my $cnt22;\n\
    \    my $cnt23;\n    my $cnt24;\n    my $cnt25;\n    my $cnt26;\n    my $cnt27;\n\
    \    my $cnt28;\n    my $cnt29;\n    my $cnt30;\n    my $cnt31;\n    my $cnt32;\n\
    \    my $cnt33;\n    my $cnt34;\n    my $cnt35;\n    my $cnt36;\n    my $cnt37;\n\
    \    my $cnt38;\n    my $cnt39;\n    my $cnt40;\n    my $cnt41;\n    my $cnt42;\n\
    \    my $cnt43;\n    my $cnt44;\n    my $cnt45;\n    my $cnt46;\n    my $cnt47;\n\
    \    my $cnt48;\n    my $cnt49;\n    my $cnt50;\n    my $cnt51;\n    my $cnt52;\n\
    \    my $cnt53;\n    my $cnt54;\n    my $cnt55;\n    my $cnt56;\n    my $cnt57;\n\
    \    my $cnt58;\n    my $cnt59;\n    my $cnt60;\n    my $cnt61;\n    my $cnt62;\n\
    \    my $cnt63;\n    my $cnt64;\n    my $cnt65;\n    my $cnt66;\n    my $cnt67;\n\
    \    my $cnt68;\n    my $cnt69;\n    my $cnt70;\n    my $cnt71;\n    my $cnt72;\n\
    \    my $cnt73;\n    my $cnt74;\n    my $cnt75;\n    my $cnt76;\n    my $cnt77;\n\
    \    my $cnt78;\n    my $cnt79;\n    my $cnt80;\n    my $cnt81;\n    my $cnt82;\n\
    \    my $cnt83;\n    my $cnt84;\n    my $cnt85;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp294api2s.pl line 139,
    at end of line

    syntax error at /tmp/tmp294api2s.pl line 139, at EOF

    Execution of /tmp/tmp294api2s.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n    my $cnt2 = 0;\n\
    \    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n\
    \    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n\
    \    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n\
    \    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n\
    \    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n\
    \    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n\
    \    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n\
    \    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n\
    \    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n\
    \    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n\
    \    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n\
    \    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n\
    \    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n\
    \    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n\
    \    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n\
    \    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n\
    \    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n\
    \    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n\
    \    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n\
    \    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81 = 0;\n    my $cnt82 = 0;\n\
    \    my $cnt83 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpxt_wokri.pl line 137,
    at end of line

    syntax error at /tmp/tmpxt_wokri.pl line 137, at EOF

    Execution of /tmp/tmpxt_wokri.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max = -1;\n    my $min\
    \ = 0;\n    my $tmp;\n    my $ones = 0;\n    my $dec = 0;\n    my $cmp = 0;\n\
    \    my $cmp2 = 0;\n    my $cmp3 = 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n\
    \    my $cmp6 = 0;\n    my $cmp7 = 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n\
    \    my $cmp10 = 0;\n    my $cmp11 = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n\
    \    my $cmp14 = 0;\n    my $cmp15 = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n\
    \    my $cmp18 = 0;\n    my $cmp19 = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n\
    \    my $cmp22 = 0;\n    my $cmp23 = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n\
    \    my $cmp26 = 0;\n    my $cmp27 = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n\
    \    my $cmp30 = 0;\n    my $cmp31 = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n\
    \    my $cmp34 = 0;\n    my $cmp35 = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n\
    \    my $cmp38 = 0;\n    my $cmp39 = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n\
    \    my $cmp42 = 0;\n    my $cmp43 = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n\
    \    my $cmp46 = 0;\n    my $cmp47 = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n\
    \    my $cmp50 = 0;\n    my $cmp51 = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n\
    \    my $cmp54 = 0;\n    my $cmp55 = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n\
    \    my $cmp58 = 0;\n    my $cmp59 = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n\
    \    my $cmp62 = 0;\n    my $cmp63 = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n\
    \    my $cmp66 = 0;\n    my $cmp67 = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n\
    \    my $cmp70 = 0;\n    my $cmp71 = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n\
    \    my $cmp74 = 0;\n    my $cmp75 = 0;\n    my $cmp76 = 0;\n    my $cmp77 = 0;\n\
    \    my $cmp78 = 0;\n    my $cmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2vuyyxve.pl line 98, at end
    of line

    syntax error at /tmp/tmp2vuyyxve.pl line 98, near "$cmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2vuyyxve.pl line 137, at end
    of line

    syntax error at /tmp/tmp2vuyyxve.pl line 137, at EOF

    Execution of /tmp/tmp2vuyyxve.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 1;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp = 0;\n    my $temp2 = 0;\n    my $temp3\
    \ = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7\
    \ = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11\
    \ = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my\
    \ $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n\
    \    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22\
    \ = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my\
    \ $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n\
    \    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33\
    \ = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my\
    \ $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n\
    \    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44\
    \ = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my\
    \ $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n\
    \    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55\
    \ = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my\
    \ $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n\
    \    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66\
    \ = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my\
    \ $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n\
    \    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77\
    \ = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpnsgc86z5.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpnsgc86z5.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpnsgc86z5.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpnsgc86z5.pl line 137, at EOF\nExecution of /tmp/tmpnsgc86z5.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my\
    \ $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my\
    \ $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my\
    \ $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n  \
    \  my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    my $tmp81 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwo438pc3.pl line 136,
    at end of line

    syntax error at /tmp/tmpwo438pc3.pl line 136, at EOF

    Execution of /tmp/tmpwo438pc3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $cnt1;\n    my $cnt2;\n    my $cnt3;\n    my $cnt4;\n    my $cnt5;\n    my $cnt6;\n\
    \    my $cnt7;\n    my $cnt8;\n    my $cnt9;\n    my $cnt10;\n    my $cnt11;\n\
    \    my $cnt12;\n    my $cnt13;\n    my $cnt14;\n    my $cnt15;\n    my $cnt16;\n\
    \    my $cnt17;\n    my $cnt18;\n    my $cnt19;\n    my $cnt20;\n    my $cnt21;\n\
    \    my $cnt22;\n    my $cnt23;\n    my $cnt24;\n    my $cnt25;\n    my $cnt26;\n\
    \    my $cnt27;\n    my $cnt28;\n    my $cnt29;\n    my $cnt30;\n    my $cnt31;\n\
    \    my $cnt32;\n    my $cnt33;\n    my $cnt34;\n    my $cnt35;\n    my $cnt36;\n\
    \    my $cnt37;\n    my $cnt38;\n    my $cnt39;\n    my $cnt40;\n    my $cnt41;\n\
    \    my $cnt42;\n    my $cnt43;\n    my $cnt44;\n    my $cnt45;\n    my $cnt46;\n\
    \    my $cnt47;\n    my $cnt48;\n    my $cnt49;\n    my $cnt50;\n    my $cnt51;\n\
    \    my $cnt52;\n    my $cnt53;\n    my $cnt54;\n    my $cnt55;\n    my $cnt56;\n\
    \    my $cnt57;\n    my $cnt58;\n    my $cnt59;\n    my $cnt60;\n    my $cnt61;\n\
    \    my $cnt62;\n    my $cnt63;\n    my $cnt64;\n    my $cnt65;\n    my $cnt66;\n\
    \    my $cnt67;\n    my $cnt68;\n    my $cnt69;\n    my $cnt70;\n    my $cnt71;\n\
    \    my $cnt72;\n    my $cnt73;\n    my $cnt74;\n    my $cnt75;\n    my $cnt76;\n\
    \    my $cnt77;\n    my $cnt78;\n    my $cnt79;\n    my $cnt80;\n    my $cnt81;\n\
    \    my $cnt82;\n    my $cnt83;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpdk7b0n86.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpdk7b0n86.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpdk7b0n86.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpdk7b0n86.pl line 140, at EOF\nExecution of /tmp/tmpdk7b0n86.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n   \
    \ my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my\
    \ $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my\
    \ $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n  \
    \  my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $tmp86\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9_2l83cv.pl line 100, at end
    of line

    syntax error at /tmp/tmp9_2l83cv.pl line 100, near "$tmp86

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9_2l83cv.pl line 139, at end
    of line

    syntax error at /tmp/tmp9_2l83cv.pl line 139, at EOF

    Execution of /tmp/tmp9_2l83cv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n\
    \    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpsa5fq52s.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpsa5fq52s.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpsa5fq52s.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpsa5fq52s.pl line 140, at EOF\nExecution of /tmp/tmpsa5fq52s.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp141b4epn.pl line 98, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp141b4epn.pl line 137, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 137, at EOF

    Execution of /tmp/tmp141b4epn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt = 0;\n  \
    \  my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n  \
    \  my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n  \
    \  my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n\
    \    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n\
    \    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n\
    \    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n\
    \    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n\
    \    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n\
    \    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n\
    \    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n\
    \    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n\
    \    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n\
    \    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n\
    \    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n\
    \    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n\
    \    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n\
    \    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n\
    \    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n\
    \    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n\
    \    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81 = 0;\n\
    \    my $cnt82 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpu1y5j479.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpu1y5j479.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpu1y5j479.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpu1y5j479.pl line 137, at EOF\nExecution of /tmp/tmpu1y5j479.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt;\n    my $tmp2;\n \
    \   my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n  \
    \  my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmptf74rcym.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmptf74rcym.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmptf74rcym.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmptf74rcym.pl line 139, at EOF\nExecution of /tmp/tmptf74rcym.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $n);\n    my($ones);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzytppbwt.pl line 52, at
    end of line

    syntax error at /tmp/tmpzytppbwt.pl line 52, at EOF

    Execution of /tmp/tmpzytppbwt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprw5qfu4g.pl line 136,
    at end of line

    syntax error at /tmp/tmprw5qfu4g.pl line 136, at EOF

    Execution of /tmp/tmprw5qfu4g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $tmp);\n    foreach $i (@$arr) {\n        $tmp = 0;\n        foreach\
    \ $j (@sort) {\n            if ($i & $j) {\n                $tmp++;\n        \
    \    }\n        }\n        if ($tmp > 0) {\n            push(@sort, $tmp);\n \
    \       }\n    }\n    @sort = (sort { $a <=> $b } @sort);\n    return @sort;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $max;\n    my $min;\n    my $ones;\n    my $dec;\n    my $i;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpme14fhvo.pl line 55, at
    end of line

    syntax error at /tmp/tmpme14fhvo.pl line 55, at EOF

    Execution of /tmp/tmpme14fhvo.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $cnt1;\n    my $cnt2;\n    my $cnt3;\n    my $cnt4;\n    my $cnt5;\n    my $cnt6;\n\
    \    my $cnt7;\n    my $cnt8;\n    my $cnt9;\n    my $cnt10;\n    my $cnt11;\n\
    \    my $cnt12;\n    my $cnt13;\n    my $cnt14;\n    my $cnt15;\n    my $cnt16;\n\
    \    my $cnt17;\n    my $cnt18;\n    my $cnt19;\n    my $cnt20;\n    my $cnt21;\n\
    \    my $cnt22;\n    my $cnt23;\n    my $cnt24;\n    my $cnt25;\n    my $cnt26;\n\
    \    my $cnt27;\n    my $cnt28;\n    my $cnt29;\n    my $cnt30;\n    my $cnt31;\n\
    \    my $cnt32;\n    my $cnt33;\n    my $cnt34;\n    my $cnt35;\n    my $cnt36;\n\
    \    my $cnt37;\n    my $cnt38;\n    my $cnt39;\n    my $cnt40;\n    my $cnt41;\n\
    \    my $cnt42;\n    my $cnt43;\n    my $cnt44;\n    my $cnt45;\n    my $cnt46;\n\
    \    my $cnt47;\n    my $cnt48;\n    my $cnt49;\n    my $cnt50;\n    my $cnt51;\n\
    \    my $cnt52;\n    my $cnt53;\n    my $cnt54;\n    my $cnt55;\n    my $cnt56;\n\
    \    my $cnt57;\n    my $cnt58;\n    my $cnt59;\n    my $cnt60;\n    my $cnt61;\n\
    \    my $cnt62;\n    my $cnt63;\n    my $cnt64;\n    my $cnt65;\n    my $cnt66;\n\
    \    my $cnt67;\n    my $cnt68;\n    my $cnt69;\n    my $cnt70;\n    my $cnt71;\n\
    \    my $cnt72;\n    my $cnt73;\n    my $cnt74;\n    my $cnt75;\n    my $cnt76;\n\
    \    my $cnt77;\n    my $cnt78;\n    my $cnt79;\n    my $cnt80;\n    my $cnt81;\n\
    \    my $cnt82;\n    my $cnt83;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpdk7b0n86.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpdk7b0n86.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpdk7b0n86.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpdk7b0n86.pl line 140, at EOF\nExecution of /tmp/tmpdk7b0n86.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $tmp\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp82 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmputkiq5yw.pl line 137,
    at end of line

    syntax error at /tmp/tmputkiq5yw.pl line 137, at EOF

    Execution of /tmp/tmputkiq5yw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 =\
    \ 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 =\
    \ 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp1dl1d56c.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp1dl1d56c.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp1dl1d56c.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmp1dl1d56c.pl line 137, at EOF\nExecution of /tmp/tmp1dl1d56c.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpkbf7kzr_.pl line 137,
    at end of line

    syntax error at /tmp/tmpkbf7kzr_.pl line 137, at EOF

    Execution of /tmp/tmpkbf7kzr_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj\
    \ = 0;\n    my $maxmax = 0;\n    my $maxmaxi = 0;\n    my $maxmaxj = 0;\n    my\
    \ $maxmaxmax = 0;\n    my $maxmaxmaxi = 0;\n    my $maxmaxmaxj = 0;\n    my $maxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxmaxmaxj = 0;\n \
    \   my $maxmaxmaxmaxmaxmaxmax = 0;\n    my $maxmaxmaxmaxmaxmaxmaxi = 0;\n    my\
    \ $maxmaxmaxmaxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmax = 0;\n    my\
    \ $maxmaxmaxmaxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxj\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxi\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxj\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmax = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxi\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxi = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxj\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmax = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxi\
    \ = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxj = 0;\n    my $maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmax\
    \ = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmph7af7v8_.pl line 99, at
    end of line

    syntax error at /tmp/tmph7af7v8_.pl line 99, at EOF

    Execution of /tmp/tmph7af7v8_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\n    my $cmp;\n\
    \    my $cmp_result;\n    my $cmp_result_tmp;\n    my $cmp_result_tmp2;\n    my\
    \ $cmp_result_tmp3;\n    my $cmp_result_tmp4;\n    my $cmp_result_tmp5;\n    my\
    \ $cmp_result_tmp6;\n    my $cmp_result_tmp7;\n    my $cmp_result_tmp8;\n    my\
    \ $cmp_result_tmp9;\n    my $cmp_result_tmp10;\n    my $cmp_result_tmp11;\n  \
    \  my $cmp_result_tmp12;\n    my $cmp_result_tmp13;\n    my $cmp_result_tmp14;\n\
    \    my $cmp_result_tmp15;\n    my $cmp_result_tmp16;\n    my $cmp_result_tmp17;\n\
    \    my $cmp_result_tmp18;\n    my $cmp_result_tmp19;\n    my $cmp_result_tmp20;\n\
    \    my $cmp_result_tmp21;\n    my $cmp_result_tmp22;\n    my $cmp_result_tmp23;\n\
    \    my $cmp_result_tmp24;\n    my $cmp_result_tmp25;\n    my $cmp_result_tmp26;\n\
    \    my $cmp_result_tmp27;\n    my $cmp_result_tmp28;\n    my $cmp_result_tmp29;\n\
    \    my $cmp_result_tmp30;\n    my $cmp_result_tmp31;\n    my $cmp_result_tmp32;\n\
    \    my $cmp_result_tmp33;\n    my $cmp_result_tmp34;\n    my $cmp_result_tmp35;\n\
    \    my $cmp_result_tmp36;\n    my $cmp_result_tmp37;\n    my $cmp_result_tmp38;\n\
    \    my $cmp_result_tmp39;\n    my $cmp_result_tmp40;\n    my $cmp_result_tmp41;\n\
    \    my $cmp_result_tmp42;\n    my $cmp_result_tmp43;\n    my $cmp_result_tmp44;\n\
    \    my $cmp_result_tmp45;\n    my $cmp_result_tmp46;\n    my $cmp_result_tmp47;\n\
    \    my $cmp_result_tmp48;\n    my $cmp_result_tmp49;\n    my $cmp_result_tmp50;\n\
    \    my $cmp_result_tmp51;\n    my $cmp_result_tmp52;\n    my $cmp_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplhv75cz9.pl line 74, at end
    of line

    syntax error at /tmp/tmplhv75cz9.pl line 74, near "$cmp_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplhv75cz9.pl line 113, at end
    of line

    syntax error at /tmp/tmplhv75cz9.pl line 113, at EOF

    Execution of /tmp/tmplhv75cz9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_len = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_count =\
    \ 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpn6r47625.pl line 152,
    at end of line

    syntax error at /tmp/tmpn6r47625.pl line 152, at EOF

    Execution of /tmp/tmpn6r47625.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $i;\n  \
    \  my $j;\n    my $k;\n    my $cnt2;\n    my $cnt3;\n    my $cnt4;\n    my $cnt5;\n\
    \    my $cnt6;\n    my $cnt7;\n    my $cnt8;\n    my $cnt9;\n    my $cnt10;\n\
    \    my $cnt11;\n    my $cnt12;\n    my $cnt13;\n    my $cnt14;\n    my $cnt15;\n\
    \    my $cnt16;\n    my $cnt17;\n    my $cnt18;\n    my $cnt19;\n    my $cnt20;\n\
    \    my $cnt21;\n    my $cnt22;\n    my $cnt23;\n    my $cnt24;\n    my $cnt25;\n\
    \    my $cnt26;\n    my $cnt27;\n    my $cnt28;\n    my $cnt29;\n    my $cnt30;\n\
    \    my $cnt31;\n    my $cnt32;\n    my $cnt33;\n    my $cnt34;\n    my $cnt35;\n\
    \    my $cnt36;\n    my $cnt37;\n    my $cnt38;\n    my $cnt39;\n    my $cnt40;\n\
    \    my $cnt41;\n    my $cnt42;\n    my $cnt43;\n    my $cnt44;\n    my $cnt45;\n\
    \    my $cnt46;\n    my $cnt47;\n    my $cnt48;\n    my $cnt49;\n    my $cnt50;\n\
    \    my $cnt51;\n    my $cnt52;\n    my $cnt53;\n    my $cnt54;\n    my $cnt55;\n\
    \    my $cnt56;\n    my $cnt57;\n    my $cnt58;\n    my $cnt59;\n    my $cnt60;\n\
    \    my $cnt61;\n    my $cnt62;\n    my $cnt63;\n    my $cnt64;\n    my $cnt65;\n\
    \    my $cnt66;\n    my $cnt67;\n    my $cnt68;\n    my $cnt69;\n    my $cnt70;\n\
    \    my $cnt71;\n    my $cnt72;\n    my $cnt73;\n    my $cnt74;\n    my $cnt75;\n\
    \    my $cnt76;\n    my $cnt77;\n    my $cnt78;\n    my $cnt79;\n    my $cnt80;\n\
    \    my $cnt81;\n    my $cnt82;\n    my $cnt83;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpkfxeq1io.pl line 101,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpkfxeq1io.pl line 101, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpkfxeq1io.pl line 140, at end of line\nsyntax\
    \ error at /tmp/tmpkfxeq1io.pl line 140, at EOF\nExecution of /tmp/tmpkfxeq1io.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp6xlh_xd.pl line 97, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 97, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp6xlh_xd.pl line 136, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 136, at EOF

    Execution of /tmp/tmpp6xlh_xd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbj6opm3r.pl line 137,
    at end of line

    syntax error at /tmp/tmpbj6opm3r.pl line 137, at EOF

    Execution of /tmp/tmpbj6opm3r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n\
    \    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpmu__m2d7.pl line 136,
    at end of line

    syntax error at /tmp/tmpmu__m2d7.pl line 136, at EOF

    Execution of /tmp/tmpmu__m2d7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $cnt\
    \ = 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5\
    \ = 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9\
    \ = 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13\
    \ = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17\
    \ = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21\
    \ = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25\
    \ = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29\
    \ = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33\
    \ = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37\
    \ = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41\
    \ = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45\
    \ = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49\
    \ = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53\
    \ = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57\
    \ = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61\
    \ = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65\
    \ = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69\
    \ = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73\
    \ = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77\
    \ = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81\
    \ = 0;\n    my $cnt82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpcei114j8.pl line 137,
    at end of line

    syntax error at /tmp/tmpcei114j8.pl line 137, at EOF

    Execution of /tmp/tmpcei114j8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max_i\
    \ = 0;\n    my $min_i = 0;\n    my $max_j = 0;\n    my $min_j = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n    my\
    \ $min_count = 0;\n    my $max_count = 0;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_count = 0;\n\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5rn1sywv.pl line 152,
    at end of line

    syntax error at /tmp/tmp5rn1sywv.pl line 152, at EOF

    Execution of /tmp/tmp5rn1sywv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0eshfcgx.pl line 100, at end
    of line

    syntax error at /tmp/tmp0eshfcgx.pl line 100, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0eshfcgx.pl line 139, at end
    of line

    syntax error at /tmp/tmp0eshfcgx.pl line 139, at EOF

    Execution of /tmp/tmp0eshfcgx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $sum\
    \ = 0;\n    my $count = 0;\n    my $maxCount = 0;\n    my $minCount = 0;\n   \
    \ my $minVal = 0;\n    my $maxVal = 0;\n    my $minIndex = 0;\n    my $maxIndex\
    \ = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal\
    \ = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex\
    \ = 0;\n    my $minCountVal = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex\
    \ = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal = 0;\n    my $maxCountVal\
    \ = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal\
    \ = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex\
    \ = 0;\n    my $minCountVal = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex\
    \ = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal = 0;\n    my $maxCountVal\
    \ = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal\
    \ = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex\
    \ = 0;\n    my $minCountVal = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex\
    \ = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal = 0;\n    my $maxCountVal\
    \ = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal\
    \ = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex\
    \ = 0;\n    my $minCountVal = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex\
    \ = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal = 0;\n    my $maxCountVal\
    \ = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal\
    \ = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex\
    \ = 0;\n    my $minCountVal = 0;\n    my $maxCountVal = 0;\n    my $minCountIndex\
    \ = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal = 0;\n    my $maxCountVal\
    \ = 0;\n    my $minCountIndex = 0;\n    my $maxCountIndex = 0;\n    my $minCountVal\
    \ = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6fdqscwr.pl line 126,
    at end of line

    syntax error at /tmp/tmp6fdqscwr.pl line 126, at EOF

    Execution of /tmp/tmp6fdqscwr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my $num_ones = 0;\n    my $num_tens = 0;\n    my $num_hundreds = 0;\n   \
    \ my $num_thousands = 0;\n    my $num_millions = 0;\n    my $num_billions = 0;\n\
    \    my $num_trillions = 0;\n    my $num_quadrillions = 0;\n    my $num_quintillions\
    \ = 0;\n    my $num_sextillions = 0;\n    my $num_septillions = 0;\n    my $num_octillions\
    \ = 0;\n    my $num_nonillions = 0;\n    my $num_decillions = 0;\n    my $num_undecillions\
    \ = 0;\n    my $num_unquintillions = 0;\n    my $num_unsextillions = 0;\n    my\
    \ $num_unseptillions = 0;\n    my $num_unoctillions = 0;\n    my $num_unnonillions\
    \ = 0;\n    my $num_undecillions = 0;\n    my $num_ununquintillions = 0;\n   \
    \ my $num_ununsextillions = 0;\n    my $num_ununseptillions = 0;\n    my $num_ununoctillions\
    \ = 0;\n    my $num_ununnonillions = 0;\n    my $num_unundecillions = 0;\n   \
    \ my $num_unununquintillions = 0;\n    my $num_unununsextillions = 0;\n    my\
    \ $num_ununseptillions = 0;\n    my $num_ununoctillions = 0;\n    my $num_ununnonillions\
    \ = 0;\n    my $num_unundecillions = 0;\n    my $num_unununquintillions = 0;\n\
    \    my $num_unununsextillions = 0;\n    my $num_ununseptillions = 0;\n    my\
    \ $num_ununoctillions = 0;\n    my $num_ununnonillions = 0;\n    my $num_unundecillions\
    \ = 0;\n    my $num_unununquintillions = 0;\n    my $num_unununsextillions = 0;\n\
    \    my $num_ununseptillions = 0;\n    my $num_ununoctillions = 0;\n    my $num_ununnonillions\
    \ = 0;\n    my $num_unundecillions = 0;\n    my $num_unununquintillions = 0;\n\
    \    my $num_unununsextillions = 0;\n    my $num_ununseptillions = 0;\n    my\
    \ $num_ununoctillions = 0;\n    my $num_ununnonillions = 0;\n    my $num_\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvdk_hu18.pl line 62, at end
    of line

    syntax error at /tmp/tmpvdk_hu18.pl line 62, near "$num_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvdk_hu18.pl line 101, at end
    of line

    syntax error at /tmp/tmpvdk_hu18.pl line 101, at EOF

    Execution of /tmp/tmpvdk_hu18.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp6xlh_xd.pl line 97, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 97, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp6xlh_xd.pl line 136, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 136, at EOF

    Execution of /tmp/tmpp6xlh_xd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my\
    \ $min = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4\
    \ = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8\
    \ = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpdcnqybfi.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpdcnqybfi.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpdcnqybfi.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpdcnqybfi.pl line 137, at EOF\nExecution of /tmp/tmpdcnqybfi.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n\
    \    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n\
    \    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n\
    \    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n\
    \    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n\
    \    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n\
    \    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n\
    \    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n\
    \    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n\
    \    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n\
    \    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n\
    \    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n\
    \    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n\
    \    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n\
    \    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n\
    \    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n\
    \    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n\
    \    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n\
    \    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n\
    \    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n\
    \    my $min40 = 0;\n    my $max41\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplfbz13ne.pl line 98, at end
    of line

    syntax error at /tmp/tmplfbz13ne.pl line 98, near "$max41

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplfbz13ne.pl line 137, at end
    of line

    syntax error at /tmp/tmplfbz13ne.pl line 137, at EOF

    Execution of /tmp/tmplfbz13ne.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjqcv9rx5.pl line 98, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjqcv9rx5.pl line 137, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 137, at EOF

    Execution of /tmp/tmpjqcv9rx5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt;\n    my $tmpcnt;\n\
    \    my $tmpcnt2;\n    my $tmpcnt3;\n    my $tmpcnt4;\n    my $tmpcnt5;\n    my\
    \ $tmpcnt6;\n    my $tmpcnt7;\n    my $tmpcnt8;\n    my $tmpcnt9;\n    my $tmpcnt10;\n\
    \    my $tmpcnt11;\n    my $tmpcnt12;\n    my $tmpcnt13;\n    my $tmpcnt14;\n\
    \    my $tmpcnt15;\n    my $tmpcnt16;\n    my $tmpcnt17;\n    my $tmpcnt18;\n\
    \    my $tmpcnt19;\n    my $tmpcnt20;\n    my $tmpcnt21;\n    my $tmpcnt22;\n\
    \    my $tmpcnt23;\n    my $tmpcnt24;\n    my $tmpcnt25;\n    my $tmpcnt26;\n\
    \    my $tmpcnt27;\n    my $tmpcnt28;\n    my $tmpcnt29;\n    my $tmpcnt30;\n\
    \    my $tmpcnt31;\n    my $tmpcnt32;\n    my $tmpcnt33;\n    my $tmpcnt34;\n\
    \    my $tmpcnt35;\n    my $tmpcnt36;\n    my $tmpcnt37;\n    my $tmpcnt38;\n\
    \    my $tmpcnt39;\n    my $tmpcnt40;\n    my $tmpcnt41;\n    my $tmpcnt42;\n\
    \    my $tmpcnt43;\n    my $tmpcnt44;\n    my $tmpcnt45;\n    my $tmpcnt46;\n\
    \    my $tmpcnt47;\n    my $tmpcnt48;\n    my $tmpcnt49;\n    my $tmpcnt50;\n\
    \    my $tmpcnt51;\n    my $tmpcnt52;\n    my $tmpcnt53;\n    my $tmpcnt54;\n\
    \    my $tmpcnt55;\n    my $tmpcnt56;\n    my $tmpcnt57;\n    my $tmpcnt58;\n\
    \    my $tmpcnt59;\n    my $tmpcnt60;\n    my $tmpcnt61;\n    my $tmpcnt62;\n\
    \    my $tmpcnt63;\n    my $tmpcnt64;\n    my $tmpcnt65;\n    my $tmpcnt66;\n\
    \    my $tmpcnt67;\n    my $tmpcnt68;\n    my $tmpcnt69;\n    my $tmpcnt70;\n\
    \    my $tmpcnt71;\n    my $tmpcnt72;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc6kamc3u.pl line 88, at end
    of line

    syntax error at /tmp/tmpc6kamc3u.pl line 88, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc6kamc3u.pl line 127, at end
    of line

    syntax error at /tmp/tmpc6kamc3u.pl line 127, at EOF

    Execution of /tmp/tmpc6kamc3u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj\
    \ = 0;\n    my $maxj2 = 0;\n    my $maxj3 = 0;\n    my $maxj4 = 0;\n    my $maxj5\
    \ = 0;\n    my $maxj6 = 0;\n    my $maxj7 = 0;\n    my $maxj8 = 0;\n    my $maxj9\
    \ = 0;\n    my $maxj10 = 0;\n    my $maxj11 = 0;\n    my $maxj12 = 0;\n    my\
    \ $maxj13 = 0;\n    my $maxj14 = 0;\n    my $maxj15 = 0;\n    my $maxj16 = 0;\n\
    \    my $maxj17 = 0;\n    my $maxj18 = 0;\n    my $maxj19 = 0;\n    my $maxj20\
    \ = 0;\n    my $maxj21 = 0;\n    my $maxj22 = 0;\n    my $maxj23 = 0;\n    my\
    \ $maxj24 = 0;\n    my $maxj25 = 0;\n    my $maxj26 = 0;\n    my $maxj27 = 0;\n\
    \    my $maxj28 = 0;\n    my $maxj29 = 0;\n    my $maxj30 = 0;\n    my $maxj31\
    \ = 0;\n    my $maxj32 = 0;\n    my $maxj33 = 0;\n    my $maxj34 = 0;\n    my\
    \ $maxj35 = 0;\n    my $maxj36 = 0;\n    my $maxj37 = 0;\n    my $maxj38 = 0;\n\
    \    my $maxj39 = 0;\n    my $maxj40 = 0;\n    my $maxj41 = 0;\n    my $maxj42\
    \ = 0;\n    my $maxj43 = 0;\n    my $maxj44 = 0;\n    my $maxj45 = 0;\n    my\
    \ $maxj46 = 0;\n    my $maxj47 = 0;\n    my $maxj48 = 0;\n    my $maxj49 = 0;\n\
    \    my $maxj50 = 0;\n    my $maxj51 = 0;\n    my $maxj52 = 0;\n    my $maxj53\
    \ = 0;\n    my $maxj54 = 0;\n    my $maxj55 = 0;\n    my $maxj56 = 0;\n    my\
    \ $maxj57 = 0;\n    my $maxj58 = 0;\n    my $maxj59 = 0;\n    my $maxj60 = 0;\n\
    \    my $maxj61 = 0;\n    my $maxj62 = 0;\n    my $maxj63 = 0;\n    my $maxj64\
    \ = 0;\n    my $maxj65 = 0;\n    my $maxj66 = 0;\n    my $maxj67 = 0;\n    my\
    \ $maxj68 = 0;\n    my $maxj69 = 0;\n    my $maxj70 = 0;\n    my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpfmozzitl.pl line 86,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpfmozzitl.pl line 86, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpfmozzitl.pl line 125, at end of line\nsyntax\
    \ error at /tmp/tmpfmozzitl.pl line 125, at EOF\nExecution of /tmp/tmpfmozzitl.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $mincnt;\n    my $maxcnt;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $cnt;\n    my $tmp;\n    my $tmpcnt;\n \
    \   my $tmpmax;\n    my $tmpmin;\n    my $tmpmincnt;\n    my $tmpmaxcnt;\n   \
    \ my $tmpi;\n    my $tmpj;\n    my $tmpk;\n    my $tmpcnt2;\n    my $tmpmax2;\n\
    \    my $tmpmin2;\n    my $tmpmincnt2;\n    my $tmpmaxcnt2;\n    my $tmpi2;\n\
    \    my $tmpj2;\n    my $tmpk2;\n    my $tmpcnt3;\n    my $tmpmax3;\n    my $tmpmin3;\n\
    \    my $tmpmincnt3;\n    my $tmpmaxcnt3;\n    my $tmpi3;\n    my $tmpj3;\n  \
    \  my $tmpk3;\n    my $tmpcnt4;\n    my $tmpmax4;\n    my $tmpmin4;\n    my $tmpmincnt4;\n\
    \    my $tmpmaxcnt4;\n    my $tmpi4;\n    my $tmpj4;\n    my $tmpk4;\n    my $tmpcnt5;\n\
    \    my $tmpmax5;\n    my $tmpmin5;\n    my $tmpmincnt5;\n    my $tmpmaxcnt5;\n\
    \    my $tmpi5;\n    my $tmpj5;\n    my $tmpk5;\n    my $tmpcnt6;\n    my $tmpmax6;\n\
    \    my $tmpmin6;\n    my $tmpmincnt6;\n    my $tmpmaxcnt6;\n    my $tmpi6;\n\
    \    my $tmpj6;\n    my $tmpk6;\n    my $tmpcnt7;\n    my $tmpmax7;\n    my $tmpmin7;\n\
    \    my $tmpmincnt7;\n    my $tmpmaxcnt7;\n    my $tmpi7;\n    my $tmpj7;\n  \
    \  my $tmpk7;\n    my $tmpcnt8;\n    my $tmpmax8;\n    my $tmpmin8;\n    my $tmpmincnt8;\n\
    \    my $tmpmaxcnt8;\n    my $tmpi8;\n    my $tmpj8;\n    my $tmpk8;\n    my $tmpcnt9;\n\
    \    my $tmpmax9;\n    my $tmpmin9;\n    my $tmpmincnt9;\n    my $tmpmaxcnt9;\n\
    \    my $tmpi9;\n    my $tmpj9;\n    my $tmpk9;\n    my $tmpcnt10;\n    my $tmpmax\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4bokhzs6.pl line 95, at end
    of line

    syntax error at /tmp/tmp4bokhzs6.pl line 95, near "$tmpmax

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4bokhzs6.pl line 134, at end
    of line

    syntax error at /tmp/tmp4bokhzs6.pl line 134, at EOF

    Execution of /tmp/tmp4bokhzs6.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = 0;\n    my $maxlen = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpuq3g62dq.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpuq3g62dq.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpuq3g62dq.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmpuq3g62dq.pl line 139, at EOF\nExecution of /tmp/tmpuq3g62dq.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $temp);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpvrx4bnad.pl line 51, at
    end of line

    syntax error at /tmp/tmpvrx4bnad.pl line 51, at EOF

    Execution of /tmp/tmpvrx4bnad.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n\
    \    my $tmpcnt = 0;\n    my $tmpcnt2 = 0;\n    my $tmpcnt3 = 0;\n    my $tmpcnt4\
    \ = 0;\n    my $tmpcnt5 = 0;\n    my $tmpcnt6 = 0;\n    my $tmpcnt7 = 0;\n   \
    \ my $tmpcnt8 = 0;\n    my $tmpcnt9 = 0;\n    my $tmpcnt10 = 0;\n    my $tmpcnt11\
    \ = 0;\n    my $tmpcnt12 = 0;\n    my $tmpcnt13 = 0;\n    my $tmpcnt14 = 0;\n\
    \    my $tmpcnt15 = 0;\n    my $tmpcnt16 = 0;\n    my $tmpcnt17 = 0;\n    my $tmpcnt18\
    \ = 0;\n    my $tmpcnt19 = 0;\n    my $tmpcnt20 = 0;\n    my $tmpcnt21 = 0;\n\
    \    my $tmpcnt22 = 0;\n    my $tmpcnt23 = 0;\n    my $tmpcnt24 = 0;\n    my $tmpcnt25\
    \ = 0;\n    my $tmpcnt26 = 0;\n    my $tmpcnt27 = 0;\n    my $tmpcnt28 = 0;\n\
    \    my $tmpcnt29 = 0;\n    my $tmpcnt30 = 0;\n    my $tmpcnt31 = 0;\n    my $tmpcnt32\
    \ = 0;\n    my $tmpcnt33 = 0;\n    my $tmpcnt34 = 0;\n    my $tmpcnt35 = 0;\n\
    \    my $tmpcnt36 = 0;\n    my $tmpcnt37 = 0;\n    my $tmpcnt38 = 0;\n    my $tmpcnt39\
    \ = 0;\n    my $tmpcnt40 = 0;\n    my $tmpcnt41 = 0;\n    my $tmpcnt42 = 0;\n\
    \    my $tmpcnt43 = 0;\n    my $tmpcnt44 = 0;\n    my $tmpcnt45 = 0;\n    my $tmpcnt46\
    \ = 0;\n    my $tmpcnt47 = 0;\n    my $tmpcnt48 = 0;\n    my $tmpcnt49 = 0;\n\
    \    my $tmpcnt50 = 0;\n    my $tmpcnt51 = 0;\n    my $tmpcnt52 = 0;\n    my $tmpcnt53\
    \ = 0;\n    my $tmpcnt54 = 0;\n    my $tmpcnt55 = 0;\n    my $tmpcnt56 = 0;\n\
    \    my $tmpcnt57 = 0;\n    my $tmpcnt58 = 0;\n    my $tmpcnt59 = 0;\n    my $tmpcnt60\
    \ = 0;\n    my $tmpcnt61 = 0;\n    my $tmpcnt62 = 0;\n    my $tmpcnt63 = 0;\n\
    \    my $tmpcnt64 = 0;\n    my $tmpcnt65 = 0;\n    my $tmpcnt66 = 0;\n    my $tmpcnt67\
    \ = 0;\n    my $tmpcnt68 = 0;\n    my $tmpcnt69 = 0;\n    my $tmp\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl984er1x.pl line 86, at end
    of line

    syntax error at /tmp/tmpl984er1x.pl line 86, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl984er1x.pl line 125, at end
    of line

    syntax error at /tmp/tmpl984er1x.pl line 125, at EOF

    Execution of /tmp/tmpl984er1x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = scalar(@$arr);\n\
    \    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n  \
    \  my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n  \
    \  my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n  \
    \  my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n  \
    \  my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n\
    \    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n\
    \    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n\
    \    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n\
    \    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n\
    \    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n\
    \    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n\
    \    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n\
    \    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n\
    \    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n\
    \    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n\
    \    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n\
    \    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n\
    \    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n\
    \    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n\
    \    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n\
    \    my $max41 = 0;\n    my $min41 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpvttecley.pl line 137,
    at end of line

    syntax error at /tmp/tmpvttecley.pl line 137, at EOF

    Execution of /tmp/tmpvttecley.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $count\
    \ = 0;\n    my $max = 0;\n    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 =\
    \ 0;\n    my $max5 = 0;\n    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 =\
    \ 0;\n    my $max9 = 0;\n    my $max10 = 0;\n    my $max11 = 0;\n    my $max12\
    \ = 0;\n    my $max13 = 0;\n    my $max14 = 0;\n    my $max15 = 0;\n    my $max16\
    \ = 0;\n    my $max17 = 0;\n    my $max18 = 0;\n    my $max19 = 0;\n    my $max20\
    \ = 0;\n    my $max21 = 0;\n    my $max22 = 0;\n    my $max23 = 0;\n    my $max24\
    \ = 0;\n    my $max25 = 0;\n    my $max26 = 0;\n    my $max27 = 0;\n    my $max28\
    \ = 0;\n    my $max29 = 0;\n    my $max30 = 0;\n    my $max31 = 0;\n    my $max32\
    \ = 0;\n    my $max33 = 0;\n    my $max34 = 0;\n    my $max35 = 0;\n    my $max36\
    \ = 0;\n    my $max37 = 0;\n    my $max38 = 0;\n    my $max39 = 0;\n    my $max40\
    \ = 0;\n    my $max41 = 0;\n    my $max42 = 0;\n    my $max43 = 0;\n    my $max44\
    \ = 0;\n    my $max45 = 0;\n    my $max46 = 0;\n    my $max47 = 0;\n    my $max48\
    \ = 0;\n    my $max49 = 0;\n    my $max50 = 0;\n    my $max51 = 0;\n    my $max52\
    \ = 0;\n    my $max53 = 0;\n    my $max54 = 0;\n    my $max55 = 0;\n    my $max56\
    \ = 0;\n    my $max57 = 0;\n    my $max58 = 0;\n    my $max59 = 0;\n    my $max60\
    \ = 0;\n    my $max61 = 0;\n    my $max62 = 0;\n    my $max63 = 0;\n    my $max64\
    \ = 0;\n    my $max65 = 0;\n    my $max66 = 0;\n    my $max67 = 0;\n    my $max68\
    \ = 0;\n    my $max69 = 0;\n    my $max70 = 0;\n    my $max71 = 0;\n    my $max72\
    \ = 0;\n    my $max73 = 0;\n    my $max74 = 0;\n    my $max75 = 0;\n    my $max76\
    \ = 0;\n    my $max77 = 0;\n    my $max78 = 0;\n    my $max79 = 0;\n    my $max80\
    \ = 0;\n    my $max81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpruymlvhw.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpruymlvhw.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpruymlvhw.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpruymlvhw.pl line 137, at EOF\nExecution of /tmp/tmpruymlvhw.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my\
    \ $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4yqz57st.pl line 137,
    at end of line

    syntax error at /tmp/tmp4yqz57st.pl line 137, at EOF

    Execution of /tmp/tmp4yqz57st.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    \n    foreach $i (@$arr) {\n        $num_ones\
    \ = 0;\n        foreach $j (@$arr) {\n            if ($i != $j) {\n          \
    \      $num_ones += $arr[$j] & 1;\n            }\n        }\n        push @sorted_arr,\
    \ $i;\n        push @sorted_arr, $num_ones;\n    }\n    \n    foreach $i (@sorted_arr)\
    \ {\n        if ($i < 0) {\n            push @sorted_arr, $-$i;\n        }\n \
    \   }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Scalar found where operator expected at /tmp/tmpn786d05x.pl line 26, near\
    \ \"$-$i\"\n\t(Missing operator before $i?)\nsyntax error at /tmp/tmpn786d05x.pl\
    \ line 26, near \"$-$i\"\nBEGIN not safe after errors--compilation aborted at\
    \ /tmp/tmpn786d05x.pl line 31.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_len = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_count =\
    \ 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpn6r47625.pl line 152,
    at end of line

    syntax error at /tmp/tmpn6r47625.pl line 152, at EOF

    Execution of /tmp/tmpn6r47625.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 1;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfxdgu46i.pl line 137,
    at end of line

    syntax error at /tmp/tmpfxdgu46i.pl line 137, at EOF

    Execution of /tmp/tmpfxdgu46i.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $tmp;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpccb48dbc.pl line 55, at
    end of line

    syntax error at /tmp/tmpccb48dbc.pl line 55, at EOF

    Execution of /tmp/tmpccb48dbc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $count = 0;\n    my $temp = 0;\n    my $temp2 = 0;\n    my $temp3\
    \ = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7\
    \ = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11\
    \ = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my\
    \ $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n\
    \    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22\
    \ = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my\
    \ $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n\
    \    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33\
    \ = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my\
    \ $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n\
    \    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44\
    \ = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my\
    \ $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n\
    \    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55\
    \ = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my\
    \ $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n\
    \    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66\
    \ = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my\
    \ $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n\
    \    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77\
    \ = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my\
    \ $temp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpw44cx53w.pl line 98, at end
    of line

    syntax error at /tmp/tmpw44cx53w.pl line 98, near "$temp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpw44cx53w.pl line 137, at end
    of line

    syntax error at /tmp/tmpw44cx53w.pl line 137, at EOF

    Execution of /tmp/tmpw44cx53w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $maxdec = 0;\n    my $maxdeccount = 0;\n    my\
    \ $maxdecones = 0;\n    my $maxdecdec = 0;\n    my $maxdecdeccount = 0;\n    my\
    \ $maxdecdecones = 0;\n    my $maxdecdecdec = 0;\n    my $maxdecdecdeccount =\
    \ 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones\
    \ = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my\
    \ $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount\
    \ = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my\
    \ $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones\
    \ = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my\
    \ $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount\
    \ = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my\
    \ $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones\
    \ = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my\
    \ $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount\
    \ = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my\
    \ $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones\
    \ = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my\
    \ $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount\
    \ = 0;\n    my $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my\
    \ $maxdecdecdecones = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones\
    \ = 0;\n    my $maxdecdecdeccount = 0;\n    my $maxdecdecdecones = 0;\n    my\
    \ $maxdecdecdeccount = 0;\n    my $maxdecdecdecone\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmphhyiuemm.pl line 76, at end
    of line

    syntax error at /tmp/tmphhyiuemm.pl line 76, near "$maxdecdecdecone

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmphhyiuemm.pl line 115, at end
    of line

    syntax error at /tmp/tmphhyiuemm.pl line 115, at EOF

    Execution of /tmp/tmphhyiuemm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $tmp\
    \ = 0;\n    my $cnt = 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 =\
    \ 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 =\
    \ 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12\
    \ = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16\
    \ = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20\
    \ = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24\
    \ = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28\
    \ = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32\
    \ = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36\
    \ = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40\
    \ = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44\
    \ = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48\
    \ = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52\
    \ = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56\
    \ = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60\
    \ = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64\
    \ = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68\
    \ = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72\
    \ = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76\
    \ = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80\
    \ = 0;\n    my $cnt81 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9mw7_934.pl line 137,
    at end of line

    syntax error at /tmp/tmp9mw7_934.pl line 137, at EOF

    Execution of /tmp/tmp9mw7_934.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $tmp\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpaxavaiin.pl line 137,
    at end of line

    syntax error at /tmp/tmpaxavaiin.pl line 137, at EOF

    Execution of /tmp/tmpaxavaiin.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprd0s7fo2.pl line 98, at end
    of line

    syntax error at /tmp/tmprd0s7fo2.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprd0s7fo2.pl line 137, at end
    of line

    syntax error at /tmp/tmprd0s7fo2.pl line 137, at EOF

    Execution of /tmp/tmprd0s7fo2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $n);\n    my($ones);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5fyww26x.pl line 52, at
    end of line

    syntax error at /tmp/tmp5fyww26x.pl line 52, at EOF

    Execution of /tmp/tmp5fyww26x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = $#{$arr};\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpzhivh196.pl line 98, at end
    of line

    syntax error at /tmp/tmpzhivh196.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpzhivh196.pl line 137, at end
    of line

    syntax error at /tmp/tmpzhivh196.pl line 137, at EOF

    Execution of /tmp/tmpzhivh196.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max = -1;\n\
    \    my $min = 0;\n    my $tmp;\n    my $cmp = 0;\n    my $cmp2 = 0;\n    my $cmp3\
    \ = 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n    my $cmp7\
    \ = 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n    my $cmp11\
    \ = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n    my $cmp15\
    \ = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n    my $cmp19\
    \ = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n    my $cmp23\
    \ = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n    my $cmp27\
    \ = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n    my $cmp31\
    \ = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n    my $cmp35\
    \ = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n    my $cmp39\
    \ = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n    my $cmp43\
    \ = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n    my $cmp47\
    \ = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n    my $cmp51\
    \ = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n    my $cmp55\
    \ = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n    my $cmp59\
    \ = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n    my $cmp63\
    \ = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n    my $cmp67\
    \ = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n    my $cmp71\
    \ = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n    my $cmp75\
    \ = 0;\n    my $cmp76 = 0;\n    my $cmp77 = 0;\n    my $cmp78 = 0;\n    my $cmp79\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpgi4bh7nn.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpgi4bh7nn.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpgi4bh7nn.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpgi4bh7nn.pl line 137, at EOF\nExecution of /tmp/tmpgi4bh7nn.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\n    my $cmp = 0;\n\
    \    my $cmp2 = 0;\n    my $cmp3 = 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n\
    \    my $cmp6 = 0;\n    my $cmp7 = 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n\
    \    my $cmp10 = 0;\n    my $cmp11 = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n\
    \    my $cmp14 = 0;\n    my $cmp15 = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n\
    \    my $cmp18 = 0;\n    my $cmp19 = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n\
    \    my $cmp22 = 0;\n    my $cmp23 = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n\
    \    my $cmp26 = 0;\n    my $cmp27 = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n\
    \    my $cmp30 = 0;\n    my $cmp31 = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n\
    \    my $cmp34 = 0;\n    my $cmp35 = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n\
    \    my $cmp38 = 0;\n    my $cmp39 = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n\
    \    my $cmp42 = 0;\n    my $cmp43 = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n\
    \    my $cmp46 = 0;\n    my $cmp47 = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n\
    \    my $cmp50 = 0;\n    my $cmp51 = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n\
    \    my $cmp54 = 0;\n    my $cmp55 = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n\
    \    my $cmp58 = 0;\n    my $cmp59 = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n\
    \    my $cmp62 = 0;\n    my $cmp63 = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n\
    \    my $cmp66 = 0;\n    my $cmp67 = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n\
    \    my $cmp70 = 0;\n    my $cmp71 = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n\
    \    my $cmp74 = 0;\n    my $cmp75 = 0;\n    my $cmp76 = 0;\n    my $cmp77 = 0;\n\
    \    my $cmp78 = 0;\n    my $cmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpi7vn_1ks.pl line 98, at end
    of line

    syntax error at /tmp/tmpi7vn_1ks.pl line 98, near "$cmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpi7vn_1ks.pl line 137, at end
    of line

    syntax error at /tmp/tmpi7vn_1ks.pl line 137, at EOF

    Execution of /tmp/tmpi7vn_1ks.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $maxlen = 0;\n    my $min = 0;\n    my $minlen\
    \ = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n\
    \    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n\
    \    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n\
    \    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4gchrvs0.pl line 100, at end
    of line

    syntax error at /tmp/tmp4gchrvs0.pl line 100, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4gchrvs0.pl line 139, at end
    of line

    syntax error at /tmp/tmp4gchrvs0.pl line 139, at EOF

    Execution of /tmp/tmp4gchrvs0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprw5qfu4g.pl line 136,
    at end of line

    syntax error at /tmp/tmprw5qfu4g.pl line 136, at EOF

    Execution of /tmp/tmprw5qfu4g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n\
    \    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n\
    \    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n\
    \    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    \    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    my $tmp84\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu5gts_qu.pl line 100, at end
    of line

    syntax error at /tmp/tmpu5gts_qu.pl line 100, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu5gts_qu.pl line 139, at end
    of line

    syntax error at /tmp/tmpu5gts_qu.pl line 139, at EOF

    Execution of /tmp/tmpu5gts_qu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my\
    \ $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4yqz57st.pl line 137,
    at end of line

    syntax error at /tmp/tmp4yqz57st.pl line 137, at EOF

    Execution of /tmp/tmp4yqz57st.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $n = @$arr;\n    my $max_ones = 0;\n \
    \   my $max_dec = 0;\n    my $max_dec2 = 0;\n    my $max_dec3 = 0;\n    my $max_dec4\
    \ = 0;\n    my $max_dec5 = 0;\n    my $max_dec6 = 0;\n    my $max_dec7 = 0;\n\
    \    my $max_dec8 = 0;\n    my $max_dec9 = 0;\n    my $max_dec10 = 0;\n    my\
    \ $max_dec11 = 0;\n    my $max_dec12 = 0;\n    my $max_dec13 = 0;\n    my $max_dec14\
    \ = 0;\n    my $max_dec15 = 0;\n    my $max_dec16 = 0;\n    my $max_dec17 = 0;\n\
    \    my $max_dec18 = 0;\n    my $max_dec19 = 0;\n    my $max_dec20 = 0;\n    my\
    \ $max_dec21 = 0;\n    my $max_dec22 = 0;\n    my $max_dec23 = 0;\n    my $max_dec24\
    \ = 0;\n    my $max_dec25 = 0;\n    my $max_dec26 = 0;\n    my $max_dec27 = 0;\n\
    \    my $max_dec28 = 0;\n    my $max_dec29 = 0;\n    my $max_dec30 = 0;\n    my\
    \ $max_dec31 = 0;\n    my $max_dec32 = 0;\n    my $max_dec33 = 0;\n    my $max_dec34\
    \ = 0;\n    my $max_dec35 = 0;\n    my $max_dec36 = 0;\n    my $max_dec37 = 0;\n\
    \    my $max_dec38 = 0;\n    my $max_dec39 = 0;\n    my $max_dec40 = 0;\n    my\
    \ $max_dec41 = 0;\n    my $max_dec42 = 0;\n    my $max_dec43 = 0;\n    my $max_dec44\
    \ = 0;\n    my $max_dec45 = 0;\n    my $max_dec46 = 0;\n    my $max_dec47 = 0;\n\
    \    my $max_dec48 = 0;\n    my $max_dec49 = 0;\n    my $max_dec50 = 0;\n    my\
    \ $max_dec51 = 0;\n    my $max_dec52 = 0;\n    my $max_dec53 = 0;\n    my $max_dec54\
    \ = 0;\n    my $max_dec55 = 0;\n    my $max_dec56 = 0;\n    my $max_dec57 = 0;\n\
    \    my $max_dec58 = 0;\n    my $max_dec59 = 0;\n    my $max_dec60 = 0;\n    my\
    \ $max_dec61 = 0;\n    my $max_dec62 = 0;\n    my $max_dec63 = 0;\n    my $max_dec64\
    \ = 0;\n    my $max_dec65 = 0;\n    my $max_dec66 = 0;\n    my $max_dec67 = 0;\n\
    \    my $max_dec68 = 0;\n    my $max_dec69 = 0;\n    my $max_dec70\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc14br386.pl line 85, at end
    of line

    syntax error at /tmp/tmpc14br386.pl line 85, near "$max_dec70

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc14br386.pl line 124, at end
    of line

    syntax error at /tmp/tmpc14br386.pl line 124, at EOF

    Execution of /tmp/tmpc14br386.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = -1;\n    my $min = 0;\n    my $tmp;\n    my $cnt = 0;\n    my $cnt2 = 0;\n\
    \    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n\
    \    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n\
    \    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n\
    \    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n\
    \    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n\
    \    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n\
    \    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n\
    \    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n\
    \    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n\
    \    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n\
    \    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n\
    \    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n\
    \    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n\
    \    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n\
    \    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n\
    \    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n\
    \    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n\
    \    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n\
    \    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n\
    \    my $cnt79 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprs912xse.pl line 137,
    at end of line

    syntax error at /tmp/tmprs912xse.pl line 137, at EOF

    Execution of /tmp/tmprs912xse.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $len = 0;\n    my $max_len\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_len\
    \ = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my\
    \ $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n\
    \    my $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k\
    \ = 0;\n    my $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n   \
    \ my $max_k = 0;\n    my $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j\
    \ = 0;\n    my $max_k = 0;\n    my $max_len = @$arr;\n    my $max_i = 0;\n   \
    \ my $max_j = 0;\n    my $max_k = 0;\n    my $max_len = @$arr;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_len = @$arr;\n   \
    \ my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_len = @$arr;\n\
    \    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_len =\
    \ @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_len\
    \ = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my\
    \ $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n\
    \    my $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k\
    \ = 0;\n    my $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j = 0;\n   \
    \ my $max_k = 0;\n    my $max_len = @$arr;\n    my $max_i = 0;\n    my $max_j\
    \ = 0;\n    my $max_k = 0;\n    my $max_len = @$arr;\n    my $max_i = 0;\n   \
    \ my $max_j = 0;\n    my $max_k = 0;\n    my $max_len = @$arr;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_len = @$arr;\n   \
    \ my $max_i = 0;\n    my $max_j = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpqavr1ztj.pl line 91,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpqavr1ztj.pl line 91, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpqavr1ztj.pl line 130, at end of line\nsyntax\
    \ error at /tmp/tmpqavr1ztj.pl line 130, at EOF\nExecution of /tmp/tmpqavr1ztj.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpxepd7kbs.pl line 137,
    at end of line

    syntax error at /tmp/tmpxepd7kbs.pl line 137, at EOF

    Execution of /tmp/tmpxepd7kbs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ @$arr;\n    my $max = -1;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxlen\
    \ = 0;\n    my $min = 0;\n    my $mini = 0;\n    my $mini = 0;\n    my $minlen\
    \ = 0;\n    my $tmp;\n    my $tmplen;\n    my $tmpi;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    \    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    \    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    \    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    \    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    \    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    \    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    \    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n\
    \    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n    my $tmplen;\n    my $tmpj;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmplk1suglc.pl line 143,
    at end of line

    syntax error at /tmp/tmplk1suglc.pl line 143, at EOF

    Execution of /tmp/tmplk1suglc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjqcv9rx5.pl line 98, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjqcv9rx5.pl line 137, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 137, at EOF

    Execution of /tmp/tmpjqcv9rx5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $count\
    \ = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 =\
    \ 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 =\
    \ 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 =\
    \ 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 =\
    \ 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10\
    \ = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12\
    \ = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14\
    \ = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16\
    \ = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18\
    \ = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20\
    \ = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22\
    \ = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24\
    \ = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26\
    \ = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28\
    \ = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30\
    \ = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32\
    \ = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34\
    \ = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36\
    \ = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38\
    \ = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40\
    \ = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5xcbfhrk.pl line 138,
    at end of line

    syntax error at /tmp/tmp5xcbfhrk.pl line 138, at EOF

    Execution of /tmp/tmp5xcbfhrk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n  \
    \  my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n   \
    \ my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_rdjelu0.pl line 139,
    at end of line

    syntax error at /tmp/tmp_rdjelu0.pl line 139, at EOF

    Execution of /tmp/tmp_rdjelu0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\n    my $cmp = 0;\n\
    \    my $cmp2 = 0;\n    my $cmp3 = 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n\
    \    my $cmp6 = 0;\n    my $cmp7 = 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n\
    \    my $cmp10 = 0;\n    my $cmp11 = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n\
    \    my $cmp14 = 0;\n    my $cmp15 = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n\
    \    my $cmp18 = 0;\n    my $cmp19 = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n\
    \    my $cmp22 = 0;\n    my $cmp23 = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n\
    \    my $cmp26 = 0;\n    my $cmp27 = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n\
    \    my $cmp30 = 0;\n    my $cmp31 = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n\
    \    my $cmp34 = 0;\n    my $cmp35 = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n\
    \    my $cmp38 = 0;\n    my $cmp39 = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n\
    \    my $cmp42 = 0;\n    my $cmp43 = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n\
    \    my $cmp46 = 0;\n    my $cmp47 = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n\
    \    my $cmp50 = 0;\n    my $cmp51 = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n\
    \    my $cmp54 = 0;\n    my $cmp55 = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n\
    \    my $cmp58 = 0;\n    my $cmp59 = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n\
    \    my $cmp62 = 0;\n    my $cmp63 = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n\
    \    my $cmp66 = 0;\n    my $cmp67 = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n\
    \    my $cmp70 = 0;\n    my $cmp71 = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n\
    \    my $cmp74 = 0;\n    my $cmp75 = 0;\n    my $cmp76 = 0;\n    my $cmp77 = 0;\n\
    \    my $cmp78 = 0;\n    my $cmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1y4a4p5d.pl line 98, at end
    of line

    syntax error at /tmp/tmp1y4a4p5d.pl line 98, near "$cmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1y4a4p5d.pl line 137, at end
    of line

    syntax error at /tmp/tmp1y4a4p5d.pl line 137, at EOF

    Execution of /tmp/tmp1y4a4p5d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp99jtzfcu.pl line 152,
    at end of line

    syntax error at /tmp/tmp99jtzfcu.pl line 152, at EOF

    Execution of /tmp/tmp99jtzfcu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpkbf7kzr_.pl line 137,
    at end of line

    syntax error at /tmp/tmpkbf7kzr_.pl line 137, at EOF

    Execution of /tmp/tmpkbf7kzr_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp6xlh_xd.pl line 97, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 97, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp6xlh_xd.pl line 136, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 136, at EOF

    Execution of /tmp/tmpp6xlh_xd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprw5qfu4g.pl line 136,
    at end of line

    syntax error at /tmp/tmprw5qfu4g.pl line 136, at EOF

    Execution of /tmp/tmprw5qfu4g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt = 0;\n  \
    \  my $tmp_cnt = 0;\n    my $tmp_cnt2 = 0;\n    my $tmp_cnt3 = 0;\n    my $tmp_cnt4\
    \ = 0;\n    my $tmp_cnt5 = 0;\n    my $tmp_cnt6 = 0;\n    my $tmp_cnt7 = 0;\n\
    \    my $tmp_cnt8 = 0;\n    my $tmp_cnt9 = 0;\n    my $tmp_cnt10 = 0;\n    my\
    \ $tmp_cnt11 = 0;\n    my $tmp_cnt12 = 0;\n    my $tmp_cnt13 = 0;\n    my $tmp_cnt14\
    \ = 0;\n    my $tmp_cnt15 = 0;\n    my $tmp_cnt16 = 0;\n    my $tmp_cnt17 = 0;\n\
    \    my $tmp_cnt18 = 0;\n    my $tmp_cnt19 = 0;\n    my $tmp_cnt20 = 0;\n    my\
    \ $tmp_cnt21 = 0;\n    my $tmp_cnt22 = 0;\n    my $tmp_cnt23 = 0;\n    my $tmp_cnt24\
    \ = 0;\n    my $tmp_cnt25 = 0;\n    my $tmp_cnt26 = 0;\n    my $tmp_cnt27 = 0;\n\
    \    my $tmp_cnt28 = 0;\n    my $tmp_cnt29 = 0;\n    my $tmp_cnt30 = 0;\n    my\
    \ $tmp_cnt31 = 0;\n    my $tmp_cnt32 = 0;\n    my $tmp_cnt33 = 0;\n    my $tmp_cnt34\
    \ = 0;\n    my $tmp_cnt35 = 0;\n    my $tmp_cnt36 = 0;\n    my $tmp_cnt37 = 0;\n\
    \    my $tmp_cnt38 = 0;\n    my $tmp_cnt39 = 0;\n    my $tmp_cnt40 = 0;\n    my\
    \ $tmp_cnt41 = 0;\n    my $tmp_cnt42 = 0;\n    my $tmp_cnt43 = 0;\n    my $tmp_cnt44\
    \ = 0;\n    my $tmp_cnt45 = 0;\n    my $tmp_cnt46 = 0;\n    my $tmp_cnt47 = 0;\n\
    \    my $tmp_cnt48 = 0;\n    my $tmp_cnt49 = 0;\n    my $tmp_cnt50 = 0;\n    my\
    \ $tmp_cnt51 = 0;\n    my $tmp_cnt52 = 0;\n    my $tmp_cnt53 = 0;\n    my $tmp_cnt54\
    \ = 0;\n    my $tmp_cnt55 = 0;\n    my $tmp_cnt56 = 0;\n    my $tmp_cnt57 = 0;\n\
    \    my $tmp_cnt58 = 0;\n    my $tmp_cnt59 = 0;\n    my $tmp_cnt60 = 0;\n    my\
    \ $tmp_cnt61 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1uum6c7x.pl line 117,
    at end of line

    syntax error at /tmp/tmp1uum6c7x.pl line 117, at EOF

    Execution of /tmp/tmp1uum6c7x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $tmp;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7rlbxvfh.pl line 97, at end
    of line

    syntax error at /tmp/tmp7rlbxvfh.pl line 97, near "$cmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7rlbxvfh.pl line 136, at end
    of line

    syntax error at /tmp/tmp7rlbxvfh.pl line 136, at EOF

    Execution of /tmp/tmp7rlbxvfh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $max2\
    \ = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5 = 0;\n    my $max6\
    \ = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9 = 0;\n    my $max10\
    \ = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13 = 0;\n    my $max14\
    \ = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17 = 0;\n    my $max18\
    \ = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21 = 0;\n    my $max22\
    \ = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25 = 0;\n    my $max26\
    \ = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29 = 0;\n    my $max30\
    \ = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33 = 0;\n    my $max34\
    \ = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37 = 0;\n    my $max38\
    \ = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41 = 0;\n    my $max42\
    \ = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45 = 0;\n    my $max46\
    \ = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49 = 0;\n    my $max50\
    \ = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53 = 0;\n    my $max54\
    \ = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57 = 0;\n    my $max58\
    \ = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61 = 0;\n    my $max62\
    \ = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65 = 0;\n    my $max66\
    \ = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69 = 0;\n    my $max70\
    \ = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73 = 0;\n    my $max74\
    \ = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77 = 0;\n    my $max78\
    \ = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81 = 0;\n    my $max82\
    \ = 0;\n    my $max83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpj2c0fj1o.pl line 136,
    at end of line

    syntax error at /tmp/tmpj2c0fj1o.pl line 136, at EOF

    Execution of /tmp/tmpj2c0fj1o.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n\
    \    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n\
    \    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n\
    \    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n\
    \    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n\
    \    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n\
    \    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n\
    \    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n\
    \    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n\
    \    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n\
    \    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n\
    \    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n\
    \    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n\
    \    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n\
    \    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n\
    \    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n\
    \    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n\
    \    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n\
    \    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n\
    \    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n\
    \    my $max42 = 0;\n    my $min42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfbj1nwma.pl line 138,
    at end of line

    syntax error at /tmp/tmpfbj1nwma.pl line 138, at EOF

    Execution of /tmp/tmpfbj1nwma.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $tmp;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    \n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpi41i2935.pl line 136,
    at end of line

    syntax error at /tmp/tmpi41i2935.pl line 136, at EOF

    Execution of /tmp/tmpi41i2935.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max_ones = 0;\n\
    \    my $max_dec = 0;\n    my $max_dec_index = 0;\n    my $max_dec_pos = 0;\n\
    \    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index = 0;\n    my $max_dec_pos\
    \ = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpvpz9drhy.pl line 121,
    at end of line

    syntax error at /tmp/tmpvpz9drhy.pl line 121, at EOF

    Execution of /tmp/tmpvpz9drhy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp5omnfpdm.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp5omnfpdm.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp5omnfpdm.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmp5omnfpdm.pl line 139, at EOF\nExecution of /tmp/tmp5omnfpdm.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $tmp = 0;\n\
    \    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n\
    \    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n\
    \    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n\
    \    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n\
    \    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n\
    \    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n\
    \    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n\
    \    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n\
    \    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n\
    \    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n\
    \    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n\
    \    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n\
    \    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n\
    \    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n\
    \    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n\
    \    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n\
    \    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n\
    \    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n\
    \    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n\
    \    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n\
    \    my $tmp82 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpxaewxx90.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpxaewxx90.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpxaewxx90.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpxaewxx90.pl line 137, at EOF\nExecution of /tmp/tmpxaewxx90.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $len = @$arr;\n    for (my $i = 0; $i < $len; $i++) {\n        my $ones = 0;\n\
    \        my $j = $i;\n        while ($j > 0) {\n            $ones = $ones * 2\
    \ + $arr->[$j - 1];\n            $j--;\n        }\n        $ret[$i] = $ones;\n\
    \    }\n    my $cmp = sub {\n        my $a = $_[0];\n        my $b = $_[1];\n\
    \        return $a <=> $b unless $a < $b;\n        return $a <=> $b if ($a ==\
    \ $b);\n        return $a <=> $b if ($a < $b);\n        return $a <=> $b if ($a\
    \ > $b);\n        return $a <=> $b;\n    };\n    sort $cmp, @ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $sum = 0;\n    my $cnt = 0;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $maxcnt;\n    my $mincnt;\n    my $maxsum;\n \
    \   my $minsum;\n    my $maxmax;\n    my $minmin;\n    my $maxmin;\n    my $maxmaxcnt;\n\
    \    my $minmincnt;\n    my $maxminsum;\n    my $minminsum;\n    my $maxminmax;\n\
    \    my $minminmax;\n    my $maxminmaxcnt;\n    my $minminmaxcnt;\n    my $maxminmaxsum;\n\
    \    my $minminmaxsum;\n    my $maxminmaxmax;\n    my $minminmaxmax;\n    my $maxminmaxmaxcnt;\n\
    \    my $minminmaxmaxcnt;\n    my $maxminmaxmaxsum;\n    my $minminmaxmaxsum;\n\
    \    my $maxminmaxmaxmax;\n    my $minminmaxmaxmax;\n    my $maxminmaxmaxcnt;\n\
    \    my $minminmaxmaxcnt;\n    my $maxminmaxmaxsum;\n    my $minminmaxmaxsum;\n\
    \    my $maxminmaxmaxmax;\n    my $minminmaxmaxmax;\n    my $maxminmaxmaxcnt;\n\
    \    my $minminmaxmaxcnt;\n    my $maxminmaxmaxsum;\n    my $minminmaxmaxsum;\n\
    \    my $maxminmaxmaxmax;\n    my $minminmaxmaxmax;\n    my $maxminmaxmaxcnt;\n\
    \    my $minminmaxmaxcnt;\n    my $maxminmaxmaxsum;\n    my $minminmaxmaxsum;\n\
    \    my $maxminmaxmaxmax;\n    my $minminmaxmaxmax;\n    my $maxminmaxmaxcnt;\n\
    \    my $minminmaxmaxcnt;\n    my $maxminmaxmaxsum;\n    my $minminmaxmaxsum;\n\
    \    my $maxminmaxmaxmax;\n    my $minminmaxmaxmax;\n    my $maxminmaxmaxcnt;\n\
    \    my $minminmaxmaxcnt;\n    my $maxminmaxmaxsum;\n    my $minminmaxmaxsum;\n\
    \    my $maxminmaxmaxmax;\n    my $minminmaxmaxmax;\n    my $maxminmaxmaxcnt;\n\
    \    my $minminmaxmaxcnt;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5hhost21.pl line 115,
    at end of line

    syntax error at /tmp/tmp5hhost21.pl line 115, at EOF

    Execution of /tmp/tmp5hhost21.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprw5qfu4g.pl line 136,
    at end of line

    syntax error at /tmp/tmprw5qfu4g.pl line 136, at EOF

    Execution of /tmp/tmprw5qfu4g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $max = 0;\n    my $maxi = 0;\n    my $maxd = -1;\n    my $maxdi = 0;\n    my\
    \ $maxdd = -1;\n    my $maxdd = 0;\n    my $maxddi = 0;\n    my $maxddd = -1;\n\
    \    my $maxddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n   \
    \ my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\
    \ = 0;\n    my $maxdddd = 0;\n    my $maxdddd = 0;\n    my $maxdddd\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpklsykuyb.pl line 96, at end
    of line

    syntax error at /tmp/tmpklsykuyb.pl line 96, near "$maxdddd

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpklsykuyb.pl line 135, at end
    of line

    syntax error at /tmp/tmpklsykuyb.pl line 135, at EOF

    Execution of /tmp/tmpklsykuyb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_ones = 0;\n   \
    \ my $max_dec = 0;\n    my $max_dec2 = 0;\n    my $max_dec3 = 0;\n    my $max_dec4\
    \ = 0;\n    my $max_dec5 = 0;\n    my $max_dec6 = 0;\n    my $max_dec7 = 0;\n\
    \    my $max_dec8 = 0;\n    my $max_dec9 = 0;\n    my $max_dec10 = 0;\n    my\
    \ $max_dec11 = 0;\n    my $max_dec12 = 0;\n    my $max_dec13 = 0;\n    my $max_dec14\
    \ = 0;\n    my $max_dec15 = 0;\n    my $max_dec16 = 0;\n    my $max_dec17 = 0;\n\
    \    my $max_dec18 = 0;\n    my $max_dec19 = 0;\n    my $max_dec20 = 0;\n    my\
    \ $max_dec21 = 0;\n    my $max_dec22 = 0;\n    my $max_dec23 = 0;\n    my $max_dec24\
    \ = 0;\n    my $max_dec25 = 0;\n    my $max_dec26 = 0;\n    my $max_dec27 = 0;\n\
    \    my $max_dec28 = 0;\n    my $max_dec29 = 0;\n    my $max_dec30 = 0;\n    my\
    \ $max_dec31 = 0;\n    my $max_dec32 = 0;\n    my $max_dec33 = 0;\n    my $max_dec34\
    \ = 0;\n    my $max_dec35 = 0;\n    my $max_dec36 = 0;\n    my $max_dec37 = 0;\n\
    \    my $max_dec38 = 0;\n    my $max_dec39 = 0;\n    my $max_dec40 = 0;\n    my\
    \ $max_dec41 = 0;\n    my $max_dec42 = 0;\n    my $max_dec43 = 0;\n    my $max_dec44\
    \ = 0;\n    my $max_dec45 = 0;\n    my $max_dec46 = 0;\n    my $max_dec47 = 0;\n\
    \    my $max_dec48 = 0;\n    my $max_dec49 = 0;\n    my $max_dec50 = 0;\n    my\
    \ $max_dec51 = 0;\n    my $max_dec52 = 0;\n    my $max_dec53 = 0;\n    my $max_dec54\
    \ = 0;\n    my $max_dec55 = 0;\n    my $max_dec56 = 0;\n    my $max_dec57 = 0;\n\
    \    my $max_dec58 = 0;\n    my $max_dec59 = 0;\n    my $max_dec60 = 0;\n    my\
    \ $max_dec61 = 0;\n    my $max_dec62 = 0;\n    my $max_dec63 = 0;\n    my $max_dec64\
    \ = 0;\n    my $max_dec65 = 0;\n    my $max_dec66 = 0;\n    my $max_dec67 = 0;\n\
    \    my $max_dec68 = 0;\n    my $max_dec69 = 0;\n    my $max_dec70 = 0;\n    \n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbd3zvfu_.pl line 125,
    at end of line

    syntax error at /tmp/tmpbd3zvfu_.pl line 125, at EOF

    Execution of /tmp/tmpbd3zvfu_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 1;\n  \
    \  my $n = 1;\n    my $o = 0;\n    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n\
    \    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $A = 1;\n    my $B = 1;\n\
    \    my $C = 1;\n    my $D = 1;\n    my $E = 1;\n    my $F = 1;\n    my $G = 1;\n\
    \    my $H = 1;\n    my $I = 1;\n    my $J = 1;\n    my $K = 1;\n    my $L = 1;\n\
    \    my $M = 1;\n    my $N = 1;\n    my $O = 1;\n    my $P = 1;\n    my $Q = 1;\n\
    \    my $R = 1;\n    my $S = 1;\n    my $T = 1;\n    my $U = 1;\n    my $V = 1;\n\
    \    my $W = 1;\n    my $X = 1;\n    my $Y = 1;\n    my $Z = 1;\n    my $a = 1;\n\
    \    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n\
    \    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n\
    \    my $l = 1;\n    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n\
    \    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $A = 1;\n    my $B = 1;\n    my $C = 1;\n    my $D = 1;\n    my $E = 1;\n\
    \    my $F = 1;\n    my $G = 1;\n    my $H = 1;\n    my $I = 1;\n    my $J = 1;\n\
    \    my $K = 1;\n    my $L = 1;\n    my $M = 1;\n    my $N = 1;\n    my $O = 1;\n\
    \    my $P = 1;\n    my $Q = 1;\n    my $R = 1;\n    my $S = 1;\n    my $T = 1;\n\
    \    my $U = 1;\n    my $V = 1;\n    my $W = 1;\n    my $X = 1;\n    my $Y = 1;\n\
    \    my $Z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n\
    \    my $e = 1;\n    my $f = 1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpyjggsnmp.pl line 152,
    at end of line

    syntax error at /tmp/tmpyjggsnmp.pl line 152, at EOF

    Execution of /tmp/tmpyjggsnmp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp = 0;\n    my $tmp2 =\
    \ 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 =\
    \ 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 =\
    \ 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpm7_5z7sp.pl line 137,
    at end of line

    syntax error at /tmp/tmpm7_5z7sp.pl line 137, at EOF

    Execution of /tmp/tmpm7_5z7sp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = $#{$arr};\n\
    \    my $n = $#{$arr};\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my\
    \ $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n  \
    \  my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_r876l09.pl line 152,
    at end of line

    syntax error at /tmp/tmp_r876l09.pl line 152, at EOF

    Execution of /tmp/tmp_r876l09.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt = 0;\n  \
    \  my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n  \
    \  my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n  \
    \  my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n\
    \    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n\
    \    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n\
    \    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n\
    \    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n\
    \    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n\
    \    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n\
    \    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n\
    \    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n\
    \    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n\
    \    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n\
    \    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n\
    \    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n\
    \    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n\
    \    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n\
    \    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n\
    \    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n\
    \    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81 = 0;\n\
    \    my $cnt82 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp22_g4ust.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp22_g4ust.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp22_g4ust.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmp22_g4ust.pl line 137, at EOF\nExecution of /tmp/tmp22_g4ust.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprw5qfu4g.pl line 136,
    at end of line

    syntax error at /tmp/tmprw5qfu4g.pl line 136, at EOF

    Execution of /tmp/tmprw5qfu4g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $ones =\
    \ 0;\n    my $dec = 0;\n    my $tmp;\n    my $cmp = 0;\n    my $cmp2 = 0;\n  \
    \  my $cmp3 = 0;\n    my $cmp4 = 0;\n    my $cmp5 = 0;\n    my $cmp6 = 0;\n  \
    \  my $cmp7 = 0;\n    my $cmp8 = 0;\n    my $cmp9 = 0;\n    my $cmp10 = 0;\n \
    \   my $cmp11 = 0;\n    my $cmp12 = 0;\n    my $cmp13 = 0;\n    my $cmp14 = 0;\n\
    \    my $cmp15 = 0;\n    my $cmp16 = 0;\n    my $cmp17 = 0;\n    my $cmp18 = 0;\n\
    \    my $cmp19 = 0;\n    my $cmp20 = 0;\n    my $cmp21 = 0;\n    my $cmp22 = 0;\n\
    \    my $cmp23 = 0;\n    my $cmp24 = 0;\n    my $cmp25 = 0;\n    my $cmp26 = 0;\n\
    \    my $cmp27 = 0;\n    my $cmp28 = 0;\n    my $cmp29 = 0;\n    my $cmp30 = 0;\n\
    \    my $cmp31 = 0;\n    my $cmp32 = 0;\n    my $cmp33 = 0;\n    my $cmp34 = 0;\n\
    \    my $cmp35 = 0;\n    my $cmp36 = 0;\n    my $cmp37 = 0;\n    my $cmp38 = 0;\n\
    \    my $cmp39 = 0;\n    my $cmp40 = 0;\n    my $cmp41 = 0;\n    my $cmp42 = 0;\n\
    \    my $cmp43 = 0;\n    my $cmp44 = 0;\n    my $cmp45 = 0;\n    my $cmp46 = 0;\n\
    \    my $cmp47 = 0;\n    my $cmp48 = 0;\n    my $cmp49 = 0;\n    my $cmp50 = 0;\n\
    \    my $cmp51 = 0;\n    my $cmp52 = 0;\n    my $cmp53 = 0;\n    my $cmp54 = 0;\n\
    \    my $cmp55 = 0;\n    my $cmp56 = 0;\n    my $cmp57 = 0;\n    my $cmp58 = 0;\n\
    \    my $cmp59 = 0;\n    my $cmp60 = 0;\n    my $cmp61 = 0;\n    my $cmp62 = 0;\n\
    \    my $cmp63 = 0;\n    my $cmp64 = 0;\n    my $cmp65 = 0;\n    my $cmp66 = 0;\n\
    \    my $cmp67 = 0;\n    my $cmp68 = 0;\n    my $cmp69 = 0;\n    my $cmp70 = 0;\n\
    \    my $cmp71 = 0;\n    my $cmp72 = 0;\n    my $cmp73 = 0;\n    my $cmp74 = 0;\n\
    \    my $cmp75 = 0;\n    my $cmp76 = 0;\n    my $cmp77 = 0;\n    my $cmp78 = 0;\n\
    \    my $cmp79 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp7dzs7qu_.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp7dzs7qu_.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp7dzs7qu_.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmp7dzs7qu_.pl line 137, at EOF\nExecution of /tmp/tmp7dzs7qu_.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpolu4g_je.pl line 98, at end
    of line

    syntax error at /tmp/tmpolu4g_je.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpolu4g_je.pl line 137, at end
    of line

    syntax error at /tmp/tmpolu4g_je.pl line 137, at EOF

    Execution of /tmp/tmpolu4g_je.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 1;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp = 0;\n    my $temp2 = 0;\n    my $temp3\
    \ = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7\
    \ = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11\
    \ = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my\
    \ $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n\
    \    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22\
    \ = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my\
    \ $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n\
    \    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33\
    \ = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my\
    \ $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n\
    \    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44\
    \ = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my\
    \ $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n\
    \    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55\
    \ = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my\
    \ $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n\
    \    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66\
    \ = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my\
    \ $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n\
    \    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77\
    \ = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpnsgc86z5.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpnsgc86z5.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpnsgc86z5.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpnsgc86z5.pl line 137, at EOF\nExecution of /tmp/tmpnsgc86z5.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $tmp;\n  \
    \  my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n   \
    \ my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n  \
    \  my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    my $tmp85;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgpbe6v63.pl line 139,
    at end of line

    syntax error at /tmp/tmpgpbe6v63.pl line 139, at EOF

    Execution of /tmp/tmpgpbe6v63.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp141b4epn.pl line 98, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp141b4epn.pl line 137, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 137, at EOF

    Execution of /tmp/tmp141b4epn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my\
    \ $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my\
    \ $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my\
    \ $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n  \
    \  my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    my $tmp81 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwo438pc3.pl line 136,
    at end of line

    syntax error at /tmp/tmpwo438pc3.pl line 136, at EOF

    Execution of /tmp/tmpwo438pc3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my\
    \ $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my\
    \ $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my\
    \ $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my\
    \ $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my\
    \ $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n  \
    \  my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n\
    \    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n\
    \    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n\
    \    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n\
    \    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n\
    \    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n\
    \    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n\
    \    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n\
    \    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n\
    \    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n\
    \    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n\
    \    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n\
    \    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n\
    \    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n\
    \    my $min40 = 0;\n    my $max41 = 0;\n    my $min\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvcq9w9qj.pl line 98, at end
    of line

    syntax error at /tmp/tmpvcq9w9qj.pl line 98, near "$min

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvcq9w9qj.pl line 137, at end
    of line

    syntax error at /tmp/tmpvcq9w9qj.pl line 137, at EOF

    Execution of /tmp/tmpvcq9w9qj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $max2\
    \ = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5 = 0;\n    my $max6\
    \ = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9 = 0;\n    my $max10\
    \ = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13 = 0;\n    my $max14\
    \ = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17 = 0;\n    my $max18\
    \ = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21 = 0;\n    my $max22\
    \ = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25 = 0;\n    my $max26\
    \ = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29 = 0;\n    my $max30\
    \ = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33 = 0;\n    my $max34\
    \ = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37 = 0;\n    my $max38\
    \ = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41 = 0;\n    my $max42\
    \ = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45 = 0;\n    my $max46\
    \ = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49 = 0;\n    my $max50\
    \ = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53 = 0;\n    my $max54\
    \ = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57 = 0;\n    my $max58\
    \ = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61 = 0;\n    my $max62\
    \ = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65 = 0;\n    my $max66\
    \ = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69 = 0;\n    my $max70\
    \ = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73 = 0;\n    my $max74\
    \ = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77 = 0;\n    my $max78\
    \ = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81 = 0;\n    my $max82\
    \ = 0;\n    my $max83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpj2c0fj1o.pl line 136,
    at end of line

    syntax error at /tmp/tmpj2c0fj1o.pl line 136, at EOF

    Execution of /tmp/tmpj2c0fj1o.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    my($num_ones_arr);\n    my($num_ones_arr_copy);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr27uapqi.pl line 53, at
    end of line

    syntax error at /tmp/tmpr27uapqi.pl line 53, at EOF

    Execution of /tmp/tmpr27uapqi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $temp\
    \ = 0;\n    my $count = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $dec2\
    \ = 0;\n    my $dec3 = 0;\n    my $dec4 = 0;\n    my $dec5 = 0;\n    my $dec6\
    \ = 0;\n    my $dec7 = 0;\n    my $dec8 = 0;\n    my $dec9 = 0;\n    my $dec10\
    \ = 0;\n    my $dec11 = 0;\n    my $dec12 = 0;\n    my $dec13 = 0;\n    my $dec14\
    \ = 0;\n    my $dec15 = 0;\n    my $dec16 = 0;\n    my $dec17 = 0;\n    my $dec18\
    \ = 0;\n    my $dec19 = 0;\n    my $dec20 = 0;\n    my $dec21 = 0;\n    my $dec22\
    \ = 0;\n    my $dec23 = 0;\n    my $dec24 = 0;\n    my $dec25 = 0;\n    my $dec26\
    \ = 0;\n    my $dec27 = 0;\n    my $dec28 = 0;\n    my $dec29 = 0;\n    my $dec30\
    \ = 0;\n    my $dec31 = 0;\n    my $dec32 = 0;\n    my $dec33 = 0;\n    my $dec34\
    \ = 0;\n    my $dec35 = 0;\n    my $dec36 = 0;\n    my $dec37 = 0;\n    my $dec38\
    \ = 0;\n    my $dec39 = 0;\n    my $dec40 = 0;\n    my $dec41 = 0;\n    my $dec42\
    \ = 0;\n    my $dec43 = 0;\n    my $dec44 = 0;\n    my $dec45 = 0;\n    my $dec46\
    \ = 0;\n    my $dec47 = 0;\n    my $dec48 = 0;\n    my $dec49 = 0;\n    my $dec50\
    \ = 0;\n    my $dec51 = 0;\n    my $dec52 = 0;\n    my $dec53 = 0;\n    my $dec54\
    \ = 0;\n    my $dec55 = 0;\n    my $dec56 = 0;\n    my $dec57 = 0;\n    my $dec58\
    \ = 0;\n    my $dec59 = 0;\n    my $dec60 = 0;\n    my $dec61 = 0;\n    my $dec62\
    \ = 0;\n    my $dec63 = 0;\n    my $dec64 = 0;\n    my $dec65 = 0;\n    my $dec66\
    \ = 0;\n    my $dec67 = 0;\n    my $dec68 = 0;\n    my $dec69 = 0;\n    my $dec70\
    \ = 0;\n    my $dec71 = 0;\n    my $dec72 = 0;\n    my $dec73 = 0;\n    my $dec74\
    \ = 0;\n    my $dec75 = 0;\n    my $dec76 = 0;\n    my $dec77 = 0;\n    my $dec78\
    \ = 0;\n    my $dec79 = 0;\n    my $dec80\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjzha2hji.pl line 98, at end
    of line

    syntax error at /tmp/tmpjzha2hji.pl line 98, near "$dec80

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjzha2hji.pl line 137, at end
    of line

    syntax error at /tmp/tmpjzha2hji.pl line 137, at EOF

    Execution of /tmp/tmpjzha2hji.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $k, $n);\n    \n    foreach $i (@$arr) {\n        $n = $i & 1;\n\
    \        $k += $n;\n        $sort[$k] = $i;\n    }\n    \n    foreach $i (@sort)\
    \ {\n        $j = 0;\n        foreach $j (@$arr) {\n            $n = $j & 1;\n\
    \            $k += $n;\n            if ($i == $k) {\n                push(@sort,\
    \ $j);\n                last;\n            }\n        }\n    }\n    \n    return\
    \ @sort;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $tmp = 0;\n\
    \    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n\
    \    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n\
    \    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n\
    \    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n\
    \    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n\
    \    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n\
    \    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n\
    \    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n\
    \    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n\
    \    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n\
    \    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n\
    \    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n\
    \    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n\
    \    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n\
    \    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n\
    \    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n\
    \    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n\
    \    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n\
    \    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n\
    \    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n\
    \    my $tmp82 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpk7n6he5i.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpk7n6he5i.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpk7n6he5i.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpk7n6he5i.pl line 137, at EOF\nExecution of /tmp/tmpk7n6he5i.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ @$arr;\n    my $max = -1;\n    my $tmp;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8j4_s977.pl line 57, at
    end of line

    syntax error at /tmp/tmp8j4_s977.pl line 57, at EOF

    Execution of /tmp/tmp8j4_s977.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpftlpnkto.pl line 58, at
    end of line

    syntax error at /tmp/tmpftlpnkto.pl line 58, at EOF

    Execution of /tmp/tmpftlpnkto.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j);\n    foreach $i (0 .. $#$arr) {\n        push(@sorted, $arr[$i]);\n\
    \    }\n    foreach $i (0 .. $#$arr) {\n        foreach $j ($i + 1 .. $#$arr)\
    \ {\n            push(@sorted, $arr[$i] if $arr[$i] > $arr[$j]);\n        }\n\
    \    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpkxyhxunj.pl line 17, near "] if"

    BEGIN not safe after errors--compilation aborted at /tmp/tmpkxyhxunj.pl line 22.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max_count = 0;\n\
    \    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n\
    \    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count =\
    \ 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n\
    \    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count =\
    \ 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i\
    \ = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n\
    \    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyxslfq9e.pl line 107, at end
    of line

    syntax error at /tmp/tmpyxslfq9e.pl line 107, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyxslfq9e.pl line 146, at end
    of line

    syntax error at /tmp/tmpyxslfq9e.pl line 146, at EOF

    Execution of /tmp/tmpyxslfq9e.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxlen\
    \ = 0;\n    my $maxleni = 0;\n    my $maxlenj = 0;\n    my $maxlenlen = 0;\n \
    \   my $maxlenleni = 0;\n    my $maxlenlenj = 0;\n    my $maxlenlenlen = 0;\n\
    \    my $maxlenlenleni = 0;\n    my $maxlenlenlenj = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenleni = 0;\n    my $maxlenlenlenlenj = 0;\n    my $maxlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n \
    \   my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n \
    \   my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n \
    \   my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpp7iziiwe.pl line 67,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpp7iziiwe.pl line 67, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpp7iziiwe.pl line 106, at end of line\nsyntax\
    \ error at /tmp/tmpp7iziiwe.pl line 106, at EOF\nExecution of /tmp/tmpp7iziiwe.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_vigdn_.pl line 98, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_vigdn_.pl line 137, at end
    of line

    syntax error at /tmp/tmpu_vigdn_.pl line 137, at EOF

    Execution of /tmp/tmpu_vigdn_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n    my $cnt2 = 0;\n\
    \    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n\
    \    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n\
    \    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n\
    \    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n\
    \    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n\
    \    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n\
    \    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n\
    \    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n\
    \    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n\
    \    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n\
    \    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n\
    \    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n\
    \    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n\
    \    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n\
    \    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n\
    \    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n\
    \    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n\
    \    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n\
    \    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n\
    \    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81 = 0;\n    my $cnt82 = 0;\n\
    \    my $cnt83 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpn1lc_1j6.pl line 137,
    at end of line

    syntax error at /tmp/tmpn1lc_1j6.pl line 137, at EOF

    Execution of /tmp/tmpn1lc_1j6.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $n = @$arr;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $min_index = 0;\n    my $max_index = 0;\n   \
    \ my $max_count = 0;\n    my $min_count = 0;\n    my $temp;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl92yfqch.pl line 61, at
    end of line

    syntax error at /tmp/tmpl92yfqch.pl line 61, at EOF

    Execution of /tmp/tmpl92yfqch.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0eshfcgx.pl line 100, at end
    of line

    syntax error at /tmp/tmp0eshfcgx.pl line 100, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0eshfcgx.pl line 139, at end
    of line

    syntax error at /tmp/tmp0eshfcgx.pl line 139, at EOF

    Execution of /tmp/tmp0eshfcgx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt;\n    my $cnt2;\n    my $cnt3;\n\
    \    my $cnt4;\n    my $cnt5;\n    my $cnt6;\n    my $cnt7;\n    my $cnt8;\n \
    \   my $cnt9;\n    my $cnt10;\n    my $cnt11;\n    my $cnt12;\n    my $cnt13;\n\
    \    my $cnt14;\n    my $cnt15;\n    my $cnt16;\n    my $cnt17;\n    my $cnt18;\n\
    \    my $cnt19;\n    my $cnt20;\n    my $cnt21;\n    my $cnt22;\n    my $cnt23;\n\
    \    my $cnt24;\n    my $cnt25;\n    my $cnt26;\n    my $cnt27;\n    my $cnt28;\n\
    \    my $cnt29;\n    my $cnt30;\n    my $cnt31;\n    my $cnt32;\n    my $cnt33;\n\
    \    my $cnt34;\n    my $cnt35;\n    my $cnt36;\n    my $cnt37;\n    my $cnt38;\n\
    \    my $cnt39;\n    my $cnt40;\n    my $cnt41;\n    my $cnt42;\n    my $cnt43;\n\
    \    my $cnt44;\n    my $cnt45;\n    my $cnt46;\n    my $cnt47;\n    my $cnt48;\n\
    \    my $cnt49;\n    my $cnt50;\n    my $cnt51;\n    my $cnt52;\n    my $cnt53;\n\
    \    my $cnt54;\n    my $cnt55;\n    my $cnt56;\n    my $cnt57;\n    my $cnt58;\n\
    \    my $cnt59;\n    my $cnt60;\n    my $cnt61;\n    my $cnt62;\n    my $cnt63;\n\
    \    my $cnt64;\n    my $cnt65;\n    my $cnt66;\n    my $cnt67;\n    my $cnt68;\n\
    \    my $cnt69;\n    my $cnt70;\n    my $cnt71;\n    my $cnt72;\n    my $cnt73;\n\
    \    my $cnt74;\n    my $cnt75;\n    my $cnt76;\n    my $cnt77;\n    my $cnt78;\n\
    \    my $cnt79;\n    my $cnt80;\n    my $cnt81;\n    my $cnt82;\n    my $cnt83;\n\
    \    my $cnt84;\n    my $cnt85;\n    my $cnt86\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpghqubtc8.pl line 100, at end
    of line

    syntax error at /tmp/tmpghqubtc8.pl line 100, near "$cnt86

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpghqubtc8.pl line 139, at end
    of line

    syntax error at /tmp/tmpghqubtc8.pl line 139, at EOF

    Execution of /tmp/tmpghqubtc8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $len = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmphtrmvzp8.pl line 137,
    at end of line

    syntax error at /tmp/tmphtrmvzp8.pl line 137, at EOF

    Execution of /tmp/tmphtrmvzp8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp6xlh_xd.pl line 97, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 97, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp6xlh_xd.pl line 136, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 136, at EOF

    Execution of /tmp/tmpp6xlh_xd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjqcv9rx5.pl line 98, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjqcv9rx5.pl line 137, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 137, at EOF

    Execution of /tmp/tmpjqcv9rx5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_ones = 0;\n   \
    \ my $max_dec = 0;\n    my $max_dec2 = 0;\n    my $max_dec3 = 0;\n    my $max_dec4\
    \ = 0;\n    my $max_dec5 = 0;\n    my $max_dec6 = 0;\n    my $max_dec7 = 0;\n\
    \    my $max_dec8 = 0;\n    my $max_dec9 = 0;\n    my $max_dec10 = 0;\n    my\
    \ $max_dec11 = 0;\n    my $max_dec12 = 0;\n    my $max_dec13 = 0;\n    my $max_dec14\
    \ = 0;\n    my $max_dec15 = 0;\n    my $max_dec16 = 0;\n    my $max_dec17 = 0;\n\
    \    my $max_dec18 = 0;\n    my $max_dec19 = 0;\n    my $max_dec20 = 0;\n    my\
    \ $max_dec21 = 0;\n    my $max_dec22 = 0;\n    my $max_dec23 = 0;\n    my $max_dec24\
    \ = 0;\n    my $max_dec25 = 0;\n    my $max_dec26 = 0;\n    my $max_dec27 = 0;\n\
    \    my $max_dec28 = 0;\n    my $max_dec29 = 0;\n    my $max_dec30 = 0;\n    my\
    \ $max_dec31 = 0;\n    my $max_dec32 = 0;\n    my $max_dec33 = 0;\n    my $max_dec34\
    \ = 0;\n    my $max_dec35 = 0;\n    my $max_dec36 = 0;\n    my $max_dec37 = 0;\n\
    \    my $max_dec38 = 0;\n    my $max_dec39 = 0;\n    my $max_dec40 = 0;\n    my\
    \ $max_dec41 = 0;\n    my $max_dec42 = 0;\n    my $max_dec43 = 0;\n    my $max_dec44\
    \ = 0;\n    my $max_dec45 = 0;\n    my $max_dec46 = 0;\n    my $max_dec47 = 0;\n\
    \    my $max_dec48 = 0;\n    my $max_dec49 = 0;\n    my $max_dec50 = 0;\n    my\
    \ $max_dec51 = 0;\n    my $max_dec52 = 0;\n    my $max_dec53 = 0;\n    my $max_dec54\
    \ = 0;\n    my $max_dec55 = 0;\n    my $max_dec56 = 0;\n    my $max_dec57 = 0;\n\
    \    my $max_dec58 = 0;\n    my $max_dec59 = 0;\n    my $max_dec60 = 0;\n    my\
    \ $max_dec61 = 0;\n    my $max_dec62 = 0;\n    my $max_dec63 = 0;\n    my $max_dec64\
    \ = 0;\n    my $max_dec65 = 0;\n    my $max_dec66 = 0;\n    my $max_dec67 = 0;\n\
    \    my $max_dec68 = 0;\n    my $max_dec69 = 0;\n    my $max_dec70 = 0;\n    \n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbd3zvfu_.pl line 125,
    at end of line

    syntax error at /tmp/tmpbd3zvfu_.pl line 125, at EOF

    Execution of /tmp/tmpbd3zvfu_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $num_ones = 0;\n  \
    \  my $num_zeros = 0;\n    my $num_negatives = 0;\n    my $num_positives = 0;\n\
    \    my $num_zeros_at_start = 0;\n    my $num_ones_at_start = 0;\n    my $num_negatives_at_start\
    \ = 0;\n    my $num_positives_at_start = 0;\n    my $num_zeros_at_end = 0;\n \
    \   my $num_ones_at_end = 0;\n    my $num_negatives_at_end = 0;\n    my $num_positives_at_end\
    \ = 0;\n    my $num_zeros_at_middle = 0;\n    my $num_ones_at_middle = 0;\n  \
    \  my $num_negatives_at_middle = 0;\n    my $num_positives_at_middle = 0;\n  \
    \  my $num_zeros_at_end = 0;\n    my $num_ones_at_end = 0;\n    my $num_negatives_at_end\
    \ = 0;\n    my $num_positives_at_end = 0;\n    my $num_zeros_at_middle = 0;\n\
    \    my $num_ones_at_middle = 0;\n    my $num_negatives_at_middle = 0;\n    my\
    \ $num_positives_at_middle = 0;\n    my $num_zeros_at_start = 0;\n    my $num_ones_at_start\
    \ = 0;\n    my $num_negatives_at_start = 0;\n    my $num_positives_at_start =\
    \ 0;\n    my $num_zeros_at_end = 0;\n    my $num_ones_at_end = 0;\n    my $num_negatives_at_end\
    \ = 0;\n    my $num_positives_at_end = 0;\n    my $num_zeros_at_middle = 0;\n\
    \    my $num_ones_at_middle = 0;\n    my $num_negatives_at_middle = 0;\n    my\
    \ $num_positives_at_middle = 0;\n    my $num_zeros_at_start = 0;\n    my $num_ones_at_start\
    \ = 0;\n    my $num_negatives_at_start = 0;\n    my $num_positives_at_start =\
    \ 0;\n    my $num_zeros_at_end = 0;\n    my $num_ones_at_end = 0;\n    my $num_negatives_at_end\
    \ = 0;\n    my $num_positives_at_end = 0;\n    my $num_zeros_at_middle = 0;\n\
    \    my $num_ones_at_middle = 0;\n    my $num_negatives_at_middle = 0;\n    my\
    \ $num_positives_at_middle = 0;\n    my $num_zeros_at_start = 0;\n    my $num_ones_at_start\
    \ = 0;\n    my $num_negatives_at_start = 0;\n    my $num_positives_at_start =\
    \ 0;\n    my $num_zeros_at_end = 0;\n    my $num_ones_at_end = 0;\n    my $num_negatives_at_end\
    \ = 0;\n    my $num_positives_at_end = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3hw8mfdz.pl line 110,
    at end of line

    syntax error at /tmp/tmp3hw8mfdz.pl line 110, at EOF

    Execution of /tmp/tmp3hw8mfdz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $len = 0;\n    my $max = 0;\n\
    \    my $max2 = 0;\n    my $max3 = 0;\n    my $max4 = 0;\n    my $max5 = 0;\n\
    \    my $max6 = 0;\n    my $max7 = 0;\n    my $max8 = 0;\n    my $max9 = 0;\n\
    \    my $max10 = 0;\n    my $max11 = 0;\n    my $max12 = 0;\n    my $max13 = 0;\n\
    \    my $max14 = 0;\n    my $max15 = 0;\n    my $max16 = 0;\n    my $max17 = 0;\n\
    \    my $max18 = 0;\n    my $max19 = 0;\n    my $max20 = 0;\n    my $max21 = 0;\n\
    \    my $max22 = 0;\n    my $max23 = 0;\n    my $max24 = 0;\n    my $max25 = 0;\n\
    \    my $max26 = 0;\n    my $max27 = 0;\n    my $max28 = 0;\n    my $max29 = 0;\n\
    \    my $max30 = 0;\n    my $max31 = 0;\n    my $max32 = 0;\n    my $max33 = 0;\n\
    \    my $max34 = 0;\n    my $max35 = 0;\n    my $max36 = 0;\n    my $max37 = 0;\n\
    \    my $max38 = 0;\n    my $max39 = 0;\n    my $max40 = 0;\n    my $max41 = 0;\n\
    \    my $max42 = 0;\n    my $max43 = 0;\n    my $max44 = 0;\n    my $max45 = 0;\n\
    \    my $max46 = 0;\n    my $max47 = 0;\n    my $max48 = 0;\n    my $max49 = 0;\n\
    \    my $max50 = 0;\n    my $max51 = 0;\n    my $max52 = 0;\n    my $max53 = 0;\n\
    \    my $max54 = 0;\n    my $max55 = 0;\n    my $max56 = 0;\n    my $max57 = 0;\n\
    \    my $max58 = 0;\n    my $max59 = 0;\n    my $max60 = 0;\n    my $max61 = 0;\n\
    \    my $max62 = 0;\n    my $max63 = 0;\n    my $max64 = 0;\n    my $max65 = 0;\n\
    \    my $max66 = 0;\n    my $max67 = 0;\n    my $max68 = 0;\n    my $max69 = 0;\n\
    \    my $max70 = 0;\n    my $max71 = 0;\n    my $max72 = 0;\n    my $max73 = 0;\n\
    \    my $max74 = 0;\n    my $max75 = 0;\n    my $max76 = 0;\n    my $max77 = 0;\n\
    \    my $max78 = 0;\n    my $max79 = 0;\n    my $max80 = 0;\n    my $max81 = 0;\n\
    \    my $max82 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpaz5i2_pm.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpaz5i2_pm.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpaz5i2_pm.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmpaz5i2_pm.pl line 137, at EOF\nExecution of /tmp/tmpaz5i2_pm.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len =\
    \ @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $tmp;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpyzw13mmk.pl line 58, at
    end of line

    syntax error at /tmp/tmpyzw13mmk.pl line 58, at EOF

    Execution of /tmp/tmpyzw13mmk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max = 0;\n    my $max_count = 0;\n    my $max_num = 0;\n    my $max_num_count\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my\
    \ $count = 0;\n    my $num_count = 0;\n    my $num_num_count = 0;\n    my $num_num_num_count\
    \ = 0;\n    my $num_num_num_num_count = 0;\n    my $num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_count = 0;\n    my $num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_count = 0;\n    my $num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_count = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_count = 0;\n \
    \   my $num_num_num_num_num_num_num_num_num_num_num_num_num_count = 0;\n    my\
    \ $num_num_num_num_num_num_num_num_num_num_num_num_num_num_count = 0;\n    my\
    \ $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count = 0;\n\
    \    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_count\
    \ = 0;\n    my $num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpaxdt24em.pl line 45, at end
    of line

    syntax error at /tmp/tmpaxdt24em.pl line 45, near "$num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpaxdt24em.pl line 84, at end of
    line

    syntax error at /tmp/tmpaxdt24em.pl line 84, at EOF

    Execution of /tmp/tmpaxdt24em.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $size = @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n\
    \    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpv9suz_f_.pl line 139,
    at end of line

    syntax error at /tmp/tmpv9suz_f_.pl line 139, at EOF

    Execution of /tmp/tmpv9suz_f_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbj6opm3r.pl line 137,
    at end of line

    syntax error at /tmp/tmpbj6opm3r.pl line 137, at EOF

    Execution of /tmp/tmpbj6opm3r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = scalar(@$arr);\n\
    \    my $max = -1;\n    my $min = 0;\n    my $temp = 0;\n    my $count = 0;\n\
    \    my $maxcount = 0;\n    my $maxcount = 0;\n    my $max = 0;\n    my $min =\
    \ 0;\n    my $max = 0;\n    my $min = 0;\n    my $max = 0;\n    my $max = 0;\n\
    \    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my\
    \ $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max\
    \ = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n\
    \    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my\
    \ $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max\
    \ = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n\
    \    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my\
    \ $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max\
    \ = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n\
    \    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my\
    \ $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max\
    \ = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n\
    \    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my\
    \ $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max\
    \ = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n\
    \    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my\
    \ $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max\
    \ = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n\
    \    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my $max = 0;\n    my\
    \ $max = 0;\n    my $max = 0;\n    my $max = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfy6x_v12.pl line 151,
    at end of line

    syntax error at /tmp/tmpfy6x_v12.pl line 151, at EOF

    Execution of /tmp/tmpfy6x_v12.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    my($max_num_ones);\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5px1w3jk.pl line 52, at
    end of line

    syntax error at /tmp/tmp5px1w3jk.pl line 52, at EOF

    Execution of /tmp/tmp5px1w3jk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $count = 0;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3\
    \ = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5\
    \ = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7\
    \ = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9\
    \ = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpq8whwb69.pl line 138,
    at end of line

    syntax error at /tmp/tmpq8whwb69.pl line 138, at EOF

    Execution of /tmp/tmpq8whwb69.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec2 = 0;\n    my $max_dec3\
    \ = 0;\n    my $max_dec4 = 0;\n    my $max_dec5 = 0;\n    my $max_dec6 = 0;\n\
    \    my $max_dec7 = 0;\n    my $max_dec8 = 0;\n    my $max_dec9 = 0;\n    my $max_dec10\
    \ = 0;\n    my $max_dec11 = 0;\n    my $max_dec12 = 0;\n    my $max_dec13 = 0;\n\
    \    my $max_dec14 = 0;\n    my $max_dec15 = 0;\n    my $max_dec16 = 0;\n    my\
    \ $max_dec17 = 0;\n    my $max_dec18 = 0;\n    my $max_dec19 = 0;\n    my $max_dec20\
    \ = 0;\n    my $max_dec21 = 0;\n    my $max_dec22 = 0;\n    my $max_dec23 = 0;\n\
    \    my $max_dec24 = 0;\n    my $max_dec25 = 0;\n    my $max_dec26 = 0;\n    my\
    \ $max_dec27 = 0;\n    my $max_dec28 = 0;\n    my $max_dec29 = 0;\n    my $max_dec30\
    \ = 0;\n    my $max_dec31 = 0;\n    my $max_dec32 = 0;\n    my $max_dec33 = 0;\n\
    \    my $max_dec34 = 0;\n    my $max_dec35 = 0;\n    my $max_dec36 = 0;\n    my\
    \ $max_dec37 = 0;\n    my $max_dec38 = 0;\n    my $max_dec39 = 0;\n    my $max_dec40\
    \ = 0;\n    my $max_dec41 = 0;\n    my $max_dec42 = 0;\n    my $max_dec43 = 0;\n\
    \    my $max_dec44 = 0;\n    my $max_dec45 = 0;\n    my $max_dec46 = 0;\n    my\
    \ $max_dec47 = 0;\n    my $max_dec48 = 0;\n    my $max_dec49 = 0;\n    my $max_dec50\
    \ = 0;\n    my $max_dec51 = 0;\n    my $max_dec52 = 0;\n    my $max_dec53 = 0;\n\
    \    my $max_dec54 = 0;\n    my $max_dec55 = 0;\n    my $max_dec56 = 0;\n    my\
    \ $max_dec57 = 0;\n    my $max_dec58 = 0;\n    my $max_dec59 = 0;\n    my $max_dec60\
    \ = 0;\n    my $max_dec61 = 0;\n    my $max_dec62 = 0;\n    my $max_dec63 = 0;\n\
    \    my $max_dec64 = 0;\n    my $max_dec65 = 0;\n    my $max_dec66 = 0;\n    my\
    \ $max_dec67 = 0;\n    my $max_dec68 = 0;\n    my $max_dec69 = 0;\n    my $max_dec70\
    \ = 0;\n    my $max_dec71 = 0;\n    my $max_dec72 = 0;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2oa4lr8f.pl line 124,
    at end of line

    syntax error at /tmp/tmp2oa4lr8f.pl line 124, at EOF

    Execution of /tmp/tmp2oa4lr8f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp;\n    my $cnt = 0;\n\
    \    my $max_cnt = 0;\n    my $max_cnt2 = 0;\n    my $max_cnt3 = 0;\n    my $max_cnt4\
    \ = 0;\n    my $max_cnt5 = 0;\n    my $max_cnt6 = 0;\n    my $max_cnt7 = 0;\n\
    \    my $max_cnt8 = 0;\n    my $max_cnt9 = 0;\n    my $max_cnt10 = 0;\n    my\
    \ $max_cnt11 = 0;\n    my $max_cnt12 = 0;\n    my $max_cnt13 = 0;\n    my $max_cnt14\
    \ = 0;\n    my $max_cnt15 = 0;\n    my $max_cnt16 = 0;\n    my $max_cnt17 = 0;\n\
    \    my $max_cnt18 = 0;\n    my $max_cnt19 = 0;\n    my $max_cnt20 = 0;\n    my\
    \ $max_cnt21 = 0;\n    my $max_cnt22 = 0;\n    my $max_cnt23 = 0;\n    my $max_cnt24\
    \ = 0;\n    my $max_cnt25 = 0;\n    my $max_cnt26 = 0;\n    my $max_cnt27 = 0;\n\
    \    my $max_cnt28 = 0;\n    my $max_cnt29 = 0;\n    my $max_cnt30 = 0;\n    my\
    \ $max_cnt31 = 0;\n    my $max_cnt32 = 0;\n    my $max_cnt33 = 0;\n    my $max_cnt34\
    \ = 0;\n    my $max_cnt35 = 0;\n    my $max_cnt36 = 0;\n    my $max_cnt37 = 0;\n\
    \    my $max_cnt38 = 0;\n    my $max_cnt39 = 0;\n    my $max_cnt40 = 0;\n    my\
    \ $max_cnt41 = 0;\n    my $max_cnt42 = 0;\n    my $max_cnt43 = 0;\n    my $max_cnt44\
    \ = 0;\n    my $max_cnt45 = 0;\n    my $max_cnt46 = 0;\n    my $max_cnt47 = 0;\n\
    \    my $max_cnt48 = 0;\n    my $max_cnt49 = 0;\n    my $max_cnt50 = 0;\n    my\
    \ $max_cnt51 = 0;\n    my $max_cnt52 = 0;\n    my $max_cnt53 = 0;\n    my $max_cnt54\
    \ = 0;\n    my $max_cnt55 = 0;\n    my $max_cnt56 = 0;\n    my $max_cnt57 = 0;\n\
    \    my $max_cnt58 = 0;\n    my $max_cnt59 = 0;\n    my $max_cnt60 = 0;\n    my\
    \ $max_cnt61 = 0;\n    my $max_cnt62 = 0;\n    my $max_cnt63 = 0;\n    my $max_cnt64\
    \ = 0;\n    my $max_cnt65 = 0;\n    my $max_cnt66 = 0;\n    my $max_cnt67 = 0;\n\
    \    my $max_cnt68 = 0;\n    my $max_cnt69 = 0;\n    my $max_cnt\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpujlwknfs.pl line 86, at end
    of line

    syntax error at /tmp/tmpujlwknfs.pl line 86, near "$max_cnt

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpujlwknfs.pl line 125, at end
    of line

    syntax error at /tmp/tmpujlwknfs.pl line 125, at EOF

    Execution of /tmp/tmpujlwknfs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $tmp84\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp6xlh_xd.pl line 97, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 97, near "$tmp84

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp6xlh_xd.pl line 136, at end
    of line

    syntax error at /tmp/tmpp6xlh_xd.pl line 136, at EOF

    Execution of /tmp/tmpp6xlh_xd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max = 0;\n    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp8nuoan7q.pl line 98, at end
    of line

    syntax error at /tmp/tmp8nuoan7q.pl line 98, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp8nuoan7q.pl line 137, at end
    of line

    syntax error at /tmp/tmp8nuoan7q.pl line 137, at EOF

    Execution of /tmp/tmp8nuoan7q.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n    my $max = 0;\n\
    \    my $min = 0;\n    my $maxcnt = 0;\n    my $mincnt = 0;\n    my $tmpcnt =\
    \ 0;\n    my $tmpmax = 0;\n    my $tmpmin = 0;\n    my $tmpmaxcnt = 0;\n    my\
    \ $tmpmincnt = 0;\n    my $tmpmax2 = 0;\n    my $tmpmin2 = 0;\n    my $tmpmax2cnt\
    \ = 0;\n    my $tmpmin2cnt = 0;\n    my $tmpmax3 = 0;\n    my $tmpmin3 = 0;\n\
    \    my $tmpmax3cnt = 0;\n    my $tmpmin3cnt = 0;\n    my $tmpmax4 = 0;\n    my\
    \ $tmpmin4 = 0;\n    my $tmpmax4cnt = 0;\n    my $tmpmin4cnt = 0;\n    my $tmpmax5\
    \ = 0;\n    my $tmpmin5 = 0;\n    my $tmpmax5cnt = 0;\n    my $tmpmin5cnt = 0;\n\
    \    my $tmpmax6 = 0;\n    my $tmpmin6 = 0;\n    my $tmpmax6cnt = 0;\n    my $tmpmin6cnt\
    \ = 0;\n    my $tmpmax7 = 0;\n    my $tmpmin7 = 0;\n    my $tmpmax7cnt = 0;\n\
    \    my $tmpmin7cnt = 0;\n    my $tmpmax8 = 0;\n    my $tmpmin8 = 0;\n    my $tmpmax8cnt\
    \ = 0;\n    my $tmpmin8cnt = 0;\n    my $tmpmax9 = 0;\n    my $tmpmin9 = 0;\n\
    \    my $tmpmax9cnt = 0;\n    my $tmpmin9cnt = 0;\n    my $tmpmax10 = 0;\n   \
    \ my $tmpmin10 = 0;\n    my $tmpmax10cnt = 0;\n    my $tmpmin10cnt = 0;\n    my\
    \ $tmpmax11 = 0;\n    my $tmpmin11 = 0;\n    my $tmpmax11cnt = 0;\n    my $tmpmin11cnt\
    \ = 0;\n    my $tmpmax12 = 0;\n    my $tmpmin12 = 0;\n    my $tmpmax12cnt = 0;\n\
    \    my $tmpmin12cnt = 0;\n    my $tmpmax13 = 0;\n    my $tmpmin13 = 0;\n    my\
    \ $tmpmax13cnt = 0;\n    my $tmpmin13cnt = 0;\n    my $tmpmax14 = 0;\n    my $tmpmin14\
    \ = 0;\n    my $tmpmax14cnt = 0;\n    my $tmpmin14cnt = 0;\n    my $tmpmax15 =\
    \ 0;\n    my $tmpmin15 = 0;\n    my $tmpmax15cnt = 0;\n    my $tmpmin15cnt = 0;\n\
    \    my $tmpmax16 = 0;\n    my $tmpmin16 = 0;\n    my $tmpmax16cnt = 0;\n    \n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqa8v1g1f.pl line 123,
    at end of line

    syntax error at /tmp/tmpqa8v1g1f.pl line 123, at EOF

    Execution of /tmp/tmpqa8v1g1f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $max = 0;\n\
    \    my $min = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n\
    \    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n \
    \   my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpn6gefif4.pl line 140,
    at end of line

    syntax error at /tmp/tmpn6gefif4.pl line 140, at EOF

    Execution of /tmp/tmpn6gefif4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_count = 0;\n  \
    \  my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpiae2y9th.pl line 113,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpiae2y9th.pl line 113, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpiae2y9th.pl line 152, at end of line\nsyntax\
    \ error at /tmp/tmpiae2y9th.pl line 152, at EOF\nExecution of /tmp/tmpiae2y9th.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n \
    \   my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n  \
    \  my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    my $\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpml7_zkb7.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpml7_zkb7.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpml7_zkb7.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmpml7_zkb7.pl line 139, at EOF\nExecution of /tmp/tmpml7_zkb7.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_rdhgi2r.pl line 138,
    at end of line

    syntax error at /tmp/tmp_rdhgi2r.pl line 138, at EOF

    Execution of /tmp/tmp_rdhgi2r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 1;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfxdgu46i.pl line 137,
    at end of line

    syntax error at /tmp/tmpfxdgu46i.pl line 137, at EOF

    Execution of /tmp/tmpfxdgu46i.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2 =\
    \ 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 =\
    \ 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 =\
    \ 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 =\
    \ 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 =\
    \ 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max43 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbj6opm3r.pl line 137,
    at end of line

    syntax error at /tmp/tmpbj6opm3r.pl line 137, at EOF

    Execution of /tmp/tmpbj6opm3r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxlen\
    \ = 0;\n    my $maxleni = 0;\n    my $maxlenj = 0;\n    my $maxlenlen = 0;\n \
    \   my $maxlenleni = 0;\n    my $maxlenlenj = 0;\n    my $maxlenlenlen = 0;\n\
    \    my $maxlenlenleni = 0;\n    my $maxlenlenlenj = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenleni = 0;\n    my $maxlenlenlenlenj = 0;\n    my $maxlenlenlenlenlen\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n \
    \   my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n \
    \   my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni\
    \ = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n \
    \   my $maxlenlenlenlenlenj = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj\
    \ = 0;\n    my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n \
    \   my $maxlenlenlenlenleni = 0;\n    my $maxlenlenlenlenlenj = 0;\n    my $\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpp7iziiwe.pl line 67,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpp7iziiwe.pl line 67, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpp7iziiwe.pl line 106, at end of line\nsyntax\
    \ error at /tmp/tmpp7iziiwe.pl line 106, at EOF\nExecution of /tmp/tmpp7iziiwe.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $maxi = 0;\n    my $mini\
    \ = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n\
    \    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n\
    \    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n\
    \    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6nwuazla.pl line 139,
    at end of line

    syntax error at /tmp/tmp6nwuazla.pl line 139, at EOF

    Execution of /tmp/tmp6nwuazla.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max_ones = 0;\n   \
    \ my $max_dec = 0;\n    my $max_dec_index = 0;\n    my $max_dec_val = 0;\n   \
    \ my $max_dec_val_pos = 0;\n    my $max_dec_val_neg = 0;\n    my $max_dec_val_zero\
    \ = 0;\n    my $max_dec_val_zero_index = 0;\n    my $max_dec_val_zero_val = 0;\n\
    \    my $max_dec_val_zero_pos = 0;\n    my $max_dec_val_zero_neg = 0;\n    my\
    \ $max_dec_val_zero_zero = 0;\n    my $max_dec_val_zero_zero_index = 0;\n    my\
    \ $max_dec_val_zero_zero_val = 0;\n    my $max_dec_val_zero_zero_pos = 0;\n  \
    \  my $max_dec_val_zero_zero_neg = 0;\n    my $max_dec_val_zero_zero_zero = 0;\n\
    \    my $max_dec_val_zero_zero_zero_index = 0;\n    my $max_dec_val_zero_zero_zero_val\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_pos = 0;\n    my $max_dec_val_zero_zero_zero_neg\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero = 0;\n    my $max_dec_val_zero_zero_zero_zero_index\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_val = 0;\n    my $max_dec_val_zero_zero_zero_zero_pos\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_neg = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_index = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_val\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_pos = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_neg\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_index\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_val = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_pos\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_neg = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_zero\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_zero_index = 0;\n  \
    \  my $max_dec_val_zero_zero_zero_zero_zero_zero_zero_val = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_zero_pos\
    \ = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_zero_neg = 0;\n    my\
    \ $max_dec_val_zero_zero_zero_zero_zero_zero_zero_zero = 0;\n    my $max_dec_val_zero_zero_zero_zero_zero_zero_zero_zero_index\
    \ = 0;\n    my $max_dec_val_zero_\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0tk7m3mc.pl line 58, at end
    of line

    syntax error at /tmp/tmp0tk7m3mc.pl line 58, near "$max_dec_val_zero_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0tk7m3mc.pl line 97, at end of
    line

    syntax error at /tmp/tmp0tk7m3mc.pl line 97, at EOF

    Execution of /tmp/tmp0tk7m3mc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $count\
    \ = 0;\n    my $max = 0;\n    my $min = 0;\n    my $tmp2 = 0;\n    my $tmp3 =\
    \ 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 =\
    \ 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpp612xbt6.pl line 98, at end
    of line

    syntax error at /tmp/tmpp612xbt6.pl line 98, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpp612xbt6.pl line 137, at end
    of line

    syntax error at /tmp/tmpp612xbt6.pl line 137, at EOF

    Execution of /tmp/tmpp612xbt6.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3\
    \ = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5\
    \ = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7\
    \ = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9\
    \ = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n    my $min42 = 0;\n    my $max43\
    \ = 0;\n    my $min43 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp4vt1moto.pl line 98,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp4vt1moto.pl line 98, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp4vt1moto.pl line 137, at end of line\nsyntax\
    \ error at /tmp/tmp4vt1moto.pl line 137, at EOF\nExecution of /tmp/tmp4vt1moto.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $len = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprd0s7fo2.pl line 98, at end
    of line

    syntax error at /tmp/tmprd0s7fo2.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprd0s7fo2.pl line 137, at end
    of line

    syntax error at /tmp/tmprd0s7fo2.pl line 137, at EOF

    Execution of /tmp/tmprd0s7fo2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $len = @$arr;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my\
    \ $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my\
    \ $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my\
    \ $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my\
    \ $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my\
    \ $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n  \
    \  my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n\
    \    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n\
    \    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n\
    \    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n\
    \    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n\
    \    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n\
    \    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n\
    \    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n\
    \    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n\
    \    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n\
    \    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n\
    \    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n\
    \    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n\
    \    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n\
    \    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n\
    \    my $min42 = 0;\n    my $max43 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmphh4ikv0t.pl line 137,
    at end of line

    syntax error at /tmp/tmphh4ikv0t.pl line 137, at EOF

    Execution of /tmp/tmphh4ikv0t.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp141b4epn.pl line 98, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 98, near "$min42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp141b4epn.pl line 137, at end
    of line

    syntax error at /tmp/tmp141b4epn.pl line 137, at EOF

    Execution of /tmp/tmp141b4epn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $n);\n    my($ones);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzytppbwt.pl line 52, at
    end of line

    syntax error at /tmp/tmpzytppbwt.pl line 52, at EOF

    Execution of /tmp/tmpzytppbwt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7yes9x98.pl line 98, at end
    of line

    syntax error at /tmp/tmp7yes9x98.pl line 98, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7yes9x98.pl line 137, at end
    of line

    syntax error at /tmp/tmp7yes9x98.pl line 137, at EOF

    Execution of /tmp/tmp7yes9x98.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sort) = ();\n\
    \    my($i, $j, $n);\n    my $len = @$arr;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n\
    \    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n\
    \    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n\
    \    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n\
    \    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n\
    \    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n\
    \    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n\
    \    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n\
    \    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n\
    \    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n\
    \    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n\
    \    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n\
    \    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n\
    \    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n\
    \    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n\
    \    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n\
    \    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n\
    \    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n\
    \    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n\
    \    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n\
    \    my $max42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpxtceac7m.pl line 135,
    at end of line

    syntax error at /tmp/tmpxtceac7m.pl line 135, at EOF

    Execution of /tmp/tmpxtceac7m.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min = 0;\n\
    \    my $cnt = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n  \
    \  my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n  \
    \  my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n\
    \    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n\
    \    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    my $tmp81\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpednd5xr2.pl line 98, at end
    of line

    syntax error at /tmp/tmpednd5xr2.pl line 98, near "$tmp81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpednd5xr2.pl line 137, at end
    of line

    syntax error at /tmp/tmpednd5xr2.pl line 137, at EOF

    Execution of /tmp/tmpednd5xr2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj =\
    \ 0;\n    my $maxj = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n\
    \    my $maxj = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n \
    \   my $maxj = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n  \
    \  my $maxj = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n   \
    \ my $maxj = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my\
    \ $maxj = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj\
    \ = 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj =\
    \ 0;\n    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n\
    \    my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n \
    \   my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n  \
    \  my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n   \
    \ my $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my\
    \ $max = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max\
    \ = 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max =\
    \ 0;\n    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max = 0;\n\
    \    my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max = 0;\n \
    \   my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max = 0;\n  \
    \  my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max = 0;\n   \
    \ my $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max = 0;\n    my\
    \ $maxi = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max = 0;\n    my $maxi\
    \ = 0;\n    my $maxj = 0;\n    my $maxj = 0;\n    my $max = 0;\n    my $maxi =\
    \ 0;\n    my $maxj = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpw_c3alzr.pl line 143,
    at end of line

    syntax error at /tmp/tmpw_c3alzr.pl line 143, at EOF

    Execution of /tmp/tmpw_c3alzr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $count\
    \ = 0;\n    my $max = 0;\n    my $min = 0;\n    my $min_index = 0;\n    my $max_index\
    \ = 0;\n    my $max_count = 0;\n    my $max_value = 0;\n    my $min_value = 0;\n\
    \    my $min_count = 0;\n    my $min_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index = 0;\n    my $max_value_index = 0;\n    my $max_value_index\
    \ = 0;\n    my $max_value_index\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpzvrkflw8.pl line 87, at end
    of line

    syntax error at /tmp/tmpzvrkflw8.pl line 87, near "$max_value_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpzvrkflw8.pl line 126, at end
    of line

    syntax error at /tmp/tmpzvrkflw8.pl line 126, at EOF

    Execution of /tmp/tmpzvrkflw8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $maxcnt;\n    my $mincnt;\n    my\
    \ $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n\
    \    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n\
    \    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n\
    \    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n\
    \    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n\
    \    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n\
    \    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n\
    \    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n\
    \    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n\
    \    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n\
    \    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n\
    \    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n\
    \    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n\
    \    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n\
    \    my $mincnt;\n    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n\
    \    my $maxcnt;\n    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n\
    \    my $minval;\n    my $maxval;\n    my $mincnt;\n    my $maxcnt;\n    my $minval;\n\
    \    my $maxval;\n    my $mincnt;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl4d59p_f.pl line 104, at end
    of line

    syntax error at /tmp/tmpl4d59p_f.pl line 104, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl4d59p_f.pl line 143, at end
    of line

    syntax error at /tmp/tmpl4d59p_f.pl line 143, at EOF

    Execution of /tmp/tmpl4d59p_f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $count = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n   \
    \ my $maxval = 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my $mincount\
    \ = 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my\
    \ $mincount = 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my $maxcount =\
    \ 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my\
    \ $maxcount = 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my $minval =\
    \ 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my\
    \ $minval = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my $maxval =\
    \ 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my\
    \ $maxval = 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my $mincount =\
    \ 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my\
    \ $mincount = 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my $maxcount =\
    \ 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my\
    \ $maxcount = 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my $minval =\
    \ 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my\
    \ $minval = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my $maxval =\
    \ 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my\
    \ $maxval = 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my $mincount =\
    \ 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my\
    \ $mincount = 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my $maxcount =\
    \ 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my $minval = 0;\n    my\
    \ $maxcount = 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my $minval =\
    \ 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my $maxval = 0;\n    my\
    \ $minval = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my $maxval =\
    \ 0;\n    my $minval = 0;\n    my $maxcount = 0;\n    my $mincount = 0;\n    my\
    \ $maxval = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpm8_figae.pl line 144,
    at end of line

    syntax error at /tmp/tmpm8_figae.pl line 144, at EOF

    Execution of /tmp/tmpm8_figae.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $n = @$arr;\n    my $max = -1;\n    my\
    \ $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprpim5rnn.pl line 137,
    at end of line

    syntax error at /tmp/tmprpim5rnn.pl line 137, at EOF

    Execution of /tmp/tmprpim5rnn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $max = 0;\n    my $min = 0;\n    my $cur = 0;\n    my $cnt = 0;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n    my $cnt2 = 0;\n    my\
    \ $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n    my\
    \ $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n    my\
    \ $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n  \
    \  my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n\
    \    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n\
    \    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n\
    \    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n\
    \    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n\
    \    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n\
    \    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n\
    \    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n\
    \    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n\
    \    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n\
    \    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n\
    \    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n\
    \    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n\
    \    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n\
    \    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n\
    \    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n\
    \    my $cnt79 = 0;\n    my $cnt80 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpeve6m8n5.pl line 137,
    at end of line

    syntax error at /tmp/tmpeve6m8n5.pl line 137, at EOF

    Execution of /tmp/tmpeve6m8n5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my\
    \ $cnt;\n    my $max;\n    my $min;\n    my $mincnt;\n    my $maxcnt;\n    my\
    \ $maxcnt2;\n    my $maxcnt3;\n    my $maxcnt4;\n    my $maxcnt5;\n    my $maxcnt6;\n\
    \    my $maxcnt7;\n    my $maxcnt8;\n    my $maxcnt9;\n    my $maxcnt10;\n   \
    \ my $maxcnt11;\n    my $maxcnt12;\n    my $maxcnt13;\n    my $maxcnt14;\n   \
    \ my $maxcnt15;\n    my $maxcnt16;\n    my $maxcnt17;\n    my $maxcnt18;\n   \
    \ my $maxcnt19;\n    my $maxcnt20;\n    my $maxcnt21;\n    my $maxcnt22;\n   \
    \ my $maxcnt23;\n    my $maxcnt24;\n    my $maxcnt25;\n    my $maxcnt26;\n   \
    \ my $maxcnt27;\n    my $maxcnt28;\n    my $maxcnt29;\n    my $maxcnt30;\n   \
    \ my $maxcnt31;\n    my $maxcnt32;\n    my $maxcnt33;\n    my $maxcnt34;\n   \
    \ my $maxcnt35;\n    my $maxcnt36;\n    my $maxcnt37;\n    my $maxcnt38;\n   \
    \ my $maxcnt39;\n    my $maxcnt40;\n    my $maxcnt41;\n    my $maxcnt42;\n   \
    \ my $maxcnt43;\n    my $maxcnt44;\n    my $maxcnt45;\n    my $maxcnt46;\n   \
    \ my $maxcnt47;\n    my $maxcnt48;\n    my $maxcnt49;\n    my $maxcnt50;\n   \
    \ my $maxcnt51;\n    my $maxcnt52;\n    my $maxcnt53;\n    my $maxcnt54;\n   \
    \ my $maxcnt55;\n    my $maxcnt56;\n    my $maxcnt57;\n    my $maxcnt58;\n   \
    \ my $maxcnt59;\n    my $maxcnt60;\n    my $maxcnt61;\n    my $maxcnt62;\n   \
    \ my $maxcnt63;\n    my $maxcnt64;\n    my $maxcnt65;\n    my $maxcnt66;\n   \
    \ my $maxcnt67;\n    my $maxcnt68;\n    my $maxcnt69;\n    my $maxcnt70;\n   \
    \ my $maxcnt71;\n    my $maxcnt72;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpdl5y0yxv.pl line 88, at end
    of line

    syntax error at /tmp/tmpdl5y0yxv.pl line 88, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpdl5y0yxv.pl line 127, at end
    of line

    syntax error at /tmp/tmpdl5y0yxv.pl line 127, at EOF

    Execution of /tmp/tmpdl5y0yxv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n\
    \    my($i, $j, $num_ones);\n    my($max_num_ones);\n    my($max_num_zeros);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6cudb8pr.pl line 53, at
    end of line

    syntax error at /tmp/tmp6cudb8pr.pl line 53, at EOF

    Execution of /tmp/tmp6cudb8pr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $n = @$arr;\n    my $ones = 0;\n    my\
    \ $dec = 0;\n    my $tmp;\n    my $cmp;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpncopqh2f.pl line 57, at
    end of line

    syntax error at /tmp/tmpncopqh2f.pl line 57, at EOF

    Execution of /tmp/tmpncopqh2f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n    my $max = -1;\n   \
    \ my $min = 0;\n    my $cur = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpbih3od00.pl line 100, at end
    of line

    syntax error at /tmp/tmpbih3od00.pl line 100, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpbih3od00.pl line 139, at end
    of line

    syntax error at /tmp/tmpbih3od00.pl line 139, at EOF

    Execution of /tmp/tmpbih3od00.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $max2\
    \ = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4\
    \ = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6\
    \ = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8\
    \ = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10\
    \ = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12\
    \ = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14\
    \ = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16\
    \ = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18\
    \ = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20\
    \ = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22\
    \ = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24\
    \ = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26\
    \ = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28\
    \ = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30\
    \ = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32\
    \ = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34\
    \ = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36\
    \ = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38\
    \ = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40\
    \ = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42\
    \ = 0;\n    my $min42 = 0;\n    my $max\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpjqcv9rx5.pl line 98, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 98, near "$max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpjqcv9rx5.pl line 137, at end
    of line

    syntax error at /tmp/tmpjqcv9rx5.pl line 137, at EOF

    Execution of /tmp/tmpjqcv9rx5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n  \
    \  my($i, $j, $n);\n    \n    foreach $i (@$arr) {\n        $n = 0;\n        $j\
    \ = 0;\n        foreach $j (@$arr) {\n            if ($i eq $j) {\n          \
    \      $n++;\n                next;\n            }\n            if ($n > 0) {\n\
    \                push(@sorted, $i);\n                last;\n            }\n  \
    \      }\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013527
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $tmp82\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpq1_uy66_.pl line 97, at end
    of line

    syntax error at /tmp/tmpq1_uy66_.pl line 97, near "$tmp82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpq1_uy66_.pl line 136, at end
    of line

    syntax error at /tmp/tmpq1_uy66_.pl line 136, at EOF

    Execution of /tmp/tmpq1_uy66_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013527
