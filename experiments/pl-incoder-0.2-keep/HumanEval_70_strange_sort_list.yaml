name: HumanEval_70_strange_sort_list
language: humaneval_to_perl.py
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# strange_sort_list([1, 2, 3, 4]) == [1,\
  \ 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n# strange_sort_list([])\
  \ == []\nsub strange_sort_list {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5,\
  \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5,\
  \ -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted_list = ();\n    my $min_value = $lst[0];\n    my $max_value\
    \ = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min_value) {\n\
    \            $min_value = $num;\n        } elsif ($num > $max_value) {\n     \
    \       $max_value = $num;\n        }\n    }\n    foreach my $num (@$lst) {\n\
    \        if ($num == $min_value) {\n            push(@sorted_list, $max_value);\n\
    \        } elsif ($num == $max_value) {\n            push(@sorted_list, $min_value);\n\
    \        } else {\n            push(@sorted_list, $num);\n        }\n    }\n \
    \   return @sorted_list;\n}", "    my @sorted = ();\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min)\
    \ {\n            $min = $num;\n        } elsif ($num > $max) {\n            $max\
    \ = $num;\n        } else {\n            push(@sorted, $num);\n        }\n   \
    \ }\n    foreach my $num (@sorted) {\n        if ($num < $min) {\n           \
    \ push(@sorted, $min);\n            $min = $num;\n        } elsif ($num > $max)\
    \ {\n            push(@sorted, $max);\n            $max = $num;\n        }\n \
    \   }\n    return @sorted;\n}", "    my @sorted_list = ();\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min)\
    \ {\n            $min = $num;\n        } elsif ($num > $max) {\n            $max\
    \ = $num;\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num ==\
    \ $min) {\n            push(@sorted_list, $min);\n        } elsif ($num == $max)\
    \ {\n            push(@sorted_list, $max);\n        } else {\n            push(@sorted_list,\
    \ $num);\n        }\n    }\n    return @sorted_list;\n}", "    my @sorted = ();\n\
    \    my $min = $lst[0];\n    my $max = $lst[0];\n    foreach my $num (@$lst) {\n\
    \        if ($num < $min) {\n            $min = $num;\n        } elsif ($num >\
    \ $max) {\n            $max = $num;\n        } else {\n            push(@sorted,\
    \ $num);\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num <\
    \ $min) {\n            push(@sorted, $num);\n        } elsif ($num > $max) {\n\
    \            push(@sorted, $num);\n        } else {\n            push(@sorted,\
    \ $min);\n        }\n    }\n    return @sorted;\n}", "    my @sorted = ();\n \
    \   my $min = $lst[0];\n    my $max = $lst[0];\n    foreach my $num (@$lst) {\n\
    \        if ($num < $min) {\n            $min = $num;\n        } elsif ($num >\
    \ $max) {\n            $max = $num;\n        } else {\n            push(@sorted,\
    \ $num);\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num <\
    \ $min) {\n            $min = $num;\n        } elsif ($num > $max) {\n       \
    \     $max = $num;\n        } else {\n            push(@sorted, $num);\n     \
    \   }\n    }\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n    \
    \        $min = $num;\n        } elsif ($num > $max) {\n            $max = $num;\n\
    \        } else {\n            push(@sorted, $num);\n        }\n    }\n    return\
    \ @sorted;\n}", "    my @sorted_list = ();\n    my $min = $lst[0];\n    my $max\
    \ = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n    \
    \        $min = $num;\n        }\n        if ($num > $max) {\n            $max\
    \ = $num;\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num <\
    \ $min) {\n            push (@sorted_list, $min);\n            $min = $num;\n\
    \        }\n        if ($num > $max) {\n            push (@sorted_list, $max);\n\
    \            $max = $num;\n        }\n        push (@sorted_list, $num);\n   \
    \ }\n    return @sorted_list;\n}", "    my @sorted = ();\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    foreach my $i (@$lst) {\n        if ($i < $min) {\n\
    \            $min = $i;\n        } elsif ($i > $max) {\n            $max = $i;\n\
    \        } else {\n            push (@sorted, $i);\n        }\n    }\n    foreach\
    \ my $i (@$lst) {\n        if ($i < $min) {\n            $min = $i;\n        }\
    \ elsif ($i > $max) {\n            $max = $i;\n        } else {\n            push\
    \ (@sorted, $i);\n        }\n    }\n    foreach my $i (@$lst) {\n        if ($i\
    \ < $min) {\n            $min = $i;\n        } elsif ($i > $max) {\n         \
    \   $max = $i;\n        } else {\n            push (@sorted, $i);\n        }\n\
    \    }\n    return @sorted;\n}", "    my @sorted_lst = ();\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min)\
    \ {\n            $min = $num;\n        } elsif ($num > $max) {\n            $max\
    \ = $num;\n        } else {\n            push @sorted_lst, $num;\n        }\n\
    \    }\n    push @sorted_lst, $min;\n    push @sorted_lst, $max;\n    return @sorted_lst;\n\
    }", "    my @sorted_list = ();\n    my $min_value = $lst[0];\n    my $max_value\
    \ = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min_value) {\n\
    \            $min_value = $num;\n        }\n        if ($num > $max_value) {\n\
    \            $max_value = $num;\n        }\n    }\n    foreach my $num (@$lst)\
    \ {\n        if ($num < $min_value) {\n            push (@sorted_list, $min_value);\n\
    \            $min_value = $num;\n        }\n        if ($num > $max_value) {\n\
    \            push (@sorted_list, $max_value);\n            $max_value = $num;\n\
    \        }\n        push (@sorted_list, $num);\n    }\n    return @sorted_list;\n\
    }", "    my @sorted = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n  \
    \  foreach my $i (@$lst) {\n        if ($i < $min) {\n            $min = $i;\n\
    \        } elsif ($i > $max) {\n            $max = $i;\n        }\n    }\n   \
    \ foreach my $i (@$lst) {\n        if ($i < $min) {\n            push (@sorted,\
    \ $min);\n            $min = $i;\n        } elsif ($i > $max) {\n            push\
    \ (@sorted, $max);\n            $max = $i;\n        } else {\n            push\
    \ (@sorted, $i);\n        }\n    }\n    push (@sorted, $min);\n    push (@sorted,\
    \ $max);\n    return @sorted;\n}", "    my @sorted_lst;\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min)\
    \ {\n            $min = $num;\n        } elsif ($num > $max) {\n            $max\
    \ = $num;\n        } else {\n            push @sorted_lst, $num;\n        }\n\
    \    }\n    push @sorted_lst, $min;\n    push @sorted_lst, $max;\n    return @sorted_lst;\n\
    }", "    my @sorted_lst;\n    my $min = $lst[0];\n    my $max = $lst[0];\n   \
    \ foreach my $num (@$lst) {\n        if ($num < $min) {\n            $min = $num;\n\
    \        }\n        if ($num > $max) {\n            $max = $num;\n        }\n\
    \    }\n    foreach my $num (@$lst) {\n        if ($num == $min) {\n         \
    \   push (@sorted_lst, $min);\n        }\n        if ($num == $max) {\n      \
    \      push (@sorted_lst, $max);\n        }\n        push (@sorted_lst, $num);\n\
    \    }\n    return @sorted_lst;\n}", "    my @sorted = ();\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    foreach my $i (@$lst) {\n        if ($i < $min) {\n\
    \            $min = $i;\n        } elsif ($i > $max) {\n            $max = $i;\n\
    \        }\n    }\n    foreach my $i (@$lst) {\n        if ($i < $min) {\n   \
    \         push (@sorted, $min);\n            $min = $i;\n        } elsif ($i >\
    \ $max) {\n            push (@sorted, $max);\n            $max = $i;\n       \
    \ } else {\n            push (@sorted, $i);\n        }\n    }\n    push (@sorted,\
    \ $min);\n    push (@sorted, $max);\n    return @sorted;\n}", "    my @sorted\
    \ = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n    foreach my $num (@$lst)\
    \ {\n        if ($num < $min) {\n            $min = $num;\n        } elsif ($num\
    \ > $max) {\n            $max = $num;\n        } else {\n            push (@sorted,\
    \ $num);\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num <\
    \ $min) {\n            $min = $num;\n        } elsif ($num > $max) {\n       \
    \     $max = $num;\n        } else {\n            push (@sorted, $num);\n    \
    \    }\n    }\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n   \
    \         $min = $num;\n        } elsif ($num > $max) {\n            $max = $num;\n\
    \        } else {\n            push (@sorted, $num);\n        }\n    }\n    return\
    \ @sorted;\n}", "    my @sorted_lst = ();\n    my $min = $lst[0];\n    my $max\
    \ = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n    \
    \        $min = $num;\n        } elsif ($num > $max) {\n            $max = $num;\n\
    \        } else {\n            push(@sorted_lst, $num);\n        }\n    }\n  \
    \  foreach my $num (@sorted_lst) {\n        push(@sorted_lst, $num);\n    }\n\
    \    return @sorted_lst;\n}", "    my @sorted_list = ();\n    my $min = @$lst\
    \ ? $lst[0] : 0;\n    my $max = @$lst ? $lst[-1] : 0;\n    my $i;\n    for ($i\
    \ = 0; $i < @$lst; $i++) {\n        my $val = $lst->[$i];\n        if ($val <\
    \ $min) {\n            $min = $val;\n        } elsif ($val > $max) {\n       \
    \     $max = $val;\n        }\n    }\n    for ($i = 0; $i < @$lst; $i++) {\n \
    \       my $val = $lst->[$i];\n        if ($val < $min) {\n            $min =\
    \ $val;\n        } elsif ($val > $max) {\n            $max = $val;\n        }\n\
    \        push(@sorted_list, $val);\n    }\n    return @sorted_list;\n}", "   \
    \ my @sorted = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n    foreach\
    \ my $i (@$lst) {\n        if ($i < $min) {\n            $min = $i;\n        }\
    \ elsif ($i > $max) {\n            $max = $i;\n        }\n    }\n    foreach my\
    \ $i (@$lst) {\n        if ($i < $min) {\n            push (@sorted, $min);\n\
    \            $min = $i;\n        } elsif ($i > $max) {\n            push (@sorted,\
    \ $max);\n            $max = $i;\n        } else {\n            push (@sorted,\
    \ $i);\n        }\n    }\n    push (@sorted, $min);\n    push (@sorted, $max);\n\
    \    return @sorted;\n}", "    my @sorted_list = ();\n    my $min_value = $lst[0];\n\
    \    my $max_value = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num\
    \ < $min_value) {\n            $min_value = $num;\n        } elsif ($num > $max_value)\
    \ {\n            $max_value = $num;\n        }\n    }\n    foreach my $num (@$lst)\
    \ {\n        if ($num < $min_value) {\n            push (@sorted_list, $min_value);\n\
    \            $min_value = $num;\n        } elsif ($num > $max_value) {\n     \
    \       push (@sorted_list, $max_value);\n            $max_value = $num;\n   \
    \     } else {\n            push (@sorted_list, $num);\n        }\n    }\n   \
    \ push (@sorted_list, $min_value);\n    push (@sorted_list, $max_value);\n   \
    \ return @sorted_list;\n}", "    my @sorted_list = ();\n    my $min = pop(@$lst);\n\
    \    my $max = pop(@$lst);\n    my $mid = pop(@$lst);\n    foreach my $num (@$lst)\
    \ {\n        if ($num < $min) {\n            $min = $num;\n        } elsif ($num\
    \ > $max) {\n            $max = $num;\n        } elsif ($num == $mid) {\n    \
    \        $mid = $num;\n        } else {\n            push(@sorted_list, $num);\n\
    \        }\n    }\n    push(@sorted_list, $min);\n    push(@sorted_list, $max);\n\
    \    push(@sorted_list, $mid);\n    return @sorted_list;\n}", "    my @sorted_list\
    \ = ();\n    my $min_value = $lst[0];\n    my $max_value = $lst[0];\n    foreach\
    \ my $num (@$lst) {\n        if ($num < $min_value) {\n            $min_value\
    \ = $num;\n        }\n        if ($num > $max_value) {\n            $max_value\
    \ = $num;\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num ==\
    \ $min_value) {\n            $min_value = $max_value;\n            $max_value\
    \ = $num;\n        }\n        if ($num == $max_value) {\n            $max_value\
    \ = $min_value;\n            $min_value = $num;\n        }\n        push(@sorted_list,\
    \ $num);\n    }\n    return @sorted_list;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
