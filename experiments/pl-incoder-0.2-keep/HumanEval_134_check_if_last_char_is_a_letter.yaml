name: HumanEval_134_check_if_last_char_is_a_letter
language: humaneval_to_perl.py
prompt: "# Create a function that returns True if the last character\n# of a given\
  \ string is an alphabetical character and is not\n# a part of a word, and False\
  \ otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n\
  # check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n# check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n# check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n# check_if_last_char_is_a_letter(\"\") \u279E False\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($last_char) = substr($txt, length($txt) - 1, 1);\n    return\
    \ $last_char !~ /^[[:alpha:]]+$/;\n}", "    return $txt =~ /^[a-z]$/i && ! $txt\
    \ =~ /[a-z]+$/i;\n}", "    return $txt =~ /^[a-z]$/i && ! $txt =~ /[a-z]+$/i;\n\
    }", "    my $last_char = substr($txt, length($txt) - 1, 1);\n    my $is_letter\
    \ = lc($last_char) =~ /[a-z]/i;\n    return $is_letter;\n}", "    return $txt\
    \ =~ /^[a-z]$/i && ! $txt =~ /[a-z]+$/i;\n}", "    return $txt if $txt =~ /^[a-z]+$/i;\n\
    \    return $txt =~ /^[a-z]+$/i;\n}", "    return $txt =~ /^[a-z]$/i && ! $txt\
    \ =~ /[a-z]+$/i;\n}", "    return $txt =~ /^[a-z]+$/i && ! $txt =~ /[a-z]+$/i;\n\
    }", "    my $last_char = substr($txt, length($txt)-1, 1);\n    return $last_char\
    \ =~ /\\w/ && ! $last_char =~ /\\w$/;\n}", "    my($last_char) = substr($txt,\
    \ length($txt)-1, 1);\n    my($is_a_letter) = !($last_char =~ /\\w/);\n    return\
    \ $is_a_letter;\n}", "    my $last_char = substr($txt, length($txt)-1, 1);\n \
    \   return $last_char =~ /^[a-zA-Z]$/;\n}", "    return $txt =~ /^[a-z]$/i &&\
    \ ! $txt =~ /[a-z]+$/i;\n}", "    return $txt =~ /^[a-z]$/i && ! $txt =~ /[a-z\
    \ ]+$/i;\n}", "    return $txt =~ /^[a-z]$/i && ! $txt =~ /[a-z]+$/i;\n}", " \
    \   return $txt =~ /^[a-z]$/i && ! $txt =~ /[a-z]+$/i;\n}", "    my($last_char)\
    \ = substr($txt, length($txt) - 1, 1);\n    my($is_letter) = !($last_char =~ /\\\
    w/);\n    return $is_letter;\n}", "    my $last_char = substr($txt, length($txt)\
    \ - 1, 1);\n    return $last_char !~ /\\w/;\n}", "    return $txt =~ /^[a-z]+$/i\
    \ && ! $txt =~ /[a-z]+$/i;\n}", "    my $last_char = $txt->[-1];\n    return $last_char\
    \ =~ /\\w/ && ! $last_char =~ /\\w$/;\n}", "    return $txt =~ /^[^ ]+$/ && $txt\
    \ !~ /\\w$/;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
