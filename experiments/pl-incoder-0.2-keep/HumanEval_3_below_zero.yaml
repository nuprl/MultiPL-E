name: HumanEval_3_below_zero
language: humaneval_to_perl.py
prompt: "# You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n# zero balance. Your task is to detect if at any point the balance\
  \ of account fallls below zero, and\n# at that point function should return True.\
  \ Otherwise it should return False.\n# >>> below_zero([1, 2, 3])\n# False\n# >>>\
  \ below_zero([1, 2, -4, 5])\n# True\nsub below_zero {\n    my($operations) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&below_zero;\n\
  \        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, -3, 1, 2,\
  \ -3]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 2, -4, 5, 6]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -1, 2, -2, 5,\
  \ -5, 4, -4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, -1, 2, -2, 5, -5, 4, -5]),1)) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ -2, 2, -2, 5, -5, 4, -4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $balance = 0;\n    foreach my $operation (@$operations) {\n\
    \        my $type = $operation->[0];\n        my $amount = $operation->[1];\n\
    \        if ($type eq 'deposit') {\n            $balance += $amount;\n       \
    \ } elsif ($type eq 'withdraw') {\n            $balance -= $amount;\n        }\n\
    \    }\n    return $balance < 0;\n}", "    my $balance = shift(@$operations);\n\
    \    foreach my $operation (@$operations) {\n        if ($operation < 0) {\n \
    \           $balance -= $operation;\n        } else {\n            $balance +=\
    \ $operation;\n        }\n    }\n    return $balance < 0;\n}", "    my $balance\
    \ = shift;\n    my $i = 0;\n    my $found = 0;\n    foreach my $operation (@$operations)\
    \ {\n        if ($balance < 0) {\n            $found = 1;\n            last;\n\
    \        }\n        elsif ($balance == 0) {\n            $found = 1;\n       \
    \     last;\n        }\n        $balance += $operation->{amount};\n        $i++;\n\
    \    }\n    return $found;\n}", "    my $balance = 0;\n    foreach my $operation\
    \ (@$operations) {\n        if ($operation eq 'deposit') {\n            $balance\
    \ += $operation->{amount};\n        } elsif ($operation eq 'withdraw') {\n   \
    \         $balance -= $operation->{amount};\n        }\n    }\n    return $balance\
    \ < 0;\n}", "    my $balance = 0;\n    foreach my $operation (@$operations) {\n\
    \        if ($operation eq 'deposit') {\n            $balance += $operation->{amount};\n\
    \        }\n        elsif ($operation eq 'withdraw') {\n            $balance -=\
    \ $operation->{amount};\n        }\n    }\n    return $balance < 0;\n}", "   \
    \ my $balance = shift(@$operations);\n    foreach my $operation (@$operations)\
    \ {\n        if ($operation < 0) {\n            return 1;\n        }\n       \
    \ $balance -= $operation;\n    }\n    return $balance < 0;\n}", "    my $balance\
    \ = shift(@$operations);\n    my $i = 0;\n    foreach my $operation (@$operations)\
    \ {\n        if ($operation < 0) {\n            $balance += $operation;\n    \
    \    } else {\n            $balance -= $operation;\n        }\n        if ($balance\
    \ < 0) {\n            return 1;\n        }\n        $i++;\n    }\n    return 0;\n\
    }", "    my $balance = 0;\n    foreach my $operation (@$operations) {\n      \
    \  if ($operation eq 'deposit') {\n            $balance += $operation->{amount};\n\
    \        } elsif ($operation eq 'withdraw') {\n            $balance -= $operation->{amount};\n\
    \        } else {\n            die \"Unknown operation $operation\";\n       \
    \ }\n    }\n    return $balance < 0;\n}", "    my $balance = 0;\n    foreach my\
    \ $operation (@$operations) {\n        if ($operation eq 'deposit') {\n      \
    \      $balance += $operation->{amount};\n        }\n        elsif ($operation\
    \ eq 'withdraw') {\n            $balance -= $operation->{amount};\n        }\n\
    \    }\n    return $balance < 0;\n}", "    my $balance = 0;\n    foreach my $operation\
    \ (@$operations) {\n        if ($operation eq 'deposit') {\n            $balance\
    \ += $operation->{amount};\n        } elsif ($operation eq 'withdraw') {\n   \
    \         $balance -= $operation->{amount};\n        }\n    }\n    return $balance\
    \ < 0;\n}", "    my $balance = 0;\n    foreach my $operation (@$operations) {\n\
    \        if ($operation eq 'deposit') {\n            $balance += $operation->{amount};\n\
    \        } elsif ($operation eq 'withdraw') {\n            $balance -= $operation->{amount};\n\
    \        }\n    }\n    return $balance < 0;\n}", "    my $balance = shift(@$operations);\n\
    \    foreach my $operation (@$operations) {\n        if ($operation < 0) {\n \
    \           $balance -= $operation;\n        }\n        else {\n            $balance\
    \ += $operation;\n        }\n    }\n    return $balance < 0;\n}", "    my $balance\
    \ = 0;\n    foreach my $op (@$operations) {\n        if ($op == 1) {\n       \
    \     $balance += $op->{amount};\n        }\n        elsif ($op == -1) {\n   \
    \         $balance -= $op->{amount};\n        }\n    }\n    return $balance <\
    \ 0;\n}", "    my $balance = $operations[-1];\n    foreach my $operation (@$operations)\
    \ {\n        if ($operation < 0) {\n            return 0;\n        }\n       \
    \ $balance -= $operation;\n    }\n    return $balance < 0;\n}", "    my $balance\
    \ = 0;\n    foreach my $operation (@$operations) {\n        if ($operation eq\
    \ 'deposit') {\n            $balance += $operation->{amount};\n        } elsif\
    \ ($operation eq 'withdraw') {\n            $balance -= $operation->{amount};\n\
    \        }\n    }\n    return $balance < 0;\n}", "    my $balance = shift(@$operations);\n\
    \    foreach my $operation (@$operations) {\n        if ($balance < 0) {\n   \
    \         return 1;\n        }\n        $balance -= $operation;\n    }\n    return\
    \ 0;\n}", "    my $balance = 0;\n    foreach my $operation (@$operations) {\n\
    \        if ($operation eq 'deposit') {\n            $balance += $operation->{amount};\n\
    \        } elsif ($operation eq 'withdraw') {\n            $balance -= $operation->{amount};\n\
    \        }\n    }\n    return $balance < 0;\n}", "    my $balance = 0;\n    foreach\
    \ my $operation (@$operations) {\n        if ($operation eq 'deposit') {\n   \
    \         $balance += $operation->{amount};\n        } elsif ($operation eq 'withdraw')\
    \ {\n            $balance -= $operation->{amount};\n        }\n    }\n    return\
    \ $balance < 0;\n}", "    my $balance = 0;\n    foreach my $operation (@$operations)\
    \ {\n        if ($operation eq 'deposit') {\n            $balance += $operation->{amount};\n\
    \        } elsif ($operation eq 'withdraw') {\n            $balance -= $operation->{amount};\n\
    \        }\n    }\n    return $balance < 0;\n}", "    my $balance = 0;\n    foreach\
    \ my $operation (@$operations) {\n        if ($operation eq 'deposit') {\n   \
    \         $balance += $operation->{amount};\n        } elsif ($operation eq 'withdraw')\
    \ {\n            $balance -= $operation->{amount};\n        }\n    }\n    return\
    \ $balance < 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
