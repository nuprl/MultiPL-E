completions:
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([4, 1, 2, 2,\
  \ 3, 1]).\n<|/ c |>\n<| c |>\nIt does work. Try search([4, 1, 2, 2, 3, 1]).\n<|/\
  \ c |>\n<| c |>\nIt doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n<|\
  \ c |>\nIt does work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n<| c |>\nIt does\
  \ work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n<| a tags=perl,algorithm |>\n\
  <code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    if($freq > $max)\
  \ {\n        return -1;\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try search([4, 1, 2, 2,\
  \ 3, 1]).\n<|/ c |>\n<| c |>\nIt does work. Try search([4, 1, 2, 2, 3, 1]).\n<|/\
  \ c |>\n<| c |>\nIt doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n<|\
  \ c |>\nIt doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n<| c |>\nIt\
  \ doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n<| a tags=perl,algorithm\
  \ |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max\
  \ if $freq >= $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return $max if\
  \ $freq >= $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num == $max;\n        $max = $num if $num > $max;\n    }\n    return $freq\
  \ > $max ? $max : -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a tags=perl,algorithm |>\n<| c |>\nThe question was to find the greatest\
  \ integer that appears more than once.\n<|/ c |>\n<| c |>\nI missed that part in\
  \ the question. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis solution does\
  \ not work if the list contains negative numbers. For example, search([-1, -2, -3])\
  \ returns -1 instead of -2 as the greatest integer that appears more than once.\n\
  <|/ c |>\n<| c |>\n: I missed that part in the question. Thanks for pointing it\
  \ out.\n<|/ c |>\n<| c |>\n: I missed that part in the question. Thanks for pointing\
  \ it out.\n<|/ c |>\n<| a tags=perl,algorithm |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a dscore=1 |>\n<| a tags=perl,algorithm |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            $max = $num if $num > $max;\n            $maxFreq\
  \ += $num;\n        }\n    }\n    return $max if $maxFreq >= $max;\n    return -1;\n\
  }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n\
  <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for that.\n\
  <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for that.\n\
  <|/ c |>\n<| c |>\nThis doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n\
  <| c |>\nI see what you mean. I've updated my answer to account for that.\n<|/ c\
  \ |>\n<| a tags=algorithm,perl,arrays |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            $max = $num;\n            $maxFreq = $lst->{$num};\n\
  \        }\n    }\n    return $max if ($maxFreq >= $max);\n    return -1;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try search([4, 1, 2, 2,\
  \ 3, 1]).\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What is the\
  \ problem?\n<|/ c |>\n<| c |>\nIt doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n\
  <|/ c |>\n<| c |>\nIt works. I tested it before posting. What is the problem?\n\
  <|/ c |>\n<| c |>\nIt doesn't work. Try search([4, 1, 2, 2, 3, 1]).\n<|/ c |>\n\
  <| a tags=perl,algorithm |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  } elsif ($freq == $num) {\n            $freq++;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            if ($num > $max) {\n                $max = $num;\n\
  \                $maxFreq = $lst->[$num];\n            }\n        }\n    }\n   \
  \ return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            my $freq = grep($num == $_, $lst);\n            if\
  \ ($freq > $maxFreq) {\n                $max = $num;\n                $maxFreq =\
  \ $freq;\n            }\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = -1;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num if $num > $max;\n        }\n    }\n\
  \    return $max if $freq > $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($num\
  \ > 0) {\n            $freq--;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($num\
  \ == $max) {\n            return $num;\n        }\n    }\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $freq++ if $num == $max;\n        $max = $num if $freq >=\
  \ $num;\n    }\n    return -1 if $freq == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            my $freq = grep { $num == $_ } @$lst;\n         \
  \   if ($freq > $maxFreq) {\n                $max = $num;\n                $maxFreq\
  \ = $freq;\n            }\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    if ($freq++ > $num) {\n            $max = $num;\n        }\n    }\n    return\
  \ $max if $freq >= $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = -1;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ > $max) {\n            $max = $num;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($num\
  \ > 0) {\n            $freq--;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = -1;\n    my $maxFreq = -1;\n    my $i = 0;\n    foreach my $num (@$lst)\
  \ {\n        if ($num > 0) {\n            if ($num > $max) {\n                $max\
  \ = $num;\n                $maxFreq = $i;\n            }\n            $i++;\n  \
  \      }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    if ($freq++ > $num) {\n            $max = $num;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, @$lst);\n        if ($freq > $maxFreq) {\n       \
  \     $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq < $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            $max = $num if $num > $max;\n            $maxFreq++\
  \ if $num >= $max;\n        }\n    }\n    return $max if $maxFreq >= $max;\n   \
  \ return -1;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    if ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n\
  \        } elsif ($freq == $num) {\n            $freq++;\n        }\n    }\n   \
  \ return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = -1;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            return $num;\n        }\n    }\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = -1;\n    my $maxFreq = -1;\n    foreach my $i (@$lst) {\n       \
  \ if ($i > $max) {\n            $max = $i;\n            $maxFreq = 1;\n        }\
  \ elsif ($i == $max) {\n            $maxFreq++;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            $maxFreq++;\n            if ($maxFreq > $num) {\n\
  \                $max = $num;\n                $maxFreq = $num;\n            }\n\
  \        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq < $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=perl,arrays,algorithm |>\n\
  <| c |>\nThis doesn't work if there are multiple equal numbers in the list.\n<|/\
  \ c |>\n<| c |>\n: It does work if there are multiple equal numbers in the list.\
  \ `search([4, 1, 2, 2, 3, 1]) == 2`\n<|/ c |>\n<| c |>\n: It does work if there\
  \ are multiple equal numbers in the list. `search([4, 1, 2, 2, 3, 1]) == 2`\n<|/\
  \ c |>\n<| c |>\n: It does work if there are multiple equal numbers in the list.\
  \ `search([4, 1, 2, 2, 3, 1]) == 2`\n<|/ c |>\n<| c |>\n: It does work if there\
  \ are multiple equal numbers in the list. `search([4, 1, 2, 2, 3, 1]) == 2`\n<|/\
  \ c |>\n<| a tags=perl,arrays,algorithm |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return -1 if $freq\
  \ == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    if ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n\
  \        } elsif ($freq == $num) {\n            $freq++;\n        }\n    }\n   \
  \ return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = -1;\n    my $cur = 0;\n    foreach my $num\
  \ (@$lst) {\n        $cur++;\n        if ($num > 0) {\n            if ($num > $max)\
  \ {\n                $max = $num;\n                $maxFreq = $cur;\n          \
  \  }\n        }\n    }\n    return $maxFreq > $max ? $max : -1;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are multiple occurrences\
  \ of the same number.\n<|/ c |>\n<| c |>\nI believe it does. I tested it against\
  \ the example in the question, and it worked as expected.\n<|/ c |>\n<| c |>\nI\
  \ tested it against the example in the question, and it worked as expected. Perhaps\
  \ you misunderstood the question?\n<|/ c |>\n<| c |>\nI tested it against the example\
  \ in the question, and it worked as expected. Perhaps you misunderstood the question?\n\
  <|/ c |>\n<| c |>\nI tested it against the example in the question, and it worked\
  \ as expected. Perhaps you misunderstood the question?\n<|/ c |>\n<| a dscore=0\
  \ |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq < $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = -1;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            if ($num > $max) {\n                $max = $num;\n\
  \                $maxFreq = $lst->{$num};\n            }\n        }\n    }\n   \
  \ return $max if $maxFreq >= $lst->{$max};\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return -1 if $freq\
  \ == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            my $freq = grep { $num == $_ } @$lst;\n         \
  \   if ($freq > $maxFreq) {\n                $max = $num;\n                $maxFreq\
  \ = $freq;\n            }\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num == $max;\n        $max = $num if $freq >= $num;\n    }\n    return -1\
  \ if $freq == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=perl,arrays |>\n<| c |>\n\
  `my $freq = grep { $freq++ > $_ } @$lst;` would be more efficient.\n<|/ c |>\n<|\
  \ c |>\n: Thanks, I didn't know about that one.\n<|/ c |>\n<| c |>\n: I added a\
  \ version that doesn't require a counter.\n<|/ c |>\n<| a |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = -1;\n    foreach my $num (@$lst) {\n      \
  \  my $freq = grep($num == $_, @$lst);\n        if ($freq > $maxFreq) {\n      \
  \      $maxFreq = $freq;\n            $max = $num;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n\
  }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try search([4, 1, 2,\
  \ 2, 3, 1]).\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns 2.\n\
  <|/ c |>\n<| c |>\n: It returns 2 because you only have one occurrence of 4.\n<|/\
  \ c |>\n<| c |>\n: I see what you mean. My mistake. I'll fix it.\n<|/ c |>\n<| c\
  \ |>\n: I fixed it now. Sorry for the confusion.\n<|/ c |>\n<| a dscore=1 |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max\
  \ if $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return $max if\
  \ $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep {$_ eq $num} @$lst;\n        if ($freq > $maxFreq) {\n       \
  \     $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $i (@$lst) {\n        my\
  \ $freq = grep { $_ eq $i } @$lst;\n        if ($freq > $maxFreq) {\n          \
  \  $max = $i;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for the case where there\
  \ are multiple equal values.\n<|/ c |>\n<| c |>\nI thought that was the case in\
  \ the question. I'll add an edit that handles that case.\n<|/ c |>\n<| c |>\nI added\
  \ a version that handles multiple equal values.\n<|/ c |>\n<| c |>\nThe OP wants\
  \ the greatest integer that is greater than zero, not the greatest integer that\
  \ is greater than or equal to zero.\n<|/ c |>\n<| c |>\nI added a version that handles\
  \ multiple equal values.\n<|/ c |>\n<| a tags=perl,arrays |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}\n</code>\n<|/ a tags=perl,arrays,search |>\n<| c |>\nThis doesn't work\
  \ if the array contains negative numbers. Try search([-1, -2, -3]) for the value\
  \ -1.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself. It returns `-1` as expected.\n\
  <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `-1` as expected.\n\
  <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `-1` as expected.\n\
  <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `-1` as expected.\n\
  <|/ c |>\n<| a dscore=1 |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}\n</code>\n<|/ a tags=perl,arrays,hash,perl-data-structures |>\n<| c |>\n\
  This doesn't work if there are multiple occurrences of the same number.\n<|/ c |>\n\
  <| c |>\n: I didn't see that requirement in the question. I'll update my answer\
  \ to handle that case.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require\
  \ a hash. I'm not sure why I didn't think of it before. :-)\n<|/ c |>\n<| c |>\n\
  : I added a solution that doesn't require a hash. I'm not sure why I didn't think\
  \ of it before. :-)\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require\
  \ a hash. I'm not sure why I didn't think of it before. :-)\n<|/ c |>\n<| a tags=perl,arrays,hash,perl-data-structures\
  \ |>\n<code>"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    $freq++;\n        if ($freq > $max) {\n            $max = $freq;\n        }\n\
  \    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } (keys %{$freq{$_}});\n        if ($freq > $maxFreq)\
  \ {\n            $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n\
  \    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return -1\
  \ if $freq == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = -1;\n    my $maxFreq = -1;\n    my $i = 0;\n    \n    foreach my\
  \ $num (@$lst) {\n        if ($num > 0) {\n            if ($num > $max) {\n    \
  \            $max = $num;\n                $maxFreq = $i;\n            }\n     \
  \       $i++;\n        }\n    }\n    \n    if ($maxFreq >= $max) {\n        return\
  \ $max;\n    }\n    else {\n        return -1;\n    }\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            my $freq = grep { $num == $_ } @$lst;\n         \
  \   if ($freq > $maxFreq) {\n                $max = $num;\n                $maxFreq\
  \ = $freq;\n            }\n        }\n    }\n    return $max;\n}"
- "    my $max = -1;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($num\
  \ == $max) {\n            return $num;\n        }\n    }\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num if $num > $max;\n        }\n    }\n\
  \    return $max if $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=perl,arrays |>\n<| c |>\n\
  This doesn't work if there are multiple occurrences of the same number.\n<|/ c |>\n\
  <| c |>\nI didn't see that requirement in the question. I'll update my answer to\
  \ account for that case.\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
  \ the array to be sorted.\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
  \ the array to be sorted.\n<|/ c |>\n<| c |>\nI added a version that doesn't require\
  \ the array to be sorted.\n<|/ c |>\n<| a tags=perl,arrays |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return $max if\
  \ $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $i (@$lst) {\n        my\
  \ $freq = grep($i == $_, @$lst);\n        if ($freq > $maxFreq) {\n            $max\
  \ = $i;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, @$lst);\n        if ($freq > $maxFreq) {\n       \
  \     $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $i (@$lst) {\n      \
  \  if ($freq > $i) {\n            $freq = $i;\n            $max = $i;\n        }\n\
  \    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}\n</code>\n<|/ a tags=perl,arrays |>\n<| a tags=perl,arrays |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a tags=perl,algorithm |>\n<| c |>\nThe question says \"The frequency\
  \ of an integer is the number of times it appears in the list.\" Your code counts\
  \ the number of times *any* integer appears in the list.\n<|/ c |>\n<| c |>\n: I\
  \ missed that part. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n\
  <| c |>\n: Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n\
  : Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n: Thanks\
  \ for pointing it out. I've updated my answer.\n<|/ c |>\n<| a tags=perl,algorithm\
  \ |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            $max = $num;\n            $maxFreq = $lst->[$num];\n\
  \        }\n    }\n    if ($maxFreq >= $max) {\n        return $max;\n    } else\
  \ {\n        return -1;\n    }\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            my $freq = grep { $_ eq $num } @$lst;\n         \
  \   if ($freq > $maxFreq) {\n                $max = $num;\n                $maxFreq\
  \ = $freq;\n            }\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer! I actually tried this before\
  \ posting the question, but I didn't know that grep can take a hash reference as\
  \ an argument. I'll try it again and see if it works.\n<|/ c |>\n<| c |>\n: It works\
  \ just fine. Thanks again!\n<|/ c |>\n<| c |>\n: I added a solution that uses `grep`\
  \ instead of `map`.\n<|/ c |>\n<| c |>\n: I added a solution that uses `grep` instead\
  \ of `map`.\n<|/ c |>\n<| c |>\n: I added a solution that uses `grep` instead of\
  \ `map`.\n<|/ c |>\n<| a dscore=0 |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a dscore=0 |>\n<| a tags=perl,arrays |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return $max if\
  \ $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num if $num > $max;\n        }\n    }\n\
  \    return $max if $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            if ($num > $max) {\n                $max = $num;\n\
  \                $maxFreq = $lst->{$num};\n            }\n        }\n    }\n   \
  \ return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max\
  \ if $freq > $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    if($freq > $max)\
  \ {\n        return -1;\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max\
  \ if $freq >= $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ > $freq) {\n            $freq = $freq;\n            $max = $num;\n  \
  \      }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a tags=perl,arrays |>\n<| c |>\nThis solution doesn't work if there\
  \ are multiple equal numbers in the list. For example, search([4, 1, 2, 2, 3, 1])\
  \ returns 2, but should return 3.\n<|/ c |>\n<| c |>\n: I missed that requirement.\
  \ Updated my answer.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require\
  \ a hash. :)\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require a hash.\
  \ :)\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require a hash. :)\n\
  <|/ c |>\n<| a tags=perl,arrays |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } (keys %{$freq{$_}});\n        if ($freq > $maxFreq)\
  \ {\n            $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n\
  \    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  } elsif ($freq == $num) {\n            $freq++;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max\
  \ if $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($num\
  \ == $max) {\n            return $num;\n        }\n    }\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $i (@$lst) {\n        if\
  \ ($i > $max) {\n            $max = $i;\n            $maxFreq = $lst->[$i];\n  \
  \      }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return -1 if $freq\
  \ == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, @$lst);\n        if ($freq > $maxFreq) {\n       \
  \     $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return -1 if $freq\
  \ == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return $max if\
  \ $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    $freq++;\n        if ($num > $max) {\n            $max = $num;\n        }\n\
  \    }\n    if ($freq >= $max) {\n        return $max;\n    }\n    return -1;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    if ($freq++ == $num) {\n            $max = $num if $num > $max;\n        }\n\
  \    }\n    return $max if $freq >= $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a tags=perl,arrays |>\n<| c |>\nThe OP wants the greatest integer that\
  \ is greater than zero.\n<|/ c |>\n<| c |>\n: I see that now. Thanks.\n<|/ c |>\n\
  <| c |>\n: I added a solution that doesn't require a hash. Hope it helps.\n<|/ c\
  \ |>\n<| c |>\n: I added a solution that doesn't require a hash. Hope it helps.\n\
  <|/ c |>\n<| c |>\n: I added a solution that doesn't require a hash. Hope it helps.\n\
  <|/ c |>\n<| a dscore=1 |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            $max = $num if $num > $max;\n            $maxFreq\
  \ += $num if $num > $maxFreq;\n        }\n    }\n    return -1 if $maxFreq == 0;\n\
  \    return $max if $maxFreq >= $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n    }\n    return\
  \ $max if $freq > $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            my $freq = grep { $num == $_ } @$lst;\n         \
  \   if ($freq > $maxFreq) {\n                $max = $num;\n                $maxFreq\
  \ = $freq;\n            }\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a tags=perl,arrays,algorithm |>\n<| c |>\nThis doesn't work if there\
  \ are multiple occurrences of the same number. For example, `search([4, 1, 2, 2,\
  \ 3, 1])` returns 2, when it should be 3.\n<|/ c |>\n<| c |>\n: I didn't see that\
  \ requirement in the question. I've updated my answer to include that requirement.\n\
  <|/ c |>\n<| c |>\n: I added a solution that doesn't require a hash. Does that help?\n\
  <|/ c |>\n<| c |>\n: I added a solution that doesn't require a hash. Does that help?\n\
  <|/ c |>\n<| c |>\n: I added a solution that doesn't require a hash. Does that help?\n\
  <|/ c |>\n<| a dscore=1 |>\n<code>"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            if ($num > $max) {\n                $max = $num;\n\
  \                $maxFreq = $lst->{$num};\n            }\n        }\n    }\n   \
  \ return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    if($freq > $max)\
  \ {\n        return -1;\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } @$lst;\n        if ($freq > $maxFreq) {\n     \
  \       $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n    }\n    return\
  \ $max if $freq >= $max;\n    return -1;\n}\n</code>\n<|/ a tags=perl,arrays |>\n\
  <| c |>\nThis doesn't work if there are multiple instances of the same number. For\
  \ example, search([4, 1, 2, 2, 3, 1]) returns 2, when it should be 1.\n<|/ c |>\n\
  <| c |>\n: It does work if there are multiple instances of the same number. Try\
  \ it yourself. It returns `1` for the example I gave in my answer.\n<|/ c |>\n<|\
  \ c |>\n: It does work if there are multiple instances of the same number. Try it\
  \ yourself. It returns `1` for the example I gave in my answer.\n<|/ c |>\n<| c\
  \ |>\n: It does work if there are multiple instances of the same number. Try it\
  \ yourself. It returns `1` for the example I gave in my answer.\n<|/ c |>\n<| c\
  \ |>\n: It does work if there are multiple instances of the same number. Try it\
  \ yourself. It returns `1` for the example I gave in my answer.\n<|/ c |>\n<| a\
  \ dscore=1 |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq < $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($num\
  \ > 0) {\n            $freq -= $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $num (@$lst) {\n    \
  \    if ($num > $max) {\n            $max = $num;\n            $freq++;\n      \
  \  }\n    }\n    return $freq > $max ? $max : -1;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            my $freq = grep { $num == $_ } @$lst;\n         \
  \   if ($freq > $maxFreq) {\n                $max = $num;\n                $maxFreq\
  \ = $freq;\n            }\n        }\n    }\n    return $max;\n}"
- "    my $max = $lst[0];\n    my $freq = 0;\n    foreach my $i (@$lst) {\n      \
  \  if ($freq > $i) {\n            $freq = $i;\n            $max = $i;\n        }\n\
  \    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq > $num) {\n            $freq = $num;\n            $max = $num;\n      \
  \  }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $freq = $num;\n        }\n    }\n    if($freq > $max)\
  \ {\n        return -1;\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max\
  \ if $freq > $max;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}\n\
  </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n    }\n    return\
  \ $max if $freq >= $max;\n    return -1;\n}"
- "    my $max = -1;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n    }\n    return\
  \ $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $i (@$lst) {\n        my\
  \ $freq = grep($i eq $_, $lst);\n        if ($freq > $maxFreq) {\n            $max\
  \ = $i;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ if ($num > 0) {\n            if ($num > $max) {\n                $max = $num;\n\
  \                $maxFreq = $num;\n            }\n            else {\n         \
  \       $maxFreq += $num;\n            }\n        }\n    }\n    return $maxFreq\
  \ > $max ? $max : -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return -1 if $freq\
  \ == 0;\n    return $max;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $i (@$lst) {\n        if\
  \ ($i > $max) {\n            $max = $i;\n            $maxFreq = $lst->[$i];\n  \
  \      }\n    }\n    if ($maxFreq >= $max) {\n        return $max;\n    } else {\n\
  \        return -1;\n    }\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++\
  \ if $num > 0;\n        $max = $num if $freq >= $num;\n    }\n    return $max if\
  \ $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ == $num) {\n            $max = $num;\n        }\n    }\n    return $max\
  \ if $freq > 0;\n    return -1;\n}"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep($num == $_, $lst);\n        if ($freq > $maxFreq) {\n        \
  \    $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n    return $max;\n\
  }"
- "    my $max = 0;\n    my $maxFreq = 0;\n    foreach my $num (@$lst) {\n       \
  \ my $freq = grep { $num == $_ } (keys %{ $freq{$_} });\n        if ($freq > $maxFreq)\
  \ {\n            $max = $num;\n            $maxFreq = $freq;\n        }\n    }\n\
  \    return $max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=perl,hash,arrays |>\n\
  <code>"
- "    my $max = 0;\n    my $maxFreq = -1;\n    my $i = 0;\n    \n    foreach my $num\
  \ (@$lst) {\n        my $freq = grep { $num == $_ } @$lst;\n        if ($freq >\
  \ $maxFreq) {\n            $max = $num;\n            $maxFreq = $freq;\n       \
  \ }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your\
  \ solution, but I believe that `grep { $num == $_ } @$lst` can be replaced with\
  \ `grep { $num == $_ } 1..$#lst`.\n<|/ c |>\n<| c |>\n: Yes, that would be better.\
  \ Thanks.\n<|/ c |>\n<| c |>\n: I thought about it, but I didn't want to change\
  \ too much of the OP's code. I'll leave it as-is for now.\n<|/ c |>\n<| c |>\n:\
  \ I added a version that doesn't use any loops.\n<|/ c |>\n<| c |>\n: I added a\
  \ version that doesn't use any loops.\n<|/ c |>\n<| a tags=perl,arrays |>\n<code>"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if($freq > $max) {\n            $max = $freq;\n        }\n        if($freq\
  \ >= $num) {\n            $max = $num;\n        }\n    }\n    return $max;\n}"
- "    my $max = 0;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        $freq++;\n\
  \        if ($freq > $max) {\n            $max = $freq;\n        }\n        if ($num\
  \ == $max) {\n            return $num;\n        }\n    }\n    return -1;\n}"
- "    my $max = -1;\n    my $freq = 0;\n    foreach my $num (@$lst) {\n        if\
  \ ($freq++ > $max) {\n            $max = $num;\n        }\n    }\n    return $max;\n\
  }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe question was about a list with positive\
  \ integers, not negative ones. Your code will fail for `search([-1, -1, 1, 1])`.\n\
  <|/ c |>\n<| c |>\nI missed that part. Thanks for pointing it out. I've updated\
  \ my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>"
language: pl
name: HumanEval_69_search
prompt: "# You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n# zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n# The frequency of an integer is the number\
  \ of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n\
  # search([4, 1, 2, 2, 3, 1]) == 2\n# search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n\
  # search([5, 5, 4, 4, 4]) == -1\nsub search {\n    my($lst) = @_;\n"
stop_tokens:
- '

  sub'
- '

  #'
- '


  '
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n\
  \        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4,\
  \ 1, 4, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([3, 3]),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8,\
  \ 8, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8,\
  \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8,\
  \ 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 9, 10, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6,\
  \ 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5,\
  \ 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1,\
  \ 10, 3, 6, 1, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1,\
  \ 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
