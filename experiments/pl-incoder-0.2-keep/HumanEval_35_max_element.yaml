name: HumanEval_35_max_element
language: humaneval_to_perl.py
prompt: "# Return maximum element in the list.\n# >>> max_element([1, 2, 3])\n# 3\n\
  # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n\
  \        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3,\
  \ 3, 9, 0, 124, 1, -10]),124)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $max = -1;\n    my $max_idx = -1;\n    my $idx = 0;\n    foreach\
    \ my $i (@$l) {\n        if ($i > $max) {\n            $max = $i;\n          \
    \  $max_idx = $idx;\n        }\n        $idx++;\n    }\n    return $max;\n}",
  "    my $max = -1;\n    my $maxel;\n    foreach my $el (@$l) {\n        if ($el\
    \ > $max) {\n            $max = $el;\n            $maxel = $el;\n        }\n \
    \   }\n    return $maxel;\n}", "    my $max = -1;\n    foreach my $x (@$l) {\n\
    \        $max = $x if $x > $max;\n    }\n    return $max;\n}", "    my $max =\
    \ -1;\n    foreach my $x (@$l) {\n        if ($x > $max) {\n            $max =\
    \ $x;\n        }\n    }\n    return $max;\n}", "    my $max = $l->[0];\n    foreach\
    \ my $i (@$l) {\n        if ($i > $max) {\n            $max = $i;\n        }\n\
    \    }\n    return $max;\n}", "    my $max = -1;\n    my $maxel;\n    foreach\
    \ my $el (@$l) {\n        if ($el > $max) {\n            $max = $el;\n       \
    \     $maxel = $el;\n        }\n    }\n    return $maxel;\n}", "    my $max =\
    \ -1;\n    foreach my $x (@$l) {\n        $max = $x if $x > $max;\n    }\n   \
    \ return $max;\n}", "    my $max = -1;\n    my $maxi = 0;\n    foreach my $i (@$l)\
    \ {\n        if ($i > $max) {\n            $max = $i;\n            $maxi = $i;\n\
    \        }\n    }\n    return $maxi;\n}", "    my $max = -1;\n    foreach my $x\
    \ (@$l) {\n        if ($x > $max) {\n            $max = $x;\n        }\n    }\n\
    \    return $max;\n}", "    my $max = -1;\n    my $maxi = 0;\n    foreach my $i\
    \ (@$l) {\n        if ($i > $max) {\n            $max = $i;\n            $maxi\
    \ = $i;\n        }\n    }\n    return $maxi;\n}", "    my $max = -1;\n    foreach\
    \ my $i (@$l) {\n        if ($i > $max) {\n            $max = $i;\n        }\n\
    \    }\n    return $max;\n}", "    my $max = -1;\n    my $max_el;\n    foreach\
    \ my $el (@$l) {\n        if ($el > $max) {\n            $max = $el;\n       \
    \     $max_el = $el;\n        }\n    }\n    return $max_el;\n}", "    my $max\
    \ = $l->[0];\n    my $i = 0;\n    my $j;\n    for(my $i = 1; $i < @$l; $i++) {\n\
    \        $j = $i;\n        for(my $j = $i + 1; $j < @$l; $j++) {\n           \
    \ last if $l->[$j] < $l->[$i];\n        }\n        $max = $l->[$j] if $j != $i;\n\
    \    }\n    return $max;\n}", "    my $max = -1;\n    my $maxel;\n    foreach\
    \ my $el (@$l) {\n        if ($el > $max) {\n            $max = $el;\n       \
    \     $maxel = $el;\n        }\n    }\n    return $maxel;\n}", "    my $max =\
    \ -1;\n    my $maxel;\n    foreach my $el (@$l) {\n        if ($el > $max) {\n\
    \            $max = $el;\n            $maxel = $el;\n        }\n    }\n    return\
    \ $maxel;\n}", "    my $max = $l->[0];\n    foreach my $i (1..$#$l) {\n      \
    \  if ($l->[$i] > $max) {\n            $max = $l->[$i];\n        }\n    }\n  \
    \  return $max;\n}", "    my $max = -1;\n    my $maxe = $l->[0];\n    for my $i\
    \ (1..$#$l) {\n        my $e = $l->[$i];\n        if ($e > $max) {\n         \
    \   $max = $e;\n            $maxe = $e;\n        }\n    }\n    return $maxe;\n\
    }", "    my $max = @$l > 0 ? $l->[-1] : 0;\n    for my $i (@$l) {\n        $max\
    \ = $i if $i > $max;\n    }\n    return $max;\n}", "    my $max = @$l > 0 ? $l->[-1]\
    \ : 0;\n    for my $i (@$l) {\n        if ($i > $max) {\n            $max = $i;\n\
    \        }\n    }\n    return $max;\n}", "    my $max = -1;\n    foreach my $x\
    \ (@$l) {\n        $max = $x if $x > $max;\n    }\n    return $max;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
