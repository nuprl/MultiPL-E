name: HumanEval_117_select_words
language: humaneval_to_perl.py
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2)\
  \ ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
  \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\"\
  , 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @words = ();\n    \n    foreach my $word (split /\\s+/, $s)\
    \ {\n        push @words, $word if $word =~ /[b-df-hj-np-tv-z]/;\n    }\n    \n\
    \    return @words if @words == $n;\n    return ();\n}", "    my @words = ();\n\
    \    \n    foreach my $word (split /\\s+/, $s) {\n        push @words, $word if\
    \ $word =~ /^.{$n}$/;\n    }\n    \n    return @words;\n}", "    my @words;\n\
    \    \n    foreach my $word (split /\\s+/, $s) {\n        push @words, $word if\
    \ $word =~ /[^aeiouAEIOU]/g;\n    }\n    \n    return @words if @words == $n;\n\
    \    \n    return ();\n}", "    my @result;\n    \n    if ($s =~ /^\\s*$/) {\n\
    \        return @result;\n    }\n    \n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $l = 0;\n    my $m = 1;\n    \n    while ($i < length($s)) {\n\
    \        my $c = substr($s, $i, 1);\n        \n        if ($c eq ' ') {\n    \
    \        $i++;\n        }\n        elsif ($c eq 'a') {\n            $i++;\n  \
    \      }\n        elsif ($c eq 'e') {\n            $i++;\n        }\n        elsif\
    \ ($c eq 'i') {\n            $i++;\n        }\n        elsif ($c eq 'o') {\n \
    \           $i++;\n        }\n        elsif ($c eq 'u') {\n            $i++;\n\
    \        }\n        elsif ($c eq 'y') {\n            $i++;\n        }\n      \
    \  elsif ($c eq 'h') {\n            $i++;\n        }\n        elsif ($c eq 'l')\
    \ {\n            $i++;\n        }\n        elsif ($c eq 's') {\n            $i++;\n\
    \        }\n        elsif ($c eq 't') {\n            $i++;\n        }\n      \
    \  elsif ($c eq 'd') {\n            $i++;\n        }\n        elsif ($c eq 'n')\
    \ {\n            $i++;\n        }\n        elsif ($c eq 'g') {\n            $i++;\n\
    \        }\n        elsif ($c eq 'p') {\n            $i++;\n        }\n      \
    \  elsif ($c eq 'b') {\n            $i++;\n        }\n        elsif ($c eq 'f')\
    \ {\n            $i++;\n        }\n        elsif ($c eq 'v') {\n            $i++;\n\
    \        }\n        elsif ($c eq 'm') {\n            $i++;\n        }\n      \
    \  elsif ($c eq 'q') {\n            $i++;\n        }\n        elsif ($c eq 'j')\
    \ {\n            $i++;\n        }\n        elsif ($c eq 'x') {\n            $i++;\n\
    \        }\n        elsif ($c eq 'z') {\n            $i++;\n        }\n      \
    \  elsif ($c eq 'x') {\n            $i++;\n        }\n        elsif ($c eq 'z')\
    \ {\n            $i++;\n        }\n        elsif ($c eq 'y') {\n            $i++;\n\
    \        }\n        elsif ($", "    my @words;\n    \n    if ($s) {\n        foreach\
    \ my $word (split /\\s+/, $s) {\n            push @words, $word if length($word)\
    \ == $n;\n        }\n    }\n    \n    return @words;\n}", "    return () unless\
    \ $s;\n    return () unless $n;\n    return () unless $s =~ /^[a-zA-Z ]+$/;\n\
    \    return () unless $n =~ /^\\d+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^[a-zA-Z]+$/;\n    return () unless $s =~ /^[a-zA-Z]+$/;\n\
    \    return () unless $s =~ /^", "    my @words;\n    \n    if ($s) {\n      \
    \  my $i = 0;\n        \n        while ($i < length($s)) {\n            my $c\
    \ = substr($s, $i, 1);\n            \n            if ($c eq ' ') {\n         \
    \       push (@words, substr($s, 0, $i));\n                $i++;\n           \
    \ }\n            elsif ($c eq 'a') {\n                push (@words, \"a\");\n\
    \            }\n            elsif ($c eq 'e') {\n                push (@words,\
    \ \"e\");\n            }\n            elsif ($c eq 'i') {\n                push\
    \ (@words, \"i\");\n            }\n            elsif ($c eq 'o') {\n         \
    \       push (@words, \"o\");\n            }\n            elsif ($c eq 'u') {\n\
    \                push (@words, \"u\");\n            }\n            elsif ($c eq\
    \ 'y') {\n                push (@words, \"y\");\n            }\n            elsif\
    \ ($c eq 'h') {\n                push (@words, \"h\");\n            }\n      \
    \      elsif ($c eq 'l') {\n                push (@words, \"l\");\n          \
    \  }\n            elsif ($c eq 's') {\n                push (@words, \"s\");\n\
    \            }\n            elsif ($c eq 't') {\n                push (@words,\
    \ \"t\");\n            }\n            elsif ($c eq 'd') {\n                push\
    \ (@words, \"d\");\n            }\n            elsif ($c eq 'n') {\n         \
    \       push (@words, \"n\");\n            }\n            elsif ($c eq 'g') {\n\
    \                push (@words, \"g\");\n            }\n            elsif ($c eq\
    \ 'p') {\n                push (@words, \"p\");\n            }\n            elsif\
    \ ($c eq 'b') {\n                push (@words, \"b\");\n            }\n      \
    \      elsif ($c eq 'm') {\n                push (@words, \"m\");\n          \
    \  }\n            elsif ($c eq 'y') {\n                push (@words, \"y\");\n\
    \            }\n            elsif ($c eq 'k') {\n                push (@words,\
    \ \"k\");\n            }\n            elsif ($c eq 'b') {\n                push\
    \ (@words, \"b\");\n            }\n            elsif ($c eq 'm') {\n         \
    \       push (@words, \"m\");\n            }\n            elsif ($c eq 'a') {\n\
    \                ", "    my @words = ();\n    \n    if ($s) {\n        foreach\
    \ my $word (split /\\s+/, $s) {\n            push @words, $word if $word =~ /^($n)+$/;\n\
    \        }\n    }\n    return @words;\n}", "    my @words = ();\n    \n    foreach\
    \ my $word (split /\\s+/, $s) {\n        push @words, $word if length($word) ==\
    \ $n;\n    }\n    \n    return @words;\n}", "    my @words = ();\n    \n    if\
    \ ($n > 0) {\n        my @words = ();\n        \n        foreach my $word (split\
    \ /\\s+/, $s) {\n            foreach my $letter (split //, $word) {\n        \
    \        push (@words, $letter) if $letter =~ /[b-df-hj-np-tv-z]/;\n         \
    \   }\n        }\n        \n        foreach my $word (@words) {\n            push\
    \ (@words, $word) if $word =~ /\\b$n\\b/;\n        }\n    }\n    \n    return\
    \ @words;\n}", "    my @words;\n    \n    if ($s eq \"\") {\n        return @words;\n\
    \    }\n    \n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n", "    my @words = ();\n    \n    if ($s) {\n        foreach\
    \ my $word (split /\\s+/, $s) {\n            push @words, $word if $word =~ /[^aeiouyAEIOUY]{$n}/;\n\
    \        }\n    }\n    \n    return @words;\n}", "    my @words = ();\n    \n\
    \    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n\
    \        \n        for(my $j = 0; $j < length($s); $j++) {\n            my $c2\
    \ = substr($s, $j, 1);\n            \n            if($c eq $c2) {\n          \
    \      push(@words, substr($s, 0, $i));\n                last;\n            }\n\
    \        }\n    }\n    \n    return @words;\n}", "    my @words;\n    \n    if\
    \ ($n > 0) {\n        foreach my $word (split /\\s+/, $s) {\n            push\
    \ @words, $word if $word =~ /[^aeiouAEIOU]/ && $word =~ /[^aeiouAEIOU]/ && $word\
    \ =~ /[^aeiouAEIOU]/ && $word =~ /[^aeiouAEIOU]/ && $word =~ /[^aeiouAEIOU]/ &&\
    \ $word =~ /[^aeiouAEIOU]/ && $word =~ /[^aeiouAEIOU]/ && $word =~ /[^aeiouAEIOU]/\
    \ && $word =~ /[^aeiouAEIOU]/ && $word =~ /[^aeiouAEIOU]/ && $word =~ /[^aeiouAEIOU]/\
    \ && $word =~ /[^aeiouAEIOU]/;\n        }\n    }\n    return @words;\n}", "  \
    \  my @words;\n    \n    foreach my $word (split /\\s+/, $s) {\n        push @words,\
    \ $word if length($word) == $n;\n    }\n    \n    return @words;\n}", "    my\
    \ @words;\n    \n    foreach my $word (split /\\s+/, $s) {\n        push @words,\
    \ $word if length($word) == $n;\n    }\n    \n    return @words;\n}", "    my\
    \ @words;\n    \n    if ($s) {\n        foreach my $word (split /\\s+/, $s) {\n\
    \            push @words, $word if length($word) == $n;\n        }\n    }\n  \
    \  return @words;\n}", "    my @words;\n    \n    if ($s) {\n        my @words\
    \ = split /\\s+/, $s;\n        \n        foreach my $word (@words) {\n       \
    \     my @consonants = split //, $word;\n            \n            if (@consonants\
    \ == $n) {\n                push @words, $word;\n            }\n        }\n  \
    \  }\n    \n    return @words;\n}", "    my @words;\n    \n    foreach my $word\
    \ (split /\\s+/, $s) {\n        push @words, $word if $word =~ /^.{$n}$/;\n  \
    \  }\n    \n    return @words;\n}", "    my @words = ();\n    \n    for(my $i\
    \ = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        \n\
    \        if($c =~ /[aeiou]/) {\n            push(@words, $c);\n        }\n   \
    \ }\n    \n    return @words;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
