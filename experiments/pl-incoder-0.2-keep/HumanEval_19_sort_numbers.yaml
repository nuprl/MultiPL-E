name: HumanEval_19_sort_numbers
language: humaneval_to_perl.py
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\nsub sort_numbers\
  \ {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
  \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
  \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @numbers = split ' ', $numbers;\n    my $numbers_sorted = join\
    \ ' ', sort { $a <=> $b } @numbers;\n    return $numbers_sorted;\n}", "    my\
    \ @numbers = split ' ', $numbers;\n    my @sorted_numbers = ();\n    my $i = 0;\n\
    \    my $j = 0;\n    my $temp;\n    while (@numbers) {\n        $temp = $numbers[$i];\n\
    \        $sorted_numbers[$j] = $temp;\n        $i++;\n        $j++;\n        if\
    \ ($j > @sorted_numbers) {\n            $j = 0;\n        }\n    }\n    return\
    \ join(' ', @sorted_numbers);\n}", "    my @numbers = split ' ', $numbers;\n \
    \   my @sorted = sort { $a <=> $b } @numbers;\n    return join ' ', @sorted;\n\
    }", "    my($sorted_numbers);\n    my($first_number);\n    my($last_number);\n\
    \    my($sorted_numbers_string);\n    my($sorted_numbers_string_length);\n   \
    \ my($sorted_numbers_string_length_max);\n    my($sorted_numbers_string_length_min);\n\
    \    my($sorted_numbers_string_length_diff);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_diff_max);\n\
    \    my($sorted_numbers_string_length_diff_min);\n    my($sorted_numbers_string_length_",
  "    my @numbers = split ' ', $numbers;\n    my @sorted = sort { $a <=> $b } @numbers;\n\
    \    return join ' ', @sorted;\n}", "    my(@numbers_sorted, $i, $j, $temp);\n\
    \    foreach $i (split /\\s+/, $numbers) {\n        $numbers_sorted[$i] = $i;\n\
    \    }\n    foreach $j (0 .. $#numbers_sorted) {\n        $temp = @numbers_sorted[$j];\n\
    \        foreach $i (0 .. $#numbers_sorted) {\n            if ($numbers_sorted[$i]\
    \ eq $temp) {\n                splice @numbers_sorted, $i, 1;\n              \
    \  last;\n            }\n        }\n    }\n    return join(' ', @numbers_sorted);\n\
    }", "    my @numbers = split ' ', $numbers;\n    my @sorted_numbers;\n    my $current_number\
    \ = 0;\n    my $current_string = '';\n    foreach my $number (@numbers) {\n  \
    \      if ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $current_number = $number;\n            $current_string = $number;\n\
    \        }\n        elsif ($number =~ /^(zero|one|two|three|four", "    my($numbers_sorted,\
    \ $numbers_sorted2, $numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted2);\n\
    \    my($numbers_sorted3);\n    my($numbers_sorted);\n    my($numbers_sorted",
  "    my($sorted_numbers);\n    my($sorted_numbers_string);\n    my($sorted_numbers_string_length);\n\
    \    my($sorted_numbers_string_length_max);\n    my($sorted_numbers_string_length_min);\n\
    \    my($sorted_numbers_string_length_min_index);\n    my($sorted_numbers_string_length_max_index);\n\
    \    my($sorted_numbers_string_length_min_string);\n    my($sorted_numbers_string_length_max_string);\n\
    \    my($sorted_numbers_string_length_min_string_length);\n    my($sorted_numbers_string_length_max_string_length);\n\
    \    my($sorted_numbers_string_length_min_string_length_max);\n    my($sorted_numbers_string_length_max_string_length_min);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my($sorted_numbers_string_length_min_string_length_min);\n    my($sorted_numbers_string_length_max_string_length_max);\n\
    \    my(", "    my(@numbers) = split ' ', $numbers;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $temp;\n    my $numbers_sorted = join ' ', @numbers;\n    foreach\
    \ my $number (@numbers) {\n        if ($number =~ /^(zero|one|two|three|four|five|six|seven|eight|nine)$/)\
    \ {\n            $numbers_sorted =~ s/$number/$numbers[$i++]/g;\n        }\n \
    \   }\n    return $numbers_sorted;\n}", "    my(@numbers);\n    my($number);\n\
    \    my($i);\n    my($j);\n    my($max);\n    my($min);\n    my($tmp);\n    my($tmp2);\n\
    \    my($tmp3);\n    my($tmp4);\n    my($tmp5);\n    my($tmp6);\n    my($tmp7);\n\
    \    my($tmp8);\n    my($tmp9);\n    my($tmp10);\n    my($tmp11);\n    my($tmp12);\n\
    \    my($tmp13);\n    my($tmp14);\n    my($tmp15);\n    my($tmp16);\n    my($tmp17);\n\
    \    my($tmp18);\n    my($tmp19);\n    my($tmp20);\n    my($tmp21);\n    my($tmp22);\n\
    \    my($tmp23);\n    my($tmp24);\n    my($tmp25);\n    my($tmp26);\n    my($tmp27);\n\
    \    my($tmp28);\n    my($tmp29);\n    my($tmp30);\n    my($tmp31);\n    my($tmp32);\n\
    \    my($tmp33);\n    my($tmp34);\n    my($tmp35);\n    my($tmp36);\n    my($tmp37);\n\
    \    my($tmp38);\n    my($tmp39);\n    my($tmp40);\n    my($tmp41);\n    my($tmp42);\n\
    \    my($tmp43);\n    my($tmp44);\n    my($tmp45);\n    my($tmp46);\n    my($tmp47);\n\
    \    my($tmp48);\n    my($tmp49);\n    my($tmp50);\n    my($tmp51);\n    my($tmp52);\n\
    \    my($tmp53);\n    my($tmp54);\n    my($tmp55);\n    my($tmp56);\n    my($tmp57);\n\
    \    my($tmp58);\n    my($tmp59);\n    my($tmp60);\n    my($tmp61);\n    my($tmp62);\n\
    \    my($tmp63);\n    my($tmp64);\n    my($tmp65);\n    my($tmp66);\n    my($tmp67);\n\
    \    my($tmp68);\n    my($tmp69);\n    my($tmp70);\n    my($tmp71);", "    my\
    \ @numbers = split ' ', $numbers;\n    my @sorted = sort { $a <=> $b } @numbers;\n\
    \    return join ' ', @sorted;\n}", "    my(@numbers_sorted, $i, $j, $temp);\n\
    \    \n    foreach $i (split(' ', $numbers)) {\n        $numbers_sorted[$i] =\
    \ $i;\n    }\n    \n    foreach $i (0 .. 9) {\n        foreach $j (0 .. 9) {\n\
    \            if ($numbers_sorted[$i] eq $numbers_sorted[$j]) {\n             \
    \   $temp = $numbers_sorted[$i];\n                $numbers_sorted[$i] = $numbers_sorted[$j];\n\
    \                $numbers_sorted[$j] = $temp;\n            }\n        }\n    }\n\
    \    \n    return join(' ', @numbers_sorted);\n}", "    my(@numbers) = split '\
    \ ', $numbers;\n    my @sorted_numbers = ();\n    my $i = 0;\n    my $j = 0;\n\
    \    my $temp;\n    foreach my $number (@numbers) {\n        $i++;\n        if\
    \ ($number =~ /^\\d+$/) {\n            $sorted_numbers[$j] = $number;\n      \
    \      $j++;\n        }\n    }\n    foreach my $number (@sorted_numbers) {\n \
    \       $temp = $number;\n        $number = $sorted_numbers[$i];\n        $sorted_numbers[$i]\
    \ = $temp;\n    }\n    return join ' ', @sorted_numbers;\n}", "    my($sorted_numbers)\
    \ = '';\n    my($current_number);\n    my($current_numbers);\n    my($current_numbers_string);",
  "    my @numbers = split ' ', $numbers;\n    my @sorted = sort { $a <=> $b } @numbers;\n\
    \    return join ' ', @sorted;\n}", "    my($numbers_sorted, $numbers_string);\n\
    \    my($numbers_array) = split(/ /, $numbers);\n    my $i = 0;\n    my $j = 0;\n\
    \    my $temp;\n    my $num_length = length($numbers_array[0]);\n    my $num_zeros\
    \ = $num_length - 1;\n    my $num_ones = $num_length - 2;\n    my $num_twos =\
    \ $num_length - 3;\n    my $num_threes = $num_length - 4;\n    my $num_fours =\
    \ $num_length - 5;\n    my $num_fives = $num_length - 6;\n    my $num_sixes =\
    \ $num_length - 7;\n    my $num_sevens = $num_length - 8;\n    my $num_eights\
    \ = $num_length - 9;\n    my $num_nines = $num_length - 10;\n    my $num_tens\
    \ = $num_length - 11;\n    my $num_elevens = $num_length - 12;\n    my $num_twelves\
    \ = $num_length - 13;\n    my $num_thirteens = $num_length - 14;\n    my $num_fourteens\
    \ = $num_length - 15;\n    my $num_fifteens = $num_length - 16;\n    my $num_sixteens\
    \ = $num_length - 17;\n    my $num_seventeens = $num_length - 18;\n    my $num_eighteens\
    \ = $num_length - 19;\n    my $num_nineteens = $num_length - 20;\n    my $num_twenties\
    \ = $num_length - 21;\n    my $num_twentys = $num_length - 22;\n    my $num_thirtys\
    \ = $num_length - 23;\n    my $num_fortys = $num_length - 24;\n    my $num_fiftys\
    \ = $num_length - 25;\n    my $num_sixtys = $num_length - 26;\n    my $num_seventys\
    \ = $num_length - 27;\n    my $num_eightys = $num_length - 28;\n    my $num_ninetys\
    \ = $num_length - 29;\n    my $num_hundreds = $num_length - 30;\n    my $num_thousands\
    \ = $num_length - 31;\n    my $num_millions = $num_length - 32;\n    my $num_billions\
    \ = $num_length - 33;\n    my $num_trillions = $num_length - 34;\n    my $num_quadrillions\
    \ = $num_length - 35;\n    my $num_quintillions = $num_length - 36;\n    my $num_sextillions\
    \ = $num_length - 37;\n    my $num_septillions = $num_length - 38;\n    my $num_octillions\
    \ = $num_", "    my @numbers = split ' ', $numbers;\n    my $sorted = join ' ',\
    \ sort { $a <=> $b } @numbers;\n    return $sorted;\n}", "    my(@numbers_sorted,\
    \ $i, $j);\n    my @numbers_array = split(/ /, $numbers);\n    foreach $i (@numbers_array)\
    \ {\n        foreach $j (@numbers_array) {\n            if ($i ne $j) {\n    \
    \            if ($i =~ /^0/ && $j =~ /^0/ && $i ne $j) {\n                   \
    \ $numbers_sorted[$j] = $numbers_sorted[$i];\n                    $numbers_sorted[$i]\
    \ = $i;\n                }\n                elsif ($i =~ /^0/ && $j =~ /^0/ &&\
    \ $i eq $j) {\n                    $numbers_sorted[$j] = $i;\n               \
    \     $numbers_sorted[$i] = $j;\n                }\n                elsif ($i\
    \ =~ /^0/ && $j =~ /^0/ && $i ne $j) {\n                    $numbers_sorted[$j]\
    \ = $i;\n                    $numbers_sorted[$i] = $j;\n                }\n  \
    \              elsif ($i =~ /^0/ && $j =~ /^0/ && $i eq $j) {\n              \
    \      $numbers_sorted[$j] = $i;\n                    $numbers_sorted[$i] = $j;\n\
    \                }\n                elsif ($i =~ /^1/ && $j =~ /^1/ && $i ne $j)\
    \ {\n                    $numbers_sorted[$j] = $numbers_sorted[$i];\n        \
    \            $numbers_sorted[$i] = $i;\n                }\n                elsif\
    \ ($i =~ /^1/ && $j =~ /^1/ && $i eq $j) {\n                    $numbers_sorted[$j]\
    \ = $i;\n                    $numbers_sorted[$i] = $j;\n                }\n  \
    \              elsif ($i =~ /^1/ && $j =~ /^1/ && $i ne $j) {\n              \
    \      $numbers_sorted[$j] = $i;\n                    $numbers_sorted[$i] = $j;\n\
    \                }\n                elsif ($i =~ /^1/ && $j =~ /^1/ && $i eq $j)\
    \ {\n                    $numbers_sorted[$j] = $i;\n                    $numbers_sorted[$i]\
    \ = $j;\n                }\n                elsif ($i =~ /^2/ && $j =~ /^2/ &&\
    \ $i ne $j) {\n                    $numbers_sorted[$j] = $numbers_sorted[$i];\n\
    \                    $numbers_sorted[$i] = $i;\n                }\n          \
    \      elsif ($i =~ /^", "    my($numbers_sorted, $numbers_sorted2, $numbers_sorted3);\n\
    \    my($i, $j, $k, $temp);\n    my($num_length) = length($numbers);\n    my($num_digits)\
    \ = $num_length / 3;\n    my($num_digits_2) = $num_digits / 2;\n    my($num_digits_3)\
    \ = $num_digits - $num_digits_2;"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
