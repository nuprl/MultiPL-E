name: HumanEval_161_solve
language: humaneval_to_perl.py
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# solve(\"1234\") = \"4321\"\n# solve(\"ab\") = \"AB\"\n\
  # solve(\"#a@C\") = \"#A@c\"\nsub solve {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n\
  \        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"\
  ),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $res = \"\";\n    my $i = 0;\n    my $len = length($s);\n  \
    \  while($i < $len) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /^[a-z]/i)\
    \ {\n            $res .= uc(substr($s, $i, 1));\n            $i += 1;\n      \
    \  } elsif ($c =~ /^[A-Z]/i) {\n            $res .= uc(substr($s, $i, 1));\n \
    \           $i += 1;\n        } else {\n            $res .= $c;\n            $i\
    \ += 1;\n        }\n    }\n    return $res;\n}", "    \n    my $len = length($s);\n\
    \    \n    if ($len == 0) {\n        return $s;\n    }\n    \n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $temp;\n    my $temp2;\n\
    \    my $temp3;\n    my $temp4;\n    my $temp5;\n    my $temp6;\n    my $temp7;\n\
    \    my $temp8;\n    my $temp9;\n    my $temp10;\n    my $temp11;\n    my $temp12;\n\
    \    my $temp13;\n    my $temp14;\n    my $temp15;\n    my $temp16;\n    my $temp17;\n\
    \    my $temp18;\n    my $temp19;\n    my $temp20;\n    my $temp21;\n    my $temp22;\n\
    \    my $temp23;\n    my $temp24;\n    my $temp25;\n    my $temp26;\n    my $temp27;\n\
    \    my $temp28;\n    my $temp29;\n    my $temp30;\n    my $temp31;\n    my $temp32;\n\
    \    my $temp33;\n    my $temp34;\n    my $temp35;\n    my $temp36;\n    my $temp37;\n\
    \    my $temp38;\n    my $temp39;\n    my $temp40;\n    my $temp41;\n    my $temp42;\n\
    \    my $temp43;\n    my $temp44;\n    my $temp45;\n    my $temp46;\n    my $temp47;\n\
    \    my $temp48;\n    my $temp49;\n    my $temp50;\n    my $temp51;\n    my $temp52;\n\
    \    my $temp53;\n    my $temp54;\n    my $temp55;\n    my $temp56;\n    my $temp57;\n\
    \    my $temp58;\n    my $temp59;\n    my $temp60;\n    my $temp61;\n    my $temp62;\n\
    \    my $temp63;\n    my $temp64;\n    my $temp65;\n    my $temp66;\n    my $temp67;\n\
    \    my $temp68;\n    my $temp69;\n    my $temp70;\n    my $temp71;\n    my $temp72;\n\
    \    my $temp73;\n    my $temp74;\n    my $temp75;\n    my $temp76;\n    my $temp77;\n\
    \    my $temp78;\n    my $temp79;\n    my $temp80;\n    my $temp81;\n    my $temp",
  "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     my $c = substr($s, $i, 1);\n        if($c =~ /^[a-zA-Z]+$/) {\n        \
    \    $result .= ucfirst($c);\n        } elsif($c =~ /^[a-zA-Z]+$/) {\n       \
    \     $result .= lcfirst($c);\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    \n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=perl,string |>\n<code>", "    my $len = length($s);\n    my $i = 0;\n\
    \    my $reverse = \"\";\n    \n    while($i < $len) {\n        if($s[i] eq \"\
    #\") {\n            $i++;\n            while($i < $len) {\n                if($s[i]\
    \ eq \"@\") {\n                    $i++;\n                    while($i < $len)\
    \ {\n                        if($s[i] eq \"#\") {\n                          \
    \  $i++;\n                            while($i < $len) {\n                   \
    \             if($s[i] eq \"@\") {\n                                    $i++;\n\
    \                                    while($i < $len) {\n                    \
    \                    if($s[i] eq \"#\") {\n                                  \
    \          $i++;\n                                            while($i < $len)\
    \ {\n                                                if($s[i] eq \"@\") {\n  \
    \                                                  $i++;\n                   \
    \                                 while($i < $len) {\n                       \
    \                                 if($s[i] eq \"#\") {\n                     \
    \                                       $i++;\n                              \
    \                              while($i < $len) {\n                          \
    \                                      if($s[i] eq \"@\") {\n                \
    \                                                    $i++;\n                 \
    \                                                   while($i < $len) {\n     \
    \                                                                   if($s[i] eq\
    \ \"#\") {\n                                                                 \
    \           $i++;\n                                                          \
    \                  while($i < $len) {\n                                      \
    \                                          if($s[i] eq \"@\") {\n            \
    \                                                                        $i++;\n\
    \                                                                            \
    \        while($i < $len) {\n                                                \
    \                                        if($s[i] eq \"#\") {\n              \
    \                                                                            \
    \  $i++;\n                                                                   \
    \                         while($i < $len) {\n                               \
    \                                                                 if($s[i] eq\
    \ \"@\") {\n                                                                 \
    \                                   $i++;\n                                  \
    \                                                                  while($i <\
    \ $len) {\n                                                                  \
    \                                      if($s[i] eq \"#\") {\n                \
    \                                                                            \
    \                $i++;\n                                                     \
    \                                                       while($i < $len) {\n \
    \                                                                            \
    \                                   if($s[i] eq \"@\") {\n                   \
    \                                                                            \
    \                     $i++;\n                                                \
    \                                                                    while($i\
    \ < $len) {\n                                                                \
    \                                                        if($s[i] eq \"#\") {\n\
    \                                                                            \
    \                                                $i++;\n                     \
    \                                                                            \
    \                           while($i < $len) {\n                             \
    \                                                                            \
    \                       if($s[i] eq \"@\") {\n                               \
    \                                                                            \
    \                         $i++;\n                                            \
    \                                                                            \
    \            while($i < $len) {\n                                            \
    \                                                                            \
    \                if($s[i] eq \"#\") {\n                                      \
    \                                                                            \
    \                          $i++;\n                                           \
    \                                                                            \
    \                     while($i < $len) {\n                                   \
    \                                                                            \
    \                                 if($s[i] eq \"@\") {\n                     \
    \                                                                            \
    \                                                   $i++;\n                  \
    \                                                                            \
    \                                                      while($i < $len) {\n  \
    \                                                                            \
    \                                                                          if($s[i]\
    \ eq \"#\") {\n                                                              \
    \                                                                            \
    \                  $i++;\n                                                   \
    \                                                                            \
    \                             while($i < $len) {\n                           \
    \                                                                            \
    \                                                         if($s[i] eq \"@\") {\n\
    \                                                                            \
    \                                                                            \
    \            $i++;\n                                                         \
    \                                                                            \
    \                               while($i < $len) {\n                         \
    \                                       ", "    my $res = \"\";\n    my $i = 0;\n\
    \    my $len = length($s);\n    while($i < $len) {\n        my $c = substr($s,\
    \ $i, 1);\n        if($c =~ /[a-z]/) {\n            $c =~ tr/a-z/A-Z/;\n     \
    \   }\n        $res .= $c;\n        $i++;\n    }\n    if($i == $len) {\n     \
    \   $res =~ tr/A-Z/a-z/;\n    }\n    return $res;\n}", "    \n    my $result =\
    \ \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my $case = $char\
    \ =~ /[a-z]/i ? \"upper\" : \"lower\";\n        $result .= $char =~ /[a-z]/i ?\
    \ ucfirst($char) : lcfirst($char);\n    }\n    \n    return $result if length($result)\
    \ > 0;\n    \n    return $s;\n}", "    \n    my $rev = \"\";\n    \n    foreach\
    \ my $char (split(//,$s)) {\n        \n        if ($char =~ /[a-z]/i) {\n    \
    \        $rev.=uc($char);\n        }\n        elsif ($char =~ /[A-Z]/i) {\n  \
    \          $rev.=lc($char);\n        }\n        else {\n            $rev.=$char;\n\
    \        }\n    }\n    \n    return $rev;\n}", "    my $res = \"\";\n    my $i\
    \ = 0;\n    my $len = length($s);\n    while($i < $len) {\n        if($s[i] =~\
    \ /^[a-z]/i) {\n            $res .= ucfirst($s[i]);\n            $i++;\n     \
    \   } elsif($s[i] =~ /^[A-Z]/i) {\n            $res .= lcfirst($s[i]);\n     \
    \       $i++;\n        } else {\n            $res .= $s[i];\n            $i++;\n\
    \        }\n    }\n    return $res;\n}\n</code>\n<|/ a tags=perl,string,reverse\
    \ |>\n<| a dscore=0 |>\n<code>", "    my $result = \"\";\n    my $i = 0;\n   \
    \ while($i < length($s)) {\n        if($s[i] eq \"#\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"@\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"$\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"%\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"^\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"&\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"*\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"(\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \")\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"+\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"-\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \".\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"/\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"=\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"<\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"=\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \">\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"?\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"!\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif", "    my $result = \"\";\n    my $i = 0;\n\
    \    \n    while ($i < length($s)) {\n        my $c = substr($s, $i, 1);\n   \
    \     \n        if ($c =~ /^[a-zA-Z]/) {\n            $result .= uc($c);\n   \
    \         $i++;\n        } elsif ($c =~ /^\\W$/) {\n            $result .= $c;\n\
    \            $i++;\n        } else {\n            $result .= $c;\n        }\n\
    \    }\n    \n    return $result;\n}", "    my $res = \"\";\n    my $i = 0;\n\
    \    \n    while($i < length($s)) {\n        my $c = substr($s, $i, 1);\n    \
    \    \n        if($c =~ /[a-z]/i) {\n            $c =~ tr/a-z/A-Z/;\n        }\n\
    \        elsif($c =~ /[A-Z]/i) {\n            $c =~ tr/A-Z/a-z/;\n        }\n\
    \        \n        $res .= $c;\n        $i++;\n    }\n    \n    return $res;\n\
    }", "    my @chars = split(//,$s);\n    my $res = \"\";\n    foreach my $char\
    \ (@chars) {\n        my $c = uc($char);\n        if ($c eq $char) {\n       \
    \     $res .= $char;\n        } else {\n            $res .= $c;\n        }\n \
    \   }\n    return $res;\n}\n</code>\n<|/ a tags=perl,string |>\n<| c |>\nThis\
    \ doesn't work if there are multiple letters in a row. For example, \"aA\" returns\
    \ \"Aa\".\n<|/ c |>\n<| c |>\n, thanks for pointing that out. I've updated the\
    \ answer accordingly.\n<|/ c |>\n<| a tags=perl,string |>\n<code>", "    my $result\
    \ = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my $lower = uc($char);\n\
    \        my $upper = lc($char);\n        \n        if ($lower eq $char) {\n  \
    \          $result .= $upper;\n        } elsif ($upper eq $char) {\n         \
    \   $result .= $lower;\n        } else {\n            $result .= $char;\n    \
    \    }\n    }\n    \n    return $result;\n}", "    my $len = length($s);\n   \
    \ my $i = 0;\n    my $res = \"\";\n    my $tmp = \"\";\n    my $flag = 0;\n  \
    \  my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n\
    \    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n\
    \    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13\
    \ = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my\
    \ $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n\
    \    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24\
    \ = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my\
    \ $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n\
    \    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35\
    \ = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my\
    \ $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n\
    \    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46\
    \ = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my\
    \ $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n\
    \    my $flag54 = 0;\n    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57\
    \ = 0;\n    my $flag58 = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my\
    \ $flag61 = 0;\n    my $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n\
    \    my $flag65 = 0;\n    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68\
    \ = 0;\n    my $flag69 = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my\
    \ $flag72 = 0;\n    my $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n\
    \    my $flag76 = 0;\n    my $flag77 = 0;\n    my $flag78 = 0;\n    my $flag79\
    \ = 0;\n    my $flag80 = 0;\n    my $flag81 = 0;\n    my $flag82 = 0;\n    my\
    \ $flag83", "    my $res = \"\";\n    \n    foreach my $char (split(//, $s)) {\n\
    \        my $toUpper = uc($char);\n        my $toLower = lc($char);\n        \n\
    \        if ($toUpper eq $toLower) {\n            $res .= $toUpper;\n        }\
    \ else {\n            $res .= $toLower;\n        }\n    }\n    \n    return $res;\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    my $len = length($s);\n    my\
    \ $flag = 0;\n    my $temp = \"\";\n    my $flag2 = 0;\n    my $flag3 = 0;\n \
    \   my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n\
    \    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 =\
    \ 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15\
    \ = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my\
    \ $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n\
    \    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26\
    \ = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my\
    \ $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n\
    \    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37\
    \ = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my\
    \ $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n\
    \    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48\
    \ = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my\
    \ $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n    my $flag55 = 0;\n\
    \    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58 = 0;\n    my $flag59\
    \ = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my $flag62 = 0;\n    my\
    \ $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n    my $flag66 = 0;\n\
    \    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69 = 0;\n    my $flag70\
    \ = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my $flag73 = 0;\n    my\
    \ $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n    my $flag77 = 0;\n\
    \    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80 = 0;\n    my $flag81\
    \ = 0;\n    my $flag82 = 0;\n    my $flag83", "    my $result = \"\";\n    my\
    \ $i = 0;\n    my $len = length($s);\n    \n    while($i < $len) {\n        if($s[i]\
    \ eq \"#\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"@\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"$\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"^\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"&\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"*\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"(\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \")\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"[\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"]\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"<\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \">\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"|\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"-\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \".\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"/\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"?\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"=\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"!\") {\n            $result\
    \ .= $s[$i];\n", "    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        my $cased = uc($char);\n        if ($cased eq $char) {\n   \
    \         $result .= $char;\n        } else {\n            $result .= $cased;\n\
    \        }\n    }\n    \n    return $result;\n}", "    \n    my $res = \"\";\n\
    \    \n    foreach my $char (split(//, $s)) {\n        if ($char =~ /^[a-z]+$/i)\
    \ {\n            $res .= uc($char);\n        }\n        else {\n            $res\
    \ .= $char;\n        }\n    }\n    \n    return $res;\n}", "    my $result = \"\
    \";\n    my $i = 0;\n    my $len = length($s);\n    while($i < $len) {\n     \
    \   my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n            $result\
    \ .= uc($c);\n            $i++;\n        } elsif($c =~ /[A-Z]/i) {\n         \
    \   $result .= lc($c);\n            $i++;\n        } else {\n            $result\
    \ .= $c;\n            $i++;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    my $ret = \"\";\n    \n   \
    \ foreach my $char (split(//, $s)) {\n        my $c = $char;\n        if ($c =~\
    \ /[a-z]/i) {\n            $c =~ tr/a-z/A-Z/;\n        }\n        $ret .= $c;\n\
    \    }\n    \n    return $ret;\n}", "    my $result = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $len = $s->length;\n    \n    while($i < $len) {\n   \
    \     if($s->[$i] =~ /[a-zA-Z]/) {\n            $result .= ucfirst($s->[$i]);\n\
    \            $i++;\n        } else {\n            $result .= $s->[$i];\n     \
    \       $i++;\n        }\n    }\n    \n    while($j < $len) {\n        if($s->[$j]\
    \ =~ /[a-zA-Z]/) {\n            $result .= ucfirst($s->[$j]);\n            $j++;\n\
    \        } else {\n            $result .= $s->[$j];\n            $j++;\n     \
    \   }\n    }\n    \n    return $result;\n}", "    \n    my $result = \"\";\n \
    \   \n    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s,\
    \ $i, 1);\n        \n        if($c =~ /[a-z]/i) {\n            $c =~ tr/a-z/A-Z/;\n\
    \        }\n        \n        $result .= $c;\n    }\n    \n    if(length($result)\
    \ == 0) {\n        $result =~ tr/A-Z/a-z/;\n    }\n    \n    return $result;\n\
    }\n</code>\n<|/ a tags=perl,regex |>\n<| a tags=perl,regex |>\n<code>", "    \n\
    \    my @chars = split(//,$s);\n    my $result = \"\";\n    \n    foreach my $char\
    \ (@chars) {\n        my $upper = uc($char);\n        my $lower = lc($char);\n\
    \        \n        if($char =~ /^[a-z]/i) {\n            $result .= $upper;\n\
    \        }\n        elsif($char =~ /^[A-Z]/i) {\n            $result .= $lower;\n\
    \        }\n        elsif($char =~ /^[0-9]/i) {\n            $result .= $char;\n\
    \        }\n        else {\n            $result .= $char;\n        }\n    }\n\
    \    \n    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    my\
    \ $len = length($s);\n    while($i < $len) {\n        if($s[i] eq \"#\") {\n \
    \           $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"@\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"$\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"^\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"&\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"*\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"(\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \")\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"[\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"]\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"<\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"=\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"|\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"+\") {\n            $result .= $s[$i];\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"-\") {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \".\") {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"/\") {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"%\") {\n            $result .= $s[$i];\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"?\") {\n            $result .= $s[$i];\n\
    \            $i++", "    \n    my $res = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        if ($char =~ /[a-z]/i) {\n            $res .= uc($char);\n \
    \       } else {\n            $res .= $char;\n        }\n    }\n    \n    return\
    \ $res;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `solve(\"\
    ab\")` returns `\"A@b\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\n: Thanks for\
    \ pointing that out. I fixed the code. Now it works.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for pointing that out. I fixed the code. Now it works.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    my $reverse = \"\";\n    my $i = 0;\n    \n    while ($i <\
    \ length($s)) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /^[a-z]/i)\
    \ {\n            $reverse .= uc($c);\n        } else {\n            $reverse .=\
    \ $c;\n        }\n        $i++;\n    }\n    return $reverse;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>", "    \n    my $reversed = \"\";\n    \n   \
    \ foreach my $char (split(//, $s)) {\n        my $cased = uc($char);\n       \
    \ \n        if ($cased eq $char) {\n            $reversed .= $char;\n        }\
    \ else {\n            $reversed .= $cased;\n        }\n    }\n    \n    return\
    \ $reversed if length($reversed) > 0;\n    \n    return $s;\n}", "    my $res\
    \ = \"\";\n    my $i = 0;\n    \n    while($i < length($s)) {\n        if($s[i]\
    \ eq substr($s, $i, 1)) {\n            $res .= substr($s, $i, 1) . substr($s,\
    \ $i+1, 1);\n            $i += 2;\n        } else {\n            $res .= substr($s,\
    \ $i, 1);\n            $i += 1;\n        }\n    }\n    \n    return $res;\n}",
  "    my $res = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $len = $s->length;\n\
    \    while($i < $len) {\n        if($s->[$i] =~ /^[a-zA-Z]+$/) {\n           \
    \ $res .= ucfirst($s->[$i]);\n            $i++;\n        }\n        elsif($s->[$i]\
    \ =~ /^[a-zA-Z]+$/) {\n            $res .= lcfirst($s->[$i]);\n            $i++;\n\
    \        }\n        else {\n            $res .= $s->[$i];\n            $i++;\n\
    \        }\n    }\n    return $res;\n}", "    \n    my $result = \"\";\n    \n\
    \    foreach my $char (split(//, $s)) {\n        if ($char =~ /^[a-z]/i) {\n \
    \           $char =~ tr/a-z/A-Z/;\n        }\n        elsif ($char =~ /^[A-Z]/i)\
    \ {\n            $char =~ tr/A-Z/a-z/;\n        }\n        elsif ($char =~ /^\\\
    #/) {\n            $char =~ s/\\#/@/;\n        }\n        elsif ($char =~ /^\\\
    @/) {\n            $char =~ s/\\@/#/;\n        }\n        elsif ($char =~ /^\\\
    $/) {\n            $char =~ s/\\$/$/;\n        }\n        elsif ($char =~ /^\\\
    ./) {\n            $char =~ s/\\./\\./;\n        }\n        elsif ($char =~ /^\\\
    */) {\n            $char =~ s/\\*/*/;\n        }\n        elsif ($char =~ /^\\\
    +/) {\n            $char =~ s/\\+/+/;\n        }\n        elsif ($char =~ /^\\\
    -/) {\n            $char =~ s/\\-/-/;\n        }\n        elsif ($char =~ /^\\\
    :/) {\n            $char =~ s/\\:/:/;\n        }\n        elsif ($char =~ /^\\\
    ^/) {\n            $char =~ s/\\^/\\^/;\n        }\n        elsif ($char =~ /^\\\
    ~/) {\n            $char =~ s/\\~/~/;\n        }\n        elsif ($char =~ /^\\\
    !/) {\n            $char =~ s/\\!/\\!/;\n        }\n        elsif ($char =~ /^\\\
    &/) {\n            $char =~ s/\\&/\\&/;\n        }\n        elsif ($char =~ /^\\\
    */) {\n            $char =~ s/\\*/\\*/;\n        }\n        elsif ($char =~ /^\\\
    ./) {\n            $char =~ s/\\./\\./;\n        }\n        elsif ($char =~ /^\\\
    +/) {\n            $char =~ s/\\+/+/;\n        }\n        elsif ($char =~ /^\\\
    -/) {\n            $char =~ s/\\-/-/;\n        }\n        elsif ($char =~ /^\\\
    :/) {\n            $char =~ s/\\:/:/", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n\
    \        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n    \
    \    }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    my $len = length($s);\n    my\
    \ $letter;\n    my $flag = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my\
    \ $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n  \
    \  my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n\
    \    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15\
    \ = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my\
    \ $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n\
    \    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26\
    \ = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my\
    \ $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n\
    \    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37\
    \ = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my\
    \ $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n\
    \    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48\
    \ = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my\
    \ $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n    my $flag55 = 0;\n\
    \    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58 = 0;\n    my $flag59\
    \ = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my $flag62 = 0;\n    my\
    \ $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n    my $flag66 = 0;\n\
    \    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69 = 0;\n    my $flag70\
    \ = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my $flag73 = 0;\n    my\
    \ $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n    my $flag77 = 0;\n\
    \    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80 = 0;\n    my $flag81\
    \ = 0;\n    my $flag82 = 0;\n    my $flag83", "    my $result = \"\";\n    \n\
    \    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n\
    \        \n        if($c =~ /^[a-z]/i) {\n            $result .= uc($c);\n   \
    \     } elsif($c =~ /^[A-Z]/i) {\n            $result .= lc($c);\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    \n    return $result;\n\
    }", "    my $res = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n\
    \        my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n         \
    \   $res .= uc($c);\n        } else {\n            $res .= $c;\n        }\n  \
    \  }\n    return $res;\n}", "    my $res = \"\";\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    my $l = length($s);\n    while($i < $l) {\n        if($s[i]\
    \ eq \"#\") {\n            $i++;\n            $j = 0;\n            while($j <\
    \ $l) {\n                if($s[$j] eq \"@\") {\n                    $j++;\n  \
    \                  $k = 0;\n                    while($k < $l) {\n           \
    \             if($s[$k] eq \"#\") {\n                            $k++;\n     \
    \                       $res = $s[$i-1].$s[$j-1].$s[$k-1].$res;\n            \
    \                $i++;\n                            $j++;\n                  \
    \          $k++;\n                        } else {\n                         \
    \   $k++;\n                        }\n                    }\n                }\
    \ else {\n                    $k++;\n                }\n            }\n      \
    \  } else {\n            $i++;\n        }\n    }\n    return $res;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works fine for small\
    \ strings, but for large strings it takes too much time to execute.\n<|/ c |>\n\
    <| c |>\nI tested it on large strings and it works fine. Can you give an example\
    \ of a large string that does not work?\n<|/ c |>\n<| c |>\nI tested it on \"\
    #a@C\" string and it takes too much time to execute.\n<|/ c |>\n<| c |>\nI tested\
    \ it on \"#a@C\" string and it takes too much time to execute.\n<|/ c |>\n<| c\
    \ |>\nI tested it on \"#a@C\" string and it takes too much time to execute.\n\
    <|/ c |>\n<| a |>\n<code>", "    my @chars = split(//, $s);\n    my $res = \"\"\
    ;\n    foreach my $char (@chars) {\n        my $case = $char =~ /[a-z]/i ? 1 :\
    \ 0;\n        $char =~ s/[a-z]/[A-Z]/i;\n        $char =~ s/[A-Z]/[a-z]/i;\n \
    \       $res .= $case ? $char : \"$char\";\n    }\n    return $res;\n}", "   \
    \ $s =~ s/^#//;\n    $s =~ s/^@//;\n    $s =~ s/^&//;\n    $s =~ s/^$//;\n   \
    \ $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+/ /g;\n   \
    \ $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n  \
    \  $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n   \
    \ $s =~ s/^\\s+//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n  \
    \  $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+/ /g;\n   \
    \ $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n  \
    \  $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n   \
    \ $s =~ s/^\\s+//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+$//;", "    my $result = \"\";\n    my $i = 0;\n    \n    while($i < length($s))\
    \ {\n        my $letter = $s[$i];\n        if($letter =~ /^[a-z]/i) {\n      \
    \      $letter = uc($letter);\n        }\n        $result .= $letter;\n      \
    \  $i++;\n    }\n    \n    if(length($result) == 0) {\n        $result = uc($s);\n\
    \    }\n    \n    return $result;\n}", "    $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~ s/^#?([a-z])/uc($1)/ge;\n    $s\
    \ =~ s/^#?([A-Za-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~\
    \ s/^#?([a-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n   \
    \ $s =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~ s/^#?([a-z])/uc($1)/ge;\n    $s =~\
    \ s/^#?([A-Za-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~ s/^#?([a-z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Z])/uc($1)/ge;\n   \
    \ $s =~ s/^#?([a-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n    $s\
    \ =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~ s/^#?([a-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~ s/^#?([a-z])/uc($1)/ge;\n    $s\
    \ =~ s/^#?([A-Za-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~\
    \ s/^#?([a-z", "    my $i = 0;\n    my $len = length($s);\n    my $res = \"\"\
    ;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n\
    \    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n\
    \    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n\
    \    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    \    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n\
    \    my $tmp86;\n", "    my $res = \"\";\n    my $i = 0;\n    my $len = length($s);\n\
    \    while($i < $len) {\n        if($s[i] =~ /^[a-z]/i) {\n            $res .=\
    \ uc($s[i]);\n            $i++;\n        }\n        elsif($s[i] =~ /^[A-Z]/i)\
    \ {\n            $res .= lc($s[i]);\n            $i++;\n        }\n        else\
    \ {\n            $res .= $s[i];\n            $i++;\n        }\n    }\n    return\
    \ $res;\n}", "    my $i = 0;\n    my $len = length($s);\n    my $res = \"\";\n\
    \    \n    while($i < $len) {\n        my $c = substr($s, $i, 1);\n        \n\
    \        if($c =~ /^[a-z]/i) {\n            $res .= uc($c);\n            $i++;\n\
    \        } elsif($c =~ /^[A-Z]/i) {\n            $res .= $c;\n            $i++;\n\
    \        } else {\n            $res .= $c;\n            $i++;\n        }\n   \
    \ }\n    \n    return $res;\n}", "    \n    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//,$s)) {\n        my $lower = uc($char);\n        my $upper\
    \ = uc($char);\n        \n        if ($char =~ /^[a-z]/) {\n            $upper\
    \ = uc($char);\n        }\n        \n        $result .= $lower . $upper;\n   \
    \ }\n    \n    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n\
    \    my $len = length($s);\n    while($i < $len) {\n        if($s[i] =~ /^[a-zA-Z]$/)\
    \ {\n            $result .= uc($s[i]);\n            $i++;\n        } elsif($s[i]\
    \ =~ /^[a-zA-Z]/) {\n            $result .= $s[i];\n            $i++;\n      \
    \  } else {\n            $result .= $s[i];\n            $i++;\n        }\n   \
    \ }\n    return $result;\n}\n</code>\n<|/ a tags=perl,string |>\n<| c |>\nThanks\
    \ for your answer. Your code works fine but i want to know why my code is not\
    \ working and what is the reason behind it.\n<|/ c |>\n<| c |>\nI added the explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Your code works fine but i want to know why my code is not working and what\
    \ is the reason behind it.\n<|/ c |>\n<| c |>\nI added the explanation to the\
    \ answer. Hope it helps.\n<|/ c |>\n<| a tags=perl,string |>\n<code>", "    my\
    \ $result = \"\";\n    my $i = 0;\n    my $len = length($s);\n    while($i < $len)\
    \ {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n      \
    \      $result .= uc($c);\n            $i++;\n        } else {\n            $result\
    \ .= $c;\n        }\n    }\n    if($i == $len) {\n        $result .= $s;\n   \
    \ }\n    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    \n\
    \    while ($i < length($s)) {\n        if ($s[i] =~ /^[a-z]/i) {\n          \
    \  $result .= uc($s[i]);\n            $i++;\n        } else {\n            $result\
    \ .= $s[i];\n        }\n    }\n    \n    if (length($result) == 0) {\n       \
    \ $result = uc($s);\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,string,algorithm\
    \ |>\n<| c |>\nThe `uc($s[i])` part is redundant. `uc` already does what you want.\n\
    <|/ c |>\n<| c |>\n: Yes, but `uc` doesn't do what you want if the string starts\
    \ with a letter.\n<|/ c |>\n<| c |>\n: Yes, but `uc` doesn't do what you want\
    \ if the string starts with a letter.\n<|/ c |>\n<| c |>\n: Yes, but `uc` doesn't\
    \ do what you want if the string starts with a letter.\n<|/ c |>\n<| c |>\n: Yes,\
    \ but `uc` doesn't do what you want if the string starts with a letter.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "    my $reverse = \"\";\n    \n    foreach my\
    \ $char (split(//, $s)) {\n        my $lower = lc($char);\n        my $upper =\
    \ uc($char);\n        \n        if ($lower eq $char) {\n            $reverse .=\
    \ $upper;\n        } elsif ($upper eq $char) {\n            $reverse .= $lower;\n\
    \        } else {\n            $reverse .= $char;\n        }\n    }\n    \n  \
    \  return $reverse;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i\
    \ < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        \n      \
    \  if($c =~ /[a-z]/) {\n            $result .= uc($c);\n        } else {\n   \
    \         $result .= $c;\n        }\n    }\n    \n    if(length($result) == 0)\
    \ {\n        $result = uc($s);\n    }\n    \n    return $result;\n}", "    my\
    \ $result = \"\";\n    my $i = 0;\n    \n    while($i < length($s)) {\n      \
    \  my $c = substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i) {\n      \
    \      $result .= uc($c);\n            $i++;\n        }\n        elsif($c =~ /[A-Z]/i)\
    \ {\n            $result .= lc($c);\n            $i++;\n        }\n        else\
    \ {\n            $result .= $c;\n            $i++;\n        }\n    }\n    \n \
    \   return $result;\n}", "    \n    my $result = \"\";\n    \n    my $i = 0;\n\
    \    \n    while($i < length($s)) {\n        my $c = substr($s, $i, 1);\n    \
    \    \n        if($c =~ /^[a-z]/i) {\n            $result .= uc($c);\n       \
    \     $i++;\n        }\n        elsif($c =~ /^[A-Z]/i) {\n            $result\
    \ .= lc($c);\n            $i++;\n        }\n        else {\n            $result\
    \ .= $c;\n            $i++;\n        }\n    }\n    \n    return $result;\n}",
  "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n        my\
    \ $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n            $c =~ tr/a-z/A-Z/;\n\
    \        }\n        elsif($c =~ /[A-Z]/i) {\n            $c =~ tr/A-Z/a-z/;\n\
    \        }\n        elsif($c =~ /[0-9]/i) {\n            $c =~ tr/0-9/A-Z/;\n\
    \        }\n        elsif($c =~ /[^a-zA-Z0-9]/) {\n            $c =~ tr/A-Z/a-z/;\n\
    \        }\n        $result .= $c;\n        $i++;\n    }\n    return $result;\n\
    }", "    \n    my $result = \"\";\n    \n    foreach my $char (split(//, $s))\
    \ {\n        if ($char =~ /^[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n  \
    \      }\n        elsif ($char =~ /^[A-Z]/i) {\n            $char =~ tr/A-Z/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\W/i) {\n            $char =~ tr/\\W/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\W/i) {\n            $char =~ tr/\\W/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\W/i) {\n            $char =~ tr/\\W/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\W/i) {\n            $char =~ tr/\\W/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\W/i) {\n            $char =~ tr/\\W/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/A-Z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\s/i) {\n            $char =~ tr/\\s/a-z/;\n\
    \        }\n        elsif ($char =~ /^\\W/i) {\n            $char =~ tr/\\W/A-Z/;\n\
    \        }", "    my $result = \"\";\n    \n    foreach my $char (split(//, $s))\
    \ {\n        my $is_letter = is_letter($char);\n        \n        if ($is_letter)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .=\
    \ $char;\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n\
    \    foreach my $char (split(//, $s)) {\n        if ($char =~ /^[a-z]/i) {\n \
    \           $result .= uc($char);\n        }\n        else {\n            $result\
    \ .= $char;\n        }\n    }\n    \n    return $result;\n}", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    my $flag2 =\
    \ 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6\
    \ = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10\
    \ = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my\
    \ $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n\
    \    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21\
    \ = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my\
    \ $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n\
    \    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32\
    \ = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my\
    \ $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n\
    \    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43\
    \ = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my\
    \ $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n\
    \    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54\
    \ = 0;\n    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57 = 0;\n    my\
    \ $flag58 = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n\
    \    my $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65\
    \ = 0;\n    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68 = 0;\n    my\
    \ $flag69 = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n\
    \    my $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76\
    \ = 0;\n    my $flag77 = 0;\n    my $flag78 = 0;\n    my $flag79 = 0;\n    my\
    \ $flag80 = 0;\n    my $flag81 = 0;\n    my $flag82 = 0;\n    my $flag83 = 0;\n\
    \    my $flag84 = 0;", "    my $res = \"\";\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    while($i < length($s)) {\n        if($s[i] eq substr($s,\
    \ $i, 1)) {\n            $k++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq substr($s, $i, 0)) {\n            $k++;\n            $i++;\n        }\n \
    \       elsif($i == length($s)) {\n            $k++;\n            $i++;\n    \
    \    }\n        elsif($j == length($s)) {\n            $k++;\n            $j++;\n\
    \        }\n        elsif($k == length($s)) {\n            $k = 0;\n         \
    \   $i++;\n            $j++;\n        }\n        elsif($k == length($s)) {\n \
    \           $k = 0;\n            $i++;\n            $j++;\n        }\n       \
    \ elsif($k == length($s)) {\n            $k = 0;\n            $i++;\n        \
    \    $j++;\n        }\n        elsif($k == length($s)) {\n            $k = 0;\n\
    \            $i++;\n            $j++;\n        }\n        elsif($k == length($s))\
    \ {\n            $k = 0;\n            $i++;\n            $j++;\n        }\n  \
    \      elsif($k == length($s)) {\n            $k = 0;\n            $i++;\n   \
    \         $j++;\n        }\n        elsif($k == length($s)) {\n            $k\
    \ = 0;\n            $i++;\n            $j++;\n        }\n        elsif($k == length($s))\
    \ {\n            $k = 0;\n            $i++;\n            $j++;\n        }\n  \
    \      elsif($k == length($s)) {\n            $k = 0;\n            $i++;\n   \
    \         $j++;\n        }\n        elsif($k == length($s)) {\n            $k\
    \ = 0;\n            $i++;\n            $j++;\n        }\n        elsif($k == length($s))\
    \ {\n            $k = 0;\n            $i++;\n            $j++;\n        }\n  \
    \      elsif($k == length($s)) {\n            $k = 0;\n            $i++;\n   \
    \         $j++;\n        }\n        elsif($k == length($s)) {\n            $k\
    \ = 0;\n            $i++;\n            $j++;\n        }\n        elsif($k == length($s))\
    \ {\n            $k = 0;\n            $i++;\n            $j++;\n        }\n  \
    \      elsif($k == length($s)) {\n            $k = 0;\n            $i++;\n   \
    \         $j++;\n        }\n        elsif($k == length($s)) {\n            $k\
    \ = 0;\n            $i++;\n            $j++;\n        }\n        elsif($k == length($s))\
    \ {\n            $k = 0;\n            $i++", "    \n    my $result = \"\";\n \
    \   \n    my $i = 0;\n    \n    while($i < length($s)) {\n        \n        my\
    \ $c = substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i) {\n          \
    \  $c =~ tr/a-z/A-Z/;\n        }\n        elsif($c =~ /[A-Z]/i) {\n          \
    \  $c =~ tr/A-Z/a-z/;\n        }\n        \n        $result .= $c;\n        \n\
    \        $i += 1;\n    }\n    \n    return $result;\n}", "    my $res = \"\";\n\
    \    my $i = 0;\n    my $len = length($s);\n    while($i < $len) {\n        if($s[i]\
    \ =~ /[a-z]/i) {\n            $res .= uc($s[$i]);\n            $i++;\n       \
    \ } else {\n            $res .= $s[$i];\n        }\n        $i++;\n    }\n   \
    \ return $res;\n}\n</code>\n<|/ a tags=perl,string,reverse |>\n<| a dscore=0 |>\n\
    <code>", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++)\
    \ {\n        if($s[i] eq \"#\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"@\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"A\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"B\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"C\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"a\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"b\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"c\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"@\") {\n            $result .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"#\") {\n            $result .= $s[$i];\n        }\n\
    \        else {\n            $result .= $s[$i];\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $flag = 0;\n    my $temp = \"\";\n    my $flag2 = 0;\n    my $flag3 = 0;\n \
    \   my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n\
    \    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 =\
    \ 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15\
    \ = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my\
    \ $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n\
    \    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26\
    \ = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my\
    \ $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n\
    \    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37\
    \ = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my\
    \ $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n\
    \    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48\
    \ = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my\
    \ $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n    my $flag55 = 0;\n\
    \    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58 = 0;\n    my $flag59\
    \ = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my $flag62 = 0;\n    my\
    \ $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n    my $flag66 = 0;\n\
    \    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69 = 0;\n    my $flag70\
    \ = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my $flag73 = 0;\n    my\
    \ $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n    my $flag77 = 0;\n\
    \    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80 = 0;\n    my $flag81\
    \ = 0;\n    my $flag82 = 0;\n    my $flag83 = 0;\n", "    \n    my $result = \"\
    \";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        my $char = substr($s,\
    \ $i, 1);\n        \n        if($char =~ /^[a-z]/i) {\n            $result .=\
    \ uc($char);\n        }\n        elsif($char =~ /^[A-Z]/i) {\n            $result\
    \ .= lc($char);\n        }\n        else {\n            $result .= $char;\n  \
    \      }\n    }\n    \n    return $result;\n}", "    my $len = length($s);\n \
    \   my $i = 0;\n    my $j = 0;\n    my $result = '';\n    \n    while($i < $len)\
    \ {\n        my $c = substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i)\
    \ {\n            $result .= substr($s, $i, 1);\n            $i++;\n        }\n\
    \        elsif($c =~ /[A-Z]/i) {\n            $result .= substr($s, $i, 1);\n\
    \            $i++;\n        }\n        elsif($c =~ /[0-9]/i) {\n            $result\
    \ .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($c =~ /[@#]/i)\
    \ {\n            $result .= substr($s, $i, 1);\n            $i++;\n        }\n\
    \        elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n            $result .= substr($s, $i,\
    \ 1);\n            $i++;\n        }\n        elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n\
    \            $result .= substr($s, $i, 1);\n            $i++;\n        }\n   \
    \     elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n            $result .= substr($s, $i,\
    \ 1);\n            $i++;\n        }\n        elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n\
    \            $result .= substr($s, $i, 1);\n            $i++;\n        }\n   \
    \     elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n            $result .= substr($s, $i,\
    \ 1);\n            $i++;\n        }\n        elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n\
    \            $result .= substr($s, $i, 1);\n            $i++;\n        }\n   \
    \     elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n            $result .= substr($s, $i,\
    \ 1);\n            $i++;\n        }\n        elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n\
    \            $result .= substr($s, $i, 1);\n            $i++;\n        }\n   \
    \     elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n            $result .= substr($s, $i,\
    \ 1);\n            $i++;\n        }\n        elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n\
    \            $result .= substr($s, $i, 1);\n            $i++;\n        }\n   \
    \     elsif($c =~ /[^a-zA-Z0-9@#]/i) {\n            $result .= substr($s, $",
  "    my $len = length($s);\n    my $i = 0;\n    my $result = \"\";\n    my $tmp;\n\
    \    while($i < $len) {\n        if($s[i] eq \"#\") {\n            $tmp = $s[$i-1];\n\
    \            $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"@\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"$\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"^\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"&\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"*\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"(\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \")\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"[\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"]\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"<\") {\n            $tmp = $s[$i-1];\n  \
    \          $s[$i-1] = $s[$i];\n            $s[$i] = $tmp;\n            $i++;\n\
    \        }\n        ", "    \n    my $len = length($s);\n    \n    if ($len ==\
    \ 0) {\n        return $s;\n    }\n    \n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n  \
    \  my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n", "    my $result = \"\";\n\
    \    my $i = 0;\n    while($i < length($s)) {\n        my $c = substr($s, $i,\
    \ 1);\n        if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n        \
    \    $i++;\n        }\n        elsif($c =~ /[A-Z]/i) {\n            $result .=\
    \ lc($c);\n            $i++;\n        }\n        else {\n            $result .=\
    \ $c;\n            $i++;\n        }\n    }\n    return $result;\n}", "    my $len\
    \ = length($s);\n    my $res = \"\";\n    my $i;\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($s[$i] =~ /[a-z]/) {\n            $res .= uc($s[$i]);\n\
    \        } else {\n            $res .= $s[$i];\n        }\n    }\n    return $res;\n\
    }\n</code>\n<|/ a tags=perl,regex |>\n<| c |>\nThis doesn't work if the string\
    \ contains only letters.\n<|/ c |>\n<| c |>\nIt does work, just tested it.  It\
    \ also works with strings that contain only letters.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if the string contains only letters.\n<|/ c |>\n<| c |>\nIt does work,\
    \ just tested it.  It also works with strings that contain only letters.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if the string contains only letters.\n<|/ c |>\n\
    <| a tags=perl,regex |>\n<code>", "    \n    my $reverse = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $case = lc($char);\n        if ($case\
    \ eq $char) {\n            $case = uc($case);\n        }\n        $reverse .=\
    \ $case;\n    }\n    \n    return $reverse if length($reverse);\n    \n    return\
    \ $s;\n}", "    my $result = '';\n    my $i = 0;\n    my $len = length($s);\n\
    \    while($i < $len) {\n        my $c = substr($s, $i, 1);\n        my $c_lower\
    \ = lc($c);\n        my $c_upper = uc($c);\n        if($c_lower eq $c_upper) {\n\
    \            $result .= $c_lower;\n            $i++;\n        }\n        else\
    \ {\n            $result .= $c;\n        }\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=perl,string |>\n<| c |>\nThe OP wants to reverse the case of the letters,\
    \ not just convert them to upper or lower case.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that part. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require any additional modules. :)\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't require any additional modules. :)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        my $lower = uc($char);\n        my $upper = uc($char);\n   \
    \     \n        if ($lower =~ /^[a-z]/) {\n            $lower =~ tr/a-z/A-Z/;\n\
    \        }\n        elsif ($upper =~ /^[A-Z]/) {\n            $upper =~ tr/A-Z/a-z/;\n\
    \        }\n        \n        $result .= $lower . $upper;\n    }\n    \n    return\
    \ $result;\n}", "    my $rev = \"\";\n    \n    foreach my $char (split(//, $s))\
    \ {\n        my $lower = uc($char);\n        my $upper = lc($char);\n        \n\
    \        if ($lower eq $char) {\n            $rev .= $upper;\n        } elsif\
    \ ($upper eq $char) {\n            $rev .= $lower;\n        } else {\n       \
    \     $rev .= $char;\n        }\n    }\n    \n    return $rev;\n}", "    my $ret\
    \ = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        my $c =\
    \ substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i) {\n            $ret\
    \ .= uc($c);\n        } else {\n            $ret .= $c;\n        }\n    }\n  \
    \  \n    return $ret;\n}", "    my $res = \"\";\n    my $i = 0;\n    my $j = 0;\n\
    \    my $len = length($s);\n    while($i < $len) {\n        if($s[i] eq \"#\"\
    ) {\n            $i++;\n            $j++;\n        }\n        elsif($s[i] eq \"\
    @\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i] eq\
    \ \"$\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"^\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"&\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"*\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"|\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"!\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"<\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \">\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"=\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"?\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"/\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"\\\\\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"|\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"%\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"+\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"-\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \".\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"*\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"(\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \")\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"[\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i]\
    \ eq \"]\") {\n            $i++;\n            $j++;\n        }\n        elsif($s[i] ",
  "    \n    my @chars = split(//, $s);\n    \n    my $res = \"\";\n    \n    foreach\
    \ my $char (@chars) {\n        my $case = lc($char);\n        \n        if ($case\
    \ eq $char) {\n            $res .= $case;\n        } else {\n            $res\
    \ .= $char;\n        }\n    }\n    \n    return $res;\n}", "    my $result = \"\
    \";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        my $char = substr($s,\
    \ $i, 1);\n        \n        if($char =~ /^[a-z]/i) {\n            $result .=\
    \ uc($char);\n        } elsif($char =~ /^[A-Z]/i) {\n            $result .= lc($char);\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    \n   \
    \ return $result;\n}", "    \n    my $result = \"\";\n    \n    foreach my $char\
    \ (split(//, $s)) {\n        my $is_letter = lc($char) eq $char;\n        \n \
    \       if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n        }\n    \
    \    \n        $result .= $char;\n    }\n    \n    return $result;\n}", "    my\
    \ $res = \"\";\n    my $i = 0;\n    \n    while($i < length($s)) {\n        my\
    \ $c = substr($s, $i, 1);\n        \n        if($c =~ /^[a-z]/i) {\n         \
    \   $res .= uc($c);\n            $i++;\n        } elsif($c =~ /^[A-Z]/i) {\n \
    \           $res .= $c;\n            $i++;\n        } else {\n            $res\
    \ .= $c;\n            $i++;\n        }\n    }\n    \n    return $res;\n}", " \
    \   my $len = length($s);\n    my $i = 0;\n    my $j = 0;\n    my $reverse = \"\
    \";\n    my $temp = \"\";\n    \n    while ($i < $len) {\n        if ($s[i] =~\
    \ /[a-z]/i) {\n            $temp = $s[i];\n            $reverse = $reverse . $temp;\n\
    \            $i++;\n        }\n        elsif ($s[i] =~ /[A-Z]/i) {\n         \
    \   $temp = $s[i];\n            $reverse = $reverse . ucfirst($temp);\n      \
    \      $i++;\n        }\n        else {\n            $reverse = $reverse . $s[i];\n\
    \            $i++;\n        }\n    }\n    return $reverse;\n}\n</code>\n<|/ a\
    \ tags=perl,string,reverse |>\n<| c |>\nThis doesn't work if the string starts\
    \ with a letter. For example, `solve(\"a\")` returns `\"\"`.\n<|/ c |>\n<| c |>\n\
    I fixed the problem you mentioned, but I still think this solution is more elegant\
    \ than mine.\n<|/ c |>\n<| c |>\nI agree that your solution is more elegant, but\
    \ I think it's also more complicated than it needs to be. Your solution doesn't\
    \ handle strings that start with a letter. Your solution doesn't handle strings\
    \ that end with a letter. Your solution doesn't handle strings that start with\
    \ a letter and end with a letter. Your solution doesn't handle strings that start\
    \ with a letter and end with a letter. Your solution doesn't handle strings that\
    \ start with a letter and end with a letter. Your solution doesn't handle strings\
    \ that start with a letter and end with a letter. Your solution doesn't handle\
    \ strings that start with a letter and end with a letter. Your solution doesn't\
    \ handle strings that start with a letter and end with a letter. Your solution\
    \ doesn't handle strings that start with a letter and end with a letter. Your\
    \ solution doesn't handle strings that start with a letter and end with a letter.\
    \ Your solution doesn't handle strings that start with a letter and end with a\
    \ letter. Your solution doesn't handle strings that start with a letter and end\
    \ with a letter. Your solution doesn't handle strings that start with a letter\
    \ and end with a letter.\n<|/ c |>\n<| c |>\nYour solution doesn't handle strings\
    \ that start with a letter and end with a letter. Your solution doesn't handle\
    \ strings that start with a letter and end with a letter. Your solution doesn't\
    \ handle strings that start with a letter and end with a letter. Your solution\
    \ doesn't handle strings that start with a letter and end with a letter. Your\
    \ solution doesn't handle strings that start with a letter and end with a letter.\
    \ Your solution doesn't handle strings that start with a letter and end with a\
    \ letter. Your solution doesn't handle strings that start with a letter and end\
    \ with a letter. Your solution doesn't handle ", "    \n    my $result = \"\"\
    ;\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s,\
    \ $i, 1);\n        \n        if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n\
    \        }\n        else {\n            $result .= $c;\n        }\n    }\n   \
    \ \n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try\
    \ it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `solve(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `solve(\"ab\")`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n        if($s[i]\
    \ =~ /[a-z]/i) {\n            $result .= uc(substr($s, $i, 1));\n            $i\
    \ += 1;\n        } else {\n            $result .= substr($s, $i, 1);\n       \
    \ }\n    }\n    $result .= substr($s, $i);\n    return $result;\n}\n</code>\n\
    <|/ a tags=perl,string |>\n<| c |>\nThanks for your answer. Your code works fine\
    \ for small strings, but for large strings it takes too much time. Can you please\
    \ suggest a more efficient way to solve this problem?\n<|/ c |>\n<| c |>\n: I\
    \ added a more efficient solution\n<|/ c |>\n<| a tags=perl,string |>\n<code>",
  "    my $result = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $len = $#s;\n  \
    \  my $letter;\n    my $flag;\n    \n    while($i < $len) {\n        $letter =\
    \ $s[$i];\n        $flag = 0;\n        \n        if($letter =~ /[a-z]/i) {\n \
    \           $flag = 1;\n        }\n        elsif($letter =~ /[A-Z]/i) {\n    \
    \        $flag = 2;\n        }\n        elsif($letter =~ /[0-9]/i) {\n       \
    \     $flag = 3;\n        }\n        elsif($letter =~ /[^a-zA-Z0-9]/i) {\n   \
    \         $flag = 4;\n        }\n        \n        if($flag == 1) {\n        \
    \    $letter = uc($letter);\n        }\n        elsif($flag == 2) {\n        \
    \    $letter = lc($letter);\n        }\n        elsif($flag == 3) {\n        \
    \    $letter = uc($letter);\n        }\n        elsif($flag == 4) {\n        \
    \    $letter = lc($letter);\n        }\n        \n        $result .= $letter;\n\
    \        $i++;\n    }\n    \n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you so much for your answer! I really appreciate it!\n<|/ c |>\n<| a tags=string,perl,regex\
    \ |>\n<code>", "    $s =~ s/^#//;\n    $s =~ s/^@//;\n    $s =~ s/^&//;\n    $s\
    \ =~ s/^$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n\
    \    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s\
    \ =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n\
    \    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n   \
    \ $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s\
    \ =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n\
    \    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n   \
    \ $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s\
    \ =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n\
    \    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+//;", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $len = length($s);\n    while($i < $len) {\n\
    \        if($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1) . substr($s, $i, 1);\n            $i += 1;\n        } else {\n          \
    \  $result .= $s[i];\n        }\n        $i += 1;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=perl,string,reverse |>\n<| c |>\nThe OP wants to reverse\
    \ the case of the letters *in the string*, not just reverse the string.\n<|/ c\
    \ |>\n<| c |>\n: I see that now. Thanks for pointing that out.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for the solution. I am new to perl and was trying to solve this\
    \ problem using recursion. Your solution works perfectly fine.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for the solution. I am new to perl and was trying to solve this\
    \ problem using recursion. Your solution works perfectly fine.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for the solution. I am new to perl and was trying to solve this\
    \ problem using recursion. Your solution works perfectly fine.\n<|/ c |>\n<| a\
    \ tags=perl,string,reverse |>\n<code>", "    \n    my $result = \"\";\n    \n\
    \    foreach my $char (split //, $s) {\n        \n        if ($char =~ /[a-z]/i)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        elsif ($char =~ /[A-Z]/i)\
    \ {\n            $char =~ tr/A-Z/a-z/;\n        }\n        elsif ($char =~ /[0-9]/i)\
    \ {\n            $char =~ tr/0-9/A-Z/;\n        }\n        \n        $result .=\
    \ $char;\n    }\n    \n    return $result;\n}", "    my $res = $s;\n    \n   \
    \ for(my $i = 0; $i < length($s); $i++) {\n        if($s[i] eq '#') {\n      \
    \      $res =~ s/#/@/;\n        }\n        elsif($s[i] eq '@') {\n           \
    \ $res =~ s/@/#/;\n        }\n        elsif($s[i] eq '$') {\n            $res\
    \ =~ s/$/#/;\n        }\n        elsif($s[i] eq '%') {\n            $res =~ s/%/#/;\n\
    \        }\n        elsif($s[i] eq '^') {\n            $res =~ s/^/#/;\n     \
    \   }\n        elsif($s[i] eq '&') {\n            $res =~ s/&/#/;\n        }\n\
    \        elsif($s[i] eq '*') {\n            $res =~ s/*/#/;\n        }\n     \
    \   elsif($s[i] eq '(') {\n            $res =~ s/\\(/#/;\n        }\n        elsif($s[i]\
    \ eq ')') {\n            $res =~ s/\\)/#/;\n        }\n        elsif($s[i] eq\
    \ '[') {\n            $res =~ s/\\[/#/;\n        }\n        elsif($s[i] eq ']')\
    \ {\n            $res =~ s/\\]/#/;\n        }\n        elsif($s[i] eq '{') {\n\
    \            $res =~ s/\\{/#/;\n        }\n        elsif($s[i] eq '}') {\n   \
    \         $res =~ s/\\}/#/;\n        }\n        elsif($s[i] eq '<') {\n      \
    \      $res =~ s/</#/;\n        }\n        elsif($s[i] eq '>') {\n           \
    \ $res =~ s/>/#/;\n        }\n        elsif($s[i] eq '!') {\n            $res\
    \ =~ s/!/#/;\n        }\n        elsif($s[i] eq '.') {\n            $res =~ s/./#/;\n\
    \        }\n        elsif($s[i] eq '?') {\n            $res =~ s/?/#/;\n     \
    \   }\n        elsif($s[i] eq '\"') {\n            $res =~ s/\"/#/;\n        }\n\
    \        elsif($s[i] eq '\\'') {\n            $res =~ s/'/#/;\n        }\n   \
    \     elsif($s[i] eq '|') {\n            $res =~ s/|/#/;\n        }\n        elsif($s[i]\
    \ eq ';') {\n            $res =~ s/;", "    $s =~ s/^#//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n    $s =~ s/^[A-Z]+/a-z/;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n \
    \   $s =~ s/^[A-Z]+/a-z/;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n  \
    \  $s =~ s/^[a-z]+/A-Z/;\n    $s =~ s/^[A-Z]+/a-z/;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n    $s =~ s/^[A-Z]+/a-z/;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n \
    \   $s =~ s/^[A-Z]+/a-z/;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n  \
    \  $s =~ s/^[a-z]+/A-Z/;\n    $s =~ s/^[A-Z]+/a-z/;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n    $s =~ s/^[A-Z]+/a-z/;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n \
    \   $s =~ s/^[A-Z]+/a-z/;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n  \
    \  $s =~ s/^[a-z]+/A-Z/;\n    $s =~ s/^[A-Z]+/a-z/;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n    $s =~ s/^[A-Z]+/a-z/;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+/A-Z/;\n \
    \   $s =~ s/^[A-Z]+/a-z/;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;", " \
    \   $s =~ s/^#//;\n    $s =~ s/^@//;\n    $s =~ s/^&//;\n    $s =~ s/^$//;\n \
    \   $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/ /g;\n \
    \   $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~\
    \ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/\
    \ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n   \
    \ $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n\
    \    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~\
    \ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/\
    \ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n  \
    \  $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\\
    s+/ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n \
    \   $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~\
    \ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n\
    \    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/\\s+/ /g;\n    $s =~\
    \ s/^", "    my $reverse = \"\";\n    my $i = 0;\n    \n    while($i < length($s))\
    \ {\n        if($s[i] eq \"#\") {\n            $reverse .= substr($s, $i, 1);\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"@\") {\n            $reverse\
    \ .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ \"$\") {\n            $reverse .= substr($s, $i, 1);\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"^\") {\n            $reverse .= substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq \"&\") {\n   \
    \         $reverse .= substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq \"*\") {\n            $reverse .= substr($s, $i, 1);\n    \
    \        $i++;\n        }\n        elsif($s[i] eq \"(\") {\n            $reverse\
    \ .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ \")\") {\n            $reverse .= substr($s, $i, 1);\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"-\") {\n            $reverse .= substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq \"+\") {\n   \
    \         $reverse .= substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq \"=\") {\n            $reverse .= substr($s, $i, 1);\n    \
    \        $i++;\n        }\n        elsif($s[i] eq \"<\") {\n            $reverse\
    \ .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ \">\") {\n            $reverse .= substr($s, $i, 1);\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \".\") {\n            $reverse .= substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq \"/\") {\n   \
    \         $reverse .= substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq \"[\") {\n            $reverse .= substr($s, $i, 1);\n    \
    \        $i++;\n        }\n        elsif($s[i] eq \"]\") {\n            $reverse\
    \ .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ \"{\") {\n            $reverse .= substr($s, $i, 1);\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"}\") {", "    my $result = \"\";\n    \n  \
    \  for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n\
    \        \n        if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n    \
    \    }\n        else {\n            $result .= $c;\n        }\n    }\n    \n \
    \   return $result;\n}", "    \n    $s =~ s/^\\s+|\\s+$//g;\n    \n    my $i =\
    \ 0;\n    my $len = length($s);\n    \n    my $res = \"\";\n    \n    while($i\
    \ < $len) {\n        my $c = substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i)\
    \ {\n            $res .= uc($c);\n            $i++;\n        }\n        elsif($c\
    \ =~ /[A-Z]/i) {\n            $res .= lc($c);\n            $i++;\n        }\n\
    \        else {\n            $res .= $c;\n            $i++;\n        }\n    }\n\
    \    \n    return $res;\n}", "    my $result = \"\";\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my\
    \ $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n  \
    \  my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;", "    $s =~ s/^#//;\n    $s =~\
    \ s/^@//;\n    $s =~ s/^&//;\n    $s =~ s/^%//;\n    $s =~ s/^$//;\n    $s =~\
    \ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n\
    \    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~\
    \ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n\
    \    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~\
    \ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/\
    \ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n  \
    \  $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n  \
    \  $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n \
    \   $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~\
    \ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/\
    \ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n  \
    \  $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =", "    my $result = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    \n    while ($i < length($s)) {\n       \
    \ my $c = substr($s, $i, 1);\n        if ($c eq \"#\") {\n            $i++;\n\
    \            $j = 0;\n            $k = 0;\n        }\n        elsif ($c eq \"\
    @\") {\n            $i++;\n            $j = 0;\n            $k = 1;\n        }\n\
    \        elsif ($c eq \"A\") {\n            $i++;\n            $j = 1;\n     \
    \       $k = 0;\n        }\n        elsif ($c eq \"B\") {\n            $i++;\n\
    \            $j = 1;\n            $k = 1;\n        }\n        elsif ($c eq \"\
    C\") {\n            $i++;\n            $j = 2;\n            $k = 0;\n        }\n\
    \        elsif ($c eq \"D\") {\n            $i++;\n            $j = 2;\n     \
    \       $k = 1;\n        }\n        elsif ($c eq \"E\") {\n            $i++;\n\
    \            $j = 2;\n            $k = 2;\n        }\n        elsif ($c eq \"\
    F\") {\n            $i++;\n            $j = 3;\n            $k = 0;\n        }\n\
    \        elsif ($c eq \"G\") {\n            $i++;\n            $j = 3;\n     \
    \       $k = 1;\n        }\n        elsif ($c eq \"H\") {\n            $i++;\n\
    \            $j = 3;\n            $k = 2;\n        }\n        elsif ($c eq \"\
    I\") {\n            $i++;\n            $j = 4;\n            $k = 0;\n        }\n\
    \        elsif ($c eq \"J\") {\n            $i++;\n            $j = 4;\n     \
    \       $k = 1;\n        }\n        elsif ($c eq \"K\") {\n            $i++;\n\
    \            $j = 4;\n            $k = 2;\n        }\n        elsif ($c eq \"\
    L\") {\n            $i++;\n            $j = 5;\n            $k = 0;\n        }\n\
    \        elsif ($c eq \"M\") {\n            $i++;\n            $j = 5;\n     \
    \       $k = 1;\n        }\n        elsif ($c eq \"N\") {\n            $i++;\n\
    \            $j = 5;\n            $k = 2;\n        }\n        elsif ($c eq \"\
    O\") {\n            $i++;\n            $j = 6;\n            $k = 0;\n        }\n\
    \        elsif ($c eq \"P\") {\n            $i++;\n            $j = 6;\n     \
    \       $k = 1;\n        }\n        elsif ($c eq \"Q\") {\n            $i++;\n\
    \            $j = 6;\n            $k = 2;\n        }\n        el", "    \n   \
    \ my $result = \"\";\n    \n    foreach my $char (split //, $s) {\n        my\
    \ $is_letter = is_letter($char);\n        \n        if ($is_letter) {\n      \
    \      $char =~ tr/a-zA-Z/A-Z/;\n        }\n        else {\n            $char\
    \ =~ tr/a-zA-Z/A-Z/;\n        }\n        \n        $result .= $char;\n    }\n\
    \    \n    return $result;\n}", "    my $res = \"\";\n    \n    foreach my $char\
    \ (split(//, $s)) {\n        my $lower = uc($char);\n        my $upper = uc($lower);\n\
    \        \n        if ($char eq $lower) {\n            $res .= $upper;\n     \
    \   } elsif ($char eq $upper) {\n            $res .= $lower;\n        } else {\n\
    \            $res .= $char;\n        }\n    }\n    \n    return $res;\n}", " \
    \   my @chars = split(//,$s);\n    my $result = \"\";\n    foreach my $char (@chars)\
    \ {\n        if ($char =~ /^[a-z]/i) {\n            $char = $char =~ tr/a-z/A-Z/;\n\
    \        }\n        $result .= $char;\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but I do not want to use\
    \ any loops. I only want to use recursion.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ efforts, but I do not want to use any loops. I only want to use recursion.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but I do not want to use any loops.\
    \ I only want to use recursion.\n<|/ c |>\n<| c |>\nI appreciate your efforts,\
    \ but I do not want to use any loops. I only want to use recursion.\n<|/ c |>\n\
    <| c |>\nI appreciate your efforts, but I do not want to use any loops. I only\
    \ want to use recursion.\n<|/ c |>\n<| a tags=perl,recursion |>\n<code>", "  \
    \  my @chars = split(//,$s);\n    my $res = \"\";\n    foreach my $char (@chars)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $res .= uc($char);\n       \
    \ }\n        else {\n            $res .= $char;\n        }\n    }\n    return\
    \ $res;\n}\n</code>\n<|/ a tags=perl,regex |>\n<| c |>\nThis doesn't work for\
    \ the string `#a@C`\n<|/ c |>\n<| c |>\n: It does work. `#a@C` becomes `#A@c`\
    \ after `solve()` is called. `#A@c` becomes `#a@C` after `reverse()` is called.\
    \ `#a@C` becomes `#A@c` after `uc()` is called. `#A@c` becomes `#a@C` after `join()`\
    \ is called. `#A@c` becomes `#a@C` after `split()` is called. `#a@C` becomes `#A@c`\
    \ after `join()` is called. `#A@c` becomes `#a@C` after `uc()` is called.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that works with `#a@C`.\n<|/ c |>\n<| c\
    \ |>\n: I added a solution that works with `#a@C`.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that works with `#a@C`.\n<|/ c |>\n<| a tags=perl,regex |>\n<code>",
  "    my $result = '';\n    my $i = 0;\n    my $j = 0;\n    my $letter;\n    my $flag\
    \ = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5\
    \ = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9\
    \ = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my\
    \ $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n\
    \    my $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20\
    \ = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my\
    \ $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n\
    \    my $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31\
    \ = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my\
    \ $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n\
    \    my $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42\
    \ = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my\
    \ $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n\
    \    my $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53\
    \ = 0;\n    my $flag54 = 0;\n    my $flag55 = 0;\n    my $flag56 = 0;\n    my\
    \ $flag57 = 0;\n    my $flag58 = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n\
    \    my $flag61 = 0;\n    my $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64\
    \ = 0;\n    my $flag65 = 0;\n    my $flag66 = 0;\n    my $flag67 = 0;\n    my\
    \ $flag68 = 0;\n    my $flag69 = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n\
    \    my $flag72 = 0;\n    my $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75\
    \ = 0;\n    my $flag76 = 0;\n    my $flag77 = 0;\n    my $flag78 = 0;\n    my\
    \ $flag79 = 0;\n    my $flag80 = 0;\n    my $flag81 = 0;\n    my $flag82 = 0;\n\
    \    my $flag83 = 0;\n", "    my $res = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($s[i] eq \"#\") {\n            $res .= $s[$i];\n       \
    \ }\n        elsif($s[i] eq \"@\") {\n            $res .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"$\") {\n            $res .= $s[$i];\n        }\n   \
    \     elsif($s[i] eq \"%\") {\n            $res .= $s[$i];\n        }\n      \
    \  elsif($s[i] eq \"&\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i]\
    \ eq \"*\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq\
    \ \"^\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"\
    _\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"-\")\
    \ {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"+\") {\n\
    \            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"=\") {\n   \
    \         $res .= $s[$i];\n        }\n        elsif($s[i] eq \"<\") {\n      \
    \      $res .= $s[$i];\n        }\n        elsif($s[i] eq \"=\") {\n         \
    \   $res .= $s[$i];\n        }\n        elsif($s[i] eq \">\") {\n            $res\
    \ .= $s[$i];\n        }\n        elsif($s[i] eq \"?\") {\n            $res .=\
    \ $s[$i];\n        }\n        elsif($s[i] eq \"!\") {\n            $res .= $s[$i];\n\
    \        }\n        elsif($s[i] eq \".\") {\n            $res .= $s[$i];\n   \
    \     }\n        elsif($s[i] eq \"/\") {\n            $res .= $s[$i];\n      \
    \  }\n        elsif($s[i] eq \"|\") {\n            $res .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"\\\\\") {\n            $res .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"\\\"\") {\n            $res .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"'\") {\n            $res .= $s[$i];\n        }\n   \
    \     elsif($s[i] eq \"<\") {", "    my $rev = \"\";\n    my $i = 0;\n    my $len\
    \ = length($s);\n    while($i < $len) {\n        my $c = substr($s, $i, 1);\n\
    \        my $lc = ord($c);\n        if($lc >= 65 && $lc <= 90) {\n           \
    \ $rev .= chr($lc + 32);\n        }\n        elsif($lc >= 97 && $lc <= 122) {\n\
    \            $rev .= chr($lc - 32);\n        }\n        else {\n            $rev\
    \ .= $c;\n        }\n        $i++;\n    }\n    return $rev;\n}", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $len = length($s);\n    \n \
    \   while($i < $len) {\n        if($s[i] eq chr(0x41)) {\n            $result\
    \ .= chr(0x41);\n            $i++;\n        }\n        elsif($s[i] eq chr(0x40))\
    \ {\n            $result .= chr(0x40);\n            $i++;\n        }\n       \
    \ elsif($s[i] eq chr(0x40)) {\n            $result .= chr(0x41);\n           \
    \ $i++;\n        }\n        elsif($s[i] eq chr(0x41)) {\n            $result .=\
    \ chr(0x40);\n            $i++;\n        }\n        elsif($s[i] eq chr(0x40))\
    \ {\n            $result .= chr(0x41);\n            $i++;\n        }\n       \
    \ elsif($s[i] eq chr(0x41)) {\n            $result .= chr(0x40);\n           \
    \ $i++;\n        }\n        elsif($s[i] eq chr(0x40)) {\n            $result .=\
    \ chr(0x41);\n            $i++;\n        }\n        elsif($s[i] eq chr(0x41))\
    \ {\n            $result .= chr(0x40);\n            $i++;\n        }\n       \
    \ elsif($s[i] eq chr(0x40)) {\n            $result .= chr(0x41);\n           \
    \ $i++;\n        }\n        elsif($s[i] eq chr(0x41)) {\n            $result .=\
    \ chr(0x40);\n            $i++;\n        }\n        elsif($s[i] eq chr(0x40))\
    \ {\n            $result .= chr(0x41);\n            $i++;\n        }\n       \
    \ elsif($s[i] eq chr(0x41)) {\n            $result .= chr(0x40);\n           \
    \ $i++;\n        }\n        elsif($s[i] eq chr(0x40)) {\n            $result .=\
    \ chr(0x41);\n            $i++;\n        }\n        elsif($s[i] eq chr(0x41))\
    \ {\n            $result .= chr(0x40);\n            $i++;\n        }\n       \
    \ elsif($s[i] eq chr(0x40)) {\n            $result .= chr(0x41);\n           \
    \ $i++;\n        }\n        elsif($s[i] eq chr(0x41)) {\n            $result .=\
    \ chr(0x40);\n            $i++;\n        }\n        elsif($s[i] eq chr(0x40))\
    \ {\n            $result .= chr(0x41);\n            $i++;\n        }\n       \
    \ elsif($s[i] eq chr(0x41)) {\n            $result .= chr(0x40);\n           \
    \ $i++;", "    $s =~ s/^#//;\n    $s =~ s/^[a-z]//;\n    $s =~ s/^[A-Z]//;\n \
    \   $s =~ s/^[a-z][A-Z]//;\n    $s =~ s/^[A-Z][a-z]//;\n    $s =~ s/^[a-z][A-Z][a-z]//;\n\
    \    $s =~ s/^[A-Z][a-z][A-Z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z]//;\n    $s\
    \ =~ s/^[A-Z][a-z][A-Z][a-z][A-Z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n   \
    \ $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n \
    \   $s =~ s/^[A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][", "    $s =~ s/^#//;\n    $s =~\
    \ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s\
    \ =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s\
    \ =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s\
    \ =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/^[A-Z]+//;\n    $s =~ ", "    my $res = \"\";\n    \n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        if($s[i] eq \"@\") {\n            $res .=\
    \ $s[$i];\n        }\n        elsif($s[i] eq \"#\") {\n            $res .= $s[$i];\n\
    \        }\n        elsif($s[i] eq \"A\") {\n            $res .= $s[$i];\n   \
    \     }\n        elsif($s[i] eq \"a\") {\n            $res .= $s[$i];\n      \
    \  }\n        elsif($s[i] eq \"B\") {\n            $res .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"b\") {\n            $res .= $s[$i];\n        }\n   \
    \     elsif($s[i] eq \"C\") {\n            $res .= $s[$i];\n        }\n      \
    \  elsif($s[i] eq \"c\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i]\
    \ eq \"D\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq\
    \ \"d\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"\
    E\") {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"e\")\
    \ {\n            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"F\") {\n\
    \            $res .= $s[$i];\n        }\n        elsif($s[i] eq \"f\") {\n   \
    \         $res .= $s[$i];\n        }\n        elsif($s[i] eq \"G\") {\n      \
    \      $res .= $s[$i];\n        }\n        elsif($s[i] eq \"g\") {\n         \
    \   $res .= $s[$i];\n        }\n        elsif($s[i] eq \"H\") {\n            $res\
    \ .= $s[$i];\n        }\n        elsif($s[i] eq \"h\") {\n            $res .=\
    \ $s[$i];\n        }\n        elsif($s[i] eq \"I\") {\n            $res .= $s[$i];\n\
    \        }\n        elsif($s[i] eq \"i\") {\n            $res .= $s[$i];\n   \
    \     }\n        elsif($s[i] eq \"J\") {\n            $res .= $s[$i];\n      \
    \  }\n        elsif($s[i] eq \"j\") {\n            $res .= $s[$i];\n        }\n\
    \        elsif($s[i] eq \"K\") {", "    my @chars = split(//, $s);\n    my $res\
    \ = \"\";\n    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n\
    \            $res .= uc($char);\n        } else {\n            $res .= $char;\n\
    \        }\n    }\n    return $res;\n}", "    my $res = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;", "    my $result = \"\";\n  \
    \  \n    foreach my $char (split(//, $s)) {\n        my $is_letter = lc($char)\
    \ eq $char;\n        \n        if ($is_letter) {\n            $result .= uc($char);\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    \n   \
    \ return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=perl,string,algorithm\
    \ |>\n<code>", "    \n    my $len = length($s);\n    \n    if ($len == 0) {\n\
    \        return $s;\n    }\n    \n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p\
    \ = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my\
    \ $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n  \
    \  my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n", "    my $ret = '';\n    my\
    \ $i = 0;\n    my $len = length($s);\n    while($i < $len) {\n        my $c =\
    \ substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n            $ret .= uc($c);\n\
    \            $i++;\n        }\n        else {\n            $ret .= $c;\n     \
    \   }\n    }\n    return $ret;\n}", "    \n    my $result = \"\";\n    \n    foreach\
    \ my $char (split //, $s) {\n        my $is_letter = lc($char) eq $char;\n   \
    \     \n        if ($is_letter) {\n            $result .= uc($char);\n       \
    \ } else {\n            $result .= $char;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my @chars = split(//, $s);\n    my $result = \"\";\n    foreach\
    \ my $char (@chars) {\n        if ($char =~ /^[a-z]/i) {\n            $result\
    \ .= uc($char);\n        }\n        else {\n            $result .= $char;\n  \
    \      }\n    }\n    return $result;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n\
    \        \n        if ($is_letter) {\n            $result .= uc($char);\n    \
    \    } else {\n            $result .= $char;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    $s =~ s/^#?([A-Z])/uc($1)/ge;\n    $s =~ s/^#?([a-z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9])/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z0-9]+)/uc($1)/ge;\n    $s =~ s/^#?([a-zA-Z0-9]+)/uc($",
  "    my $len = length($s);\n    my $i = 0;\n    my $res = \"\";\n    while($i <\
    \ $len) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n\
    \            $res .= uc(substr($s, $i, 1));\n            $i += 1;\n        } elsif($c\
    \ =~ /^[A-Z]/i) {\n            $res .= substr($s, $i, 1);\n            $i += 1;\n\
    \        } else {\n            $res .= $c;\n            $i += 1;\n        }\n\
    \    }\n    return $res;\n}", "    \n    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        \n        if ($char =~ /[a-z]/i) {\n   \
    \         $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .= $char;\n\
    \    }\n    \n    return $result;\n}", "    $s =~ s/^#//;\n    $s =~ s/^@//;\n\
    \    $s =~ s/^&//;\n    $s =~ s/^%//;\n    $s =~ s/^$//;\n    $s =~ s/^\\s+//;\n\
    \    $s =~ s/\\s+$//;\n    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~\
    \ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n\
    \    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~\
    \ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/\
    \ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n  \
    \  $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n  \
    \  $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\\
    s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n \
    \   $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~\
    \ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/\
    \ /g;\n    $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n  \
    \  $s =~ s/^\\s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\\
    s+//;\n    $s =~ s/\\s+$//;\n    $s =~ s/^\\s+/ /g;\n    $s =~ s/^\\s+//;\n  \
    \  $s =~ s/\\s+$//;\n    $s =", "    my $i = 0;\n    my $len = length($s);\n \
    \   my $res = \"\";\n    my $flag = 0;\n    my $temp;\n    my $flag2 = 0;\n  \
    \  my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n\
    \    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 =\
    \ 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14\
    \ = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my\
    \ $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n\
    \    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25\
    \ = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my\
    \ $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n\
    \    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36\
    \ = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my\
    \ $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n\
    \    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47\
    \ = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my\
    \ $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n\
    \    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58\
    \ = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my\
    \ $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n\
    \    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69\
    \ = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my\
    \ $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n\
    \    my $flag77 = 0;\n    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80\
    \ = 0;\n    my $flag81 = 0;\n    my $flag82 = 0;\n    my $flag83", "    my $result\
    \ = \"\";\n    my $i = 0;\n    \n    while($i < length($s)) {\n        my $c =\
    \ substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n\
    \            $i++;\n        }\n        elsif($c =~ /[A-Z]/i) {\n            $result\
    \ .= lc($c);\n            $i++;\n        }\n        else {\n            $result\
    \ .= $c;\n            $i++;\n        }\n    }\n    \n    return $result;\n}",
  "    my $result = \"\";\n    my $i = 0;\n    my $len = length($s);\n    while($i\
    \ < $len) {\n        my $c = substr($s, $i, 1);\n        my $is_letter = lc($c)\
    \ =~ /[a-z]/i;\n        if($is_letter) {\n            $result .= uc($c);\n   \
    \     } else {\n            $result .= $c;\n        }\n        $i++;\n    }\n\
    \    return $result;\n}", "    \n    my $res = \"\";\n    \n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        \n   \
    \     if($c =~ /[a-z]/i) {\n            $c =~ tr/a-z/A-Z/;\n        }\n      \
    \  elsif($c =~ /[A-Z]/i) {\n            $c =~ tr/A-Z/a-z/;\n        }\n      \
    \  \n        $res .= $c;\n    }\n    \n    return $res;\n}", "    my $len = length($s);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp;\n    my $reversed;\n\
    \    my $letter;\n    my $letters;\n    my $letters_count;\n    my $letters_count_temp;\n\
    \    my $letters_count_temp2;\n    my $letters_count_temp3;\n    my $letters_count_temp4;\n\
    \    my $letters_count_temp5;\n    my $letters_count_temp6;\n    my $letters_count_temp7;\n\
    \    my $letters_count_temp8;\n    my $letters_count_temp9;\n    my $letters_count_temp10;\n\
    \    my $letters_count_temp11;\n    my $letters_count_temp12;\n    my $letters_count_temp13;\n\
    \    my $letters_count_temp14;\n    my $letters_count_temp15;\n    my $letters_count_temp16;\n\
    \    my $letters_count_temp17;\n    my $letters_count_temp18;\n    my $letters_count_temp19;\n\
    \    my $letters_count_temp20;\n    my $letters_count_temp21;\n    my $letters_count_temp22;\n\
    \    my $letters_count_temp23;\n    my $letters_count_temp24;\n    my $letters_count_temp25;\n\
    \    my $letters_count_temp26;\n    my $letters_count_temp27;\n    my $letters_count_temp28;\n\
    \    my $letters_count_temp29;\n    my $letters_count_temp30;\n    my $letters_count_temp31;\n\
    \    my $letters_count_temp32;\n    my $letters_count_temp33;\n    my $letters_count_temp34;\n\
    \    my $letters_count_temp35;\n    my $letters_count_temp36;\n    my $letters_count_temp37;\n\
    \    my $letters_count_temp38;\n    my $letters_count_temp39;\n    my $letters_count_temp40;\n\
    \    my $letters_count_temp41;\n    my $letters_count_temp42;\n    my $letters_count_temp43;\n\
    \    my $letters_count_temp44;\n    my $letters_count_temp45;\n    my $letters_count_temp46;\n\
    \    my $letters_count_temp47;\n    my $letters_count_temp48;\n    my $letters_count_temp49;\n\
    \    my $letters_count_temp50;\n    my $letters_count_temp51;\n    my $letters_count_temp52;\n\
    \    my $letters_count_temp53;\n    my $letters_count_temp54", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    my $temp = \"\
    \";\n    \n    while($i < length($s)) {\n        if($s[i] eq \"#\") {\n      \
    \      $flag = 1;\n            $i++;\n        }\n        elsif($s[i] eq \"@\"\
    ) {\n            $flag = 0;\n            $i++;\n        }\n        elsif($flag)\
    \ {\n            $temp = $temp.$s[$j];\n            $j++;\n        }\n       \
    \ else {\n            $temp = $temp.$s[i];\n            $i++;\n        }\n   \
    \ }\n    \n    while($j < length($s)) {\n        $temp = $temp.$s[$j];\n     \
    \   $j++;\n    }\n    \n    while($i < length($s)) {\n        if($s[i] eq \"#\"\
    ) {\n            $flag = 1;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"@\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($flag)\
    \ {\n            $temp = $temp.$s[$j];\n            $j++;\n        }\n       \
    \ else {\n            $temp = $temp.$s[i];\n            $i++;\n        }\n   \
    \ }\n    \n    while($j < length($s)) {\n        $temp = $temp.$s[$j];\n     \
    \   $j++;\n    }\n    \n    $result = $temp;\n    \n    return $result;\n}", " \
    \   my $result = \"\";\n    my $i = 0;\n    my $len = length($s);\n    while($i\
    \ < $len) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n\
    \            $c =~ tr/a-z/A-Z/;\n        }\n        elsif($c =~ /[A-Z]/i) {\n\
    \            $c =~ tr/A-Z/a-z/;\n        }\n        else {\n            $c = $c;\n\
    \        }\n        $result .= $c;\n        $i++;\n    }\n    return $result;\n\
    }", "    $s =~ s/^#?([a-z])/uc($1)/ge;\n    $s =~ s/^#?([A-Z])/uc($1)/ge;\n  \
    \  $s =~ s/^#?([A-Za-z])/uc($1)/ge;\n    $s =~ s/^#?([a-z]+)/uc($1)/ge;\n    $s\
    \ =~ s/^#?([A-Z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z]+)/uc($1)/ge;\n    $s =~\
    \ s/^#?([a-z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Z]+)/uc($1)/ge;\n    $s\
    \ =~ s/^#?([A-Za-z]+)/uc($1)/ge;\n    $s =~ s/^#?([a-z]+)/uc($1)/ge;\n    $s =~\
    \ s/^#?([A-Z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z]+)/uc($1)/ge;\n    $s =~ s/^#?([a-z]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([A-Z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z]+)/uc($1)/ge;\n \
    \   $s =~ s/^#?([a-z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Z]+)/uc($1)/ge;\n    $s\
    \ =~ s/^#?([A-Za-z]+)/uc($1)/ge;\n    $s =~ s/^#?([a-z]+)/uc($1)/ge;\n    $s =~\
    \ s/^#?([A-Z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z]+)/uc($1)/ge;\n    $s =~ s/^#?([a-z]+)/uc($1)/ge;\n\
    \    $s =~ s/^#?([A-Z]+)/uc($1)/ge;\n    $s =~ s/^#?([A-Za-z", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n  \
    \  my $m = length($s);\n    while($i < $m) {\n        if($s[i] eq '#') {\n   \
    \         $j = $i;\n            $k = $i;\n            $l = $i;\n            $i++;\n\
    \        }\n        elsif($s[i] eq '@') {\n            $j = $i;\n            $k\
    \ = $i;\n            $l = $i;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq '$') {\n            $j = $i;\n            $k = $i;\n            $l = $i;\n\
    \            $i++;\n        }\n        elsif($s[i] eq '^') {\n            $j =\
    \ $i;\n            $k = $i;\n            $l = $i;\n            $i++;\n       \
    \ }\n        elsif($s[i] eq '&') {\n            $j = $i;\n            $k = $i;\n\
    \            $l = $i;\n            $i++;\n        }\n        elsif($s[i] eq '*')\
    \ {\n            $j = $i;\n            $k = $i;\n            $l = $i;\n      \
    \      $i++;\n        }\n        elsif($s[i] eq '(') {\n            $j = $i;\n\
    \            $k = $i;\n            $l = $i;\n            $i++;\n        }\n  \
    \      elsif($s[i] eq ')') {\n            $j = $i;\n            $k = $i;\n   \
    \         $l = $i;\n            $i++;\n        }\n        elsif($s[i] eq '-')\
    \ {\n            $j = $i;\n            $k = $i;\n            $l = $i;\n      \
    \      $i++;\n        }\n        elsif($s[i] eq '+') {\n            $j = $i;\n\
    \            $k = $i;\n            $l = $i;\n            $i++;\n        }\n  \
    \      elsif($s[i] eq '.') {\n            $j = $i;\n            $k = $i;\n   \
    \         $l = $i;\n            $i++;\n        }\n        elsif($s[i] eq '/')\
    \ {\n            $j = $i;\n            $k = $i;\n            $l = $i;\n      \
    \      $i++;\n        }\n        elsif($s[i] eq '%') {\n            $j = $i;\n\
    \            $k = $i;\n            $l = $i;\n            $i++;\n        }\n  \
    \      elsif($s[i] eq '=') {\n            $j = $i;\n            $k = $i;\n   \
    \         $l = $i;\n            $i++;\n        }\n        elsif($s[i] eq '[')\
    \ {\n            $j = $i;\n            $k = $i;\n            $l = $i;\n      \
    \      $i++;\n        }\n        elsif($s[i] eq ']') {\n            $j", "   \
    \ \n    my @chars = split(//, $s);\n    my $res = \"\";\n    \n    foreach my\
    \ $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n            $res .= uc($char);\n\
    \        }\n        else {\n            $res .= $char;\n        }\n    }\n   \
    \ \n    return $res;\n}\n</code>\n<|/ a tags=perl,regex |>\n<| c |>\nThis doesn't\
    \ work if there are multiple consecutive lowercase letters.\n<|/ c |>\n<| c |>\n\
    It does work. Try it out yourself. It will reverse the string if there are multiple\
    \ consecutive lowercase letters.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are multiple consecutive lowercase letters.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it out yourself. It will reverse the string if there are multiple consecutive\
    \ lowercase letters.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple\
    \ consecutive lowercase letters.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nmy $string\
    \ = \"ab#a@C\";\n$string =~ s/([a-z])/uc($1)/eg;\nprint $string;\n</code>\n<|/\
    \ a tags=perl,regex |>\n<| c |>\nThis doesn't work if there are multiple consecutive\
    \ lowercase letters.\n<|/ c |>\n<| c |>\nIt does work. Try it out yourself. It\
    \ will reverse the string if there are multiple consecutive lowercase letters.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple consecutive lowercase\
    \ letters.\n<|/ c |>\n<| c |>\nIt does work. Try it out yourself. It will reverse\
    \ the string if there are multiple consecutive lowercase letters.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are multiple consecutive lowercase letters.\n\
    <|/ c |>\n<| a tags=perl,regex |>\n<code>", "    \n    my $reverse = \"\";\n \
    \   \n    foreach my $char (split //, $s) {\n        my $is_letter = uc $char\
    \ eq $char;\n        \n        if ($is_letter) {\n            $reverse .= uc $char;\n\
    \        } else {\n            $reverse .= $char;\n        }\n    }\n    \n  \
    \  return $reverse;\n}\n</code>\n<|/ a tags=perl,string |>\n<| a |>\n<code>",
  "    my @chars = split(//, $s);\n    my $res = \"\";\n    foreach my $char (@chars)\
    \ {\n        if ($char =~ /^[a-z]/i) {\n            $res .= uc($char);\n     \
    \   } else {\n            $res .= $char;\n        }\n    }\n    return $res;\n\
    }\n</code>\n<|/ a tags=perl,regex |>\n<| c |>\n`split` will split on any whitespace,\
    \ not just newlines. `chomp` will remove any trailing newlines. `uc` will convert\
    \ a character to upper case. `lc` will convert a character to lower case. `ucfirst`\
    \ will convert a character to upper case and remove any trailing whitespace. `lcfirst`\
    \ will convert a character to lower case and remove any trailing whitespace.\n\
    <|/ c |>\n<| c |>\n`split` will split on any whitespace, not just newlines. `chomp`\
    \ will remove any trailing newlines. `uc` will convert a character to upper case.\
    \ `lc` will convert a character to lower case. `ucfirst` will convert a character\
    \ to upper case and remove any trailing whitespace. `lcfirst` will convert a character\
    \ to lower case and remove any trailing whitespace.\n<|/ c |>\n<| c |>\n`split`\
    \ will split on any whitespace, not just newlines. `chomp` will remove any trailing\
    \ newlines. `uc` will convert a character to upper case. `lc` will convert a character\
    \ to lower case. `ucfirst` will convert a character to upper case and remove any\
    \ trailing whitespace. `lcfirst` will convert a character to lower case and remove\
    \ any trailing whitespace.\n<|/ c |>\n<| c |>\n`split` will split on any whitespace,\
    \ not just newlines. `chomp` will remove any trailing newlines. `uc` will convert\
    \ a character to upper case. `lc` will convert a character to lower case. `ucfirst`\
    \ will convert a character to upper case and remove any trailing whitespace. `lcfirst`\
    \ will convert a character to lower case and remove any trailing whitespace.\n\
    <|/ c |>\n<| c |>\n`split` will split on any whitespace, not just newlines. `chomp`\
    \ will remove any trailing newlines. `uc` will convert a character to upper case.\
    \ `lc` will convert a character to lower case. `ucfirst` will convert a character\
    \ to upper case and remove any trailing whitespace. `lcfirst` will convert a character\
    \ to lower case and remove any trailing ", "    my $res = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;", "    my $res = \"\";\n    my\
    \ $i = 0;\n    \n    while ($i < length($s)) {\n        my $c = substr($s, $i,\
    \ 1);\n        \n        if ($c =~ /[a-z]/) {\n            $res .= uc(substr($s,\
    \ $i, 1));\n            $i += 1;\n        }\n        elsif ($c =~ /[A-Z]/) {\n\
    \            $res .= uc(substr($s, $i, 1));\n            $i += 1;\n        }\n\
    \        else {\n            $res .= $c;\n        }\n    }\n    \n    return $res;\n\
    }\n</code>\n<|/ a tags=perl,string,regex |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine for small strings, but for large strings it takes too much\
    \ time. Can you please suggest me a better solution?\n<|/ c |>\n<| c |>\nI added\
    \ a faster solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine for small strings, but for large strings it takes too much\
    \ time. Can you please suggest me a better solution?\n<|/ c |>\n<| c |>\nI added\
    \ a faster solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works fine for small strings, but for large strings it takes too much\
    \ time. Can you please suggest me a better solution?\n<|/ c |>\n<| a tags=perl,string,regex\
    \ |>\n<code>", "    my $res = \"\";\n    my $i = 0;\n    while($i < length($s))\
    \ {\n        if($s[i] =~ /^[a-z]/i) {\n            $res .= uc($s[$i]);\n     \
    \   } else {\n            $res .= $s[$i];\n        }\n        $i++;\n    }\n \
    \   return $res;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    my $result\
    \ = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        next if $char\
    \ eq \"\";\n        \n        if ($char =~ /[a-z]/i) {\n            $result .=\
    \ uc($char);\n        }\n        else {\n            $result .= $char;\n     \
    \   }\n    }\n    \n    return $result;\n}", "    \n    return $s if $s =~ /^[a-z]+$/i;\n\
    \    \n    $s =~ s/([a-z])/uc($1)/ge;\n    \n    return $s;\n}", "    my $len\
    \ = length($s);\n    my $i = 0;\n    my $res = \"\";\n    \n    while ($i < $len)\
    \ {\n        if ($s[i] =~ /^[a-z]/i) {\n            $res .= uc($s[$i]);\n    \
    \        $i++;\n        } elsif ($s[i] =~ /^[A-Z]/i) {\n            $res .= lc($s[$i]);\n\
    \            $i++;\n        } else {\n            $res .= $s[$i];\n          \
    \  $i++;\n        }\n    }\n    \n    return $res;\n}", "    my $res = \"\";\n\
    \    \n    foreach my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $res .= uc($char);\n        } else {\n            $res .= $char;\n\
    \        }\n    }\n    \n    return $res;\n}", "    \n    my @chars = split(//,\
    \ $s);\n    \n    my $res = \"\";\n    \n    foreach my $char (@chars) {\n   \
    \     my $c = $char;\n        \n        if ($c =~ /[a-z]/i) {\n            $c\
    \ =~ tr/a-z/A-Z/;\n        }\n        elsif ($c =~ /[A-Z]/i) {\n            $c\
    \ =~ tr/A-Z/a-z/;\n        }\n        \n        $res .= $c;\n    }\n    \n   \
    \ return $res;\n}", "    \n    my $reversed = \"\";\n    \n    foreach my $char\
    \ (split(//, $s)) {\n        my $upper = uc($char);\n        my $lower = lc($char);\n\
    \        \n        if ($upper eq $lower) {\n            $reversed .= $upper;\n\
    \        } else {\n            $reversed .= $lower;\n        }\n    }\n    \n\
    \    return $reversed;\n}", "    my $result = \"\";\n    \n    foreach my $char\
    \ (split(//, $s)) {\n        if ($char =~ /[a-z]/i) {\n            $result .=\
    \ uc($char);\n        } else {\n            $result .= $char;\n        }\n   \
    \ }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,regex |>\n<| a tags=perl,regex\
    \ |>\n<code>", "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s))\
    \ {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n      \
    \      $result .= uc(substr($s, $i, 1));\n            $i++;\n        } else {\n\
    \            $result .= $c;\n        }\n    }\n    if(length($result) == 0) {\n\
    \        $result = uc($s);\n    }\n    return $result;\n}", "    $s =~ s/^#//;\n\
    \    $s =~ s/^[a-z]//;\n    $s =~ s/^[A-Z]//;\n    $s =~ s/^[a-z][A-Z]//;\n  \
    \  $s =~ s/^[a-z][A-Z][a-z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z]//;\n    $s =~\
    \ s/^[a-z][A-Z][a-z][A-Z][a-z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z]//;\n    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z]//;\n   \
    \ $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n \
    \   $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z]//;\n\
    \    $s =~ s/^[a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z][A-Z][a-z]//;\n\
    \    $s =~ ", "    \n    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        my $is_letter = lc($char) eq $char;\n        \n        if ($is_letter)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .=\
    \ $char;\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n    my\
    \ $i = 0;\n    while($i < length($s)) {\n        if($s[i] =~ /^[a-z]/i) {\n  \
    \          $result .= uc($s[$i]);\n            $i++;\n        }\n        elsif($s[i]\
    \ =~ /^[A-Z]/i) {\n            $result .= lc($s[$i]);\n            $i++;\n   \
    \     }\n        elsif($s[i] =~ /^\\W/i) {\n            $result .= $s[$i];\n \
    \           $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n            $result\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n\
    \            $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ =~ /^\\s/i) {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] =~ /^\\s/i) {\n            $result .= $s[$i];\n         \
    \   $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n            $result .=\
    \ $s[$i];\n            $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n \
    \           $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ =~ /^\\s/i) {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] =~ /^\\s/i) {\n            $result .= $s[$i];\n         \
    \   $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n            $result .=\
    \ $s[$i];\n            $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n \
    \           $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ =~ /^\\s/i) {\n            $result .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] =~ /^\\s/i) {\n            $result .= $s[$i];\n         \
    \   $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n            $result .=\
    \ $s[$i];\n            $i++;\n        }\n        elsif($s[i] =~ /^\\s/i) {\n \
    \           $result .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ =~ /^\\s/i) {\n            $result .= $", "    $s =~ s/^#//;\n    $s =~ s/^[a-z]//;\n\
    \    $s =~ s/^[A-Z]//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s\
    \ =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+/[A-Z]/;\n   \
    \ $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n\
    \    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n\
    \    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n\
    \    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n\
    \    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n\
    \    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n\
    \    $s =~ s/^[a-z]+/[A-Z]/;\n    $s =~ s/^[A-Z]+/[a-z]/;\n    $s =~ s/^[a-z]+/[A-Z",
  "    my $len = length($s);\n    my $i = 0;\n    my $res = \"\";\n    \n    while($i\
    \ < $len) {\n        my $c = substr($s, $i, 1);\n        \n        if($c eq \"\
    \") {\n            $res .= substr($s, $i, 1);\n            $i++;\n        }\n\
    \        elsif($c eq \"#\") {\n            $res .= substr($s, $i, 1);\n      \
    \      $i++;\n        }\n        elsif($c eq \"@\") {\n            $res .= substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($c eq \"$\") {\n      \
    \      $res .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($c\
    \ eq \"^\") {\n            $res .= substr($s, $i, 1);\n            $i++;\n   \
    \     }\n        elsif($c eq \"&\") {\n            $res .= substr($s, $i, 1);\n\
    \            $i++;\n        }\n        elsif($c eq \"*\") {\n            $res\
    \ .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($c eq \"\
    (\") {\n            $res .= substr($s, $i, 1);\n            $i++;\n        }\n\
    \        elsif($c eq \")\") {\n            $res .= substr($s, $i, 1);\n      \
    \      $i++;\n        }\n        elsif($c eq \"[\") {\n            $res .= substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($c eq \"]\") {\n      \
    \      $res .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($c\
    \ eq \"<\") {\n            $res .= substr($s, $i, 1);\n            $i++;\n   \
    \     }\n        elsif($c eq \">\") {\n            $res .= substr($s, $i, 1);\n\
    \            $i++;\n        }\n        elsif($c eq \"|\") {\n            $res\
    \ .= substr($s, $i, 1);\n            $i++;\n        }\n        elsif($c eq \"\
    -\") {\n            $res .= substr($s, $i, 1);\n            $i++;\n        }\n\
    \        elsif($c eq \"_\") {\n            $res .= substr($s, $i, 1);\n      \
    \      $i++;\n        }\n        elsif($c eq \"=\") {\n            $res .= substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($c eq \"+\") {\n      \
    \      $res .= substr($s, ", "    my $result = \"\";\n    \n    foreach my $char\
    \ (split(//,$s)) {\n        my $is_letter = lc($char) eq $char;\n        \n  \
    \      if($is_letter) {\n            $result .= uc($char);\n        } else {\n\
    \            $result .= $char;\n        }\n    }\n    \n    return $result;\n}",
  "    my @chars = split(//,$s);\n    my $res = \"\";\n    foreach my $char (@chars)\
    \ {\n        if($char =~ /[a-z]/i) {\n            $res .= uc($char);\n       \
    \ }\n        else {\n            $res .= $char;\n        }\n    }\n    return\
    \ $res;\n}\n</code>\n<|/ a tags=perl,regex |>\n<| c |>\nThis doesn't work if there\
    \ are multiple letters in the string. For example, `solve(\"ab\")` returns `\"\
    Aa\"`.\n<|/ c |>\n<| c |>\n: Yes, you are right. I missed that case. Thanks for\
    \ pointing it out. I have updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n        if($s[i]\
    \ eq substr($s, $i, 1)) {\n            $result .= substr($s, $i, 1) . substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq substr($s, $i,\
    \ 1)) {\n            $result .= substr($s, $i, 1) . substr($s, $i, 1);\n     \
    \       $i++;\n        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n      \
    \      $result .= substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n\
    \        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n            $result .=\
    \ substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1) . substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ substr($s, $i, 1)) {\n            $result .= substr($s, $i, 1) . substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq substr($s, $i,\
    \ 1)) {\n            $result .= substr($s, $i, 1) . substr($s, $i, 1);\n     \
    \       $i++;\n        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n      \
    \      $result .= substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n\
    \        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n            $result .=\
    \ substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1) . substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ substr($s, $i, 1)) {\n            $result .= substr($s, $i, 1) . substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq substr($s, $i,\
    \ 1)) {\n            $result .= substr($s, $i, 1) . substr($s, $i, 1);\n     \
    \       $i++;\n        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n      \
    \      $result .= substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n\
    \        }\n        elsif", "    $s =~ s/^#//;\n    $s =~ s/^[a-z]/[lc]/g;\n \
    \   $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n\
    \    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n\
    \    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n\
    \    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n\
    \    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n\
    \    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n\
    \    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n\
    \    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n\
    \    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n\
    \    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n\
    \    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n\
    \    $s =~ s/^[a-z]/[lc]/g;\n    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc]/g;\n\
    \    $s =~ s/^[A-Z]/[UC]/g;\n    $s =~ s/^[a-z]/[lc", "    my $len = length($s);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp;\n    my $temp2;\n\
    \    my $temp3;\n    my $temp4;\n    my $temp5;\n    my $temp6;\n    my $temp7;\n\
    \    my $temp8;\n    my $temp9;\n    my $temp10;\n    my $temp11;\n    my $temp12;\n\
    \    my $temp13;\n    my $temp14;\n    my $temp15;\n    my $temp16;\n    my $temp17;\n\
    \    my $temp18;\n    my $temp19;\n    my $temp20;\n    my $temp21;\n    my $temp22;\n\
    \    my $temp23;\n    my $temp24;\n    my $temp25;\n    my $temp26;\n    my $temp27;\n\
    \    my $temp28;\n    my $temp29;\n    my $temp30;\n    my $temp31;\n    my $temp32;\n\
    \    my $temp33;\n    my $temp34;\n    my $temp35;\n    my $temp36;\n    my $temp37;\n\
    \    my $temp38;\n    my $temp39;\n    my $temp40;\n    my $temp41;\n    my $temp42;\n\
    \    my $temp43;\n    my $temp44;\n    my $temp45;\n    my $temp46;\n    my $temp47;\n\
    \    my $temp48;\n    my $temp49;\n    my $temp50;\n    my $temp51;\n    my $temp52;\n\
    \    my $temp53;\n    my $temp54;\n    my $temp55;\n    my $temp56;\n    my $temp57;\n\
    \    my $temp58;\n    my $temp59;\n    my $temp60;\n    my $temp61;\n    my $temp62;\n\
    \    my $temp63;\n    my $temp64;\n    my $temp65;\n    my $temp66;\n    my $temp67;\n\
    \    my $temp68;\n    my $temp69;\n    my $temp70;\n    my $temp71;\n    my $temp72;\n\
    \    my $temp73;\n    my $temp74;\n    my $temp75;\n    my $temp76;\n    my $temp77;\n\
    \    my $temp78;\n    my $temp79;\n    my $temp80;\n    my $temp81;\n    my $temp82;\n\
    \    my $temp83;\n    my $temp84;\n    my $temp85;\n    ", "    $s =~ s/^#//;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n\
    \    $s =~ s/^[a-z]/[A-Z]/;\n    $s =~ s/^[A-Z]/[a-z]/;\n    $s =~ s/^[a-z]/[A-Z]/;\n\
    \    $s =~ s/^[A-Z]/[a-z", "    \n    my $result = \"\";\n    \n    foreach my\
    \ $char (split(//, $s)) {\n        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n\
    \        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n    \
    \    }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    \n    my $len = length($s);\n    \n    if ($len == 0) {\n        return\
    \ $s;\n    }\n    \n    my $i = 0;\n    my $c = $s[0];\n    my $res = \"\";\n\
    \    \n    while ($i < $len) {\n        if ($c eq $s[$i]) {\n            $res\
    \ .= ucfirst($s[$i]);\n            $i++;\n        }\n        else {\n        \
    \    $res .= $s[$i];\n        }\n        $c = $s[$i];\n        $i++;\n    }\n\
    \    \n    return $res;\n}", "    my @chars = split(//, $s);\n    my $res = \"\
    \";\n    foreach my $char (@chars) {\n        my $case = $char =~ /[a-z]/i ? 1\
    \ : 0;\n        $char =~ s/[a-z]/[A-Z]/i;\n        $char =~ s/[A-Z]/[a-z]/i;\n\
    \        $res .= $case ? $char : $char;\n    }\n    return $res;\n}", "    my\
    \ $result = \"\";\n    my $i = 0;\n    my $len = length($s);\n    while($i < $len)\
    \ {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n      \
    \      $result .= uc($c);\n            $i++;\n        } elsif($c =~ /[A-Z]/i)\
    \ {\n            $result .= lc($c);\n            $i++;\n        } else {\n   \
    \         $result .= $c;\n            $i++;\n        }\n    }\n    return $result;\n\
    }", "    \n    my $result = \"\";\n    \n    foreach my $char (split(//,$s)) {\n\
    \        my $is_letter = lc($char) eq $char;\n        \n        if ($is_letter)\
    \ {\n            $result .= uc($char);\n        } else {\n            $result\
    \ .= $char;\n        }\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,regex\
    \ |>\n<| c |>\nThis doesn't work if the string contains multiple `#` characters.\
    \ `solve(\"##\")` returns `\"\"`.\n<|/ c |>\n<| c |>\n: Yes, it does. `##` returns\
    \ `\"\"`. I don't know what OP wants to do with such strings. I assumed that OP\
    \ wants to remove `#` characters. But if OP wants to remove `#` characters and\
    \ keep other characters, my solution won't work.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that will remove `#` characters and keep other characters.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that will remove `#` characters and keep other\
    \ characters.\n<|/ c |>\n<| c |>\n: I added a solution that will remove `#` characters\
    \ and keep other characters.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nmy $string =\
    \ \"#a@C\";\n$string =~ s/#//g;\n$string =~ s/@//g;\n$string =~ s/\\W//g;\nprint\
    \ $string;\n</code>\n<|/ a tags=perl,regex |>\n<| c |>\nThis doesn't work if the\
    \ string contains multiple `#` characters. `solve(\"##\")` returns `\"\"`.\n<|/\
    \ c |>\n<| c |>\n: Yes, it does. `##` returns `\"\"`. I don't know what OP wants\
    \ to do with such strings. I assumed that OP wants to remove `#` characters. But\
    \ if OP wants to remove `#` characters and keep other characters, my solution\
    \ won't work.\n<|/ c |>\n<| c |>\n: I added a solution that will remove `#` characters\
    \ and keep other characters.\n<|/ c |>\n<| c |>\n: I added a solution that will\
    \ remove `#` characters and keep other characters.\n<|/ c |>\n<| a tags=perl,regex\
    \ |>\n<code>", "    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        if ($char =~ /^[a-z]+$/i) {\n            $result .= uc($char);\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    \n   \
    \ return $result;\n}", "    \n    my $result = \"\";\n    \n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        \n   \
    \     if($c =~ /[a-z]/) {\n            $result .= uc($c);\n        } else {\n\
    \            $result .= $c;\n        }\n    }\n    \n    return $result;\n}",
  "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n            $result\
    \ .= uc($c);\n        } else {\n            $result .= $c;\n        }\n    }\n\
    \    \n    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    my\
    \ $len = length($s);\n    my $flag = 0;\n    my $temp;\n    \n    while($i < $len)\
    \ {\n        if($s[i] eq \"#\") {\n            $flag = 1;\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"@\") {\n            $flag = 0;\n        \
    \    $i++;\n        }\n        elsif($s[i] eq \"$\") {\n            $flag = 0;\n\
    \            $i++;\n        }\n        elsif($s[i] eq \"^\") {\n            $flag\
    \ = 0;\n            $i++;\n        }\n        elsif($s[i] eq \"&\") {\n      \
    \      $flag = 0;\n            $i++;\n        }\n        elsif($s[i] eq \"*\"\
    ) {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"(\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \")\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"[\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"]\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"<\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \">\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"|\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"-\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \".\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"/\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"?\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"=\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"!\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"%\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"^\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"&\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"*\") {\n            $flag = 0;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"(\") {\n            $flag = 0;\n            $i++;\n", "    \n    my $res\
    \ = \"\";\n    \n    foreach my $c (split(//, $s)) {\n        \n        if ($c\
    \ =~ /^[a-z]/i) {\n            $res .= uc($c);\n        } elsif ($c =~ /^[A-Z]/i)\
    \ {\n            $res .= lc($c);\n        } else {\n            $res .= $c;\n\
    \        }\n    }\n    \n    return $res;\n}", "    my $result = \"\";\n    \n\
    \    foreach my $char (split(//, $s)) {\n        if ($char =~ /^[a-z]/i) {\n \
    \           $result .= uc($char);\n        } else {\n            $result .= $char;\n\
    \        }\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,string\
    \ |>\n<| a tags=perl,string |>\n<code>", "    my $result = '';\n    my $i = 0;\n\
    \    \n    while ($i < length($s)) {\n        if ($s[i] =~ /[a-z]/i) {\n     \
    \       $result .= uc(substr($s, $i, 1));\n            $i += 1;\n        }\n \
    \       elsif ($s[i] =~ /[A-Z]/i) {\n            $result .= uc(substr($s, $i,\
    \ 1));\n            $i += 1;\n        }\n        else {\n            $result .=\
    \ $s[i];\n            $i += 1;\n        }\n    }\n    \n    return $result;\n\
    }\n</code>\n<|/ a tags=perl,string |>\n<| c |>\nThis doesn't work if the string\
    \ contains any non-letters.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ require any non-letters.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ require any non-letters.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ require any non-letters.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ require any non-letters.\n<|/ c |>\n<| a tags=perl,string |>\n<code>", "   \
    \ my $result = \"\";\n    my $i = 0;\n    my $len = length($s);\n    \n    while($i\
    \ < $len) {\n        my $c = substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i)\
    \ {\n            $result .= uc($c);\n            $i++;\n        } elsif($c =~\
    \ /[A-Z]/i) {\n            $result .= lc($c);\n            $i++;\n        } else\
    \ {\n            $result .= $c;\n            $i++;\n        }\n    }\n    \n \
    \   return $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i\
    \ < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        \n      \
    \  if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n        } else {\n  \
    \          $result .= $c;\n        }\n    }\n    \n    return $result;\n}", " \
    \   $s =~ s/^#//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n\
    \    $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n   \
    \ $s =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n    $s =~\
    \ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n   \
    \ $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s\
    \ =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~\
    \ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n  \
    \  $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n    $s\
    \ =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s =~\
    \ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n\
    \    $s =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;\n    $s =~ s/^[a-z]+//;\n  \
    \  $s =~ s/^[A-Z]+//;\n    $s =~ s/^[a-z]+$//;\n    $s =~ s/^[A-Z]+$//;", "  \
    \  \n    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n  \
    \      my $is_letter = lc($char) =~ /[a-z]/i;\n        \n        if ($is_letter)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .=\
    \ $char;\n    }\n    \n    return $result;\n}", "    my $len = length($s);\n \
    \   my $i = 0;\n    my $reverse = \"\";\n    my $letter = \"\";\n    my $letters\
    \ = \"\";\n    my $letters_len = 0;\n    my $letters_index = 0;\n    my $letters_index2\
    \ = 0;\n    my $letters_index3 = 0;\n    my $letters_index4 = 0;\n    my $letters_index5\
    \ = 0;\n    my $letters_index6 = 0;\n    my $letters_index7 = 0;\n    my $letters_index8\
    \ = 0;\n    my $letters_index9 = 0;\n    my $letters_index10 = 0;\n    my $letters_index11\
    \ = 0;\n    my $letters_index12 = 0;\n    my $letters_index13 = 0;\n    my $letters_index14\
    \ = 0;\n    my $letters_index15 = 0;\n    my $letters_index16 = 0;\n    my $letters_index17\
    \ = 0;\n    my $letters_index18 = 0;\n    my $letters_index19 = 0;\n    my $letters_index20\
    \ = 0;\n    my $letters_index21 = 0;\n    my $letters_index22 = 0;\n    my $letters_index23\
    \ = 0;\n    my $letters_index24 = 0;\n    my $letters_index25 = 0;\n    my $letters_index26\
    \ = 0;\n    my $letters_index27 = 0;\n    my $letters_index28 = 0;\n    my $letters_index29\
    \ = 0;\n    my $letters_index30 = 0;\n    my $letters_index31 = 0;\n    my $letters_index32\
    \ = 0;\n    my $letters_index33 = 0;\n    my $letters_index34 = 0;\n    my $letters_index35\
    \ = 0;\n    my $letters_index36 = 0;\n    my $letters_index37 = 0;\n    my $letters_index38\
    \ = 0;\n    my $letters_index39 = 0;\n    my $letters_index40 = 0;\n    my $letters_index41\
    \ = 0;\n    my $letters_index42 = 0;\n    my $letters_index43 = 0;\n    my $letters_index44\
    \ = 0;\n    my $letters_index45 = 0;\n    my $letters_index46 = 0;\n    my $letters_index47\
    \ = 0;\n    my $letters_index48 = 0;\n    my $letters_index49 = 0;\n    my $letters_index50\
    \ = 0;\n    my $letters_index51 = 0;\n    my $letters_index52 = 0;\n    my $letters_index53\
    \ = 0;\n    my $letters_index54 = 0;\n    my $letters_index55 = 0;\n    my $letters_index56\
    \ = 0;\n    my $letters_index57 = 0;\n    my $letters_index58 = 0;\n    my $letters_index59\
    \ = 0;\n    my $letters_index60 = 0;\n    my $letter", "    my $res = \"\";\n\
    \    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    \n    while($i < length($s))\
    \ {\n        if($s[i] eq \" \") {\n            $i++;\n            next;\n    \
    \    }\n        elsif($s[i] eq \"#\") {\n            $flag = 1;\n            $i++;\n\
    \            next;\n        }\n        elsif($s[i] eq \"@\") {\n            $flag\
    \ = 2;\n            $i++;\n            next;\n        }\n        elsif($s[i] eq\
    \ \"$\") {\n            $flag = 3;\n            $i++;\n            next;\n   \
    \     }\n        elsif($s[i] eq \"^\") {\n            $flag = 4;\n           \
    \ $i++;\n            next;\n        }\n        elsif($s[i] eq \"&\") {\n     \
    \       $flag = 5;\n            $i++;\n            next;\n        }\n        elsif($s[i]\
    \ eq \"*\") {\n            $flag = 6;\n            $i++;\n            next;\n\
    \        }\n        elsif($s[i] eq \"(\") {\n            $flag = 7;\n        \
    \    $i++;\n            next;\n        }\n        elsif($s[i] eq \")\") {\n  \
    \          $flag = 8;\n            $i++;\n            next;\n        }\n     \
    \   elsif($s[i] eq \"[\") {\n            $flag = 9;\n            $i++;\n     \
    \       next;\n        }\n        elsif($s[i] eq \"]\") {\n            $flag =\
    \ 10;\n            $i++;\n            next;\n        }\n        elsif($s[i] eq\
    \ \"<\") {\n            $flag = 11;\n            $i++;\n            next;\n  \
    \      }\n        elsif($s[i] eq \">\") {\n            $flag = 12;\n         \
    \   $i++;\n            next;\n        }\n        elsif($s[i] eq \"|\") {\n   \
    \         $flag = 13;\n            $i++;\n            next;\n        }\n     \
    \   elsif($s[i] eq \"=\") {\n            $flag = 14;\n            $i++;\n    \
    \        next;\n        }\n        elsif($s[i] eq \"+\") {\n            $flag\
    \ = 15;\n            $i++;\n            next;\n        }\n        elsif($s[i]\
    \ eq \"-\") {\n            $flag = 16;\n            $i++;\n            next;\n\
    \        }\n        elsif($s[i] eq \".\") {\n            $flag = 17;\n       \
    \     $i++;\n            next;\n        }\n        elsif($s[i] eq \"/\") {\n \
    \           $flag = 18;\n            $i++;\n            next;\n        }\n   \
    \     elsif($s[i] eq \"%\") {\n            $flag = 19;\n            $i++;\n  \
    \          next;\n        }\n        elsif($s[i] eq \"?\") {\n            $flag\
    \ = 20;\n            $i++;\n            next;\n        }\n", "    my @chars =\
    \ split(//, $s);\n    my $res = \"\";\n    foreach my $char (@chars) {\n     \
    \   if ($char =~ /[a-z]/i) {\n            $res .= uc($char);\n        } else {\n\
    \            $res .= $char;\n        }\n    }\n    return $res;\n}", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $len = length($s);\n    while($i < $len) {\n\
    \        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n          \
    \  $result .= uc($c);\n            $i += 1;\n        }\n        elsif($c =~ /[A-Z]/i)\
    \ {\n            $result .= lc($c);\n            $i += 1;\n        }\n       \
    \ else {\n            $result .= $c;\n            $i += 1;\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a tags=perl,string |>\n<| a dscore=0 |>\n\
    <code>", "    \n    return $s if $s =~ /^[a-z]+$/i;\n    \n    $s =~ tr/a-z/A-Z/;\n\
    \    $s =~ tr/A-Z/a-z/;\n    \n    return $s;\n}", "    \n    return $s if $s\
    \ =~ /^[a-z]+$/i;\n    \n    return $s =~ /^[a-z]+$/i ? uc($s) : lc( $s );\n}",
  "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n            $result\
    \ .= uc($c);\n        } else {\n            $result .= $c;\n        }\n    }\n\
    \    \n    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    my\
    \ $len = length($s);\n    my $letter;\n    my $reversed;\n    \n    while ($i\
    \ < $len) {\n        $letter = $s[$i];\n        if ($letter =~ /[a-z]/i) {\n \
    \           $reversed = uc($letter);\n            $result .= $reversed;\n    \
    \        $i++;\n        } else {\n            $result .= $letter;\n          \
    \  $i++;\n        }\n    }\n    return $result;\n}", "    my $result = \"\";\n\
    \    my $i = 0;\n    my $j = 0;\n    my $len = $#s;\n    while($i < $len) {\n\
    \        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/) {\n           \
    \ $result .= uc(substr($s, $j, 1));\n            $j++;\n        }\n        else\
    \ {\n            $result .= $c;\n        }\n        $i++;\n    }\n    if($j >\
    \ 0) {\n        $result .= uc(substr($s, $j));\n    }\n    return $result;\n}\n\
    </code>\n<|/ a tags=perl,string,algorithm |>\n<| a dscore=0 |>\n<code>", "   \
    \ my $result = \"\";\n    my $i = 0;\n    \n    while ($i < length($s)) {\n  \
    \      if ($s[i] =~ /[a-z]/) {\n            $result .= uc($s[$i]);\n         \
    \   $i++;\n        }\n        else {\n            $result .= $s[$i];\n       \
    \ }\n    }\n    \n    return $result;\n}", "    \n    my $result = \"\";\n   \
    \ \n    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i,\
    \ 1);\n        \n        if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n\
    \        }\n        else {\n            $result .= $c;\n        }\n    }\n   \
    \ \n    return $result;\n}", "    \n    my $result = $s;\n    \n    foreach my\
    \ $char (split(//, $s)) {\n        my $lower = uc($char);\n        my $upper =\
    \ uc($lower);\n        \n        if ($char eq $lower) {\n            $result =~\
    \ s/$lower/$upper/g;\n        }\n        elsif ($char eq $upper) {\n         \
    \   $result =~ s/$upper/$lower/g;\n        }\n        else {\n            $result\
    \ .= $char;\n        }\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,regex\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine for small strings.\
    \ But it fails for large strings. For example: solve(\"ab\") = \"AB\" but solve(\"\
    abcab\") = \"abcab\"\n<|/ c |>\n<| c |>\nI added a solution that works for large\
    \ strings.\n<|/ c |>\n<| a tags=perl,regex |>\n<code>\nuse strict;\nuse warnings;",
  "    my $result = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n  \
    \  my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g", " \
    \   \n    my $result = \"\";\n    \n    my $i = 0;\n    \n    while($i < length($s))\
    \ {\n        my $c = substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i)\
    \ {\n            $result .= uc($c);\n            $i++;\n        }\n        elsif($c\
    \ =~ /[A-Z]/i) {\n            $result .= lc($c);\n            $i++;\n        }\n\
    \        else {\n            $result .= $c;\n            $i++;\n        }\n  \
    \  }\n    \n    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $len = length($s);\n    \n    while ($i < $len) {\n  \
    \      if ($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1);\n            $i++;\n        }\n        else {\n            $result .= substr($s,\
    \ $i, 1);\n            $i++;\n        }\n    }\n    \n    return $result;\n}",
  "    my $len = length($s);\n    my $i = 0;\n    my $res = \"\";\n    \n    while($i\
    \ < $len) {\n        my $c = substr($s, $i, 1);\n        \n        if($c =~ /[a-z]/i)\
    \ {\n            $res .= uc($c);\n            $i++;\n        } else {\n      \
    \      $res .= $c;\n        }\n    }\n    \n    return $res;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=perl,string,regex |>\n<code>", "    my $reverse = \"\";\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = length($s);\n    while($i\
    \ < $l) {\n        if($s[i] eq \"#\") {\n            $i++;\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];\n            $j++;\n\
    \            $k++;\n            $reverse = $reverse . $s[$j];", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n  \
    \  my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;",
  "    my $len = length($s);\n    my $i = 0;\n    my $res = \"\";\n    my $tmp = \"\
    \";\n    my $flag = 0;\n    my $tmp2 = \"\";\n    my $flag2 = 0;\n    my $tmp3\
    \ = \"\";\n    my $flag3 = 0;\n    my $tmp4 = \"\";\n    my $flag4 = 0;\n    my\
    \ $tmp5 = \"\";\n    my $flag5 = 0;\n    my $tmp6 = \"\";\n    my $flag6 = 0;\n\
    \    my $tmp7 = \"\";\n    my $flag7 = 0;\n    my $tmp8 = \"\";\n    my $flag8\
    \ = 0;\n    my $tmp9 = \"\";\n    my $flag9 = 0;\n    my $tmp10 = \"\";\n    my\
    \ $flag10 = 0;\n    my $tmp11 = \"\";\n    my $flag11 = 0;\n    my $tmp12 = \"\
    \";\n    my $flag12 = 0;\n    my $tmp13 = \"\";\n    my $flag13 = 0;\n    my $tmp14\
    \ = \"\";\n    my $flag14 = 0;\n    my $tmp15 = \"\";\n    my $flag15 = 0;\n \
    \   my $tmp16 = \"\";\n    my $flag16 = 0;\n    my $tmp17 = \"\";\n    my $flag17\
    \ = 0;\n    my $tmp18 = \"\";\n    my $flag18 = 0;\n    my $tmp19 = \"\";\n  \
    \  my $flag19 = 0;\n    my $tmp20 = \"\";\n    my $flag20 = 0;\n    my $tmp21\
    \ = \"\";\n    my $flag21 = 0;\n    my $tmp22 = \"\";\n    my $flag22 = 0;\n \
    \   my $tmp23 = \"\";\n    my $flag23 = 0;\n    my $tmp24 = \"\";\n    my $flag24\
    \ = 0;\n    my $tmp25 = \"\";\n    my $flag25 = 0;\n    my $tmp26 = \"\";\n  \
    \  my $flag26 = 0;\n    my $tmp27 = \"\";\n    my $flag27 = 0;\n    my $tmp28\
    \ = \"\";\n    my $flag28 = 0;\n    my $tmp29 = \"\";\n    my $flag29 = 0;\n \
    \   my $tmp30 = \"\";\n    my $flag30 = 0;\n    my $tmp31 = \"\";\n    my $flag31\
    \ = 0;\n    my $tmp32 = \"\";\n    my $flag32 = 0;\n    my $tmp33 = \"\";\n  \
    \  my $flag33 = 0;\n    my $tmp34 = \"\";\n    my $flag34 = 0;\n    my $tmp35\
    \ = \"\";\n    my $flag35 = 0;\n    my $tmp36 = \"\";\n    my $flag36 = 0;\n \
    \   my $tmp37 = \"\";\n    my $flag37 = 0;\n    my $tmp38 = \"\";\n    my $flag38\
    \ = 0;\n    my $tmp39 = \"\";\n    my $flag39 = 0;\n    my $tmp40 = \"\";\n  \
    \  my $flag40 = 0;\n    my $tmp41 = \"\";\n    my $flag41 = 0;\n    my $tmp42\
    \ = \"\";\n", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        my $char = substr($s, $i, 1);\n        \n        if($char =~\
    \ /[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n        }\n        elsif($char\
    \ =~ /[A-Z]/i) {\n            $char =~ tr/A-Z/a-z/;\n        }\n        \n   \
    \     $result .= $char;\n    }\n    \n    return $result;\n}", "    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $len = length($s);\n    \n \
    \   while($i < $len) {\n        if($s[i] eq \"\") {\n            $result .= $s[$j];\n\
    \            $j++;\n        }\n        elsif($s[i] eq \"#\") {\n            $result\
    \ .= $s[$j];\n            $j++;\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"@\") {\n            $result .= $s[$j];\n            $j++;\n           \
    \ $i++;\n        }\n        elsif($s[i] eq \"A\") {\n            $result .= $s[$j];\n\
    \            $j++;\n            $i++;\n        }\n        elsif($s[i] eq \"B\"\
    ) {\n            $result .= $s[$j];\n            $j++;\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"C\") {\n            $result .= $s[$j];\n  \
    \          $j++;\n            $i++;\n        }\n        elsif($s[i] eq \"a\")\
    \ {\n            $result .= $s[$j];\n            $j++;\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"b\") {\n            $result .= $s[$j];\n  \
    \          $j++;\n            $i++;\n        }\n        elsif($s[i] eq \"c\")\
    \ {\n            $result .= $s[$j];\n            $j++;\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"@\") {\n            $result .= $s[$j];\n  \
    \          $j++;\n            $i++;\n        }\n        elsif($s[i] eq \"#\")\
    \ {\n            $result .= $s[$j];\n            $j++;\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"A\") {\n            $result .= $s[$j];\n  \
    \          $j++;\n            $i++;\n        }\n        elsif($s[i] eq \"B\")\
    \ {\n            $result .= $s[$j];\n            $j++;\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"C\") {\n            $result .= $s[$j];\n  \
    \          $j++;\n            $i++;\n        }\n        elsif($s[i] eq \"a\")\
    \ {\n            $result .= $s[$j];\n            $j++;\n            $i++;\n  \
    \      }\n        elsif($s[i] eq \"b\") {\n            $result .= $s[$j];\n  \
    \          $j++;\n            $i++;\n        }\n        elsif($s[i] eq \"", " \
    \   \n    my @chars = split(//, $s);\n    \n    my $res = \"\";\n    \n    foreach\
    \ my $char (@chars) {\n        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n   \
    \     \n        if ($is_letter) {\n            $res .= ucfirst($char);\n     \
    \   } else {\n            $res .= $char;\n        }\n    }\n    \n    return $res;\n\
    }", "    \n    my $res = \"\";\n    \n    foreach my $char (split(//, $s)) {\n\
    \        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n        \n        if ($is_letter)\
    \ {\n            $res .= ucfirst($char);\n        } else {\n            $res .=\
    \ $char;\n        }\n    }\n    \n    return $res;\n}", "    my $res = \"\";\n\
    \    \n    foreach my $char (split(//, $s)) {\n        my $lower = uc($char);\n\
    \        my $upper = lc($char);\n        \n        if ($lower eq $char) {\n  \
    \          $res .= $upper;\n        } elsif ($upper eq $char) {\n            $res\
    \ .= $lower;\n        } else {\n            $res .= $char;\n        }\n    }\n\
    \    \n    return $res;\n}", "    \n    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $case = $char =~ /[a-z]/i ? 1 : 0;\n\
    \        $char =~ s/[a-z]/[A-Z]/g;\n        $char =~ s/[A-Z]/[a-z]/g;\n      \
    \  $char =~ s/^([a-z])/U\\1/g;\n        $char =~ s/([a-z])/L\\1/g;\n        $char\
    \ =~ s/^([A-Z])/U\\1/g;\n        $char =~ s/([A-Z])/L\\1/g;\n        $char =~\
    \ s/^([A-Z])/U\\1/g;\n        $char =~ s/([A-Z])/L\\1/g;\n        $char =~ s/^([A-Z])/U\\\
    1/g;\n        $char =~ s/([A-Z])/L\\1/g;\n        $char =~ s/^([A-Z])/U\\1/g;\n\
    \        $char =~ s/([A-Z])/L\\1/g;\n        $char =~ s/^([A-Z])/U\\1/g;\n   \
    \     $char =~ s/([A-Z])/L\\1/g;\n        $char =~ s/^([A-Z])/U\\1/g;\n      \
    \  $char =~ s/([A-Z])/L\\1/g;\n        $char =~ s/^([A-Z])/U\\1/g;\n        $char\
    \ =~ s/([A-Z])/L\\1/g;\n        $char =~ s/^([A-Z])/U\\1/g;\n        $char =~\
    \ s/([A-Z])/L\\1/g;\n        $char =~ s/^([A-Z])/U\\1/g;\n        $char =~ s/([A-Z])/L\\\
    1/g;\n        $char =~ s/^([A-Z])/U\\1/g;\n        $char =~ s/([A-Z])/L\\1/g;\n\
    \        $char =~ s/^([A-Z])/U\\1/g;\n        $char =~ s/([A-Z])/L\\1/g;\n   \
    \     $char =~ s/^([A-Z])/U\\1/g;\n        $char =~ s/([A-Z])/L\\1/g;\n      \
    \  $char =~ s/^([A-Z])/U\\1/g;\n        $char =~ s/([A-Z])/L\\1/g;\n        $char\
    \ =~ s/^([A-Z])/U\\1/g;\n        $char =~ ", "    my $result = \"\";\n    \n \
    \   foreach my $char (split(//, $s)) {\n        my $upper = uc($char);\n     \
    \   my $lower = lc($char);\n        \n        if ($char eq $upper) {\n       \
    \     $result .= $lower;\n        } elsif ($char eq $lower) {\n            $result\
    \ .= $upper;\n        } else {\n            $result .= $char;\n        }\n   \
    \ }\n    \n    return $result;\n}", "    my @chars = split(//, $s);\n    my $res\
    \ = \"\";\n    foreach my $char (@chars) {\n        my $c = $char;\n        if\
    \ ($c =~ /[a-z]/i) {\n            $c =~ tr/a-z/A-Z/;\n        }\n        elsif\
    \ ($c =~ /[A-Z]/i) {\n            $c =~ tr/A-Z/a-z/;\n        }\n        $res\
    \ .= $c;\n    }\n    return $res;\n}", "    \n    my $result = \"\";\n    \n \
    \   foreach my $char (split(//, $s)) {\n        my $case = uc($char);\n      \
    \  \n        if ($case eq $char) {\n            $result .= $case;\n        } else\
    \ {\n            $result .= $char;\n        }\n    }\n    \n    return $result;\n\
    }", "    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;\n    $s =~ s/^#?([a-zA-Z])/uc($1)/ge;\n\
    \    $s =~ s/^#?([a-zA-Z])/lc($1)/ge;", "    \n    my $result = \"\";\n    \n\
    \    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n\
    \        \n        if($c =~ /^[a-z]/i) {\n            $result .= uc($c);\n   \
    \     } elsif($c =~ /^[A-Z]/i) {\n            $result .= lc ($c);\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    \n    return $result;\n\
    }", "    $s =~ s/^#//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/^[A-Z]+//;\n    $s\
    \ =~ s/^[a-z]+[A-Z]+//;\n    $s =~ s/^[A-Z]+[a-z]+//;\n    $s =~ s/^[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+//;\n    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+//;\n    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+//;\n    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+//;\n\
    \    $s =~ s/^[a-z]+[A-Z]+[a-z]+[A-Z]+[a-z]+[A-Z]+", "    my $res = \"\";\n  \
    \  my $i = 0;\n    my $len = length($s);\n    while($i < $len) {\n        if($s[i]\
    \ eq \"#\") {\n            $res .= $s[$i];\n            $i++;\n        }\n   \
    \     elsif($s[i] eq \"@\") {\n            $res .= $s[$i];\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"$\") {\n            $res .= $s[$i];\n   \
    \         $i++;\n        }\n        elsif($s[i] eq \"^\") {\n            $res\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"&\") {\n\
    \            $res .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"*\") {\n            $res .= $s[$i];\n            $i++;\n        }\n   \
    \     elsif($s[i] eq \"(\") {\n            $res .= $s[$i];\n            $i++;\n\
    \        }\n        elsif($s[i] eq \")\") {\n            $res .= $s[$i];\n   \
    \         $i++;\n        }\n        elsif($s[i] eq \"<\") {\n            $res\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \">\") {\n\
    \            $res .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"|\") {\n            $res .= $s[$i];\n            $i++;\n        }\n   \
    \     elsif($s[i] eq \"[\") {\n            $res .= $s[$i];\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"]\") {\n            $res .= $s[$i];\n   \
    \         $i++;\n        }\n        elsif($s[i] eq \"{\") {\n            $res\
    \ .= $s[$i];\n            $i++;\n        }\n        elsif($s[i] eq \"}\") {\n\
    \            $res .= $s[$i];\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"\\\"\") {\n            $res .= $s[$i];\n            $i++;\n        }\n\
    \        elsif($s[i] eq \"'\") {\n            $res .= $s[$i];\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"=\") {\n            $res .= $s[$i];\n   \
    \         $i++;\n        }\n        elsif($s[i] eq \"-\") {\n            $res\
    \ .= $s[$i];\n            $i++", "    my $result = \"\";\n    my $i = 0;\n   \
    \ \n    while($i < length($s)) {\n        if($s[i] eq substr($s, $i, 1)) {\n \
    \           $result .= substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n\
    \        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n            $result .=\
    \ substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1) . substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ substr($s, $i, 1)) {\n            $result .= substr($s, $i, 1) . substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq substr($s, $i,\
    \ 1)) {\n            $result .= substr($s, $i, 1) . substr($s, $i, 1);\n     \
    \       $i++;\n        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n      \
    \      $result .= substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n\
    \        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n            $result .=\
    \ substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1) . substr($s, $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq\
    \ substr($s, $i, 1)) {\n            $result .= substr($s, $i, 1) . substr($s,\
    \ $i, 1);\n            $i++;\n        }\n        elsif($s[i] eq substr($s, $i,\
    \ 1)) {\n            $result .= substr($s, $i, 1) . substr($s, $i, 1);\n     \
    \       $i++;\n        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n      \
    \      $result .= substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n\
    \        }\n        elsif($s[i] eq substr($s, $i, 1)) {\n            $result .=\
    \ substr($s, $i, 1) . substr($s, $i, 1);\n            $i++;\n        }\n     \
    \   elsif($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1) . substr($s, $i, 1);\n            $i++;\n        }\n        ", "    my $len\
    \ = length($s);\n    my $i = 0;\n    my $reverse = \"\";\n    my $temp = \"\"\
    ;\n    my $flag = 0;\n    \n    while ($i < $len) {\n        if ($s[i] eq \"#\"\
    ) {\n            $flag = 1;\n        }\n        if ($s[i] eq \"@\") {\n      \
    \      $flag = 2;\n        }\n        if ($s[i] eq \"$\") {\n            $flag\
    \ = 3;\n        }\n        if ($s[i] eq \"^\") {\n            $flag = 4;\n   \
    \     }\n        if ($s[i] eq \"&\") {\n            $flag = 5;\n        }\n  \
    \      if ($s[i] eq \"*\") {\n            $flag = 6;\n        }\n        if ($s[i]\
    \ eq \"(\") {\n            $flag = 7;\n        }\n        if ($s[i] eq \")\")\
    \ {\n            $flag = 8;\n        }\n        if ($s[i] eq \"[\") {\n      \
    \      $flag = 9;\n        }\n        if ($s[i] eq \"]\") {\n            $flag\
    \ = 10;\n        }\n        if ($s[i] eq \"<\") {\n            $flag = 11;\n \
    \       }\n        if ($s[i] eq \">\") {\n            $flag = 12;\n        }\n\
    \        if ($s[i] eq \"=\") {\n            $flag = 13;\n        }\n        if\
    \ ($s[i] eq \"+\") {\n            $flag = 14;\n        }\n        if ($s[i] eq\
    \ \"-\") {\n            $flag = 15;\n        }\n        if ($s[i] eq \"/\") {\n\
    \            $flag = 16;\n        }\n        if ($s[i] eq \"%\") {\n         \
    \   $flag = 17;\n        }\n        if ($s[i] eq \"*\") {\n            $flag =\
    \ 18;\n        }\n        if ($s[i] eq \"?\") {\n            $flag = 19;\n   \
    \     }\n        if ($s[i] eq \"!\") {\n            $flag = 20;\n        }\n \
    \       if ($s[i] eq \".\") {\n            $flag = 21;\n        }\n        if\
    \ ($s[i] eq \"/\") {\n            $flag = 22;\n        }\n        if ($s[i] eq\
    \ \"=\") {\n            $flag = 23;\n        }\n        if ($s[i] eq \"<\") {\n\
    \            $flag = 24;\n        }\n        if ($s[i] eq \">\") {\n         \
    \   $flag = 25;\n        }\n        if ($s[i] eq \"|\") {\n            $flag =\
    \ 26;\n        }\n        if ($s[i] eq \"!\") {\n            $flag = 27;\n   \
    \     }\n        if ($s[i] eq \"=\") {\n            $flag = 28;\n        }\n \
    \       if ($s[i] eq \"+\") {\n            $flag = 29;\n        }\n        if\
    \ ($s[i] eq \"-\") {\n            $flag = 30;\n        }\n        if ($s[i] eq\
    \ \"%\") {\n            $flag = 31;\n        }\n        if ($s[i] eq \"*\") {\n\
    \            $flag = 32;\n        }\n        if ($s[i] eq"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
