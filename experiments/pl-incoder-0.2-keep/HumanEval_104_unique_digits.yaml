name: HumanEval_104_unique_digits
language: humaneval_to_perl.py
prompt: "# Given a list of positive integers x. return a sorted list of all \n# elements\
  \ that hasn't any even digit.\n# Note: Returned list should be sorted in increasing\
  \ order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n\
  # >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
  \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
  \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
  \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    \n    foreach my $i (@$x) {\n        my $digit\
    \ = $i % 10;\n        \n        if ($digit != 0) {\n            push(@result,\
    \ $i);\n        }\n    }\n    \n    return @result;\n}", "    my @result;\n  \
    \  my $i = 0;\n    foreach my $num (@$x) {\n        my $digit = $num % 10;\n \
    \       if ($digit == 0) {\n            $result[$i] = $num;\n            $i++;\n\
    \        }\n    }\n    return @result;\n}", "    my @ret;\n    \n    foreach my\
    \ $x (@$x) {\n        my $digit = $x;\n        my $count = 0;\n        \n    \
    \    foreach my $i (0..$#{$x}) {\n            my $d = $x->[$i];\n            \n\
    \            if ($d % 2 == 0) {\n                $digit = $d;\n              \
    \  $count = 1;\n                last;\n            }\n        }\n        \n  \
    \      if ($count == 0) {\n            push(@ret, $digit);\n        }\n    }\n\
    \    \n    return @ret;\n}", "    my @result;\n    my $i = 0;\n    \n    foreach\
    \ my $num (@$x) {\n        my $digit = $num % 10;\n        if ($digit == 0) {\n\
    \            $result[$i] = $num;\n            $i++;\n        }\n    }\n    \n\
    \    return @result;\n}", "    my @a = ();\n    my $i = 0;\n    foreach my $x\
    \ (@$x) {\n        push @a, $x if $x % 2 != 0;\n        $i++;\n    }\n    push\
    \ @a, $i if $i ne 0;\n    return @a;\n}", "    my @result;\n    my $digit;\n \
    \   my $i = 0;\n    \n    foreach $digit (@$x) {\n        next if $digit % 2 !=\
    \ 0;\n        $result[$i] = $digit;\n        $i++;\n    }\n    \n    return @result;\n\
    }", "    my @result;\n    my $i = 0;\n    \n    while($i < @$x) {\n        my\
    \ $digit = $x->[$i];\n        \n        for(my $j = $i+1; $j < @$x; $j++) {\n\
    \            my $next = $x->[$j];\n            \n            if($digit == $next)\
    \ {\n                next;\n            }\n            \n            if($digit\
    \ % 2 == 0) {\n                push(@result, $next);\n            }\n        }\n\
    \        \n        $i++;\n    }\n    \n    return @result;\n}", "    my @res;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    \n    foreach my $num (@$x) {\n        if ($num % 2 == 0) {\n           \
    \ $flag = 1;\n        }\n        elsif ($flag == 1) {\n            $flag = 0;\n\
    \            $tmp = $num;\n            $tmp2 = $num;\n        }\n        elsif\
    \ ($flag == 0) {\n            $res[$i] = $tmp;\n            $res[$j] = $tmp2;\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @res;\n}",
  "    my @result;\n    \n    foreach my $num (@$x) {\n        foreach my $digit (@digits)\
    \ {\n            if ($num % $digit == 0) {\n                push(@result, $num);\n\
    \                last;\n            }\n        }\n    }\n    return @result;\n\
    }", "    my @result;\n    my $i = 0;\n    foreach my $num (@$x) {\n        my\
    \ $digit = $num % 10;\n        if ($digit == 0) {\n            push(@result, $num);\n\
    \        }\n    }\n    foreach my $num (@result) {\n        my $digit = $num %\
    \ 10;\n        if ($digit != 0) {\n            $i++;\n        }\n    }\n    if\
    \ ($i == 0) {\n        return @result;\n    }\n    else {\n        return ();\n\
    \    }\n}", "    my @result;\n    my $digit;\n    my $i = 0;\n    \n    while($i\
    \ < @$x) {\n        $digit = $x->[$i];\n        \n        while($i < @$x && $x->[$i]\
    \ % $digit == 0) {\n            $i++;\n        }\n        \n        push(@result,\
    \ $x->[$i]);\n        $i++;\n    }\n    \n    return @result;\n}", "    my @res;\n\
    \    my $i = 0;\n    while($i < $#x) {\n        my $y = $x[$i];\n        while($y\
    \ < 10) {\n            my $z = $y;\n            $y++;\n            my $z2 = $y;\n\
    \            while($z2 > 0) {\n                my $z3 = $z2;\n               \
    \ $z2--;\n                my $z4 = $z3;\n                while($z4 > 0) {\n  \
    \                  my $z5 = $z4;\n                    $z4--;\n               \
    \     my $z6 = $z5;\n                    while($z6 > 0) {\n                  \
    \      my $z7 = $z6;\n                        $z6--;\n                       \
    \ my $z8 = $z7;\n                        while($z8 > 0) {\n                  \
    \          my $z9 = $z8;\n                            $z8--;\n               \
    \             my $z10 = $z9;\n                            while($z10 > 0) {\n\
    \                                my $z11 = $z10;\n                           \
    \     $z10--;\n                                my $z12 = $z11;\n             \
    \                   while($z12 > 0) {\n                                    my\
    \ $z13 = $z12;\n                                    $z12--;\n                \
    \                    my $z14 = $z13;\n                                    while($z14\
    \ > 0) {\n                                        my $z15 = $z14;\n          \
    \                              $z14--;\n                                     \
    \   my $z16 = $z15;\n                                        while($z16 > 0) {\n\
    \                                            my $z17 = $z16;\n               \
    \                             $z16--;\n                                      \
    \      my $z18 = $z17;\n                                            while($z18\
    \ > 0) {\n                                                my $z19 = $z18;\n  \
    \                                              $z18--;\n                     \
    \                           my $z20 = $z19;\n                                \
    \                while($z20 > 0) {\n                                         \
    \           my $z21 = $z20;\n                                                \
    \    $z20--;\n                                                    my $z22 = $z21;\n\
    \                                                    while($z22 > 0) {\n     \
    \                                                   my $z23 = $z22;\n        \
    \                                                $z22--;\n                   \
    \                                     my $z24 = $z23;\n                      \
    \                                  while($z24 > 0) {\n                       \
    \                                     my $z25 = $z24;\n                      \
    \                                      $z24--;\n                             \
    \                               my $z26 = $z25;\n                            \
    \                                while($z26 > 0) {\n                         \
    \                                       my $z27 = $z26;\n                    \
    \                                            $z26--;\n                       \
    \                                         my $z28 = $z27;\n                  \
    \                                              while($z28 > 0) {\n           \
    \                                                         my $z29 = $z28;\n  \
    \                                                                  $z28--;\n \
    \                                                                   my $z30 =\
    \ $z29;\n                                                                    while($z30\
    \ > 0) {\n                                                                   \
    \     my $z31 = $z30;\n                                                      \
    \                  $z30--;\n                                                 \
    \                       my $z", "    my @ret;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $digit;\n    my $tmp;\n    \n    foreach $digit (@$x) {\n        $tmp\
    \ = $i;\n        $i = $i + 1;\n        \n        foreach $j ($i, $#x) {\n    \
    \        $tmp = $tmp * 10 + ($x[$j] - $digit);\n        }\n        \n        if\
    \ ($tmp % 2 == 0) {\n            push(@ret, $x[$j]);\n        }\n    }\n    \n\
    \    return @ret;\n}", "    my @res;\n    my $i = 0;\n    while($i < $#x) {\n\
    \        if($x[$i] % 2 != 0) {\n            push(@res, $x[$i]);\n        }\n \
    \       $i++;\n    }\n    return @res;\n}", "    my @result;\n    my $i = 0;\n\
    \    while($i < @$x) {\n        my $y = $x->[$i];\n        my $z = 0;\n      \
    \  while($z < $i) {\n            my $zy = $x->[$z];\n            next if($zy %\
    \ $y == 0);\n            $z++;\n        }\n        push @result, $y;\n       \
    \ $i++;\n    }\n    return @result;\n}", "    my @result;\n    my $digit;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $len = @$x;\n    \n    while($i < $len)\
    \ {\n        $digit = $x->[$i];\n        while($j < $len) {\n            if($x->[$j]\
    \ % $digit == 0) {\n                $x->[$j] = 0;\n                last;\n   \
    \         }\n            $j++;\n        }\n        $i++;\n    }\n    \n    for(my\
    \ $i = 0; $i < $len; $i++) {\n        $digit = $x->[$i];\n        for(my $j =\
    \ 0; $j < $len; $j++) {\n            if($x->[$j] % $digit == 0) {\n          \
    \      $x->[$j] = $x->[$j] / $digit;\n                last;\n            }\n \
    \       }\n    }\n    \n    for(my $i = 0; $i < $len; $i++) {\n        $digit\
    \ = $x->[$i];\n        for(my $j = 0; $j < $len; $j++) {\n            if($x->[$j]\
    \ % $digit == 0) {\n                $x->[$j] = $x->[$j] / $digit;\n          \
    \      last;\n            }\n        }\n    }\n    \n    for(my $i = 0; $i < $len;\
    \ $i++) {\n        $digit = $x->[$i];\n        for(my $j = 0; $j < $len; $j++)\
    \ {\n            if($x->[$j] % $digit == 0) {\n                $x->[$j] = $x->[$j]\
    \ / $digit;\n                last;\n            }\n        }\n    }\n    \n  \
    \  for(my $i = 0; $i < $len; $i++) {\n        $digit = $x->[$i];\n        for(my\
    \ $j = 0; $j < $len; $j++) {\n            if($x->[$j] % $digit == 0) {\n     \
    \           $x->[$j] = $x->[$j] / $digit;\n                last;\n           \
    \ }\n        }\n    }\n    \n    for(my $i = 0; $i < $len; $i++) {\n        $digit\
    \ = $x->[$i];\n        for(my $j = 0; $j < $len; $j++) {\n            if($x->[$j]\
    \ % $digit == 0) {\n                $x->[$j] = $x->[$j] / $digit;\n          \
    \      last;\n            }\n        }\n    }\n    \n    for(my $i = 0; $i < $len;\
    \ $i++) {\n        $digit = $x->[$i];\n        for(my $j = 0; $j < $len; $j++)\
    \ {\n            if($x->[$j] % $digit ", "    my @result = ();\n    my $i = 0;\n\
    \    \n    foreach my $num (@$x) {\n        my $digit = $num % 10;\n        \n\
    \        if ($digit == 0) {\n            push (@result, $num);\n        }\n  \
    \      elsif ($digit == 1) {\n            push (@result, $num);\n        }\n \
    \       elsif ($digit == 2) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 3) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 4) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 5) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 6) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 7) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 8) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 9) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 0) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 1) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 2) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 3) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 4) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 5) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 6) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 7) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 8) {\n            push (@result, $num);\n        }\n\
    \        elsif ($digit == 9) {\n            push (@result, $num);\n        }\n\
    \    }\n    \n    return @result;\n}", "    my @result;\n    my $i = 0;\n    \n\
    \    foreach my $num (@$x) {\n        my $digit = $num % 10;\n        if ($digit\
    \ == 0) {\n            $result[$i] = $num;\n            $i++;\n        }\n   \
    \ }\n    \n    return @result;\n}", "    my @result;\n    my $count = 0;\n   \
    \ \n    foreach my $num (@$x) {\n        if ($num =~ /\\d/) {\n            $count++;\n\
    \        }\n        else {\n            push (@result, $num);\n        }\n   \
    \ }\n    \n    if ($count > 0) {\n        foreach my $num (@result) {\n      \
    \      if ($num =~ /\\d/) {\n                $count--;\n            }\n      \
    \  }\n    }\n    \n    return @result;\n}", "    my @res;\n    my $i = 0;\n  \
    \  \n    foreach my $num (@$x) {\n        my $digit = $num % 10;\n        \n \
    \       if ($digit == 0) {\n            $i++;\n        }\n        elsif ($i ==\
    \ 0) {\n            push(@res, @$x);\n            $i = 0;\n        }\n       \
    \ elsif ($digit != 0) {\n            push(@res, @$x);\n            $i = 0;\n \
    \       }\n    }\n    \n    return @res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
