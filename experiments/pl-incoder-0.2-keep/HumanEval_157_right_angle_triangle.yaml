name: HumanEval_157_right_angle_triangle
language: humaneval_to_perl.py
prompt: "# Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2,\
  \ 3) == False\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $rad = ($a + $b + $c) / 2;\n    return $rad > $a && $rad > $b\
    \ && $rad > $c;\n}", "    my $is_right_angle = 0;\n    my $angle_diff = 0;\n \
    \   my $is_right_angle_triangle = 0;\n    my $is_right_angle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle =\
    \ 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle\
    \ = 0;\n    my $is_right_angle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_triangle_",
  "    return ($a > $b and $a > $c) or ($b > $a and $b > $c) or ($a > $b and $b >\
    \ $c);\n}", "    my $rad = ($a + $b + $c) / 2;\n    return $rad > $c && $rad >\
    \ $a && $rad > $b;\n}", "    return ($a > $b and $a > $c) or ($b > $a and $b >\
    \ $c) or ($a > $b and $b > $c);\n}", "    return $a > $b and $a > $c or $a > $c\
    \ and $b > $c;\n}", "    return ($a + $b > $c) && ($a + $c > $b) && ($b + $c >\
    \ $a);\n}", "    my $d = $c - $b;\n    my $s = $a * $a + $b * $b + $c * $c;\n\
    \    my $t = $d / $s;\n    my $u = ($b * $c - $a * $d) / $s;\n    return $t >\
    \ $u;\n}", "    return ($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a);\n}",
  "    return $a > $b and $a > $c or $c > $b and $c > $a;\n}", "    return ($a + $b\
    \ > $c) || ($a + $c > $b) || ($b + $c > $a);\n}", "    my $ab = $b - $a;\n   \
    \ my $ac = $c - $a;\n    my $bc = $b - $c;\n    my $cb = $c - $b;\n    my $abc\
    \ = $ab * $ac;\n    my $bca = bc * $ac;\n    my $cab = bc * $ab;\n    my $cba\
    \ = cb * $ab;\n    return ($abc <= $bca) && ($abc <= $cab) && ($abc <= $cba);\n\
    }", "    my $d = $c - $b;\n    my $s = $a / $d;\n    my $t = $b / $d;\n    my\
    \ $u = ($b - $c) / $d;\n    my $v = ($c - $a) / $d;\n    my $w = sqrt($u * $u\
    \ + $v * $v);\n    return $w >= $s / $t;\n}", "    return $a > $b and $a > $c\
    \ or $a > $b and $c > $a or $c > $b and $a > $c;\n}", "    return $a > $b and\
    \ $a > $c or $c > $b and $c > $a;\n}", "    my $d = $a - $b;\n    my $e = $c -\
    \ $b;\n    my $f = $d - $e;\n    return ($f > 0 && $f < 180);\n}", "    return\
    \ ($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a);\n}", "    return $a > $b\
    \ and $a > $c or $a > $c and $b > $c;\n}", "    my $rad = ($a + $b + $c) / 2;\n\
    \    return $rad > 180;\n}", "    my $d = $a + $b + $c;\n    return ($d > $a *\
    \ $c && $d > $b * $c && $d > $a * $b) ? 1 : 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
