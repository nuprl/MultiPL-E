name: HumanEval_23_strlen
language: humaneval_to_perl.py
prompt: "# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n\
  # 3\nsub strlen {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1)) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  asdasnakj\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $length = 0;\n    my $i;\n    for ($i = 0; $i < length($string);\
    \ $i++) {\n        $length++;\n    }\n    return $length;\n}", "    my $len =\
    \ length($string);\n    return $len;\n}", "    my $length = 0;\n    my $i = 0;\n\
    \    while ($i < length($string)) {\n        $length++;\n        $i++;\n    }\n\
    \    return $length;\n}", "    my $length = 0;\n    my $char;\n    while ($string\
    \ =~ /([[:alpha:]]|[[:digit:]]|[[:space:]])/) {\n        $length++;\n    }\n \
    \   return $length;\n}", "    my $length = 0;\n    my $char;\n    while ($char\
    \ = $string->[$length]) {\n        $length++;\n    }\n    return $length;\n}",
  "    my $length = 0;\n    my $i = 0;\n    while($i < length($string)) {\n      \
    \  $length++;\n        $i++;\n    }\n    return $length;\n}", "    my $length\
    \ = 0;\n    my $i = 0;\n    while ($i < length($string)) {\n        $length++;\n\
    \        $i++;\n    }\n    return $length;\n}", "    my $len = length($string);\n\
    \    return $len;\n}", "    my $length = 0;\n    my $char;\n    while ($char =\
    \ $string->[$length]) {\n        $length++;\n    }\n    return $length;\n}", " \
    \   my $length = 0;\n    my $i = 0;\n    while($i < length($string)) {\n     \
    \   $length++;\n        $i++;\n    }\n    return $length;\n}", "    my $length\
    \ = 0;\n    my $i = 0;\n    while($i < length($string)) {\n        $length++;\n\
    \        $i++;\n    }\n    return $length;\n}", "    my $len = length($string);\n\
    \    return $len;\n}", "    my $len = length($string);\n    return $len;\n}",
  "    my $length = 0;\n    my $i = 0;\n    while($i < length($string)) {\n      \
    \  $length++;\n        $i++;\n    }\n    return $length;\n}", "    my $len = length($string);\n\
    \    return $len;\n}", "    my $len = length($string);\n    return $len;\n}",
  "    my $len = length($string);\n    return $len;\n}", "    my $length = 0;\n  \
    \  my $i = 0;\n    while ($i < length($string)) {\n        $length++;\n      \
    \  $i++;\n    }\n    return $length;\n}", "    my $length = 0;\n    my $i = 0;\n\
    \    while($i < length($string)) {\n        $length++;\n        $i++;\n    }\n\
    \    return $length;\n}", "    return length($string);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
