name: HumanEval_48_is_palindrome
language: humaneval_to_perl.py
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome('')\n# True\n\
  # >>> is_palindrome('aba')\n# True\n# >>> is_palindrome('aaaaa')\n# True\n# >>>\
  \ is_palindrome('zbcd')\n# False\nsub is_palindrome {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $reversed = reverse $text;\n    return $text eq $reversed;\n\
    }", "    my $reversed = reverse $text;\n    return $text eq $reversed;\n}", " \
    \   my $len = length($text);\n    my $i = 0;\n    my $j = $len - 1;\n    my $is_palindrome\
    \ = 1;\n    while ($i < $len && $j < $len) {\n        if ($text[$i] != $text[$j])\
    \ {\n            $is_palindrome = 0;\n            last;\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return $is_palindrome;\n}", "    my $reversed_text\
    \ = reverse $text;\n    return $text eq $reversed_text;\n}", "    my $reversed\
    \ = reverse($text);\n    return $text eq $reversed;\n}", "    my $reversed = reverse\
    \ $text;\n    return $text eq $reversed;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    my $len = length($text);\n \
    \   my $i = 0;\n    my $j = $len - 1;\n    my $is_palindrome = 1;\n    while ($i\
    \ < $len && $j < $len) {\n        if ($text eq substr($text, $i, $j)) {\n    \
    \        $i++;\n            $j--;\n        } else {\n            $is_palindrome\
    \ = 0;\n        }\n    }\n    return $is_palindrome;\n}", "    my $reversed =\
    \ reverse $text;\n    return $text eq $reversed;\n}", "    my $len = length($text);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $len && $j < $len) {\n\
    \        return 0 if $text[$i] != $text[$j];\n        $i++;\n        $j--;\n \
    \   }\n    return 1;\n}", "    return $text eq reverse $text;\n}", "    my $reversed_text\
    \ = reverse($text);\n    return $text eq $reversed_text;\n}", "    $text =~ tr/a-z/A-Z/;\n\
    \    $text =~ tr/A-Za-z/A-Z/;\n    return $text eq $text ? 1 : 0;\n}", "    my\
    \ $reversed = reverse $text;\n    return $text eq $reversed;\n}", "    my $reversed_text\
    \ = reverse($text);\n    return $text eq $reversed_text;\n}", "    my $len = length($text);\n\
    \    my $i = 0;\n    my $j = $len-1;\n    my $is_palindrome = 1;\n    while($i\
    \ < $len && $j < $len) {\n        if($text[$i] != $text[$j]) {\n            $is_palindrome\
    \ = 0;\n            last;\n        }\n        $i++;\n        $j--;\n    }\n  \
    \  return $is_palindrome;\n}", "    return $text eq reverse($text);\n}", "   \
    \ return $text eq reverse $text;\n}", "    my $reversed_text = reverse $text;\n\
    \    return $text eq $reversed_text;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
