name: HumanEval_26_remove_duplicates
language: humaneval_to_perl.py
prompt: "# From a list of integers, remove all elements that occur more than once.\n\
  # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @unique;\n    my $i = 0;\n    foreach my $number (@$numbers)\
    \ {\n        if ($unique[$i] eq $number) {\n            $i++;\n        } else\
    \ {\n            $unique[$i] = $number;\n            $i++;\n        }\n    }\n\
    \    return @unique;\n}", "    my @unique;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $last;\n    my $last2;\n    my $last3;\n    my $last4;\n    my $last5;\n\
    \    my $last6;\n    my $last7;\n    my $last8;\n    my $last9;\n    my $last10;\n\
    \    my $last11;\n    my $last12;\n    my $last13;\n    my $last14;\n    my $last15;\n\
    \    my $last16;\n    my $last17;\n    my $last18;\n    my $last19;\n    my $last20;\n\
    \    my $last21;\n    my $last22;\n    my $last23;\n    my $last24;\n    my $last25;\n\
    \    my $last26;\n    my $last27;\n    my $last28;\n    my $last29;\n    my $last30;\n\
    \    my $last31;\n    my $last32;\n    my $last33;\n    my $last34;\n    my $last35;\n\
    \    my $last36;\n    my $last37;\n    my $last38;\n    my $last39;\n    my $last40;\n\
    \    my $last41;\n    my $last42;\n    my $last43;\n    my $last44;\n    my $last45;\n\
    \    my $last46;\n    my $last47;\n    my $last48;\n    my $last49;\n    my $last50;\n\
    \    my $last51;\n    my $last52;\n    my $last53;\n    my $last54;\n    my $last55;\n\
    \    my $last56;\n    my $last57;\n    my $last58;\n    my $last59;\n    my $last60;\n\
    \    my $last61;\n    my $last62;\n    my $last63;\n    my $last64;\n    my $last65;\n\
    \    my $last66;\n    my $last67;\n    my $last68;\n    my $last69;\n    my $last70;\n\
    \    my $last71;\n    my $last72;\n    my $last73;\n    my $last74;\n    my $last75;\n\
    \    my $last76;\n    my $last77;\n    my $last78;\n    my $last79;\n    my $last80;\n\
    \    my $last81;\n    my $last82;\n    my $last83;\n    my $last84;\n    my $last85;\n\
    \    my $last86;\n    my $", "    my @result;\n    my $index = 0;\n    foreach\
    \ my $number (@$numbers) {\n        next if $result[$index++] == $number;\n  \
    \      $result[$index++] = $number;\n    }\n    return @result;\n}", "    my @numbers_copy\
    \ = @$numbers;\n    my $i = 0;\n    my $j = 0;\n    my $duplicates = 0;\n    my\
    \ $new_numbers = ();\n    foreach my $number (@numbers_copy) {\n        if ($numbers_copy[$i]\
    \ == $number) {\n            $duplicates++;\n        } else {\n            $new_numbers->[$j]\
    \ = $number;\n            $j++;\n        }\n        $i++;\n    }\n    if ($duplicates\
    \ > 1) {\n        remove_duplicates($new_numbers);\n    }\n    return @$new_numbers;\n\
    }", "    my @unique;\n    my $i = 0;\n    my $j = 0;\n    my $last;\n    my $last_value;\n\
    \    my $last_index;\n    my $last_unique;\n    foreach my $number (@$numbers)\
    \ {\n        if ($number == $last_value) {\n            $unique[$last_index] =\
    \ $last_unique;\n            $j++;\n        }\n        else {\n            $unique[$i]\
    \ = $number;\n            $last_value = $number;\n            $last_index = $i;\n\
    \            $last_unique = $number;\n            $j = 1;\n        }\n       \
    \ $i++;\n    }\n    return @unique;\n}", "    my @unique;\n    my $i = 0;\n  \
    \  foreach my $number (@$numbers) {\n        if ($unique[$i] eq $number) {\n \
    \           $i++;\n        } else {\n            $unique[$i] = $number;\n    \
    \        $i++;\n        }\n    }\n    return @unique;\n}", "    my @output;\n\
    \    my %seen;\n    foreach my $number (@$numbers) {\n        if (!$seen{$number}++)\
    \ {\n            push @output, $number;\n        }\n    }\n    return @output;\n\
    }", "    my @unique;\n    my $i = 0;\n    my $j = 0;\n    my $last_seen;\n   \
    \ foreach my $number (@$numbers) {\n        if ($number == $last_seen) {\n   \
    \         $j++;\n        } else {\n            $unique[$i] = $number;\n      \
    \      $j = 1;\n            $last_seen = $number;\n            $i++;\n       \
    \ }\n    }\n    return @unique;\n}", "    my @output;\n    my $index = 0;\n  \
    \  foreach my $number (@$numbers) {\n        if ($output[$index] eq $number) {\n\
    \            $index++;\n        } else {\n            $output[$index] = $number;\n\
    \            $index++;\n        }\n    }\n    return @output;\n}", "    my $result\
    \ = ();\n    my $i = 0;\n    my $j = 0;\n    my $last;\n    my $last_index;\n\
    \    my $last_value;\n    my $last_count;\n    my $last_value;\n    foreach my\
    \ $number (@$numbers) {\n        if ($number == $last_value) {\n            $last_count++;\n\
    \        } else {\n            if ($last_count > 1) {\n                push(@$result,\
    \ $last_value);\n            }\n            $last_count = 1;\n            $last_value\
    \ = $number;\n        }\n        $i++;\n    }\n    if ($last_count > 1) {\n  \
    \      push(@$result, $last_value);\n    }\n    return @$result;\n}", "    my\
    \ @unique;\n    my $i = 0;\n    my $j = 0;\n    my $last_value = $numbers[0];\n\
    \    foreach my $number (@$numbers) {\n        if ($number == $last_value) {\n\
    \            $j++;\n        } else {\n            if ($j > 0) {\n            \
    \    push(@unique, $last_value);\n                $j = 0;\n            }\n   \
    \         $last_value = $number;\n            $j = 1;\n        }\n    }\n    if\
    \ ($j > 0) {\n        push(@unique, $last_value);\n    }\n    return @unique;\n\
    }", "    my $counts = Hash::Util::with_dependencies( \\@$numbers, sub {\n    \
    \    my ($number) = @_;\n        return $number->{count} if $number->{count};\n\
    \        return 1;\n    });\n    my @result = ();\n    foreach my $number (@$numbers)\
    \ {\n        my $count = $counts->{$number};\n        push @result, $number if\
    \ $count > 1;\n    }\n    return @result;\n}", "    my @result;\n    my $last_value\
    \ = undef;\n    foreach my $number (@$numbers) {\n        if ($number != $last_value)\
    \ {\n            push(@result, $number);\n            $last_value = $number;\n\
    \        }\n    }\n    return @result;\n}", "    my @unique;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $last;\n    my $last_index;\n    my $last_value;\n   \
    \ foreach my $number (@$numbers) {\n        if ($number == $last) { $last_index++;\
    \ $last_value = $number; $last_index--; }\n        elsif ($number != $last) {\n\
    \            if ($last_index == 0) {\n                push(@unique, $last_value);\n\
    \            }\n            else {\n                push(@unique, $last_value,\
    \ $last_index);\n            }\n            $last_index = 0;\n            $last_value\
    \ = $number;\n        }\n        $last = $number;\n        $i++;\n    }\n    if\
    \ ($last_index != 0) {\n        if ($last_index == 0) {\n            push(@unique,\
    \ $last_value);\n        }\n        else {\n            push(@unique, $last_value,\
    \ $last_index);\n        }\n    }\n    return @unique;\n}", "    my $hash = {};\n\
    \    my $count = 0;\n    foreach my $num (@$numbers) {\n        if (!$hash->{$num})\
    \ {\n            $hash->{$num} = 1;\n            $count++;\n        }\n    }\n\
    \    return sort keys %$hash;\n}", "    my $hash = {};\n    foreach my $num (@$numbers)\
    \ {\n        $hash->{$num}++;\n    }\n    return grep { $hash->{$_} == 1 } keys\
    \ %$hash;\n}", "    my @output;\n    my $index = 0;\n    my $last_number = $numbers[0];\n\
    \    foreach my $number (@$numbers) {\n        if ($number != $last_number) {\n\
    \            $last_number = $number;\n            $output[$index++] = $number;\n\
    \        }\n    }\n    return @output;\n}", "    my @result;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k;\n    my $found;", "    my @numbers_copy = @$numbers;\n\
    \    my @result;\n    my $i = 0;\n    my $j = 0;\n    my $k;\n    my $found;\n\
    \    my $found2;\n    my $found3;\n    my $found4;\n    my $found5;\n    my $found6;\n\
    \    my $found7;\n    my $found8;\n    my $found9;\n    my $found10;\n    my $found11;\n\
    \    my $found12;\n    my $found13;\n    my $found14;\n    my $found15;\n    my\
    \ $found16;\n    my $found17;\n    my $found18;\n    my $found19;\n    my $found20;\n\
    \    my $found21;\n    my $found22;\n    my $found23;\n    my $found24;\n    my\
    \ $found25;\n    my $found26;\n    my $found27;\n    my $found28;\n    my $found29;\n\
    \    my $found30;\n    my $found31;\n    my $found32;\n    my $found33;\n    my\
    \ $found34;\n    my $found35;\n    my $found36;\n    my $found37;\n    my $found38;\n\
    \    my $found39;\n    my $found40;\n    my $found41;\n    my $found42;\n    my\
    \ $found43;\n    my $found44;\n    my $found45;\n    my $found46;\n    my $found47;\n\
    \    my $found48;\n    my $found49;\n    my $found50;\n    my $found51;\n    my\
    \ $found52;\n    my $found53;\n    my $found54;\n    my $found55;\n    my $found56;\n\
    \    my $found57;\n    my $found58;\n    my $found59;\n    my $found60;\n    my\
    \ $found61;\n    my $found62;\n    my $found63;\n    my $found64;\n    my $found65;\n\
    \    my $found66;\n    my $found67;\n    my $found68;\n    my $found69;\n    my\
    \ $found70;\n    my $found71;\n    my $found72;\n    my $found73;\n    my $found74;\n\
    \    my $found75;\n    my $found76;\n    my $found77;\n    my $found78;\n    my\
    \ $found79;\n    my $found80;\n    my $found81;\n    my $found82;\n    my $found83;\n\
    \    my $found84;\n    ", "    my @result;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $last;\n    my $number;\n    my $found;\n    my $in_number;"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
