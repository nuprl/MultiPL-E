name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($el) {\n    return $el != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $i => $b) {\n    if ($i > 0) {\n      if ($brackets[$i\
    \ - 1] != $b) {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "  $open_brackets = explode(\"<\", $brackets);\n  $closed_brackets = explode(\"\
    >\", $brackets);\n  foreach ($open_brackets as $open_bracket => $closed_bracket)\
    \ {\n    if ($open_bracket != $closed_bracket) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  $brackets = array_filter($brackets, function($value)\
    \ {\n    return $value !== \">\";\n  });\n  return count($brackets) === 0;\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n\
    \    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\") {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $opening_brackets\
    \ = preg_split('/[\\<\\>]+/', $brackets);\n  $closing_brackets = preg_split('/[\\\
    <\\>]+/', $brackets);\n  $opening_brackets = array_unique($opening_brackets);\n\
    \  $closing_brackets = array_unique($closing_brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like\
    \ this solution, but I feel like it would be better to use a regex to determine\
    \ if brackets are balanced. That way the function doesn't have to worry about\
    \ what kind of brackets it's dealing with. Also, what about nested brackets? `[[]]`\n\
    <|/ c |>\n<| c |>\n: I agree, that would be better. I've added a regex solution\
    \ to my answer.\n<|/ c |>\n<| c |>\nI like your solution, but I feel like it would\
    \ be better to use a regex to determine if brackets are balanced. That way the\
    \ function doesn't have to worry about what kind of brackets it's dealing with.\
    \ Also, what about nested brackets? `[[]]`\n<|/ c |>\n<| c |>\n: I agree, that\
    \ would be better. I've added a regex solution to my answer.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I feel like it would be better to use a regex to determine\
    \ if brackets are balanced. That way the function doesn't have to worry about\
    \ what kind of brackets it's dealing with. Also, what about nested brackets? `[[]]`\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets = array(\"<\", \">\"\
    );\n$string = \"<>\";\n$opening_brackets = preg_split('/[\\<\\>]+/', $brackets);\n\
    $closing_brackets = preg_split('/[\\<\\>]+/', $brackets);\n$opening_brackets =\
    \ array_unique($opening_brackets);\n$closing_brackets = array_unique($closing_brackets);\n\
    $opening_brackets = array_diff($opening_brackets, $closing_brackets);\n$opening_brackets\
    \ = array_diff($opening_brackets, array_intersect($closing_brackets, $opening_brackets));\n\
    $opening_brackets = array_diff", "  $brackets = explode(\"<\", $brackets);\n \
    \ foreach ($brackets as $i => $b) {\n    if ($i < count($brackets) - 1) {\n  \
    \    if ($brackets[$i + 1] != \">\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "    $opening_brackets = array();\n    $closing_brackets = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"<\") {\n            $opening_brackets[]\
    \ = $bracket;\n        } else if ($bracket == \">\") {\n            $closing_brackets[]\
    \ = $bracket;\n        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $opening_brackets = array();\n  foreach ($brackets as $b)\
    \ {\n    if ($b == \"<\") {\n      $opening_brackets[] = $b;\n    } else {\n \
    \     if (array_search($b, $opening_brackets) === false) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "  $brackets = explode(\"<<>>\", $brackets);\n\
    \  foreach ($brackets as $key => $bracket) {\n    if ($bracket == \"<\") {\n \
    \     if ($key > 0) {\n        $brackets[$key - 1] .= \">\";\n      }\n    }\n\
    \    if ($bracket == \">\") {\n      if ($key < count($brackets) - 1) {\n    \
    \    $brackets[$key + 1] .= \"<\";\n      }\n    }\n  }\n  return implode(\"<<>>\"\
    , $brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value != \">\") {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    $brackets = explode(\"<<\", $brackets);\n   \
    \ $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n", "  $opening_brackets\
    \ = explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  foreach ($opening_brackets as $opening_bracket => $closing_bracket) {\n   \
    \ if ($opening_bracket != $closing_bracket) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key +\
    \ 1] == \"<\") {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n \
    \ $brackets = implode(\">\", $brackets);\n  return $brackets == $brackets;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    return $brackets === '<>';\n}\n", "    $brackets = preg_replace(\"/<\\/?[^<>]+>/\"\
    , \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    return $brackets == \"<>\";\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\") {\n      $brackets[] = $b;\n\
    \    }\n  }\n  $brackets = array_reverse($brackets);\n  $brackets = array_merge($brackets,\
    \ array(\">\"));\n  $brackets = array_unique($brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n   \
    \ }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value != \"<\") {\n      $brackets[$key]\
    \ = \"</$value>\";\n    }\n  }\n  return count(array_unique($brackets)) == 1;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != \">\") {\n   \
    \   return ($brackets[$i] == \">\");\n    }\n  }\n  return false;\n}\n", "   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n", "  $brackets = explode(\"<\", $brackets);\n  $opening_brackets\
    \ = array();\n  foreach ($brackets as $b) {\n    if ($b == \"<\") {\n      $opening_brackets[]\
    \ = \"<\";\n    }\n  }\n  foreach ($opening_brackets as $b) {\n    if (!in_array($b,\
    \ $brackets)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets\
    \ = explode(\"<<\", $brackets);\n    $brackets = array_filter($brackets, function($value)\
    \ {\n        return $value !== \">\";\n    });\n    return count($brackets) ===\
    \ count(array_unique($brackets));\n}\n", "  $opening_brackets = explode(\"<\"\
    , $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n  foreach ($opening_brackets\
    \ as $opening_bracket => $closing_bracket) {\n    if ($opening_bracket != $closing_bracket)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \"<\" && $value != \">\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<([^<>]+)>/', $brackets,\
    \ $matches) &&\n         count($matches[1]) == count($brackets);\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i\
    \ > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return count(array_diff($brackets, array_unique(array_map(\"\
    trim\", $brackets)))) < 2;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key + 1] = \"\";\n \
    \     }\n    }\n  }\n  return $brackets[0] == $brackets[1];\n}\n", "  $brackets\
    \ = explode(\"<<\", $brackets);\n  $brackets = explode(\">>\", $brackets);\n \
    \ foreach ($brackets as $b) {\n    if ($brackets[$i] == $b) {\n      $brackets[$i]\
    \ = \"\";\n    }\n  }\n  return $brackets == $brackets;\n}", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n        unset($brackets[$key]);\n\
    \        unset($brackets[$key + 1]);\n      }\n    }\n  }\n  return count($brackets)\
    \ == 0;\n}\n", "    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets\
    \ as $key => $value) {\n        if ($value == \"<\") {\n            $brackets[$key]\
    \ = \">\";\n        }\n    }\n    return $brackets == array_reverse($brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work for me. I've added some more examples to my question. Maybe\
    \ you can help me with that too.\n<|/ c |>\n<| c |>\nI updated my answer. Now\
    \ it works for all of your examples. I hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your effort! Unfortunately this doesn't work for me either. I've added some\
    \ more examples to my question. Maybe you can help me with that too.\n<|/ c |>\n\
    <| c |>\nI updated my answer. Now it works for all of your examples. I hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your effort! Unfortunately this doesn't\
    \ work for me either. I've added some more examples to my question. Maybe you\
    \ can help me with that too.\n<|/ c |>\n<| a |>\nI believe this regex will work:\n\
    <code>\n^<(\\w+)>$\n</code>\nIt will match any string that starts with <, followed\
    \ by one or more word characters, followed by >, followed by any number of characters\
    \ that may or may not end with >\n<|/ a dscore=0 tags=php,regex |>\n<| c |>\n\
    Thanks for your answer. Unfortunately this doesn't work for me. I've added some\
    \ more examples to my question. Maybe you can help me with that too.\n<|/ c |>\n\
    <| a dscore=0 |>\nI believe this regex will work:\n<code>\n^<(\\w+)>$\n</code>\n\
    It will match any string that starts with <, followed by one or more word characters,\
    \ followed by >, followed by any number of characters that may or may not end\
    \ with >\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work for me. I've added some more examples to my question. Maybe\
    \ you can help me with that too.\n<|/ c |>\n<| a dscore=0 |>\nThis regex will\
    \ match all your examples:\n<code>\n^<(\\w+)>$\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for me.\
    \ I've added some ", "    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n    return $brackets\
    \ === '<>';\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $opening_brackets\
    \ = array_keys($brackets);\n  foreach ($brackets as $key => $value) {\n    if\
    \ ($key > 0) {\n      if ($key != count($brackets) - 1) {\n        if ($value\
    \ != $brackets[$key + 1]) {\n          return false;\n        }\n      }\n   \
    \ }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]*>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<[^<>]*>$/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "    $brackets = preg_replace('/<\\/?[^<>]*>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    return $brackets === '<>';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    Thanks for your answer. I've tried your solution and it works fine. However I\
    \ still don't understand why my solution doesn't work. Could you please explain\
    \ me why my solution doesn't work?\n<|/ c |>\n<| c |>\n: I added some explanation\
    \ to the answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. I've tried your\
    \ solution and it works fine. However I still don't understand why my solution\
    \ doesn't work. Could you please explain me why my solution doesn't work?\n<|/\
    \ c |>\n<| c |>\n: I added some explanation to the answer.\n<|/ c |>\n<| a |>\n\
    Try this regex:\n<code>\n$pattern = '~^<(/?[^<>]*>)>~';\n</code>\n<|/ a dscore=0\
    \ tags=php,regex |>\n<| c |>\nThanks for your answer. I've tried your solution\
    \ and it works fine. However I still don't understand why my solution doesn't\
    \ work. Could you please explain me why my solution doesn't work?\n<|/ c |>\n\
    <| c |>\n: Because your regex is too complicated and doesn't work as you expect.\
    \ Try my regex and you'll see that it works.\n<|/ c |>\n<| c |>\nThanks for your\
    \ explanation. I've tried your solution and it works fine. However I still don't\
    \ understand why my solution doesn't work. Could you please explain me why my\
    \ solution doesn't work?\n<|/ c |>\n<| c |>\n: Because your regex is too complicated\
    \ and doesn't work as you expect. Try my regex and you'll see that it works.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_diff($brackets, array(\">\"));\n  return count($brackets)\
    \ == 0;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $open_brackets =\
    \ preg_split('/[\\<\\>]/', $brackets);\n    $closed_brackets = preg_split('/[\\\
    <\\>]/', $brackets);\n    $open_brackets = array_flip($open_brackets);\n    $closed_brackets\
    \ = array_flip($closed_brackets);\n    foreach ($open_brackets as $key => $value)\
    \ {\n        if (!isset($closed_brackets[$key])) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\" && $value\
    \ != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = preg_split('/[\\<\\\
    >]/', $brackets);\n  $closing_brackets = preg_split('/[\\<\\>]/', $brackets);\n\
    \  $opening_brackets = array_flip($opening_brackets);\n  $closing_brackets = array_flip($closing_brackets);\n\
    \  return array_sum($opening_brackets) == array_sum($closing_brackets);\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nI like this solution, but I believe it can be\
    \ simplified a bit. `array_sum($opening_brackets) == array_sum($closing_brackets)`\
    \ can be simplified to `array_sum($opening_brackets) === array_sum($closing_brackets)`\n\
    <|/ c |>\n<| c |>\nYes, you're right. I've edited my answer to include your suggestion.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '<<><>>';\n$opening_brackets\
    \ = preg_split('/[\\<\\>]/', $string);\n$closing_brackets = preg_split('/[\\<\\\
    >]/', $string);\n$opening_brackets = array_flip($opening_brackets);\n$closing_brackets\
    \ = array_flip($closing_brackets);\n$sum = 0;\nforeach ($opening_brackets as $key\
    \ => $value) {\n    $sum += $value;\n}\n$sum -= array_sum($closing_brackets);\n\
    if ($sum === 0) {\n    echo 'true';\n} else {\n    echo 'false';\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '<<><>>';\n\
    $opening_brackets = preg_split('/[\\<\\>]/', $string);\n$closing_brackets = preg_split('/[\\\
    <\\>]/', $string);\n$opening_brackets = array_flip($opening_brackets);\n$closing_brackets\
    \ = array_flip($closing_brackets);\n$sum = 0;\nforeach ($opening_brackets as $key\
    \ => $value) {\n    $sum += $value;\n}\n$sum -= array_sum($closing_brackets);\n\
    if ($sum === 0) {\n    echo 'true';\n} else {\n    echo 'false';\n", "  $opening_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets = preg_split('/[\\\
    <\\>]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. Try it on `<<><>>`\n<|/ c |>\n<| c |>\n: It works fine for me. Try it\
    \ on `<<><>>`\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Can you\
    \ try it on that?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Can\
    \ you try it on that?\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\
    \ Can you try it on that?\n<|/ c |>\n<| a tags=php,regex |>\nThis should work:\n\
    <code>\n$string = '<<><>>';\n$pattern = '/<<<(.*?)>>>/';\npreg_match_all($pattern,\
    \ $string, $matches);\n$matches = $matches[1];\n$matches = array_filter($matches);\n\
    $matches = array_unique($matches);\n$matches = array_map('trim', $matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n\
    \    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    foreach ($brackets as $b) {\n\
    \        if ($b != \">\") {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like this solution,\
    \ it's simple and easy to understand. Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $string = \"<<><>>\";\n$pattern = '~<(<)>~';\npreg_match_all($pattern, $string,\
    \ $matches);\nvar_dump($matches);\n</code>\nOutput:\n<code>\narray(1) {\n  [0]=>\n\
    \  array(1) {\n    [0]=>\n    string(1) \"<\"\n  }\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work if there are multiple pairs of brackets in the\
    \ string. Try it with `
  "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($b != \">\") {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i > 0) {\n   \
    \   if ($brackets[$i - 1] != $b) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $i => $bracket) {\n    if ($bracket != \">\") {\n      if ($bracket == \"\
    <\") {\n        unset($brackets[$i]);\n      }\n    }\n  }\n  return count($brackets)\
    \ == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"\
    >\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $b) {\n    if ($b !== \"<\") {\n   \
    \   $brackets[$b] = \">\";\n    }\n  }\n  return $brackets === array_reverse($brackets);\n\
    }\n", "    $brackets = explode(\"<<>>\", $brackets);\n    $opening_brackets =\
    \ array();\n    $closing_brackets = array();\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == \"<\") {\n            $opening_brackets[] = \"<<\"\
    ;\n            $closing_brackets[] = \">>\";\n        } else if ($bracket == \"\
    >\") {\n            $opening_brackets[] = \">>\";\n            $closing_brackets[]\
    \ = \"<<\";\n        } else {\n            $opening_brackets[] = $bracket;\n \
    \           $closing_brackets[] = $bracket;\n        }\n    }\n    return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  $opening_brackets\
    \ = array_keys($brackets);\n  $closing_brackets = array_flip($brackets);\n  return\
    \ count(array_diff($opening_brackets, $closing_brackets)) == 0;\n}\n", "  $opening_brackets\
    \ = array();\n  $closing_brackets = array();\n  $brackets_count = count($brackets);\n\
    \  for ($i = 0; $i < $brackets_count; $i++) {\n    $opening_brackets[$i] = substr($brackets,\
    \ $i, 1);\n    $closing_brackets[$i] = substr($brackets, $i + 1, 1);\n  }\n  $opening_brackets_count\
    \ = count($opening_brackets);\n  for ($i = 0; $i < $opening_brackets_count; $i++)\
    \ {\n    if ($opening_brackets[$i] !== \"<\") {\n      return false;\n    }\n\
    \  }\n  for ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($closing_brackets[$i]\
    \ !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n       \
    \ $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return $brackets[0] == \"\
    \" && $brackets[count($brackets) - 1] == \"\";\n}\n", "  $open_brackets = array();\n\
    \  $closed_brackets = array();\n  $open_brackets_length = strlen($brackets);\n\
    \  for ($i = 0; $i < $open_brackets_length; $i++) {\n    $open_brackets[$i] =\
    \ substr($brackets, $i, 1);\n  }\n  for ($i = 0; $i < $open_brackets_length; $i++)\
    \ {\n    if ($open_brackets[$i] == '<') {\n      $closed_brackets[$i] = '>';\n\
    \    }\n  }\n  return $open_brackets == $closed_brackets;\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"<<><>>\")` returns\
    \ `true` but `correct_bracketing(\"<\")` returns `false`.\n<|/ c |>\n<| c |>\n\
    : I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"<<><>>\";\n$pattern = \"~<~\";\n$replacement = \"~>~\";\n$result\
    \ = preg_replace($pattern, $replacement, $string);\necho $result;", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return\
    \ $brackets == array_reverse($brackets);\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value == \"<\") {\n      if ($key\
    \ > 0) {\n        $brackets[$key - 1] .= \">\";\n      }\n    }\n  }\n  return\
    \ implode(\">\", $brackets);\n}\n", "    $brackets = explode(\"<<\", $brackets);\n\
    \    $brackets = explode(\">>\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets);\n    $brackets = array_unique($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $i => $b) {\n    if ($brackets[$i] == \">\") {\n      if ($brackets[$i\
    \ + 1] == \">\") {\n        $brackets[$i + 1] = \"\";\n      }\n      else {\n\
    \        unset($brackets[$i]);\n      }\n    }\n  }\n  return implode(array_reverse($brackets))\
    \ == $brackets;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n\
    \  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}", "    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      if ($key > 0) {\n        $brackets[$key - 1] .= \">\";\n   \
    \   }\n    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `<<<` returns true,\
    \ but `<<<<` returns false. `<<<<` returns false for me in PHP 5.3.10\n<|/ c |>\n\
    <| c |>\n: I tested it on PHP 5.3.10 and it works. I tested it on PHP 5.2.17 and\
    \ it works. I tested it on PHP 5.1.6 and it works. I tested it on PHP 5.0.0 and\
    \ it works. I tested it on PHP 4.4.7 and it works. I tested it on PHP 4.3.9 and\
    \ it works. I tested it on PHP 4.4.6 and it works. I tested it on PHP 4.4.5 and\
    \ it works. I tested it on PHP 4.4.4 and it works. I tested it on PHP 4.4.3 and\
    \ it works. I tested it on PHP 4.4.2 and it works. I tested it on PHP 4.4.1 and\
    \ it works. I tested it on PHP 4.4.0 and it works. I tested it on PHP 4.3.10 and\
    \ it works. I tested it on PHP 4.3.9 and it works. I tested it on PHP 4.3.8 and\
    \ it works. I tested it on PHP 4.3.7 and it works. I tested it on PHP 4.3.6 and\
    \ it works. I tested it on PHP 4.3.5 and it works. I tested it on PHP 4.3.4 and\
    \ it works. I tested it on PHP 4.3.3 and it works. I tested it on PHP 4.3.2 and\
    \ it works. I tested it on PHP 4.3.1 and it works. I tested it on PHP 4.3.0 and\
    \ it works. I tested it on PHP 4.2.10 and it works. I tested it on PHP 4.2.8 and\
    \ it works. I tested it on PHP 4.2.7 and it works. I tested it on PHP 4.2.6 and\
    \ it works. I tested it on PHP 4.2.5 and it works. I tested it on PHP 4.2.4 and\
    \ it works. I tested it on PHP 4.2.3 and it works. I tested it on PHP 4.2.2 and\
    \ it works. I tested it on PHP 4.2.1 and it works. I tested it on PHP 4.2.0 and\
    \ it works. I tested it on PHP 4.1.0 and it work", "    $opening_brackets = array();\n\
    \    $closing_brackets = array();\n    $brackets_count = count($brackets);\n \
    \   for ($i = 0; $i < $brackets_count; $i++) {\n        $opening_brackets[] =\
    \ $brackets[$i];\n        if ($brackets[$i] === \"<\") {\n            $closing_brackets[]\
    \ = \">\";\n        } else {\n            $closing_brackets[] = \"</\";\n    \
    \    }\n    }\n    return array_diff($opening_brackets, $closing_brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<",
  "  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($key > 0) {\n      if ($value\
    \ != \"<\") {\n        $opening_brackets[$key] = $value;\n      }\n    }\n  }\n\
    \  $closing_brackets = array_keys(array_reverse($brackets));\n  foreach ($closing_brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($value != \">\") {\n  \
    \      $closing_brackets[$key] = $value;\n      }\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"<<><>>\";\n$opening_brackets = array(\"<\");\n$closing_brackets\
    \ = array(\">\");\n$opening_brackets_count = count($opening_brackets);\n$closing_brackets_count\
    \ = count($closing_brackets);\n$opening_brackets_count = array_sum($opening_brackets_count);\n\
    $closing_brackets_count = array_sum($closing_brackets_count);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n$closing_brackets_count = array_slice($closing_brackets_count,\
    \ 0, -1);\n$opening_brackets_count = array_slice($opening_brackets_count, 0, -1);\n\
    $closing_brackets_count = array_slice($closing_brackets_count, 0, -1);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n$closing_brackets_count = array_slice($closing_brackets_count,\
    \ 0, -1);\n$opening_brackets_count = array_slice($opening_brackets_count, 0, -1);\n\
    $closing_brackets_count = array_slice($closing_brackets_count, 0, -1);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n$closing_brackets_count = array_slice($closing_brackets_count,\
    \ 0, -1);\n$opening_brackets_count = array_slice($opening_brackets_count, 0, -1);\n\
    $closing_brackets_count = array_slice($closing_brackets_count, 0, -1);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n", "  $brackets = explode(\"\
    <<>>\", $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket\
    \ != \"<\" && $bracket != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n \
    \       return true;\n      }\n    }\n    if ($value == \">\") {\n      if ($brackets[$key\
    \ + 1] == \">\") {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($b !== \">\") {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n", " \
    \ $opening_brackets = array();\n  $closing_brackets = array();\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == '<') {\n      $opening_brackets[] = '<';\n\
    \    }\n    if ($bracket == '>') {\n      $closing_brackets[] = '>';\n    }\n\
    \  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n", " \
    \ $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n\
    \    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\") {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $opening_brackets\
    \ = explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  foreach ($opening_brackets as $key => $value) {\n    if ($value !== $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "    $brackets = explode(\"<\", $brackets);\n\
    \    foreach ($brackets as $key => $value) {\n        if ($value != \">\") {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "  $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't seem to work. `correct_bracketing(\"<\")` returns `true`,\
    \ but `correct_bracketing(\"<>\")` returns `false`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer. Does it work for you?\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer. Does it work for you?\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer. Does it work for you?\n<|/ c |>\n<| a tags=php,regex,preg-match\
    \ |>\n<code>\n<?php\n$string = '<<><>>';\n$pattern = '/<<<\\/?[^<>]+>/';\n$replacement\
    \ = '';\n$string = preg_replace($pattern, $replacement, $string);\necho $string;",
  "  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    I like this solution, although it does require a little more code than my own.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI added a more concise solution that doesn't require\
    \ any additional code.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$pattern = '~(?<!\\\
    <)(?<!\\>)(?!\\<)(?!\\>)~';\n$string = '<<><>>';\npreg_match_all($pattern, $string,\
    \ $matches);\nprint_r($matches);\n</code>\nOutput:\n<code>\nArray\n(\n    [0]\
    \ => Array\n        (\n            [0] => <<><>>\n        )\n\n)\n</code>\n<|/\
    \ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work if there are multiple\
    \ brackets within the same string. For example, `<<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($item) {\n    return $item != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value === \"<\") {\n    \
    \  if ($key === 0) {\n        return false;\n      }\n      if ($key === count($brackets)\
    \ - 1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", " \
    \ $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>$/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "  $opening_brackets =\
    \ explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  foreach ($opening_brackets as $key => $value) {\n    if ($value !== $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \">\") {\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return count(array_unique($brackets)) == count($brackets);\n\
    }\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($el) {\n        return $el !=\
    \ \">\";\n    });\n    return count($brackets) == 0;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ===\
    \ \"<\") {\n      if ($key > 0) {\n        $brackets[$key - 1] .= \">\";\n   \
    \   }\n    } else {\n      if ($key < count($brackets) - 1) {\n        $brackets[$key\
    \ + 1] .= \"<\";\n      }\n    }\n  }\n  return $brackets[0] === $brackets[count($brackets)\
    \ - 1];\n}\n", "  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets\
    \ = explode(\">\", $brackets);\n  foreach ($opening_brackets as $key => $value)\
    \ {\n    if ($value != $closing_brackets[$key]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value === \"<\") {\n      $brackets[$key]\
    \ = \">\";\n    }\n  }\n  return $brackets === array_reverse($brackets);\n}\n",
  "    $opening_brackets = explode(\"<\", $brackets);\n    $closing_brackets = explode(\"\
    >\", $brackets);\n    $opening_brackets_count = count($opening_brackets);\n  \
    \  $closing_brackets_count = count($closing_brackets);\n    $opening_brackets_count\
    \ = min($opening_brackets_count, $closing_brackets_count);\n    for ($i = 0; $i\
    \ < $opening_brackets_count; $i++) {\n        if ($opening_brackets[$i] !== $closing_brackets[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<\\\
    /[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_", " \
    \ $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        $brackets[$i]\
    \ = \"<\" . $bracket . \">\";\n      }\n    }\n  }\n  return implode(\"\", array_diff($brackets,\
    \ array(\">\"))) == \"\";\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = $bracket;\n    }\n    if ($bracket == \">\")\
    \ {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = $bracket;\n    } else if ($bracket == \">\")\
    \ {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = explode(\"<\", $brackets);\n\
    \  $closing_brackets = explode(\">\", $brackets);\n  foreach ($opening_brackets\
    \ as $key => $value) {\n    if ($value != $closing_brackets[$key]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] != \"<\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n", "    $brackets = preg_replace('/<\\/?[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets =\
    \ preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = ", "  $brackets = explode(\"<\",\
    \ $brackets);\n  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  $opening_brackets = explode(\"\
    <\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n  foreach\
    \ ($opening_brackets as $key => $value) {\n    if ($closing_brackets[$key] ==\
    \ $value) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n       \
    \ $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return implode(\">\", $brackets)\
    \ == $brackets;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"\
    </\" . $value . \">\";\n    }\n  }\n  return count(array_diff($brackets, array(\"\
    >\"))) == 0;\n}\n", "    $brackets = explode(\"<<\", $brackets);\n    $brackets\
    \ = array_reverse($brackets);\n    $brackets = array_merge($brackets, $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_unique($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($brackets[$i-1] != $b) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i\
    \ > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key + 1] = \"\";\n \
    \     }\n    }\n  }\n  $brackets = implode(\">\", $brackets);\n  return $brackets\
    \ == \"<>\";\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n", "  $opening_brackets =\
    \ array();\n  $closing_brackets = array();\n  foreach ($brackets as $b) {\n  \
    \  if ($b == '<') {\n      $opening_brackets[] = '<';\n      $closing_brackets[]\
    \ = '>';\n    } else if ($b == '>') {\n      $opening_brackets[] = '>';\n    \
    \  $closing_brackets[] = '<';\n    } else {\n      return false;\n    }\n  }\n\
    \  return count(array_diff($opening_brackets, $closing_brackets)) == 0;\n}\n",
  "    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $i => $b)\
    \ {\n        if ($i > 0) {\n            $brackets[$i] = $brackets[$i - 1];\n \
    \       }\n        if ($b == \">\") {\n            $brackets[$i] = \"<\";\n  \
    \      }\n    }\n    return implode(\">\", $brackets) == $brackets;\n}\n", " \
    \ $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n\
    \  return $brackets == array_reverse($brackets);\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    foreach ($brackets as $key => $value) {\n        if ($value\
    \ != \"<\") {\n            $brackets[$key] = \"</$value>\";\n        }\n    }\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n", "  $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/',\
    \ '', $brackets);\n  return ($brackets === '<>');\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $i => $bracket) {\n    if ($bracket\
    \ != \">\") {\n      if ($bracket != \"<\") {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \">\") {\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\"\
    , $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i < count($brackets)\
    \ - 1) {\n      if ($brackets[$i + 1] != \">\") {\n        return false;\n   \
    \   }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\") {\n      $brackets[$i] =\
    \ $b;\n    }\n  }\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \">\") {\n      $brackets[$i] = $b;\n    }\n  }\n \
    \ return $brackets[0] === $brackets[count($brackets) - 1];\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ $brackets[$key] = \"</$value>\";\n    }\n  }\n  return count($brackets) == count(array_unique($brackets));\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value != \"<\" && $value != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    $brackets = array_unique($brackets);\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ $brackets[$key] = \"</$value>\";\n    }\n  }\n  return implode(\" \", $brackets);\n\
    }\n", "    $brackets = explode(\"<<>>\", $brackets);\n    foreach ($brackets as\
    \ $b) {\n        if ($b[0] != \"<\" || $b[1] != \">\") {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "    $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $i => $b) {\n        if ($i < count($brackets) - 1)\
    \ {\n            if ($brackets[$i + 1] != $b) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \"<\") {\n      return false;\n    }\n    unset($brackets[$key]);\n  }\n  return\
    \ count($brackets) == 0;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value !== \"<\") {\n    \
    \  $brackets[$key] = \">\";\n    }\n  }\n  return implode(array_reverse($brackets))\
    \ === $brackets;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] !=\
    \ $value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]*>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have `<` and `>` inside your `<` and `>` brackets.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nI meant\
    \ that if you have `<` and `>` inside your `<` and `>` brackets, it won't work.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself. It works\
    \ just fine.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It works just\
    \ fine.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$str = '<><>';\n$str = preg_replace('/<[^<>]*>/',\
    \ '', $str);\necho $str;\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if you have `<` and `>` inside your `<` and `>` brackets.\n<|/ c |>\n<| c |>\n\
    : It does. Try it yourself.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\
    \ It works just fine.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It\
    \ works just fine.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It works\
    \ just fine.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$str = '<><>';\n$str =\
    \ preg_replace('/<[^<>]*>/', '', $str);\necho $str;\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work if you have `<` and `>` inside your `<` and `>` brackets.\n\
    <|/ c |>\n<| c |>\n: It does. Try it yourself.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It works just fine.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it your", "  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets\
    \ = explode(\">\", $brackets);\n  foreach ($opening_brackets as $key => $value)\
    \ {\n    if ($value !== $closing_brackets[$key]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = $bracket;\n    } else if ($bracket == \">\")\
    \ {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] != \"<\") {\n        return false;\n      }\n    } else\
    \ if ($value == \">\") {\n      if ($brackets[$key + 1] != \">\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key\
    \ + 1] = \"\";\n      }\n    }\n  }\n  $brackets = implode(\">\", $brackets);\n\
    \  return $brackets == $brackets;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>$/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    $brackets = array_unique($brackets);\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<<\", $brackets);\n\
    \  $brackets = explode(\">>\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n       \
    \ return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $open_brackets\
    \ = array();\n  $closed_brackets = array();\n  foreach ($brackets as $b) {\n \
    \   if ($b == '<') {\n      $open_brackets[] = $b;\n    } else {\n      $closed_brackets[]\
    \ = $b;\n    }\n  }\n  return count($open_brackets) == count($closed_brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value != \">\") {\n      return false;\n    }\n    unset($brackets[$key]);\n\
    \  }\n  return count($brackets) == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($key > 0) {\n      if ($value\
    \ != \"<\") {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets =\
    \ preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<", "    $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] == \"<\") {\n        unset($brackets[$key]);\n     \
    \   unset($brackets[$key + 1]);\n      }\n    }\n  }\n  return count($brackets)\
    \ == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] !=\
    \ $value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "    $open_brackets = array();\n    $closed_brackets = array();\n    $open_brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $open_brackets_count; $i++) {\n \
    \       $open_brackets[$i] = $brackets[$i];\n    }\n    $open_brackets_count =\
    \ count($open_brackets);\n    for ($i = 0; $i < $open_brackets_count; $i++) {\n\
    \        if ($open_brackets[$i] === \"<\") {\n            $open_brackets[$i] =\
    \ \">\";\n        }\n    }\n    $open_brackets_count = count($open_brackets);\n\
    \    for ($i = 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i]\
    \ === \">\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n     \
    \   }\n    }\n    $open_brackets_count = count($open_brackets);\n    for ($i =\
    \ 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i] === \"\
    >\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n        }\n  \
    \  }\n    $open_brackets_count = count($open_brackets);\n    for ($i = 0; $i <\
    \ $open_brackets_count; $i++) {\n        if ($open_brackets[$i] === \"<\") {\n\
    \            $closed_brackets[$i] = $open_brackets[$i];\n        }\n    }\n  \
    \  $open_brackets_count = count($open_brackets);\n    for ($i = 0; $i < $open_brackets_count;\
    \ $i++) {\n        if ($open_brackets[$i] === \"<\") {\n            $closed_brackets[$i]\
    \ = $open_brackets[$i];\n        }\n    }\n    $open_brackets_count = count($open_brackets);\n\
    \    for ($i = 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i]\
    \ === \"<\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n     \
    \   }\n    }\n    $open_brackets_count = count($open_brackets);\n    for ($i =\
    \ 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i] === \"\
    <\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n", "    $brackets\
    \ = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n  \
    \  $brackets = array_merge($brackets, array(\">\"));\n    return array_reduce($brackets,\
    \ function($correct, $opening_bracket) {\n        return $correct && array_search($opening_bracket,\
    \ $brackets) !== FALSE;\n    }, TRUE);\n}\n</code>\n<|/ a tags=php,regex,preg-match-all,preg-match\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. Thanks\
    \ again.\n<|/ c |>\n<| c |>\nI tested it on [regex101](https://regex101.com/r/qZ2jM7/1)\
    \ but when I try to run it on php it gives me this error `Warning: preg_match_all():\
    \ Unknown modifier '(' in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n\
    <| c |>\nI tested it on [regex101](https://regex101.com/r/qZ2jM7/1) but when I\
    \ try to run it on php it gives me this error `Warning: preg_match_all(): Unknown\
    \ modifier '(' in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n<| c |>\n\
    I tested it on [regex101](https://regex101.com/r/qZ2jM7/1) but when I try to run\
    \ it on php it gives me this error `Warning: preg_match_all(): Unknown modifier\
    \ '(' in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n<| c |>\nI tested\
    \ it on [regex101](https://regex101.com/r/qZ2jM7/1) but when I try to run it on\
    \ php it gives me this error `Warning: preg_match_all(): Unknown modifier '('\
    \ in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n<| a tags=php,regex,preg-match-all,preg-match\
    \ |>\n<code>\n<?php\n$string = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $b) {\n  \
    \  if ($b[0] == \"<\" && $b[strlen($b) - 1] == \">\") {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = $bracket;\n    } else if ($bracket == \">\")\
    \ {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $i => $b) {\n    if ($i < count($brackets) - 1) {\n \
    \     if ($brackets[$i + 1] != \">\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_flip($opening_brackets);\n\
    \  $closing_brackets = array_flip($closing_brackets);\n  return array_diff_key($opening_brackets,\
    \ $closing_brackets);\n}\n", "    $brackets = preg_replace('/<\\/?[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<[^<>]+>$/', '', $brackets);\n \
    \   $brackets = preg_replace('/<\\/?$/', '', $brackets);\n    $brackets = preg_replace('/<$/',\
    \ '', $brackets);\n    return $brackets === '<>';\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. I've\
    \ just tested it on some more cases and it works perfectly for me too. Thanks\
    \ again.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key\
    \ + 1] = \"\";\n      }\n    }\n    if ($value == \">\") {\n      if ($brackets[$key\
    \ + 1] == \">\") {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n\
    \  return implode(\">\", $brackets) == $brackets;\n}\n", "    $opening_brackets\
    \ = explode(\"<\", $brackets);\n    $closing_brackets = explode(\">\", $brackets);\n\
    \    foreach ($opening_brackets as $key => $value) {\n        if ($value !== $closing_brackets[$key])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  $opening_brackets\
    \ = explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  foreach ($opening_brackets as $key => $value) {\n    if ($value != $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>$/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<[^<>]+>$/', '', $brackets);\n    return $brackets\
    \ === '<>';\n}\n</code>\n<|/ a tags=php,regex,preg-match,preg-replace |>\n<| c\
    \ |>\nI like this solution, but I feel like it would be more efficient to just\
    \ use strpos() to find the position of each opening bracket, and then use strrpos()\
    \ to find the position of each closing bracket. Then, just compare the two positions\
    \ to see if they're equal. This would require less regex and would be more efficient.\n\
    <|/ c |>\n<| c |>\n: Yes, that would probably be more efficient. I'll add that\
    \ to my answer.\n<|/ c |>\n<| c |>\nI added a solution that uses strpos and strrpos\
    \ to find the positions of each opening bracket and closing bracket.\n<|/ c |>\n\
    <| c |>\n: I added a solution that uses strpos and strrpos to find the positions\
    \ of each opening bracket and closing bracket.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses strpos and strrpos to find the positions of each opening bracket and\
    \ closing bracket.\n<|/ c |>\n<| a tags=php,regex,preg-match,preg-replace |>\n\
    <code>\n<?php\n$string = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($el) {\n    return $el != \">\"\
    ;\n  });\n  return count($brackets) == 0;\n}\n", "  $brackets = preg_replace(\"\
    /<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets = preg_replace(\"/<[^<>]+>/\"\
    , \"\", $brackets);\n  return ($brackets == \"<>\");\n}\n", "  $opening_brackets\
    \ = explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  foreach ($opening_brackets as $key => $value) {\n    if ($value != $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $opening_brackets\
    \ = array();\n  $closing_brackets = array();\n  foreach ($brackets as $bracket)\
    \ {\n    if ($bracket == \"<\") {\n      $opening_brackets[] = \"{\";\n      $closing_brackets[]\
    \ = \"}\"; // closing brackets are optional.\n    } else if ($bracket == \">\"\
    ) {\n      $opening_brackets[] = \"}\";\n      $closing_brackets[] = \"{\";\n\
    \    } else {\n      $opening_brackets[] = $bracket;\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n", "    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/", "  $brackets = explode(\"\
    <<\", $brackets);\n  $brackets = explode(\">>\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($brackets[$i] == $b) {\n      $brackets[$i]\
    \ = $brackets[$i + 1];\n    }\n  }\n  return $brackets[0] == $brackets[1];\n}",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n       \
    \ return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $opening_brackets\
    \ = preg_split('/[<>]/', $brackets);\n  $closing_brackets = preg_split('/[<>]/',\
    \ $brackets);\n  foreach ($opening_brackets as $key => $opening) {\n    if ($closing\
    \ == '') {\n      return false;\n    }\n    if ($opening != $closing) {\n    \
    \  return false;\n    }\n    unset($opening_brackets[$key]);\n  }\n  return true;\n\
    }\n", "    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $key\
    \ => $value) {\n        if ($value != \"<\") {\n            $brackets[$key] =\
    \ \"</$value>\";\n        }\n    }\n    return implode(\"\", array_diff($brackets,\
    \ array(\"\")));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string
  "    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);", "  $opening_brackets = array();\n  $closing_brackets =\
    \ array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n\
    \      $opening_brackets[] = $bracket;\n    } else if ($bracket == \">\") {\n\
    \      $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]*>/',\
    \ '', $brackets);\n  return preg_match_all('/<[^<>]+>/', $brackets);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I've tried your solution and\
    \ it works fine for most cases, but it fails for cases like `<<><>>` which should\
    \ return `true` but returns `false`. I've updated the question to include these\
    \ cases.\n<|/ c |>\n<| c |>\n: I updated my answer to handle your new cases. \
    \ It now returns `true` for `<<><>>` and `<<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>>",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n       \
    \ return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !=\
    \ \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value != \"<\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $opening_brackets =\
    \ array();\n  $closing_brackets = array();\n  foreach ($brackets as $b) {\n  \
    \  if ($b == '<') {\n      $opening_brackets[] = $b;\n    } else {\n      $closing_brackets[]\
    \ = $b;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count(array_diff($brackets,\
    \ array_reverse($brackets))) == 0;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return count(array_diff($brackets, array_unique(array_map(\"\
    trim\", $brackets)))) == 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex\
    \ |>\nThis regex will match any number of brackets including nested brackets:\n\
    <code>\n/\\{(?:[^{}]|(?R))*\\}/\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"{a}b{c}d{e}f{g}h{i}j{k}l{m}n{o}p{q}r{s}t{u}v{w}x{y}z\"\
    ;\n$pattern = \"/\\{(.*?)\\}/\";\npreg_match_all($pattern, $string, $matches);\n\
    print_r($matches);", "  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \  return preg_match_all('/<([^<>]+)>/i', $brackets, $matches);\n}", "    $opening_brackets\
    \ = preg_split('/[\\<\\>]+/', $brackets);\n    $closing_brackets = preg_split('/[\\\
    <\\>]+/', $brackets);\n    foreach ($opening_brackets as $i => $opening_bracket)\
    \ {\n        if ($opening_bracket != $closing_brackets[$i]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i < count($brackets)\
    \ - 1) {\n      if ($brackets[$i + 1] != $b) {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = explode(\"<\", $brackets);\n\
    \  $closing_brackets = explode(\">\", $brackets);\n  foreach ($opening_brackets\
    \ as $key => $opening_bracket) {\n    if ($key > 0) {\n      if ($opening_bracket\
    \ != $closing_brackets[$key - 1]) {\n        return false;\n      }\n    }\n \
    \ }\n  return true;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks so much!\
    \ This works perfectly. I'm going to have to read up on regular expressions so\
    \ I can understand how this works. Thanks again!\n<|/ c |>\n<| c |>\nNo problem.\
    \ Regex is one of the most powerful tools in programming. It's worth learning\
    \ how to use it well. There are a lot of great resources out there. [This one](http://www.regular-expressions.info/tutorial.html)\
    \ is a great place to start. Good luck!\n<|/ c |>\n<| c |>\nThanks so much for\
    \ the link. I'll definitely check it out!\n<|/ c |>\n<| a tags=php,regex |>\n\
    This should do it:\n<code>\n$string
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
