language: php
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprpf4an_y.php on line 82

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 'A+'), $grades);\n    $grades = array_map('array_map', 'array_fill',\
    \ array_fill(0, count($grades), 'A-'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'B+'), $grades);\n    $grades =\
    \ array_map('array_map', 'array_fill', array_fill(0, count($grades), 'B'), $grades);\n\
    \    $grades = array_map('array_map', 'array_fill', array_fill(0, count($grades),\
    \ 'B-'), $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 'C+'), $grades);\n    $grades = array_map('array_map', 'array_fill',\
    \ array_fill(0, count($grades), 'C'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'C-'), $grades);\n    $grades =\
    \ array_map('array_map', 'array_fill', array_fill(0, count($grades), 'D+'), $grades);\n\
    \    $grades = array_map('array_map', 'array_fill', array_fill(0, count($grades),\
    \ 'D'), $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 'D-'), $grades);\n    $grades = array_map('array_map', 'array_fill',\
    \ array_fill(0, count($grades), 'E'), $grades);\n    return $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: array_sum() expects parameter 1 to be array, float given in /tmp/tmphhlb6wn5.php
    on line 26


    Warning: array_sum() expects parameter 1 to be array, float given in /tmp/tmphhlb6wn5.php
    on line 26


    Warning: array_sum() expects parameter 1 to be array, float given in /tmp/tmphhlb6wn5.php
    on line 26


    Warning: array_sum() expects parameter 1 to be array, float given in /tmp/tmphhlb6wn5.php
    on line 26


    Warning: array_sum() expects parameter 1 to be array, float given in /tmp/tmphhlb6wn5.php
    on line 26


    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmphhlb6wn5.php
    on line 27


    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmphhlb6wn5.php
    on line 27


    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmphhlb6wn5.php
    on line 27


    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmphhlb6wn5.php
    on line 27


    Warning: array_filter() expects parameter 1 to be array, null given in /tmp/tmphhlb6wn5.php
    on line 27


    Warning: array_map(): Expected parameter 2 to be an array, string given in /tmp/tmphhlb6wn5.php
    on line 28


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmphhlb6wn5.php on line 29


    Warning: array_map(): Expected parameter 2 to be an array, string given in /tmp/tmphhlb6wn5.php
    on line 29


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmphhlb6wn5.php on line 30


    Warning: array_map(): Expected parameter 2 to be an array, string given in /tmp/tmphhlb6wn5.php
    on line 30


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmphhlb6wn5.php on line 31


    Warning: array_map(): Expected parameter 2 to be an array, string given in /tmp/tmphhlb6wn5.php
    on line 31


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmphhlb6wn5.php on line 32


    Warning: array_map(): Expected parameter 2 to be an array, string given in /tmp/tmphhlb6wn5.php
    on line 3'
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', 'grade_to_letter', $grades);\n    return $grades;\n}\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_filter() expects parameter 1 to be array, float given\
    \ in /tmp/tmpm24f_307.php on line 26\n\nWarning: array_filter() expects parameter\
    \ 1 to be array, float given in /tmp/tmpm24f_307.php on line 26\n\nWarning: array_filter()\
    \ expects parameter 1 to be array, float given in /tmp/tmpm24f_307.php on line\
    \ 26\n\nWarning: array_filter() expects parameter 1 to be array, float given in\
    \ /tmp/tmpm24f_307.php on line 26\n\nWarning: array_filter() expects parameter\
    \ 1 to be array, float given in /tmp/tmpm24f_307.php on line 26\n\nWarning: array_unique()\
    \ expects parameter 1 to be array, null given in /tmp/tmpm24f_307.php on line\
    \ 27\n\nWarning: array_unique() expects parameter 1 to be array, null given in\
    \ /tmp/tmpm24f_307.php on line 27\n\nWarning: array_unique() expects parameter\
    \ 1 to be array, null given in /tmp/tmpm24f_307.php on line 27\n\nWarning: array_unique()\
    \ expects parameter 1 to be array, null given in /tmp/tmpm24f_307.php on line\
    \ 27\n\nWarning: array_unique() expects parameter 1 to be array, null given in\
    \ /tmp/tmpm24f_307.php on line 27\n\nWarning: array_filter() expects parameter\
    \ 1 to be array, null given in /tmp/tmpm24f_307.php on line 28\n\nWarning: array_filter()\
    \ expects parameter 1 to be array, null given in /tmp/tmpm24f_307.php on line\
    \ 28\n\nWarning: array_filter() expects parameter 1 to be array, null given in\
    \ /tmp/tmpm24f_307.php on line 28\n\nWarning: array_filter() expects parameter\
    \ 1 to be array, null given in /tmp/tmpm24f_307.php on line 28\n\nWarning: array_filter()\
    \ expects parameter 1 to be array, null given in /tmp/tmpm24f_307.php on line\
    \ 28\n\nWarning: array_map(): Expected parameter 2 to be an array, string given\
    \ in /tmp/tmpm24f_307.php on line 29\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpm24f_307.php:38\nStack trace:\n#0 /tmp/tmpm24f_307.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm24f_307.php on line 38\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('array_sum',\
    \ $grades);\n    $grades = array_map('array_map', create_function('$v', 'return\
    \ $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v / count($v);'), $grades);\n    $grades = array_map('array_map', \n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt36aa5ob.php on line 47

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 'A'), $grades);\n    $grades = array_map('array_map', 'array_fill',\
    \ array_fill(0, count($grades), 'B'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'C'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'D'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'E'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'F'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'G'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'H'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'I'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'J'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'K'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'L'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'M'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'N'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'O'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'P'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'Q'), $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'R'), $grades);\n    $grades = \n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb_o5vv08.php on line 47

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_diff', $grades,\
    \ array(0));\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades, array(0));\n    $grades = array_map('array_unique', $grades);\n   \
    \ $\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvraua3wr.php on line 66

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strtolower',\
    \ $grades);\n    $grades = array_map('strtoupper', $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_9caz3r.php:39\n\
    Stack trace:\n#0 /tmp/tmpk_9caz3r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpk_9caz3r.php\
    \ on line 39\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuku_5eyw.php on line 67

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_filter($grades);\n  $grades = array_map('round', $grades);\n\
    \  $grades = array_map('intval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strtoupper', $grades);\n  return $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jul8ey0.php:38\n\
    Stack trace:\n#0 /tmp/tmp8jul8ey0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8jul8ey0.php\
    \ on line 38\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_filter($grades);\n\
    \    $grades = array_unique($grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map(function($grade) {\n        return str_replace(array('+',\
    \ '-'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('a', 'b', 'c', 'd', 'e'), '', $grade);\n\
    \    }, $grades);\n    $grades = array_map(function($grade) {\n        return\
    \ str_replace(array('+', '-'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('a', 'b', 'c', 'd', 'e'), '', $grade);\n\
    \    }, $grades);\n    $grades = array_map(function($grade) {\n        return\
    \ str_replace(array('+', '-'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('a', 'b', 'c', 'd', 'e'), '', $grade);\n\
    \    }, $grades);\n    $grades = array_map(function($grade) {\n        return\
    \ str_replace(array('+', '-'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('a', 'b', 'c', 'd', 'e'), '', $grade);\n\
    \    }, $grades);\n    $grades = array_map(function($grade) {\n        return\
    \ str_replace(array('+', '-'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return str_replace(array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'), '', $grade);\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9wljcddo.php on line 86

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strtolower',\
    \ $grades);\n    $grades = array_map('strrev', $grades);\n    $grades = array_map('strrev',\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnws6iy5.php:40\n\
    Stack trace:\n#0 /tmp/tmpcnws6iy5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcnws6iy5.php\
    \ on line 40\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp44obl5xb.php on line 67

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?0:$a'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\"D-\":($a>0?\"D+\":($a<3?\"D\":($a<7?\"C+\":($a<11?\"C\":($a<15?\"B+\"\
    :($a<19?\"B\":($a<23?\"A-\":($a<29?\"A\":($a<33?\"A+\":($a<37?\"A\":'E'))))))))))',\
    \ $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?'E':($a>0?'D+':($a<3?'D':($a<7?'C+':($a<11?'C':($a<15?'B+':($a<19?'B':($a<23?'A-':($a<29?'A':($a<33?'A+':($a<37?'A':''))))))))),\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0nx08927.php on line 28

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_unique($grades);\n\
    \    $grades = array_values($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade >= 3.0 ? \"A+\" : ($grade >= 3.7 ? \"A\" : ($grade\
    \ >= 3.3 ? \"A-\" : ($grade >= 3.0 ? \"B+\" : \n        ($grade >= 2.7 ? \"B\"\
    \ : ($grade >= 2.3 ? \"B-\" : ($grade >= 2.0 ? \"C+\" : \n        ($grade >= 1.7\
    \ ? \"C\" : \n        ($grade >= 1.3 ? \"C-\" : ($grade >= 1.0 ? \"D+\" : \n \
    \       ($grade >= 0.7 ? \"D\" : \n        ($grade >= 0.0 ? \"D-\" : \"E\")))))))))));\n\
    \    }, $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ez1l6uv.php:46\n\
    Stack trace:\n#0 /tmp/tmp4ez1l6uv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp4ez1l6uv.php\
    \ on line 46\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_map',\
    \ array($this, 'letter_grade'), $grades);\n    return $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, int given in /tmp/tmphkxeg9zb.php\
    \ on line 27\n\nFatal error: Uncaught Error: Using $this when not in object context\
    \ in /tmp/tmphkxeg9zb.php:28\nStack trace:\n#0 /tmp/tmphkxeg9zb.php(33): numerical_letter_grade(Array)\n\
    #1 /tmp/tmphkxeg9zb.php(37): candidate(Array)\n#2 /tmp/tmphkxeg9zb.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmphkxeg9zb.php on line 28\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpklckgdwq.php on line 67

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', array_map('floatval',\
    \ $grades)));\n    $grades = array_map('array_filter', $grades);\n    $grades\
    \ = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_merge" in /tmp/tmpqgv7roek.php
    on line 66

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_map', $grades);\n\
    \  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpfa2uu3at.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array($grades));\n  $grades = array_map('intval',\
    \ $grades);\n  $grades = array_map('strval', $grades);\n  $grades = array_map('strval',\
    \ $grades);\n  $grades = array_map('strtolower', $grades);\n  $grades = array_map('strtoupper',\
    \ $grades);\n  return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: round(): Argument #1 ($num) must be\
    \ of type int|float, array given in /tmp/tmp_9wrmk96.php:25\nStack trace:\n#0\
    \ [internal function]: round(Array)\n#1 /tmp/tmp_9wrmk96.php(25): array_map('round',\
    \ Array)\n#2 /tmp/tmp_9wrmk96.php(35): numerical_letter_grade(Array)\n#3 /tmp/tmp_9wrmk96.php(39):\
    \ candidate(Array)\n#4 /tmp/tmp_9wrmk96.php(47): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmp_9wrmk96.php on line 25\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', array_map('floatval',\
    \ $grades)));\n    $grades = array_map('array_filter', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_filter" in /tmp/tmp01e91lp1.php
    on line 66

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_diff', $grades,\
    \ array(0));\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, create_function('$v', '$v > 0 && $v < 4'));\n\
    \    $grades = array_map('array_filter', $grades, create_function('$v', '$v >\
    \ 0 && $v < 3.7'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 3.3'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 3.0'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 2.7'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 2.3'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 2.0'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 1.7'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 1.3'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 1.0'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 0.7'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 0.0'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 0'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 4'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 3.7'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 3.3'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 3.0'));\n    $grades = array_map('array_filter', $grades, create_function('$v',\
    \ '$v > 0 && $v < 2.7'));\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpdo4ogulp.php on line 61

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp_7zsof1w.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp082cd02d.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkd_flqhg.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp50khbqmv.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpxhvp8xat.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_filter($grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1k6ek09t.php:39\n\
    Stack trace:\n#0 /tmp/tmp1k6ek09t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1k6ek09t.php\
    \ on line 39\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp90h9hc1j.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_unique($grades);\n    $grades = array_values($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? '+' :\
    \ $grade < 0 ? '-' : $grade;\n    }, $grades);\n    return $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpnovt7piq.php on line
    30

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('array_sum',\
    \ $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a[0] < 0.7 ? \"D-\" : $a[0] < 0.3 ? \"C-\" : $a[0] < 0.1 ? \"B-\" : $a[0] <\
    \ 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a[0] < 0.1 ? \"\
    B-\" : $a[0] < 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a[0]\
    \ < 0.1 ? \"B-\" : $a[0] < 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ?\
    \ \"B-\" : $a[0] < 0.1 ? \"B-\" : $a[0] < 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\"\
    \ : $a[0] < 0.3 ? \"B-\" : $a[0] < 0.1 ? \"B-\" : $a[0] < 0.0 ? \"B-\" : $a[0]\
    \ < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a[0] < 0.1 ? \"B-\" : $a[0] < 0.0 ?\
    \ \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a[0] < 0.1 ? \"B-\"\
    \ : $a[0] < 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a[0]\
    \ < 0.1 ? \"B-\" : $a[0] < 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ?\
    \ \"B-\" : $a[0] < 0.1 ? \"B-\" : $a[0] < 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\"\
    \ : $a[0] < 0.3 ? \"B-\" : $a[0] < 0.1 ? \"B-\" : $a[0] < 0.0 ? \"B-\" : $a[0]\
    \ < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a[0] < 0.1 ? \"B-\" : $a[0] < 0.0 ?\
    \ \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a[0] < 0.1 ? \"B-\"\
    \ : $a[0] < 0.0 ? \"B-\" : $a[0] < 0.7 ? \"B-\" : $a[0] < 0.3 ? \"B-\" : $a\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "return $a[0] < 0.7 ? "D-"
    : $a...", expecting ")" in /tmp/tmp9rffii12.php on line 29

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpm80qba8f.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpqc9pnobi.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('chr', $grades);\n    $grades = array_map('strtoupper',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('str_replace',\
    \ array('D+', 'D', 'D-', 'E'), $grades);\n    $grades = array_map('str_replace',\
    \ array('D', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-'), $grades);\n    $grades =\
    \ array_map('str_replace', array('C+', 'C', 'C-'), $grades);\n    $grades = array_map('str_replace',\
    \ array('C', 'C-'), $grades);\n    $grades = array_map('str_replace', array('C',\
    \ 'B-', 'B+'), $grades);\n    $grades = array_map('str_replace', array('B', 'B+'),\
    \ $grades);\n    $grades = array_map('str_replace', array('B', 'B-'), $grades);\n\
    \    $grades = array_map('str_replace', array('B+', 'B-'), $grades);\n    $grades\
    \ = array_map('str_replace', array('B-'), $grades);\n    $grades = array_map('str_replace',\
    \ array('B-'), $grades);\n    $grades = array_map('str_replace', array('B-'),\
    \ $grades);\n    $grades = array_map('str_replace', array('B-'), $grades);\n \
    \   $grades = array_map('str_replace', array('B-'), $grades);\n    $grades = array_map('str_replace',\
    \ array('B-'), $grades);\n    $grades = array_map('str_replace', array('B-'),\
    \ $grades);\n    $grades = array_map('str_replace', array('B-'), $grades);\n \
    \   $grades = array_map('str_replace', array('B-'), $grades);\n    $grades = array_map('str_replace',\
    \ array('B-'), $grades);\n    $grades = array_map('str_replace', array('B-'),\
    \ $grades);\n    $grades = array_map('str_replace', array('B-'), $grades);\n \
    \   $grades = array_map('str_replace', array('B-'), $grades);\n    $grades = array_map('str_replace',\
    \ array('B-'), $grades);\n    $grades = array_map('str_replace', array('B-'),\
    \ $grades);\n    $grades = array_map('str_replace', array('B\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "B", expecting ")" in /tmp/tmpv2i40jd2.php
    on line 55

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('array_sum',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmp_3iponnw.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'D-\\':$a<0?\\'D+\\':$a<0?\\'C-\\':$a<0?\\'C\\':$a<0?\\'B-\\':$a<0?\\\
    'B\\':$a<0?\\'A-\\':$a<0?\\'A+\\':\\'E\\';'), $grades);\n    return array_map('array_map',\
    \ create_function('$a','return $a<0?\\'D-\\':$a<0?\\'D+\\':$a<0?\\'C-\\':$a<0?\\\
    'C\\':$a<0?\\'B-\\':$a<0?\\'B\\':$a<0?\\'A-\\':$a<0?\\'A+\\':\\'E\\';'), $grades);\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmpky6c_pbt.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmpky6c_pbt.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmpky6c_pbt.php(32): numerical_letter_grade(Array)\n#3 /tmp/tmpky6c_pbt.php(36):\
    \ candidate(Array)\n#4 /tmp/tmpky6c_pbt.php(44): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpky6c_pbt.php on line 26\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpbbh9ktj8.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_sum', $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'-\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'\\':\\'\\';'), $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "return $", expecting ")"
    in /tmp/tmp6zizfn1u.php on line 42

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpjr_ker_e.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_keys',\
    \ $grades);\n    $grades = array_map('array_values', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search_key',\
    \ $grades);\n    $grades = array_map('array_count_values', $grades);\n    $grades\
    \ = array_map('array_reverse', $grades);\n    $grades = array_map('array_shift',\
    \ $grades);\n    $grades = array_map('array_pop', $grades);\n    $grades = array_map('array_push',\
    \ $grades);\n    $grades = array_map('array_slice', $grades);\n    $grades = array_map('array_splice',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_reduce', $grades);\n\
    \    $grades = array_map('array_reduce', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_reduce',\
    \ $grades);\n    $grades = array_map('array_reduce', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_reduce', $grades);\n    $grades = array_map('array_reduce',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_reduce', $grades);\n\
    \    $grades = array_map('array_reduce', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_reduce',\
    \ $grades);\n    $grades = array_map('array_reduce', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_reduce', $grades);\n    $grade\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpax_5m0h8.php
    on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array($grades));\n  $grades = array_map('intval',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_\nfunction candidate(...$args) {\n \
    \   return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp7qrt89sd.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpzu6ag023.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('str\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "str" in /tmp/tmp_5x18gf6.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpklckgdwq.php on line 67

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_filter($grades);\n  $grades = array_map('chr', $grades);\n  return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1pw2rm6j.php:36\n\
    Stack trace:\n#0 /tmp/tmp1pw2rm6j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1pw2rm6j.php\
    \ on line 36\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strtoupper',\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9bc7k5o.php:38\n\
    Stack trace:\n#0 /tmp/tmpi9bc7k5o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpi9bc7k5o.php\
    \ on line 38\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_pop', $grades);\n    $grades = array_map('array_push',\
    \ $grades);\n    $grades = array_map('array_shift', $grades);\n    $grades = array_map('array_pop',\
    \ $grades);\n    $grades = array_map('array_shift', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_reduce',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_reduce', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_reduce', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_reduce', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_reduce',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_reduce', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_reduce', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_reduce', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_reduce',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = \nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpu9iwmqx7.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpeugt70r1.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('strval', $grades);\n    $grades\
    \ = array_map('strtoupper', $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ipixgp7.php:37\n\
    Stack trace:\n#0 /tmp/tmp6ipixgp7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6ipixgp7.php\
    \ on line 37\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strtoupper',\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9bc7k5o.php:38\n\
    Stack trace:\n#0 /tmp/tmpi9bc7k5o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpi9bc7k5o.php\
    \ on line 38\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_unique($grades);\n    $grades = array_map('intval', $grades);\n\
    \    $grades = array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpu5e0u9w6.php on line 69

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp90h9hc1j.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('array_sum',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpxnd6avwh.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpbaejsq2f.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('array_sum',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grade\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp9q687u9s.php
    on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>3.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>2.7)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>2.3)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>2.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>1.7)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>1.3)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>1.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.7)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ ($x>0.0)?\"B-\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "$x" in /tmp/tmp7v187qk5.php
    on line 43

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5badlll7.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxt76mk6_.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp8pc1pvbv.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp2qumgylm.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'A'), $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 'B'), $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_fill', array_fill(0, count($grades),\
    \ 'C'), $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades\
    \ = array_map('array_map', 'array_fill', array_fill(0, count($grades), 'D'), $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 'E'), $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #1 ($array)\
    \ must be of type array, float given in /tmp/tmpnn0tgqd2.php:26\nStack trace:\n\
    #0 [internal function]: array_filter(4.0)\n#1 /tmp/tmpnn0tgqd2.php(26): array_map('array_filter',\
    \ Array)\n#2 /tmp/tmpnn0tgqd2.php(40): numerical_letter_grade(Array)\n#3 /tmp/tmpnn0tgqd2.php(44):\
    \ candidate(Array)\n#4 /tmp/tmpnn0tgqd2.php(52): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpnn0tgqd2.php on line 26\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strtoupper',\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhhnjl1x.php:39\n\
    Stack trace:\n#0 /tmp/tmpmhhnjl1x.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpmhhnjl1x.php\
    \ on line 39\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_sum', $grades);\n  $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\"D-\":($a>0?\"D+\":($a==0?\"E\":(($a>2.7)?\"B-\":(($a>2.3)?\"B-\":(($a>1.7)?\"\
    C-\":(($a>1.3)?\"C-\":(($a>1)?\"C+\":(($a>0.7)?\"C\":(($a>0)?\"C+\":(($a<0)?\"\
    A-\":(($a<-0.7)?\"A-\":(($a<-0.3)?\"A+\":(($a<-0.1)?\"A+\":(($a<0)?\"A\":(($a<-0.1)?\"\
    A+\":(($a<0)?\"A+\":\"\"))))))))))))',$grades));\n  $grades = array_map('array_map',\
    \ create_function('$a','return $a<0?\"D-\":($a>0?\"D+\":($a==0?\"E\":(($a>2.7)?\"\
    B-\":(($a>2.3)?\"B-\":(($a>1.7)?\"C-\":(($a>1.3)?\"C-\":(($a>1)?\"C+\":(($a>0.7)?\"\
    C\":(($a>0)?\"C+\":(($a<0)?\"A-\":(($a<-0.7)?\"A-\":(($a<-0.3)?\"A+\":(($a<-0.1)?\"\
    A+\":(($a<0)?\"A\":(($a<-0.1)?\"A+\":(($a<0)?\"A+\":\"\"))))))))))))',$grades));\n\
    \  $grades = array_map('array_map', create_function('$a','return $a<0?\"D-\":($a>0?\"\
    D+\":($a==0?\"E\":(($a>2.7)?\"B-\":(($a>2.3)?\"B-\":(($a>1.7)?\"C-\":(($a>1.3)?\"\
    C-\":(($a>1)?\"C+\":(($a>0.7)?\"C\":(($a>0)?\"C+\":(($a<0)?\"A-\":(($a<-0.7)?\"\
    A-\":(($a<-0.3)?\"A+\":(($a<-0.1)?\"A+\":(($a<0)?\"A\":(($a<-0.1)?\"A+\":(($a<0)?\"\
    A+\":\"\"))))))))))))',$\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpsl1ihcq8.php on line 30

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', 'grade_to_letter',\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmptg3p_wcw.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmptg3p_wcw.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmptg3p_wcw.php(32): numerical_letter_grade(Array)\n#3 /tmp/tmptg3p_wcw.php(36):\
    \ candidate(Array)\n#4 /tmp/tmptg3p_wcw.php(44): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmptg3p_wcw.php on line 26\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('floatval', $grades));\n  $grades\
    \ = array_map('intval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  $grades = \nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpfkpppjbd.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_unique($grades);\n\
    \    $grades = array_map('chr', $grades);\n    return $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1err8eyp.php:38\n\
    Stack trace:\n#0 /tmp/tmp1err8eyp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1err8eyp.php\
    \ on line 38\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array($grades));\n  $grades = array_map('intval',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_\nfunction candidate(...$args) {\n \
    \   return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpa8nadr76.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strtoupper', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('str\nfunction candidate(...$args) {\n  \
    \  return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "str" in /tmp/tmpsogehm4o.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp_06l8fb1.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpdz0ejyg5.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkd_flqhg.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkd_flqhg.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', array($this, 'letter_grade'),\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: round(): Argument #1 ($num) must be\
    \ of type int|float, array given in /tmp/tmp7xfmbugp.php:25\nStack trace:\n#0\
    \ [internal function]: round(Array)\n#1 /tmp/tmp7xfmbugp.php(25): array_map('round',\
    \ Array)\n#2 /tmp/tmp7xfmbugp.php(35): numerical_letter_grade(Array)\n#3 /tmp/tmp7xfmbugp.php(39):\
    \ candidate(Array)\n#4 /tmp/tmp7xfmbugp.php(47): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmp7xfmbugp.php on line 25\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp90h9hc1j.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp8pc1pvbv.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', array_map('floatval',\
    \ $grades)));\n    $grades = array_map('array_filter', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_filter" in /tmp/tmp0_efye21.php
    on line 66

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'-\\':\\'\\'+$x;'), $grades);\n    $grades = array_map('array_\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpwwbxb6im.php
    on line 41

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_map(function($grade) {\n        return $grade < 0 ? $grade : 0.0;\n\
    \    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? \"A+\" : ($grade < 0 ? \"A-\" : \"B+\");\n  \
    \  }, $grades);\n    $grades = array_map(function($grade) {\n        return $grade\
    \ < 0 ? \"B\" : ($grade > 0 ? \"B-\" : \"C+\");\n    }, $grades);\n    $grades\
    \ = array_map(function($grade) {\n        return $grade < 0 ? \"C\" : ($grade\
    \ > 0 ? \"C-\" : \"D+\");\n    }, $grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade < 0 ? \"D\" : ($grade > 0 ? \"D-\" : \"E\");\n    },\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_map(): Argument #2 ($array) must\
    \ be of type array, float given in /tmp/tmpn4clr5cl.php:35\nStack trace:\n#0 /tmp/tmpn4clr5cl.php(35):\
    \ array_map(Object(Closure), 0.0)\n#1 /tmp/tmpn4clr5cl.php(49): numerical_letter_grade(0.0)\n\
    #2 /tmp/tmpn4clr5cl.php(53): candidate(Array)\n#3 /tmp/tmpn4clr5cl.php(61): test()\n\
    #4 {main}\n  thrown in /tmp/tmpn4clr5cl.php on line 35\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmppor8u08j.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ 'grade_letter', $grades);\n  return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #1 ($array)\
    \ must be of type array, float given in /tmp/tmpwueeimuq.php:26\nStack trace:\n\
    #0 [internal function]: array_filter(4.0)\n#1 /tmp/tmpwueeimuq.php(26): array_map('array_filter',\
    \ Array)\n#2 /tmp/tmpwueeimuq.php(34): numerical_letter_grade(Array)\n#3 /tmp/tmpwueeimuq.php(38):\
    \ candidate(Array)\n#4 /tmp/tmpwueeimuq.php(46): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpwueeimuq.php on line 26\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array($grades));\n  $grades = array_filter($grades);\n\
    \  $grades = array_map('intval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: round(): Argument #1 ($num) must be\
    \ of type int|float, array given in /tmp/tmp1srlyv0p.php:25\nStack trace:\n#0\
    \ [internal function]: round(Array)\n#1 /tmp/tmp1srlyv0p.php(25): array_map('round',\
    \ Array)\n#2 /tmp/tmp1srlyv0p.php(33): numerical_letter_grade(Array)\n#3 /tmp/tmp1srlyv0p.php(37):\
    \ candidate(Array)\n#4 /tmp/tmp1srlyv0p.php(45): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmp1srlyv0p.php on line 25\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_filter($grades);\n  $grades = array_map(function($grade)\
    \ {\n    return $grade >= 4.0 ? \"A+\" : ($grade >= 3.7 ? \"A\" : ($grade >= 3.3\
    \ ? \"A-\" : ($grade >= 3.0 ? \"B+\" : \n                                    \
    \                                              ($grade >= 2.7 ? \"B\" : ($grade\
    \ >= 2.3 ? \"B-\" : ($grade >= 2.0 ? \"C+\" : \n                             \
    \                                                                            \
    \                           ($grade >= 1.7 ? \"C\" : \n                      \
    \                                                                            \
    \                                                    ($grade >= 1.3 ? \"C-\" :\
    \ ($grade >= 1.0 ? \"D+\" : \n                                               \
    \                                                                            \
    \                                                         ($grade >= 0.7 ? \"\
    D\" : \n                                                                     \
    \                                                                            \
    \                                                                 ($grade >= 0.0\
    \ ? \"D-\" : \"E\")))))))))));\n  }, $grades);\n  return $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_9dbinj.php:42\n\
    Stack trace:\n#0 /tmp/tmp8_9dbinj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8_9dbinj.php\
    \ on line 42\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', array($this, 'letter_grade'),\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmp807gsrc7.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmp807gsrc7.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmp807gsrc7.php(33): numerical_letter_grade(Array)\n#3 /tmp/tmp807gsrc7.php(37):\
    \ candidate(Array)\n#4 /tmp/tmp807gsrc7.php(45): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmp807gsrc7.php on line 26\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', array_map('floatval',\
    \ $grades)));\n    $grades = array_filter($grades);\n    $grades = array_map('chr',\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85jj9ss0.php:36\n\
    Stack trace:\n#0 /tmp/tmp85jj9ss0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp85jj9ss0.php\
    \ on line 36\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = \nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyd_ytthc.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', $grades);\n  $grades = array_map('intval',\
    \ $grades);\n  $grades = array_map('strval', $grades);\n  $grades = array_map('strval',\
    \ $grades);\n  return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0o_9ti8.php:37\n\
    Stack trace:\n#0 /tmp/tmpv0o_9ti8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv0o_9ti8.php\
    \ on line 37\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_sum', $grades);\n  $grades = array_map('array_filter', $grades);\n\
    \  $grades = array_map('array_map', create_function('$v', 'return $v < 0 ? \"\
    D-\" : $v;'), $grades);\n  $grades = array_map('array_map', create_function('$v',\
    \ 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades = array_map('array_map',\
    \ create_function('$v', 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades\
    \ = array_map('array_map', create_function('$v', 'return $v < 0 ? \"D-\" : $v;'),\
    \ $grades);\n  $grades = array_map('array_map', create_function('$v', 'return\
    \ $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades = array_map('array_map', create_function('$v',\
    \ 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades = array_map('array_map',\
    \ create_function('$v', 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades\
    \ = array_map('array_map', create_function('$v', 'return $v < 0 ? \"D-\" : $v;'),\
    \ $grades);\n  $grades = array_map('array_map', create_function('$v', 'return\
    \ $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades = array_map('array_map', create_function('$v',\
    \ 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades = array_map('array_map',\
    \ create_function('$v', 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades\
    \ = array_map('array_map', create_function('$v', 'return $v < 0 ? \"D-\" : $v;'),\
    \ $grades);\n  $grades = array_map('array_map', create_function('$v', 'return\
    \ $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades = array_map('array_map', create_function('$v',\
    \ 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades = array_map('array_map',\
    \ create_function('$v', 'return $v < 0 ? \"D-\" : $v;'), $grades);\n  $grades\
    \ = array_map('array_map', create_function('$v', 'return $v < 0 ? \"D\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "return $v < 0 ? "D", expecting
    ")" in /tmp/tmp7dk2w8_9.php on line 43

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp44obl5xb.php on line 67

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_filter($grades);\n  $grades = array_map(function($grade)\
    \ {\n    return $grade > 0 ? \"A+\" : ($grade > 0 ? \"A\" : \"B\");\n  }, $grades);\n\
    \  return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75mlhulp.php:37\n\
    Stack trace:\n#0 /tmp/tmp75mlhulp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp75mlhulp.php\
    \ on line 37\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkd_flqhg.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_map', $grades);\n\
    \  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_sort',\
    \ $grades);\n  $grades = array_map('array_reverse', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_values',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_values', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_values',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_values', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_values',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_values', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_values',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_merge\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_merge" in /tmp/tmpp5qtkom0.php
    on line 66

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strtolower', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('str_replace', array('+', '-', '*', '/'),\
    \ $grades);\n    $grades = array_map('str_replace', array('E', 'd', 'c', 'b',\
    \ 'a'), $grades);\n    $grades = array_map('str_replace', array('E', 'd', 'c',\
    \ 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E', 'd',\
    \ 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map('str_replace', array('E',\
    \ 'd', 'c', 'b', 'a'), $grades);\n    $grades = array_map\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp6dhx3qv9.php
    on line 52

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_intersect', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpu7sfsmju.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpj99ogv0_.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_intersect', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', create_function('$a','return $a[0];'), $grades);\n  \
    \  $grades = array_map('array_map', create_function('$a','return $a[1];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[2];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[3];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[4];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[5];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[6];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[7];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[8];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[9];'), $grades);\n\
    \    $grades = array_map('array_map', create_function('$a','return $a[10];'),\
    \ $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a[11];'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a[12];'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a[13];'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a[14];'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a[15];'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a[16];\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "return $a[16];", expecting
    ")" in /tmp/tmpmh6xqtaz.php on line 50

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_map', 'array_fill',\
    \ array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_sum',\
    \ $grades);\n  $grades = array_map('array_map', 'array_fill', array_fill(0, count($grades),\
    \ 0), $grades);\n  $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 0), $grades);\n  $grades = array_map('array_map', 'array_fill',\
    \ array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n  $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8bf_cwd6.php on line 48

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x>0?\"A+\":\"A-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x>0?\"B+\":\"B-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x>0?\"C+\":\"C-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x>0?\"D+\":\"D-\";'), $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x>0?\"E\":\"D\";'), $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmpcp0pkyi0.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmpcp0pkyi0.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmpcp0pkyi0.php(36): numerical_letter_grade(Array)\n#3 /tmp/tmpcp0pkyi0.php(40):\
    \ candidate(Array)\n#4 /tmp/tmpcp0pkyi0.php(48): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpcp0pkyi0.php on line 26\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxt76mk6_.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp3ykfk95y.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('array_sum',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmp3l9it053.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpt1fsn12o.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = \n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8yobruk4.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('chr', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9_spljm.php:36\n\
    Stack trace:\n#0 /tmp/tmpn9_spljm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpn9_spljm.php\
    \ on line 36\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $grades);\n    $grades = array_map('array_search', $grades);\n    $grades =\
    \ array_map('array_search', $grades);\n    $grades = array_map('array_search',\
    \ $\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpouuu9auk.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpzb4bmfwe.php on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('chr', $grades);\n    $grades = array_map('strtoupper',\
    \ $grades);\n    $grades = array_map('trim', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('strpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrev', $grades);\n    $grades = array_map('strstr',\
    \ $grades);\n    $grades = array_map('strrchr', $grades);\n    $grades = array_map('strrev',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n    $grades = array_map('str_replace',\
    \ $grades);\n    $grades = array_map('str_replace', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmplj5rbxed.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp082cd02d.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strtolower', $grades);\n    return $grades;\n}\n\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrorjynd.php:37\n\
    Stack trace:\n#0 /tmp/tmpwrorjynd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwrorjynd.php\
    \ on line 37\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0 ? \"A+\" : \"A-\";'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0 ? \"B+\" : \"B-\";'), $grades);\n    $grades\
    \ = array_map('array_map', create_function('$v', 'return $v > 0 ? \"C+\" : \"\
    C-\";'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0 ? \"D+\" : \"D-\";'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0 ? \"E\" : \"D-\";'), $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmpm4tk9wvz.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmpm4tk9wvz.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmpm4tk9wvz.php(36): numerical_letter_grade(Array)\n#3 /tmp/tmpm4tk9wvz.php(40):\
    \ candidate(Array)\n#4 /tmp/tmpm4tk9wvz.php(48): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpm4tk9wvz.php on line 26\n"
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_diff',\
    \ $grades, array(0));\n    $grades = array_map('array_diff', $grades, array(1));\n\
    \    $grades = array_map('array_diff', $grades, array(2));\n    $grades = array_map('array_diff',\
    \ $grades, array(3));\n    $grades = array_map('array_diff', $grades, array(4));\n\
    \    $grades = array_map('array_diff', $grades, array(5));\n    $grades = array_map('array_diff',\
    \ $grades, array(6));\n    $grades = array_map('array_diff', $grades, array(7));\n\
    \    $grades = array_map('array_diff', $grades, array(8));\n    $grades = array_map('array_diff',\
    \ $grades, array(9));\n    $grades = array_map('array_diff', $grades, array(10));\n\
    \    $grades = array_map('array_diff', $grades, array(11));\n    $grades = array_map('array_diff',\
    \ $grades, array(12));\n    $grades = array_map('array_diff', $grades, array(13));\n\
    \    $grades = array_map('array_diff', $grades, array(14));\n    $grades = array_map('array_diff',\
    \ $grades, array(15));\n    $grades = array_map('array_diff', $grades, array(16));\n\
    \    $grades = array_map('array_diff', $grades, array(17));\n    $grades = array_map('array_diff',\
    \ $grades, array(18));\n    $grades = array_map('array_diff', $grades, array(19));\n\
    \    $grades = array_map('array_diff', $grades, array(20));\n    $grades = array_map('array_diff',\
    \ $grades, array(21));\n    $grades = array_map('array_diff', $grades, array(22));\n\
    \    $grades = array_map('array_diff', $grades, array(23));\n    $grades = array_map('array_diff',\
    \ $grades, array(24));\n    $grades = array_map('array_diff', $grades, array(25));\n\
    \    $grades = array_map('array_diff', $grades, array(26));\n    $grades = array_map('array_diff',\
    \ $grades, array(27));\n    $grades = array_map('array_diff', $grades, array(28));\n\
    \    $grades = array_map('array_diff', $grades, array(29));\n    $grades = array_map('array_diff',\
    \ $grades, array(30));\n    $grades = array_map('array_diff', $grades, array(3\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpjk5jhvu2.php
    on line 60

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', create_function('$v', 'return\
    \ $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades\
    \ = array_map('array_map', create_function('$v', 'return $v > 0.0 && $v < 1.0;'),\
    \ $grades);\n    $grades = array_map('array_map', create_function('$v', 'return\
    \ $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades\
    \ = array_map('array_map', create_function('$v', 'return $v > 0.0 && $v < 1.0;'),\
    \ $grades);\n    $grades = array_map('array_map', create_function('$v', 'return\
    \ $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades\
    \ = array_map('array_map', create_function('$v', 'return $v > 0.0 && $v < 1.0;'),\
    \ $grades);\n    $grades = array_map('array_map', create_function('$v', 'return\
    \ $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0.0 && $v < 1.0;'), $grades);\n    $grades\
    \ = array_map('array_map', create_function('$v', 'return $v > 0.0 && $\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "return $v > 0.0 && $", expecting
    ")" in /tmp/tmpbjwagtvd.php on line 43

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_filter($grades);\n  $grades = array_map('round', $grades);\n\
    \  $grades = array_map('intval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpos0pv3yv.php:38\n\
    Stack trace:\n#0 /tmp/tmpos0pv3yv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpos0pv3yv.php\
    \ on line 38\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_diff', $grades);\n\
    \    $grades = array_map('array_intersect', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp4xp3fwnc.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp7j3pbib7.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strtolower', $grades);\n    $grades = array_map('strrev',\
    \ $grades);\n    $grades = array_map('strlen', $grades);\n    $grades = array_map('strpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_map('strrpos', $grades);\n    $grades = array_map('strrpos',\
    \ $grades);\n    $grades = array_\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpvwmas930.php
    on line 66

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkd_flqhg.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5badlll7.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 78 in /tmp/tmpdtsys16o.php on line 93

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('floatval', $grades));\n  $grades\
    \ = array_map('intval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('strval', $grades);\n  return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qdwzr87.php:37\n\
    Stack trace:\n#0 /tmp/tmp7qdwzr87.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7qdwzr87.php\
    \ on line 37\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_sort', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxzcxsram.php on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp253ri9il.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'grade_letter', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmp900qe8r3.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmp900qe8r3.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmp900qe8r3.php(33): numerical_letter_grade(Array)\n#3 /tmp/tmp900qe8r3.php(37):\
    \ candidate(Array)\n#4 /tmp/tmp900qe8r3.php(45): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmp900qe8r3.php on line 26\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp082cd02d.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strtolower',\
    \ $grades);\n    $grades = array_map('strtoupper', $grades);\n    return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mpsvrlt.php:40\n\
    Stack trace:\n#0 /tmp/tmp0mpsvrlt.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0mpsvrlt.php\
    \ on line 40\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_sort',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_sort',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_sort',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_sort',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_sort',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmprgjg5gvk.php on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpyzm2ndiu.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'-\\':\\'\\'+$a;'), $grades);\n    $grades = array_map('array_\nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpb123rz8n.php
    on line 41

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0 ? \"A+\" : \"A\";'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0 ? \"B+\" : \"B\";'), $grades);\n    $grades\
    \ = array_map('array_map', create_function('$v', 'return $v > 0 ? \"B-\" : \"\
    B\";'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0 ? \"C+\" : \"C\";'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0 ? \"C\" : \"C\";'), $grades);\n    $grades\
    \ = array_map('array_map', create_function('$v', 'return $v > 0 ? \"D+\" : \"\
    D\";'), $grades);\n    $grades = array_map('array_map', create_function('$v',\
    \ 'return $v > 0 ? \"D\" : \"D\";'), $grades);\n    $grades = array_map('array_map',\
    \ create_function('$v', 'return $v > 0 ? \"E\" : \"E\";'), $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmphul80y6_.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmphul80y6_.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmphul80y6_.php(39): numerical_letter_grade(Array)\n#3 /tmp/tmphul80y6_.php(43):\
    \ candidate(Array)\n#4 /tmp/tmphul80y6_.php(51): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmphul80y6_.php on line 26\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_sum', $grades);\n    $grades = array_map('array_map', create_function('$x','return\
    \ $x<0?\\'D-\\':$x>0?\\'D+\\':$x>7?\\'D\\':$x>3?\\'C-\\':$x>2?\\'C\\':$x>1?\\\
    'B-\\':$x>0?\\'B\\':$x>-1?\\'A-\\':$x>-2?\\'A\\':$x>-3?\\'A+\\':\\'E\\';'), $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, float given in /tmp/tmpzkw8gbg1.php:26\nStack trace:\n#0 [internal\
    \ function]: array_sum(4.0)\n#1 /tmp/tmpzkw8gbg1.php(26): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmpzkw8gbg1.php(32): numerical_letter_grade(Array)\n#3 /tmp/tmpzkw8gbg1.php(36):\
    \ candidate(Array)\n#4 /tmp/tmpzkw8gbg1.php(44): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpzkw8gbg1.php on line 26\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_count_values', $grades);\n    $grades\
    \ = array_map('array_reverse', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpfl62zadk.php
    on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_unique($grades);\n\
    \    $grades = array_filter($grades);\n    $grades = array_map('chr', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeji9b7qr.php:39\n\
    Stack trace:\n#0 /tmp/tmpeji9b7qr.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeji9b7qr.php\
    \ on line 39\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('chr', $grades);\n    $grades = array_map('strtoupper',\
    \ $grades);\n    $grades = array_map('trim', $grades);\n    $grades = array_map('strlen',\
    \ $grades);\n    $grades = array_map('str_replace', array('+', '-', '*', '/'),\
    \ $grades);\n    $grades = array_map('str_replace', array('E', 'd', 'c', 'b',\
    \ 'a'), $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: str_replace() expects at least\
    \ 3 arguments, 2 given in /tmp/tmpgb2aq2gv.php:33\nStack trace:\n#0 [internal\
    \ function]: str_replace('+', 1)\n#1 /tmp/tmpgb2aq2gv.php(33): array_map('str_replace',\
    \ Array, Array)\n#2 /tmp/tmpgb2aq2gv.php(39): numerical_letter_grade(Array)\n\
    #3 /tmp/tmpgb2aq2gv.php(43): candidate(Array)\n#4 /tmp/tmpgb2aq2gv.php(51): test()\n\
    #5 {main}\n  thrown in /tmp/tmpgb2aq2gv.php on line 33\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpv8i5rlib.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_sum', $grades);\n  $grades = array_map('array_filter', $grades);\n\
    \  $grades = array_map('array_reverse', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_reverse',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_reverse', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_reverse',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_reverse', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_diff',\
    \ $grades);\n  $grades = array_map('array_intersect', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_reverse',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp6ruu4ek5.php on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'grade_letter', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: round(): Argument #1 ($num) must be\
    \ of type int|float, array given in /tmp/tmpjy3o21it.php:25\nStack trace:\n#0\
    \ [internal function]: round(Array)\n#1 /tmp/tmpjy3o21it.php(25): array_map('round',\
    \ Array)\n#2 /tmp/tmpjy3o21it.php(35): numerical_letter_grade(Array)\n#3 /tmp/tmpjy3o21it.php(39):\
    \ candidate(Array)\n#4 /tmp/tmpjy3o21it.php(47): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpjy3o21it.php on line 25\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', array_map('floatval',\
    \ $grades)));\n    $grades = array_map('array_sum', $grades);\n    $grades = array_map('array_diff',\
    \ array_map('array_filter', $grades), array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n    $grades = array_map('array_reverse',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_filter', $grades, array(0));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmp2l33o_6v.php on line 78

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p3espfr.php:36\n\
    Stack trace:\n#0 /tmp/tmp0p3espfr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0p3espfr.php\
    \ on line 36\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'grade_letter', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: round(): Argument #1 ($num) must be\
    \ of type int|float, array given in /tmp/tmpjy3o21it.php:25\nStack trace:\n#0\
    \ [internal function]: round(Array)\n#1 /tmp/tmpjy3o21it.php(25): array_map('round',\
    \ Array)\n#2 /tmp/tmpjy3o21it.php(35): numerical_letter_grade(Array)\n#3 /tmp/tmpjy3o21it.php(39):\
    \ candidate(Array)\n#4 /tmp/tmpjy3o21it.php(47): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpjy3o21it.php on line 25\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuku_5eyw.php on line 67

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array($grades));\n  $grades = array_map('intval',\
    \ $grades);\n  $grades = array_map('array_sum', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', array($this, 'letter_grade'),\
    \ $grades);\n  return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: round(): Argument #1 ($num) must be\
    \ of type int|float, array given in /tmp/tmpzyv85d2w.php:25\nStack trace:\n#0\
    \ [internal function]: round(Array)\n#1 /tmp/tmpzyv85d2w.php(25): array_map('round',\
    \ Array)\n#2 /tmp/tmpzyv85d2w.php(34): numerical_letter_grade(Array)\n#3 /tmp/tmpzyv85d2w.php(38):\
    \ candidate(Array)\n#4 /tmp/tmpzyv85d2w.php(46): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpzyv85d2w.php on line 25\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpb0ompytz.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('chr', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9_spljm.php:36\n\
    Stack trace:\n#0 /tmp/tmpn9_spljm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpn9_spljm.php\
    \ on line 36\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_merge', $grades);\n  $grades = array_map('array_sort',\
    \ $grades);\n  $grades = array_map('array_reverse', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmphc11utqj.php on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_filter($grades);\n  $grades = array_map(function($grade)\
    \ {\n    return round($grade, 2);\n  }, $grades);\n  $grades = array_unique($grades);\n\
    \  $grades = array_filter($grades);\n  $grades = array_map(function($grade) {\n\
    \    return $grade < 0.0 ? \"E\" : $grade;\n  }, $grades);\n  return $grades;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6_1qk9m.php:42\n\
    Stack trace:\n#0 /tmp/tmpg6_1qk9m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpg6_1qk9m.php\
    \ on line 42\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxt76mk6_.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_count_values',\
    \ $grades);\n    $grades = array_map('array_reverse', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp0ehijk0e.php on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'grade_letter', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: round(): Argument #1 ($num) must be\
    \ of type int|float, array given in /tmp/tmpjy3o21it.php:25\nStack trace:\n#0\
    \ [internal function]: round(Array)\n#1 /tmp/tmpjy3o21it.php(25): array_map('round',\
    \ Array)\n#2 /tmp/tmpjy3o21it.php(35): numerical_letter_grade(Array)\n#3 /tmp/tmpjy3o21it.php(39):\
    \ candidate(Array)\n#4 /tmp/tmpjy3o21it.php(47): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpjy3o21it.php on line 25\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5badlll7.php on line 68

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('array_sum',\
    \ $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'E\\':\\'D\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'D\\':\\'C\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'C\\':\\'B\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'B\\':\\'A\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'A\\':\\'A+\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'A+\\':\\'A-\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'A-\\':\\'B+\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'B+\\':\\'B-\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'B-\\':\\'C+\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'C+\\':\\'C\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'C\\':\\'D\\';'), $grades);\n    $grades = array_map('array_map', create_function('$a','return\
    \ $a<0?\\'D\\':\\'E\\';'), $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_sum(): Argument #1 ($array) must\
    \ be of type array, int given in /tmp/tmpqqtx9zky.php:28\nStack trace:\n#0 [internal\
    \ function]: array_sum(4)\n#1 /tmp/tmpqqtx9zky.php(28): array_map('array_sum',\
    \ Array)\n#2 /tmp/tmpqqtx9zky.php(45): numerical_letter_grade(Array)\n#3 /tmp/tmpqqtx9zky.php(49):\
    \ candidate(Array)\n#4 /tmp/tmpqqtx9zky.php(57): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpqqtx9zky.php on line 28\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp_2qmigy_.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpk6f8ajd4.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphxf7lwyh.php on line 68

    '
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', 'grade_letter', $grades);\n    return $grades;\n}\n\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #1 ($array)\
    \ must be of type array, float given in /tmp/tmpg452dcfy.php:26\nStack trace:\n\
    #0 [internal function]: array_filter(4.0)\n#1 /tmp/tmpg452dcfy.php(26): array_map('array_filter',\
    \ Array)\n#2 /tmp/tmpg452dcfy.php(34): numerical_letter_grade(Array)\n#3 /tmp/tmpg452dcfy.php(38):\
    \ candidate(Array)\n#4 /tmp/tmpg452dcfy.php(46): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpg452dcfy.php on line 26\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('floatval', $grades));\n    $grades\
    \ = array_map('intval', $grades);\n    $grades = array_map('strval', $grades);\n\
    \    $grades = array_map('strtolower', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    return $grades;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #1 ($array)\
    \ must be of type array, string given in /tmp/tmp_2qfo3nn.php:29\nStack trace:\n\
    #0 [internal function]: array_filter('4')\n#1 /tmp/tmp_2qfo3nn.php(29): array_map('array_filter',\
    \ Array)\n#2 /tmp/tmp_2qfo3nn.php(34): numerical_letter_grade(Array)\n#3 /tmp/tmp_2qfo3nn.php(38):\
    \ candidate(Array)\n#4 /tmp/tmp_2qfo3nn.php(46): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmp_2qfo3nn.php on line 29\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', 'array_pad', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_pad', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_pad', $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_pad', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_pad', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_pad', $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_pad', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_pad', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_pad', $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_pad', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_pad', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_pad', $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_pad', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_pad', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_pad', $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_pad', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_pad', $grades);\n   \
    \ $grades = array_map('array_filter', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpam6lb93x.php on line 77

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map('round', $grades);\n\
    \    $grades = array_map('intval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n    $grades = array_map('strval',\
    \ $grades);\n    $grades = array_map('strval', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpmql88h31.php on line 82

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', 'array_fill', array_fill(0, count($grades), 0), $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 0), $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_fill', array_fill(0, count($grades),\
    \ 0), $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades\
    \ = array_map('array_map', 'array_fill', array_fill(0, count($grades), 0), $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 0), $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_fill', array_fill(0, count($grades),\
    \ 0), $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades\
    \ = array_map('array_map', 'array_fill', array_fill(0, count($grades), 0), $grades);\n\
    \    $grades = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'array_fill', array_fill(0, count($grades), 0), $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', 'array_fill', array_fill(0,\
    \ count($grades), 0), $grades);\n    $grades = array_map('array_filter', $grades);\n\
    \    $grades = array_map('array_map', 'array_fill', array_fill(0, count($grades),\
    \ 0), $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades\
    \ = array_map('array_map', 'array_fill', array_fill(0, count($grades), 0), $grades);\n\
    \    $grades = \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpsqk05nic.php on line 55

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', array_map('intval', $grades));\n  $grades\
    \ = array_map('array_filter', $grades);\n  $grades = array_map('array_map', $grades);\n\
    \  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = array_map('array_unique',\
    \ $grades);\n  $grades = array_map('array_filter', $grades);\n  $grades = array_map('array_map',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_filter',\
    \ $grades);\n  $grades = array_map('array_map', $grades);\n  $grades = \nfunction\
    \ candidate(...$args) {\n    return numerical_letter_grade(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpo4z2x76u.php on line 68

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_filter($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n\
    \    $grades = array_map(function($grade) {\n        return $grade > 0 ? $grade\
    \ : 0.0;\n    }, $grades);\n    $grades = array_sum($grades);\n    $grades = array_map(function($grade)\
    \ {\n        return $grade > 0 ? $grade : 0.0;\n    }, $grades);\n    $grades\
    \ = array_sum($grades);\n    $grades = array_map(function($grade) {\n        return\
    \ $grade > 0 ? $grade : 0.0;\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 78 in /tmp/tmpdtsys16o.php on line 93

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_filter($grades);\n    $grades = array_map('chr', $grades);\n    return\
    \ $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn8vm_m1.php:36\n\
    Stack trace:\n#0 /tmp/tmpkn8vm_m1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkn8vm_m1.php\
    \ on line 36\n"
  timestamp: 1659731112
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $grades = array_map('round', $grades);\n  $grades = array_filter($grades);\n\
    \  $grades = array_map('intval', $grades);\n  $grades = array_map('strval', $grades);\n\
    \  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n  $grades = array_map('array_intersect',\
    \ $grades);\n  $grades = array_map('array_diff', $grades);\n  $grades = array_map('array_merge',\
    \ $grades);\n  $grades = array_map('array_unique', $grades);\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 24 in /tmp/tmpezpvk8yv.php on line 82

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_merge', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpxhvp8xat.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array_map('intval', $grades));\n    $grades\
    \ = array_map('array_filter', $grades);\n    $grades = array_map('array_map',\
    \ 'grade_to_letter', $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #1 ($array)\
    \ must be of type array, float given in /tmp/tmp6fbcbv9b.php:26\nStack trace:\n\
    #0 [internal function]: array_filter(4.0)\n#1 /tmp/tmp6fbcbv9b.php(26): array_map('array_filter',\
    \ Array)\n#2 /tmp/tmp6fbcbv9b.php(32): numerical_letter_grade(Array)\n#3 /tmp/tmp6fbcbv9b.php(36):\
    \ candidate(Array)\n#4 /tmp/tmp6fbcbv9b.php(44): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmp6fbcbv9b.php on line 26\n"
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_unique', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_diff', $grades);\n    $grades = array_map('array_intersect',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_diff',\
    \ $grades);\n    $grades = array_map('array_intersect', $grades);\n    $grades\
    \ = array_map('array_\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmp3ykfk95y.php
    on line 67

    '
  timestamp: 1659824569
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', array($grades));\n    $grades = array_map('intval',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_unique', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_merge', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_merge', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_unique',\
    \ $grades);\n    $grades = array_map('array_filter', $grades);\n    $grades =\
    \ array_map('array_map', $grades);\n    $grades = array_map('array_merge', $grades);\n\
    \    $grades = array_map('array_unique', $grades);\n    $grades = array_map('array_filter',\
    \ $grades);\n    $grades = array_map('array_map', $grades);\n    $grades = array_map('array_merge',\
    \ $grades);\n    $grades = array_map('array_unique', $grades);\n    $grades =\
    \ array_map('array_filter', $grades);\n    $grades = array_map('array_map', $grades);\n\
    \    $grades = array_map('array_merge', $grades);\n    $grades = array_map('array_\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "array_" in /tmp/tmpho0b3ogy.php
    on line 67

    '
  timestamp: 1659824570
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n//\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map('round', $grades);\n    $grades = array_filter($grades);\n\
    \    $grades = array_unique($grades);\n    $grades = array_map('intval', $grades);\n\
    \    $grades = array_filter($grades);\n    $grades = array_map('strval', $grades);\n\
    \    return $grades;\n}\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_10noc5.php:39\n\
    Stack trace:\n#0 /tmp/tmpa_10noc5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpa_10noc5.php\
    \ on line 39\n"
  timestamp: 1659824570
