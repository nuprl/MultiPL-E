language: php
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfvl3j_p.php:31\n\
    Stack trace:\n#0 /tmp/tmpvfvl3j_p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvfvl3j_p.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 1000) {\n        return false;\n   \
    \ }\n    if ($a < 1000) {\n        return true;\n    }\n    if ($a % 100 === 0)\
    \ {\n        return true;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n\
    \        return true;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 100 === 0 && $a % 1000 === 0) {\n \
    \       return false;\n    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvlsazgcn.php on line 131

    '
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) {\n        if ($a % 5 == 0) {\n            if ($a % 7 ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphr4w75dh.php:34\n\
    Stack trace:\n#0 /tmp/tmphr4w75dh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphr4w75dh.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qammxdi.php:33\n\
    Stack trace:\n#0 /tmp/tmp_qammxdi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_qammxdi.php\
    \ on line 33\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 2 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 3 !== 0) {\n        return false;\n    }\n    if ($a % 4\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 5 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 6 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 7 !== 0) {\n        return false;\n    }\n    if ($a % 8 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 9 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 10 !== 0) {\n        return false;\n    }\n    if ($a % 11\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 12 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 13 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 14 !== 0) {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 16 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 17 !== 0) {\n        return false;\n    }\n    if ($a % 18\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 19 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 20 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 21 !== 0) {\n        return false;\n    }\n    if ($a % 22 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 23 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 24 !== 0) {\n        return false;\n    }\n    if ($a % 25\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 26 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 27 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 28 !== 0) {\n        return false;\n    }\n    if ($a % 29 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 30 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 31 !== 0) {\n        return false;\n    }\n    if ($a % 32\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 33 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 34 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 35 !== 0) {\n        return false;\n    }\n    if ($a % 36 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 37 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 38 !== 0) {\n        return false;\n    }\n    if ($a % 39\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 40 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 41 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 42 !== 0) {\n        return false;\n    }\n    if ($a % 43 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 44 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 45 !== 0) {\n        return false;\n    }\n    if (\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoljup0yr.php on line 158

    '
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbg6f7zi.php:29\n\
    Stack trace:\n#0 /tmp/tmpjbg6f7zi.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjbg6f7zi.php\
    \ on line 29\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bx2z5et.php:37\n\
    Stack trace:\n#0 /tmp/tmp4bx2z5et.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bx2z5et.php\
    \ on line 37\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 3 === 1) {\n        return false;\n \
    \   }\n    if ($a % 3 === 2) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hrphjh3.php:39\n\
    Stack trace:\n#0 /tmp/tmp3hrphjh3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3hrphjh3.php\
    \ on line 39\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 1) {\n        return false;\n    }\n\
    \    if ($a % 2 !== 0) {\n        return false;\n    }\n    if ($a > 2) {\n  \
    \      return false;\n    }\n    if ($a % 3 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 3) {\n        return false;\n    }\n    if ($a % 4 !== 0)\
    \ {\n        return false;\n    }\n    if ($a > 4) {\n        return false;\n\
    \    }\n    if ($a % 5 !== 0) {\n        return false;\n    }\n    if ($a > 5)\
    \ {\n        return false;\n    }\n    if ($a % 6 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 6) {\n        return false;\n    }\n    if ($a % 7 !== 0)\
    \ {\n        return false;\n    }\n    if ($a > 7) {\n        return false;\n\
    \    }\n    if ($a % 8 !== 0) {\n        return false;\n    }\n    if ($a > 8)\
    \ {\n        return false;\n    }\n    if ($a % 9 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 9) {\n        return false;\n    }\n    if ($a % 10 !== 0)\
    \ {\n        return false;\n    }\n    if ($a > 10) {\n        return false;\n\
    \    }\n    if ($a % 11 !== 0) {\n        return false;\n    }\n    if ($a > 11)\
    \ {\n        return false;\n    }\n    if ($a % 12 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 12) {\n        return false;\n    }\n    if ($a % 13 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 13) {\n        return false;\n\
    \    }\n    if ($a % 14 !== 0) {\n        return false;\n    }\n    if ($a > 14)\
    \ {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 15) {\n        return false;\n    }\n    if ($a % 16 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 16) {\n        return false;\n\
    \    }\n    if ($a % 17 !== 0) {\n        return false;\n    }\n    if ($a > 17)\
    \ {\n        return false;\n    }\n    if ($a % 18 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 18) {\n        return false;\n    }\n    if ($a % 19 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 19) {\n        return false;\n\
    \    }\n    if ($a % 20 !== 0) {\n        return false;\n    }\n    if ($a > 20)\
    \ {\n        return false;\n    }\n    if ($a % 21 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 21) {\n        return false;\n    }\n    if ($a % 22 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 22) {\n        return false;\n\
    \    }\n    if ($a % 23 !== 0) {\n        return false;\n    }\n    if ($a > 23)\
    \ {\n        return false;\n    }\n    if (\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpz65s2vl6.php on line 161

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xi4j93q.php:31\n\
    Stack trace:\n#0 /tmp/tmp9xi4j93q.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9xi4j93q.php\
    \ on line 31\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bx2z5et.php:37\n\
    Stack trace:\n#0 /tmp/tmp4bx2z5et.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bx2z5et.php\
    \ on line 37\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1kpjzij.php:33\n\
    Stack trace:\n#0 /tmp/tmp_1kpjzij.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_1kpjzij.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpfm61it4f.php
    on line 122

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 1 !== 0)\n        return\
    \ false;\n    if ($a === 1)\n        return true;\n    if ($a === 2)\n       \
    \ return true;\n    if ($a === 3)\n        return true;\n    if ($a === 4)\n \
    \       return true;\n    if ($a === 5)\n        return true;\n    if ($a ===\
    \ 6)\n        return true;\n    if ($a === 7)\n        return true;\n    if ($a\
    \ === 8)\n        return true;\n    if ($a === 9)\n        return true;\n    if\
    \ ($a === 10)\n        return true;\n    if ($a === 11)\n        return true;\n\
    \    if ($a === 12)\n        return true;\n    if ($a === 13)\n        return\
    \ true;\n    if ($a === 14)\n        return true;\n    if ($a === 15)\n      \
    \  return true;\n    if ($a === 16)\n        return true;\n    if ($a === 17)\n\
    \        return true;\n    if ($a === 18)\n        return true;\n    if ($a ===\
    \ 19)\n        return true;\n    if ($a === 20)\n        return true;\n    if\
    \ ($a === 21)\n        return true;\n    if ($a === 22)\n        return true;\n\
    \    if ($a === 23)\n        return true;\n    if ($a === 24)\n        return\
    \ true;\n    if ($a === 25)\n        return true;\n    if ($a === 26)\n      \
    \  return true;\n    if ($a === 27)\n        return true;\n    if ($a === 28)\n\
    \        return true;\n    if ($a === 29)\n        return true;\n    if ($a ===\
    \ 30)\n        return true;\n    if ($a === 31)\n        return true;\n    if\
    \ ($a === 32)\n        return true;\n    if ($a === 33)\n        return true;\n\
    \    if ($a === 34)\n        return true;\n    if ($a === 35)\n        return\
    \ true;\n    if ($a === 36)\n        return true;\n    if ($a === 37)\n      \
    \  return true;\n    if ($a === 38)\n        return true;\n    if ($a === 39)\n\
    \        return true;\n    if ($a === 40)\n        return true;\n    if ($a ===\
    \ 41)\n        return true;\n    if ($a === 42)\n        return true;\n    if\
    \ ($a === 43)\n        return true;\n    if ($a === 44)\n        return true;\n\
    \    if ($a === 45)\n        return true;\n    if ($a === 46)\n        return\
    \ true;\n    if ($a === 47)\n        return true;\n    if ($a === 48)\n      \
    \  return true;\n    if ($a === 49)\n        return true;\n    if ($a === 50)\n\
    \        return true;\n    if ($a === 51)\n        return true;\n    if ($a ===\
    \ 52)\n        return true;\n    if ($a === 53)\n        return true;\n    if\
    \ ($a === 54)\n        return true;\n    if ($a === 55)\n        return true;\n\
    \    if ($a === 56)\n        return true;\n    if ($a === 57)\n        return\
    \ true;\n    if ($a === 58)\n        return true;\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 18 in /tmp/tmpe0jjrgkp.php on line 155

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a) == 0;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mb3j7j9.php:28\n\
    Stack trace:\n#0 /tmp/tmp4mb3j7j9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4mb3j7j9.php\
    \ on line 28\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qammxdi.php:33\n\
    Stack trace:\n#0 /tmp/tmp_qammxdi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_qammxdi.php\
    \ on line 33\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 9 === 0) {\n        return false;\n \
    \   }\n    if ($a < 27) {\n        return true;\n    }\n    if ($a % 27 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 81 === 0) {\n        return false;\n    }\n    if ($a < 243)\
    \ {\n        return true;\n    }\n    if ($a % 243 === 0) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 729 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 3105) {\n        return true;\n\
    \    }\n    if ($a % 3105 === 0) {\n        return true;\n    }\n    if ($a <\
    \ 7105) {\n        return false;\n    }\n    if ($a % 7105 === 0) {\n        return\
    \ false;\n    }\n    if ($a < 10253) {\n        return true;\n    }\n    if ($a\
    \ % 10253 === 0) {\n        return true;\n    }\n    if ($a < 15253) {\n     \
    \   return false;\n    }\n    if ($a % 15253 === 0) {\n        return false;\n\
    \    }\n    if ($a < 20351) {\n        return true;\n    }\n    if ($a % 20351\
    \ === 0) {\n        return true;\n    }\n    if ($a < 40737) {\n        return\
    \ false;\n    }\n    if ($a % 40737 === 0) {\n        return false;\n    }\n \
    \   if ($a < 81919) {\n        return true;\n    }\n    if ($a % 81919 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 163839) {\n        return false;\n\
    \    }\n    if ($a % 163839 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 327671) {\n        return true;\n    }\n    if ($a % 327671 === 0) {\n   \
    \     return true;\n    }\n    if ($a < 655371) {\n        return false;\n   \
    \ }\n    if ($a % 655371 === 0) {\n        return false;\n    }\n    if ($a <\
    \ 131071) {\n        return true;\n    }\n    if ($a % 131071 === 0) {\n     \
    \   return true;\n    }\n    if ($a < 262143) {\n        return false;\n    }\n\
    \    if ($a % 262143 === 0) {\n        return false;\n    }\n    if ($a < 524287)\
    \ {\n        return true;\n    }\n    if ($a % 524287 === 0) {\n        return\
    \ true;\n    }\n    if ($a < 1048575) {\n        return false;\n    }\n    if\
    \ ($a % 1048575 === 0) {\n        return false;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpajs1rg7s.php on line 146

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp709ok0_k.php:34\n\
    Stack trace:\n#0 /tmp/tmp709ok0_k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp709ok0_k.php\
    \ on line 34\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi40l35dp.php:30\n\
    Stack trace:\n#0 /tmp/tmpi40l35dp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi40l35dp.php\
    \ on line 30\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    $b = $a / 2;\n    return iscube($b) && iscube($b);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.5 to int loses precision\
    \ in /tmp/tmp9mofxgy3.php on line 22\n\nDeprecated: Implicit conversion from float\
    \ 0.5 to int loses precision in /tmp/tmp9mofxgy3.php on line 22\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp9mofxgy3.php:35\nStack trace:\n\
    #0 /tmp/tmp9mofxgy3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9mofxgy3.php\
    \ on line 35\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5756ofcr.php:32\n\
    Stack trace:\n#0 /tmp/tmp5756ofcr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5756ofcr.php\
    \ on line 32\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyjsxxnmn.php
    on line 122

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a % $a == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e0kov_z.php:33\n\
    Stack trace:\n#0 /tmp/tmp2e0kov_z.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2e0kov_z.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    if ($a\
    \ % $a === 0) {\n                        if ($a % $a === 0) {\n              \
    \              if ($a % $a === 0) {\n                                if ($a %\
    \ $a === 0) {\n                                    if ($a % $a === 0) {\n    \
    \                                    if ($a % $a === 0) {\n                  \
    \                          if ($a % $a === 0) {\n                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                  if ($a % $a === 0) {\n                                    \
    \                    if ($a % $a === 0) {\n                                  \
    \                          if ($a % $a === 0) {\n                            \
    \                                    if ($a % $a === 0) {\n                  \
    \                                                  if ($a % $a === 0) {\n    \
    \                                                                    if ($a %\
    \ $a === 0) {\n                                                              \
    \              if ($a % $a === 0) {\n                                        \
    \                                        if ($a % $a === 0) {\n              \
    \                                                                      if ($a\
    \ % $a === 0) {\n                                                            \
    \                            if ($a % $a === 0) {\n                          \
    \                                                                  if ($a % $a\
    \ === 0) {\n                                                                 \
    \                               if ($a % $a === 0) {\n                       \
    \                                                                            \
    \ if ($a % $a === 0) {\n                                                     \
    \                                                   if ($a % $a === 0) {\n   \
    \                                                                            \
    \                             if ($a % $a === 0) {\n                         \
    \                                                                            \
    \                           if ($a % $a === 0) {\n                           \
    \                                                                            \
    \                             if ($a % $a === 0) {\n                         \
    \                                                                            \
    \                                   if ($a % $a === 0) {\n                   \
    \                                                                            \
    \                                             if ($a % $a === 0) {\n         \
    \                                                                            \
    \                                                           if ($a % $a === 0)\
    \ {\n                                                                        \
    \                                                                            if\
    \ ($a % $a === 0) {\n                                                        \
    \                                                                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                                                                            \
    \                                              if ($a % $a === 0) {\n        \
    \                                                                            \
    \                                                                            if\
    \ ($a % $a === 0) {\n                                                        \
    \                                                                            \
    \                                if ($a % $a === 0) {\n                      \
    \                                                                            \
    \                                                                      if ($a\
    \ % $a === 0) {\n                                                            \
    \                                                                            \
    \                                    if ($a % $a === 0) {\n                  \
    \                                                                            \
    \                                                                            \
    \                                      if ($a % $a === 0) {\n                \
    \                                                                            \
    \                                                                            \
    \                            if ($a % $a === 0) {\n                          \
    \                                                                            \
    \                                                                            \
    \                      if ($a % $a === 0) {\n                                \
    \                                                                            \
    \                                                                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                                                                            \
    \                                                                            \
    \          if ($a % $a === 0) {\n                                            \
    \                                                                            \
    \                                                                            \
    \    if ($a % $a === 0) {\n                                                  \
    \                                                                            \
    \                                                                            \
    \  if ($a % $a === 0) {\n                                                    \
    \                                                                            \
    \                                                                            \
    \    if ($a % $a === 0) {\n                                                  \
    \                                                                            \
    \                                                                            \
    \          if ($a % $a === 0) {\n                                            \
    \                                                                            \
    \                                                                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                                                                            \
    \                                                                            \
    \                                  if ($a % $a === 0) {\n                    \
    \                                                                            \
    \                                                                            \
    \                                                    if ($a % $a === 0) {\n  \
    \                                                                            \
    \                                                                            \
    \                                      \nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 69 in /tmp/tmp615mt2_k.php on line 86

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                if ($a % $a == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15cssrh8.php:37\n\
    Stack trace:\n#0 /tmp/tmp15cssrh8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp15cssrh8.php\
    \ on line 37\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51htfa0h.php:33\n\
    Stack trace:\n#0 /tmp/tmp51htfa0h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp51htfa0h.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 9 === 0) {\n        return true;\n\
    \    }\n    if ($a % 11 === 0) {\n        return true;\n    }\n    if ($a % 13\
    \ === 0) {\n        return true;\n    }\n    if ($a % 15 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 17 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 19 === 0) {\n        return true;\n    }\n    if ($a % 21 === 0) {\n \
    \       return true;\n    }\n    if ($a % 23 === 0) {\n        return true;\n\
    \    }\n    if ($a % 25 === 0) {\n        return true;\n    }\n    if ($a % 27\
    \ === 0) {\n        return true;\n    }\n    if ($a % 29 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 31 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 33 === 0) {\n        return true;\n    }\n    if ($a % 35 === 0) {\n \
    \       return true;\n    }\n    if ($a % 37 === 0) {\n        return true;\n\
    \    }\n    if ($a % 39 === 0) {\n        return true;\n    }\n    if ($a % 41\
    \ === 0) {\n        return true;\n    }\n    if ($a % 43 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 45 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 47 === 0) {\n        return true;\n    }\n    if ($a % 49 === 0) {\n \
    \       return true;\n    }\n    if ($a % 51 === 0) {\n        return true;\n\
    \    }\n    if ($a % 53 === 0) {\n        return true;\n    }\n    if ($a % 55\
    \ === 0) {\n        return true;\n    }\n    if ($a % 57 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 59 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 61 === 0) {\n        return true;\n    }\n    if ($a % 63 === 0) {\n \
    \       return true;\n    }\n    if ($a % 65 === 0) {\n        return true;\n\
    \    }\n    if ($a % 67 === 0) {\n        return true;\n    }\n    if ($a % 69\
    \ === 0) {\n        return true;\n    }\n    if ($a % 71 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 73 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 75 === 0) {\n        return true;\n    }\n    if ($a % 77 === 0) {\n \
    \       return true;\n    }\n    if ($a % 79 === 0) {\n        return true;\n\
    \    }\n    if ($a % 81 === 0) {\n        return true;\n    }\n    if ($a % 83\
    \ === 0) {\n        return true;\n    }\n    if ($a % 85 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 87 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 89 === 0) {\n        return true;\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 154 in /tmp/tmpfrse3o_6.php on line 171

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) return false;\n    if ($a % 2 != 0) return false;\n    if ($a\
    \ % 3 == 0) return false;\n    if ($a % 5 == 0) return false;\n    if ($a % 7\
    \ == 0) return false;\n    if ($a % 11 == 0) return false;\n    if ($a % 13 ==\
    \ 0) return false;\n    if ($a % 17 == 0) return false;\n    if ($a % 19 == 0)\
    \ return false;\n    if ($a % 23 == 0) return false;\n    if ($a % 29 == 0) return\
    \ false;\n    if ($a % 31 == 0) return false;\n    if ($a % 37 == 0) return false;\n\
    \    if ($a % 41 == 0) return false;\n    if ($a % 43 == 0) return false;\n  \
    \  if ($a % 47 == 0) return false;\n    if ($a % 53 == 0) return false;\n    if\
    \ ($a % 59 == 0) return false;\n    if ($a % 61 == 0) return false;\n    if ($a\
    \ % 67 == 0) return false;\n    if ($a % 71 == 0) return false;\n    if ($a %\
    \ 73 == 0) return false;\n    if ($a % 79 == 0) return false;\n    if ($a % 83\
    \ == 0) return false;\n    if ($a % 89 == 0) return false;\n    if ($a % 97 ==\
    \ 0) return false;\n    if ($a % 103 == 0) return false;\n    if ($a % 109 ==\
    \ 0) return false;\n    if ($a % 113 == 0) return false;\n    if ($a % 121 ==\
    \ 0) return false;\n    if ($a % 127 == 0) return false;\n    if ($a % 131 ==\
    \ 0) return false;\n    if ($a % 137 == 0) return false;\n    if ($a % 143 ==\
    \ 0) return false;\n    if ($a % 149 == 0) return false;\n    if ($a % 153 ==\
    \ 0) return false;\n    if ($a % 157 == 0) return false;\n    if ($a % 161 ==\
    \ 0) return false;\n    if ($a % 167 == 0) return false;\n    if ($a % 173 ==\
    \ 0) return false;\n    if ($a % 179 == 0) return false;\n    if ($a % 183 ==\
    \ 0) return false;\n    if ($a % 187 == 0) return false;\n    if ($a % 191 ==\
    \ 0) return false;\n    if ($a % 193 == 0) return false;\n    if ($a % 197 ==\
    \ 0) return false;\n    if ($a % 201 == 0) return false;\n    if ($a % 205 ==\
    \ 0) return false;\n    if ($a % 209 == 0) return false;\n    if ($a % 213 ==\
    \ 0) return false;\n    if ($a % 217 == 0) return false;\n    if ($a % 22\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpbbs0t71i.php
    on line 71

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return false;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return false;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return false;\n    if ($a % 17 == 0)\n       \
    \ return false;\n    if ($a % 19 == 0)\n        return false;\n    if ($a % 21\
    \ == 0)\n        return false;\n    if ($a % 23 == 0)\n        return false;\n\
    \    if ($a % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n       \
    \ return false;\n    if ($a % 29 == 0)\n        return false;\n    if ($a % 31\
    \ == 0)\n        return false;\n    if ($a % 33 == 0)\n        return false;\n\
    \    if ($a % 35 == 0)\n        return false;\n    if ($a % 37 == 0)\n       \
    \ return false;\n    if ($a % 39 == 0)\n        return false;\n    if ($a % 41\
    \ == 0)\n        return false;\n    if ($a % 43 == 0)\n        return false;\n\
    \    if ($a % 45 == 0)\n        return false;\n    if ($a % 47 == 0)\n       \
    \ return false;\n    if ($a % 49 == 0)\n        return false;\n    if ($a % 51\
    \ == 0)\n        return false;\n    if ($a % 53 == 0)\n        return false;\n\
    \    if ($a % 55 == 0)\n        return false;\n    if ($a % 57 == 0)\n       \
    \ return false;\n    if ($a % 59 == 0)\n        return false;\n    if ($a % 61\
    \ == 0)\n        return false;\n    if ($a % 63 == 0)\n        return false;\n\
    \    if ($a % 65 == 0)\n        return false;\n    if ($a % 67 == 0)\n       \
    \ return false;\n    if ($a % 69 == 0)\n        return false;\n    if ($a % 71\
    \ == 0)\n        return false;\n    if ($a % 73 == 0)\n        return false;\n\
    \    if ($a % 75 == 0)\n        return false;\n    if ($a % 77 == 0)\n       \
    \ return false;\n    if ($a % 79 == 0)\n        return false;\n    if ($a % 81\
    \ == 0)\n        return false;\n    if ($a % 83 == 0)\n        return false;\n\
    \    if ($a % 85 == 0)\n        return false;\n    if ($a % 87 == 0)\n       \
    \ return false;\n    if ($a % 89 == 0)\n        return false;\n    if ($a % 91\
    \ == 0)\n        return false;\n    if ($a % 93 == 0)\n        return false;\n\
    \    if ($a % 95 == 0)\n        return false;\n    if ($a % 97 == 0)\n       \
    \ return false;\n    if ($a % 99 == 0)\n        return false;\n    if ($a % 101\
    \ == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpmwe_sgsa.php
    on line 122

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bx2z5et.php:37\n\
    Stack trace:\n#0 /tmp/tmp4bx2z5et.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bx2z5et.php\
    \ on line 37\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 3 === 1) {\n        return false;\n \
    \   }\n    if ($a % 3 === 2) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14z3nwhn.php:39\n\
    Stack trace:\n#0 /tmp/tmp14z3nwhn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp14z3nwhn.php\
    \ on line 39\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a % $a == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e0kov_z.php:33\n\
    Stack trace:\n#0 /tmp/tmp2e0kov_z.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2e0kov_z.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 1 !== 0 || $a < 0 || $a > 180) {\n        return false;\n    }\n\
    \    if ($a === 1) {\n        return true;\n    }\n    if ($a === 2) {\n     \
    \   return true;\n    }\n    if ($a === 3) {\n        return true;\n    }\n  \
    \  if ($a === 4) {\n        return true;\n    }\n    if ($a === 5) {\n       \
    \ return true;\n    }\n    if ($a === 6) {\n        return true;\n    }\n    if\
    \ ($a === 7) {\n        return true;\n    }\n    if ($a === 8) {\n        return\
    \ true;\n    }\n    if ($a === 9) {\n        return true;\n    }\n    if ($a ===\
    \ 10) {\n        return true;\n    }\n    if ($a === 11) {\n        return true;\n\
    \    }\n    if ($a === 12) {\n        return true;\n    }\n    if ($a === 13)\
    \ {\n        return true;\n    }\n    if ($a === 14) {\n        return true;\n\
    \    }\n    if ($a === 15) {\n        return true;\n    }\n    if ($a === 16)\
    \ {\n        return true;\n    }\n    if ($a === 17) {\n        return true;\n\
    \    }\n    if ($a === 18) {\n        return true;\n    }\n    if ($a === 19)\
    \ {\n        return true;\n    }\n    if ($a === 20) {\n        return true;\n\
    \    }\n    if ($a === 21) {\n        return true;\n    }\n    if ($a === 22)\
    \ {\n        return true;\n    }\n    if ($a === 23) {\n        return true;\n\
    \    }\n    if ($a === 24) {\n        return true;\n    }\n    if ($a === 25)\
    \ {\n        return true;\n    }\n    if ($a === 26) {\n        return true;\n\
    \    }\n    if ($a === 27) {\n        return true;\n    }\n    if ($a === 28)\
    \ {\n        return true;\n    }\n    if ($a === 29) {\n        return true;\n\
    \    }\n    if ($a === 30) {\n        return true;\n    }\n    if ($a === 31)\
    \ {\n        return true;\n    }\n    if ($a === 32) {\n        return true;\n\
    \    }\n    if ($a === 33) {\n        return true;\n    }\n    if ($a === 34)\
    \ {\n        return true;\n    }\n    if ($a === 35) {\n        return true;\n\
    \    }\n    if ($a === 36) {\n        return true;\n    }\n    if ($a === 37)\
    \ {\n        return true;\n    }\n    if ($a === 38) {\n        return true;\n\
    \    }\n    if ($a === 39) {\n        return true;\n    }\n    if ($a === 40)\
    \ {\n        return true;\n    }\n    if ($a === 41) {\n        return true;\n\
    \    }\n    if ($a === 42) {\n        return true;\n    }\n    if ($a === 43)\
    \ {\n        return true;\n    }\n    if ($a === 44) {\n        return true;\n\
    \    }\n    if ($a === 45) {\n        return true;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 18 in /tmp/tmp138tfiyr.php on line 173

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    $a = $a / 2;\n    return iscube($a) || iscube($a);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.5 to int loses precision\
    \ in /tmp/tmpjahbnpm3.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpjahbnpm3.php:35\nStack trace:\n#0 /tmp/tmpjahbnpm3.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjahbnpm3.php on line 35\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return false;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return false;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return false;\n    if ($a % 17 == 0)\n       \
    \ return false;\n    if ($a % 19 == 0)\n        return false;\n    if ($a % 21\
    \ == 0)\n        return false;\n    if ($a % 23 == 0)\n        return false;\n\
    \    if ($a % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n       \
    \ return false;\n    if ($a % 29 == 0)\n        return false;\n    if ($a % 31\
    \ == 0)\n        return false;\n    if ($a % 33 == 0)\n        return false;\n\
    \    if ($a % 35 == 0)\n        return false;\n    if ($a % 37 == 0)\n       \
    \ return false;\n    if ($a % 39 == 0)\n        return false;\n    if ($a % 41\
    \ == 0)\n        return false;\n    if ($a % 43 == 0)\n        return false;\n\
    \    if ($a % 45 == 0)\n        return false;\n    if ($a % 47 == 0)\n       \
    \ return false;\n    if ($a % 49 == 0)\n        return false;\n    if ($a % 51\
    \ == 0)\n        return false;\n    if ($a % 53 == 0)\n        return false;\n\
    \    if ($a % 55 == 0)\n        return false;\n    if ($a % 57 == 0)\n       \
    \ return false;\n    if ($a % 59 == 0)\n        return false;\n    if ($a % 61\
    \ == 0)\n        return false;\n    if ($a % 63 == 0)\n        return false;\n\
    \    if ($a % 65 == 0)\n        return false;\n    if ($a % 67 == 0)\n       \
    \ return false;\n    if ($a % 69 == 0)\n        return false;\n    if ($a % 71\
    \ == 0)\n        return false;\n    if ($a % 73 == 0)\n        return false;\n\
    \    if ($a % 75 == 0)\n        return false;\n    if ($a % 77 == 0)\n       \
    \ return false;\n    if ($a % 79 == 0)\n        return false;\n    if ($a % 81\
    \ == 0)\n        return false;\n    if ($a % 83 == 0)\n        return false;\n\
    \    if ($a % 85 == 0)\n        return false;\n    if ($a % 87 == 0)\n       \
    \ return false;\n    if ($a % 89 == 0)\n        return false;\n    if ($a % 91\
    \ == 0)\n        return false;\n    if ($a % 93 == 0)\n        return false;\n\
    \    if ($a % 95 == 0)\n        return false;\n    if ($a % 97 == 0)\n       \
    \ return false;\n    if ($a % 99 == 0)\n        return false;\n    if ($a % 101\
    \ == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp6udcikp9.php
    on line 122

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0 && $a % $a === $a) {\n        return true;\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpma17no83.php:30\n\
    Stack trace:\n#0 /tmp/tmpma17no83.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpma17no83.php\
    \ on line 30\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 9 === 0) {\n        return false;\n \
    \   }\n    if ($a < 27) {\n        return true;\n    }\n    if ($a % 27 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 81 === 0) {\n        return false;\n    }\n    if ($a < 243)\
    \ {\n        return true;\n    }\n    if ($a % 243 === 0) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 729 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 3119) {\n        return true;\n\
    \    }\n    if ($a % 3119 !== 0) {\n        return false;\n    }\n    if ($a <\
    \ 7393) {\n        return false;\n    }\n    if ($a % 7393 === 0) {\n        return\
    \ false;\n    }\n    if ($a < 13691) {\n        return true;\n    }\n    if ($a\
    \ % 13691 === 0) {\n        return false;\n    }\n    if ($a < 33423) {\n    \
    \    return true;\n    }\n    if ($a % 33423 === 0) {\n        return false;\n\
    \    }\n    if ($a < 80123) {\n        return false;\n    }\n    if ($a % 80123\
    \ === 0) {\n        return false;\n    }\n    if ($a < 242783) {\n        return\
    \ true;\n    }\n    if ($a % 242783 === 0) {\n        return false;\n    }\n \
    \   if ($a < 495577) {\n        return false;\n    }\n    if ($a % 495577 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 927393) {\n        return false;\n\
    \    }\n    if ($a % 927393 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 2439993) {\n        return true;\n    }\n    if ($a % 2439993 === 0) {\n \
    \       return false;\n    }\n    if ($a < 4959027) {\n        return false;\n\
    \    }\n    if ($a % 4959027 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 927393) {\n        return false;\n    }\n    if ($a % 927393 === 0) {\n  \
    \      return false;\n    }\n    if ($a < 2439993) {\n        return true;\n \
    \   }\n    if ($a % 2439993 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 4959027) {\n        return false;\n    }\n    if ($a % 4959027 === 0) {\n\
    \        return false;\n    }\n    if ($a < 927\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpbi0e8azj.php
    on line 140

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 1 !== 0)\n        return\
    \ false;\n    if ($a === 1)\n        return true;\n    if ($a === 2)\n       \
    \ return true;\n    if ($a === 3)\n        return true;\n    if ($a === 4)\n \
    \       return true;\n    if ($a === 5)\n        return true;\n    if ($a ===\
    \ 6)\n        return true;\n    if ($a === 7)\n        return true;\n    if ($a\
    \ === 8)\n        return true;\n    if ($a === 9)\n        return true;\n    if\
    \ ($a === 10)\n        return true;\n    if ($a === 11)\n        return true;\n\
    \    if ($a === 12)\n        return true;\n    if ($a === 13)\n        return\
    \ true;\n    if ($a === 14)\n        return true;\n    if ($a === 15)\n      \
    \  return true;\n    if ($a === 16)\n        return true;\n    if ($a === 17)\n\
    \        return true;\n    if ($a === 18)\n        return true;\n    if ($a ===\
    \ 19)\n        return true;\n    if ($a === 20)\n        return true;\n    if\
    \ ($a === 21)\n        return true;\n    if ($a === 22)\n        return true;\n\
    \    if ($a === 23)\n        return true;\n    if ($a === 24)\n        return\
    \ true;\n    if ($a === 25)\n        return true;\n    if ($a === 26)\n      \
    \  return true;\n    if ($a === 27)\n        return true;\n    if ($a === 28)\n\
    \        return true;\n    if ($a === 29)\n        return true;\n    if ($a ===\
    \ 30)\n        return true;\n    if ($a === 31)\n        return true;\n    if\
    \ ($a === 32)\n        return true;\n    if ($a === 33)\n        return true;\n\
    \    if ($a === 34)\n        return true;\n    if ($a === 35)\n        return\
    \ true;\n    if ($a === 36)\n        return true;\n    if ($a === 37)\n      \
    \  return true;\n    if ($a === 38)\n        return true;\n    if ($a === 39)\n\
    \        return true;\n    if ($a === 40)\n        return true;\n    if ($a ===\
    \ 41)\n        return true;\n    if ($a === 42)\n        return true;\n    if\
    \ ($a === 43)\n        return true;\n    if ($a === 44)\n        return true;\n\
    \    if ($a === 45)\n        return true;\n    if ($a === 46)\n        return\
    \ true;\n    if ($a === 47)\n        return true;\n    if ($a === 48)\n      \
    \  return true;\n    if ($a === 49)\n        return true;\n    if ($a === 50)\n\
    \        return true;\n    if ($a === 51)\n        return true;\n    if ($a ===\
    \ 52)\n        return true;\n    if ($a === 53)\n        return true;\n    if\
    \ ($a === 54)\n        return true;\n    if ($a === 55)\n        return true;\n\
    \    if ($a === 56)\n        return true;\n    if ($a === 57)\n        return\
    \ true;\n    if ($a === 58)\n        return true;\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 18 in /tmp/tmpe0jjrgkp.php on line 155

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfc4ns77d.php:32\n\
    Stack trace:\n#0 /tmp/tmpfc4ns77d.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfc4ns77d.php\
    \ on line 32\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbmarljq.php:35\n\
    Stack trace:\n#0 /tmp/tmprbmarljq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprbmarljq.php\
    \ on line 35\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                if ($a % $a == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15cssrh8.php:37\n\
    Stack trace:\n#0 /tmp/tmp15cssrh8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp15cssrh8.php\
    \ on line 37\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 9 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlsakn9s.php:33\n\
    Stack trace:\n#0 /tmp/tmpvlsakn9s.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvlsakn9s.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 9 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlsakn9s.php:33\n\
    Stack trace:\n#0 /tmp/tmpvlsakn9s.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvlsakn9s.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    $a = $a % 3;\n    if ($a\
    \ == 0) {\n        return true;\n    }\n    if ($a == 1) {\n        return true;\n\
    \    }\n    if ($a == 2) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6eum6daq.php:41\n\
    Stack trace:\n#0 /tmp/tmp6eum6daq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6eum6daq.php\
    \ on line 41\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                if ($a % $a == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15cssrh8.php:37\n\
    Stack trace:\n#0 /tmp/tmp15cssrh8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp15cssrh8.php\
    \ on line 37\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n \
    \       return false;\n    }\n    if ($a % 2 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 3 !== 0) {\n        return false;\n    }\n    if ($a % 4\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 5 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 6 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 7 !== 0) {\n        return false;\n    }\n    if ($a % 8 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 9 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 10 !== 0) {\n        return false;\n    }\n    if ($a % 11\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 12 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 13 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 14 !== 0) {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 16 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 17 !== 0) {\n        return false;\n    }\n    if ($a % 18\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 19 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 20 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 21 !== 0) {\n        return false;\n    }\n    if ($a % 22 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 23 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 24 !== 0) {\n        return false;\n    }\n    if ($a % 25\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 26 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 27 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 28 !== 0) {\n        return false;\n    }\n    if ($a % 29 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 30 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 31 !== 0) {\n        return false;\n    }\n    if ($a % 32\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 33 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 34 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 35 !== 0) {\n        return false;\n    }\n    if ($a % 36 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 37 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 38 !== 0) {\n        return false;\n    }\n    if ($a % 39\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 40 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 41 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 42 !== 0) {\n        return false;\n    }\n    if ($a % 43 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 44 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 45 !== 0) {\n        return false;\n    }\n    if (\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpvueztrj2.php on line 158

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    $b = $a / 2;\n    return iscube($b) && iscube($b);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.5 to int loses precision\
    \ in /tmp/tmpzgarbel5.php on line 22\n\nDeprecated: Implicit conversion from float\
    \ 0.5 to int loses precision in /tmp/tmpzgarbel5.php on line 22\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzgarbel5.php:34\nStack trace:\n\
    #0 /tmp/tmpzgarbel5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzgarbel5.php\
    \ on line 34\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 !== 0) {\n        return false;\n    }\n    if ($a < 5) {\n  \
    \      return true;\n    }\n    if ($a % 5 !== 0) {\n        return false;\n \
    \   }\n    if ($a < 7) {\n        return true;\n    }\n    if ($a % 7 !== 0) {\n\
    \        return false;\n    }\n    if ($a < 9) {\n        return true;\n    }\n\
    \    if ($a % 9 !== 0) {\n        return false;\n    }\n    if ($a < 11) {\n \
    \       return true;\n    }\n    if ($a % 11 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 13) {\n        return true;\n    }\n    if ($a % 13 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 15) {\n        return true;\n\
    \    }\n    if ($a % 15 !== 0) {\n        return false;\n    }\n    if ($a < 17)\
    \ {\n        return true;\n    }\n    if ($a % 17 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 19) {\n        return true;\n    }\n    if ($a % 19 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 21) {\n        return true;\n\
    \    }\n    if ($a % 21 !== 0) {\n        return false;\n    }\n    if ($a < 23)\
    \ {\n        return true;\n    }\n    if ($a % 23 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 25) {\n        return true;\n    }\n    if ($a % 25 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 27) {\n        return true;\n\
    \    }\n    if ($a % 27 !== 0) {\n        return false;\n    }\n    if ($a < 29)\
    \ {\n        return true;\n    }\n    if ($a % 29 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 31) {\n        return true;\n    }\n    if ($a % 31 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 33) {\n        return true;\n\
    \    }\n    if ($a % 33 !== 0) {\n        return false;\n    }\n    if ($a < 35)\
    \ {\n        return true;\n    }\n    if ($a % 35 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 37) {\n        return true;\n    }\n    if ($a % 37 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 39) {\n        return true;\n\
    \    }\n    if ($a % 39 !== 0) {\n        return false;\n    }\n    if ($a < 41)\
    \ {\n        return true;\n    }\n    if ($a % 41 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 43) {\n        return true;\n    }\n    if ($a % 43 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 45) {\n        return true;\n\
    \    }\n    if ($a % 45 !== 0) {\n        return false;\n    }\n    if ($a \n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp7rhyn3rp.php
    on line 158

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmrqn64k.php:35\n\
    Stack trace:\n#0 /tmp/tmpvmrqn64k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvmrqn64k.php\
    \ on line 35\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4yig7lt.php:27\n\
    Stack trace:\n#0 /tmp/tmpa4yig7lt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa4yig7lt.php\
    \ on line 27\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bx2z5et.php:37\n\
    Stack trace:\n#0 /tmp/tmp4bx2z5et.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bx2z5et.php\
    \ on line 37\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoir_c1d1.php:42\n\
    Stack trace:\n#0 /tmp/tmpoir_c1d1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpoir_c1d1.php\
    \ on line 42\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwkvqb6h.php:28\n\
    Stack trace:\n#0 /tmp/tmpgwkvqb6h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgwkvqb6h.php\
    \ on line 28\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) return false;\n    if ($a % 2 === 0) return false;\n    if ($a\
    \ % 3 === 0) return false;\n    if ($a % 5 === 0) return false;\n    if ($a %\
    \ 7 === 0) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8ne0_5.php:34\n\
    Stack trace:\n#0 /tmp/tmp0o8ne0_5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0o8ne0_5.php\
    \ on line 34\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwkvqb6h.php:28\n\
    Stack trace:\n#0 /tmp/tmpgwkvqb6h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgwkvqb6h.php\
    \ on line 28\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n \
    \       return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n \
    \   }\n    if ($a % 7 === 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq69sbcba.php:39\n\
    Stack trace:\n#0 /tmp/tmpq69sbcba.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpq69sbcba.php\
    \ on line 39\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 !== 0) {\n        return false;\n    }\n    if ($a < 5) {\n  \
    \      return true;\n    }\n    if ($a % 5 !== 0) {\n        return false;\n \
    \   }\n    if ($a < 7) {\n        return true;\n    }\n    if ($a % 7 !== 0) {\n\
    \        return false;\n    }\n    if ($a < 9) {\n        return true;\n    }\n\
    \    if ($a % 9 !== 0) {\n        return false;\n    }\n    if ($a < 11) {\n \
    \       return true;\n    }\n    if ($a % 11 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 13) {\n        return true;\n    }\n    if ($a % 13 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 15) {\n        return true;\n\
    \    }\n    if ($a % 15 !== 0) {\n        return false;\n    }\n    if ($a < 17)\
    \ {\n        return true;\n    }\n    if ($a % 17 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 19) {\n        return true;\n    }\n    if ($a % 19 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 21) {\n        return true;\n\
    \    }\n    if ($a % 21 !== 0) {\n        return false;\n    }\n    if ($a < 23)\
    \ {\n        return true;\n    }\n    if ($a % 23 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 25) {\n        return true;\n    }\n    if ($a % 25 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 27) {\n        return true;\n\
    \    }\n    if ($a % 27 !== 0) {\n        return false;\n    }\n    if ($a < 29)\
    \ {\n        return true;\n    }\n    if ($a % 29 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 31) {\n        return true;\n    }\n    if ($a % 31 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 33) {\n        return true;\n\
    \    }\n    if ($a % 33 !== 0) {\n        return false;\n    }\n    if ($a < 35)\
    \ {\n        return true;\n    }\n    if ($a % 35 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 37) {\n        return true;\n    }\n    if ($a % 37 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 39) {\n        return true;\n\
    \    }\n    if ($a % 39 !== 0) {\n        return false;\n    }\n    if ($a < 41)\
    \ {\n        return true;\n    }\n    if ($a % 41 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 43) {\n        return true;\n    }\n    if ($a % 43 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 45) {\n        return true;\n\
    \    }\n    if ($a % 45 !== 0) {\n        return false;\n    }\n    if ($a \n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp7rhyn3rp.php
    on line 158

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvr20bilf.php:42\n\
    Stack trace:\n#0 /tmp/tmpvr20bilf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvr20bilf.php\
    \ on line 42\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    if ($a\
    \ % $a === 0) {\n                        if ($a % $a === 0) {\n              \
    \              if ($a % $a === 0) {\n                                if ($a %\
    \ $a === 0) {\n                                    if ($a % $a === 0) {\n    \
    \                                    if ($a % $a === 0) {\n                  \
    \                          if ($a % $a === 0) {\n                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                  if ($a % $a === 0) {\n                                    \
    \                    if ($a % $a === 0) {\n                                  \
    \                          if ($a % $a === 0) {\n                            \
    \                                    if ($a % $a === 0) {\n                  \
    \                                                  if ($a % $a === 0) {\n    \
    \                                                                    if ($a %\
    \ $a === 0) {\n                                                              \
    \              if ($a % $a === 0) {\n                                        \
    \                                        if ($a % $a === 0) {\n              \
    \                                                                      if ($a\
    \ % $a === 0) {\n                                                            \
    \                            if ($a % $a === 0) {\n                          \
    \                                                                  if ($a % $a\
    \ === 0) {\n                                                                 \
    \                               if ($a % $a === 0) {\n                       \
    \                                                                            \
    \ if ($a % $a === 0) {\n                                                     \
    \                                                   if ($a % $a === 0) {\n   \
    \                                                                            \
    \                             if ($a % $a === 0) {\n                         \
    \                                                                            \
    \                           if ($a % $a === 0) {\n                           \
    \                                                                            \
    \                             if ($a % $a === 0) {\n                         \
    \                                                                            \
    \                                   if ($a % $a === 0) {\n                   \
    \                                                                            \
    \                                             if ($a % $a === 0) {\n         \
    \                                                                            \
    \                                                           if ($a % $a === 0)\
    \ {\n                                                                        \
    \                                                                            if\
    \ ($a % $a === 0) {\n                                                        \
    \                                                                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                                                                            \
    \                                              if ($a % $a === 0) {\n        \
    \                                                                            \
    \                                                                            if\
    \ ($a % $a === 0) {\n                                                        \
    \                                                                            \
    \                                if ($a % $a === 0) {\n                      \
    \                                                                            \
    \                                                                      if ($a\
    \ % $a === 0) {\n                                                            \
    \                                                                            \
    \                                    if ($a % $a === 0) {\n                  \
    \                                                                            \
    \                                                                            \
    \                      if ($a % $a === 0) {\n                                \
    \                                                                            \
    \                                                                            \
    \            if ($a % $a === 0) {\n                                          \
    \                                                                            \
    \                                                                            \
    \      if ($a % $a === 0) {\n                                                \
    \                                                                            \
    \                                                                            \
    \    if ($a % $a === 0) {\n                                                  \
    \                                                                            \
    \                                                                            \
    \      if ($a % $a === 0) {\n                                                \
    \                                                                            \
    \                                                                            \
    \            if ($a % $a === 0) {\n                                          \
    \                                                                            \
    \                                                                            \
    \                      if ($a % $a === 0) {\n                                \
    \                                                                            \
    \                                                                            \
    \                                    if ($a % $a === 0) {\n                  \
    \                                                                            \
    \                                                                            \
    \                                                      if ($a % $a === 0) {\n\
    \                                                                            \
    \                                                                            \
    \                                                                            if\
    \ ($a % $a === 0) {\n                                                        \
    \                                                                            \
    \                                                                            \
    \                        if ($a % $a === 0) {\n                              \
    \                                                                            \
    \                                                                            \
    \                                                      if ($a % $a === 0) {\n\
    \                                                                            \
    \                                                    \nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 69 in /tmp/tmpxpliwoxw.php on line 86

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfc4ns77d.php:32\n\
    Stack trace:\n#0 /tmp/tmpfc4ns77d.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfc4ns77d.php\
    \ on line 32\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfc4ns77d.php:32\n\
    Stack trace:\n#0 /tmp/tmpfc4ns77d.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfc4ns77d.php\
    \ on line 32\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 9 === 0) {\n        return false;\n \
    \   }\n    if ($a < 27) {\n        return true;\n    }\n    if ($a % 27 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 81 === 0) {\n        return false;\n    }\n    if ($a < 243)\
    \ {\n        return true;\n    }\n    if ($a % 243 === 0) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 729 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 3105) {\n        return true;\n\
    \    }\n    if ($a % 3105 === 0) {\n        return true;\n    }\n    if ($a <\
    \ 7393) {\n        return false;\n    }\n    if ($a % 7393 === 0) {\n        return\
    \ false;\n    }\n    if ($a < 10251) {\n        return true;\n    }\n    if ($a\
    \ % 10251 === 0) {\n        return true;\n    }\n    if ($a < 150319) {\n    \
    \    return false;\n    }\n    if ($a % 150319 === 0) {\n        return false;\n\
    \    }\n    if ($a < 203693) {\n        return true;\n    }\n    if ($a % 203693\
    \ === 0) {\n        return true;\n    }\n    if ($a < 405919) {\n        return\
    \ false;\n    }\n    if ($a % 405919 === 0) {\n        return false;\n    }\n\
    \    if ($a < 801793) {\n        return true;\n    }\n    if ($a % 801793 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 1610391) {\n        return false;\n\
    \    }\n    if ($a % 1610391 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 32150319) {\n        return true;\n    }\n    if ($a % 32150319 === 0) {\n\
    \        return true;\n    }\n    if ($a < 64203693) {\n        return false;\n\
    \    }\n    if ($a % 64203693 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 128207591) {\n        return true;\n    }\n    if ($a % 128207591 === 0) {\n\
    \        return true;\n    }\n    if ($a < 256209999) {\n        return false;\n\
    \    }\n    if ($a % 256209999 === 0) {\n        return false;\n    }\n    if\
    \ ($a < 512209999) {\n        return true;\n    }\n    if ($a % 512209999 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 1024209999) {\n        return\
    \ false;\n    }\n    if (\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpg0or2lol.php on line 143

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1kpjzij.php:33\n\
    Stack trace:\n#0 /tmp/tmp_1kpjzij.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_1kpjzij.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0)\n        return true;\n    else\n        return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphnaaeiw9.php:30\n\
    Stack trace:\n#0 /tmp/tmphnaaeiw9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphnaaeiw9.php\
    \ on line 30\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvr20bilf.php:42\n\
    Stack trace:\n#0 /tmp/tmpvr20bilf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvr20bilf.php\
    \ on line 42\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyjsxxnmn.php
    on line 122

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return false;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return false;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return false;\n    if ($a % 17 == 0)\n       \
    \ return false;\n    if ($a % 19 == 0)\n        return false;\n    if ($a % 21\
    \ == 0)\n        return false;\n    if ($a % 23 == 0)\n        return false;\n\
    \    if ($a % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n       \
    \ return false;\n    if ($a % 29 == 0)\n        return false;\n    if ($a % 31\
    \ == 0)\n        return false;\n    if ($a % 33 == 0)\n        return false;\n\
    \    if ($a % 35 == 0)\n        return false;\n    if ($a % 37 == 0)\n       \
    \ return false;\n    if ($a % 39 == 0)\n        return false;\n    if ($a % 41\
    \ == 0)\n        return false;\n    if ($a % 43 == 0)\n        return false;\n\
    \    if ($a % 45 == 0)\n        return false;\n    if ($a % 47 == 0)\n       \
    \ return false;\n    if ($a % 49 == 0)\n        return false;\n    if ($a % 51\
    \ == 0)\n        return false;\n    if ($a % 53 == 0)\n        return false;\n\
    \    if ($a % 55 == 0)\n        return false;\n    if ($a % 57 == 0)\n       \
    \ return false;\n    if ($a % 59 == 0)\n        return false;\n    if ($a % 61\
    \ == 0)\n        return false;\n    if ($a % 63 == 0)\n        return false;\n\
    \    if ($a % 65 == 0)\n        return false;\n    if ($a % 67 == 0)\n       \
    \ return false;\n    if ($a % 69 == 0)\n        return false;\n    if ($a % 71\
    \ == 0)\n        return false;\n    if ($a % 73 == 0)\n        return false;\n\
    \    if ($a % 75 == 0)\n        return false;\n    if ($a % 77 == 0)\n       \
    \ return false;\n    if ($a % 79 == 0)\n        return false;\n    if ($a % 81\
    \ == 0)\n        return false;\n    if ($a % 83 == 0)\n        return false;\n\
    \    if ($a % 85 == 0)\n        return false;\n    if ($a % 87 == 0)\n       \
    \ return false;\n    if ($a % 89 == 0)\n        return false;\n    if ($a % 91\
    \ == 0)\n        return false;\n    if ($a % 93 == 0)\n        return false;\n\
    \    if ($a % 95 == 0)\n        return false;\n    if ($a % 97 == 0)\n       \
    \ return false;\n    if ($a % 99 == 0)\n        return false;\n    if ($a % 101\
    \ == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpmwe_sgsa.php
    on line 122

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0)\n        return true;\n    if ($a % 5 == 0)\n        return\
    \ true;\n    if ($a % 7 == 0)\n        return true;\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6407fw7.php:33\n\
    Stack trace:\n#0 /tmp/tmpl6407fw7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpl6407fw7.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 9 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatq30yir.php:32\n\
    Stack trace:\n#0 /tmp/tmpatq30yir.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpatq30yir.php\
    \ on line 32\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpfm61it4f.php
    on line 122

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a%$a==0) && ($a%$a==0) && ($a%$a==0) && ($a%$a==0);\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptc255yin.php:27\n\
    Stack trace:\n#0 /tmp/tmptc255yin.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptc255yin.php\
    \ on line 27\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    $b = $a ** 3;\n\
    \    if ($b == $a) {\n        return true;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5ptvuu6.php:35\n\
    Stack trace:\n#0 /tmp/tmpa5ptvuu6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa5ptvuu6.php\
    \ on line 35\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnv06yxxi.php:33\n\
    Stack trace:\n#0 /tmp/tmpnv06yxxi.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnv06yxxi.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 9 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlsakn9s.php:33\n\
    Stack trace:\n#0 /tmp/tmpvlsakn9s.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvlsakn9s.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiq6c8me6.php:32\n\
    Stack trace:\n#0 /tmp/tmpiq6c8me6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiq6c8me6.php\
    \ on line 32\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0)\n        return true;\n    else\n        return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xsem65k.php:31\n\
    Stack trace:\n#0 /tmp/tmp6xsem65k.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6xsem65k.php\
    \ on line 31\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    $cube = 1;\n\
    \    for ($i = 1; $i <= $a; $i++) {\n        $cube *= $i;\n    }\n    return $cube\
    \ == $a;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeo4a2mlh.php:34\n\
    Stack trace:\n#0 /tmp/tmpeo4a2mlh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpeo4a2mlh.php\
    \ on line 34\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwkvqb6h.php:28\n\
    Stack trace:\n#0 /tmp/tmpgwkvqb6h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgwkvqb6h.php\
    \ on line 28\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 1) {\n        return false;\n    }\n\
    \    if ($a % 2 !== 0) {\n        return false;\n    }\n    if ($a > 2) {\n  \
    \      return false;\n    }\n    if ($a % 3 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 3) {\n        return false;\n    }\n    if ($a % 4 !== 0)\
    \ {\n        return false;\n    }\n    if ($a > 4) {\n        return false;\n\
    \    }\n    if ($a % 5 !== 0) {\n        return false;\n    }\n    if ($a > 5)\
    \ {\n        return false;\n    }\n    if ($a % 6 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 6) {\n        return false;\n    }\n    if ($a % 7 !== 0)\
    \ {\n        return false;\n    }\n    if ($a > 7) {\n        return false;\n\
    \    }\n    if ($a % 8 !== 0) {\n        return false;\n    }\n    if ($a > 8)\
    \ {\n        return false;\n    }\n    if ($a % 9 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 9) {\n        return false;\n    }\n    if ($a % 10 !== 0)\
    \ {\n        return false;\n    }\n    if ($a > 10) {\n        return false;\n\
    \    }\n    if ($a % 11 !== 0) {\n        return false;\n    }\n    if ($a > 11)\
    \ {\n        return false;\n    }\n    if ($a % 12 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 12) {\n        return false;\n    }\n    if ($a % 13 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 13) {\n        return false;\n\
    \    }\n    if ($a % 14 !== 0) {\n        return false;\n    }\n    if ($a > 14)\
    \ {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 15) {\n        return false;\n    }\n    if ($a % 16 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 16) {\n        return false;\n\
    \    }\n    if ($a % 17 !== 0) {\n        return false;\n    }\n    if ($a > 17)\
    \ {\n        return false;\n    }\n    if ($a % 18 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 18) {\n        return false;\n    }\n    if ($a % 19 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 19) {\n        return false;\n\
    \    }\n    if ($a % 20 !== 0) {\n        return false;\n    }\n    if ($a > 20)\
    \ {\n        return false;\n    }\n    if ($a % 21 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 21) {\n        return false;\n    }\n    if ($a % 22 !==\
    \ 0) {\n        return false;\n    }\n    if ($a > 22) {\n        return false;\n\
    \    }\n    if ($a % 23 !== 0) {\n        return false;\n    }\n    if ($a > 23)\
    \ {\n        return false;\n    }\n    if (\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpz65s2vl6.php on line 161

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    if ($a\
    \ % $a === 0) {\n                        if ($a % $a === 0) {\n              \
    \              if ($a % $a === 0) {\n                                if ($a %\
    \ $a === 0) {\n                                    if ($a % $a === 0) {\n    \
    \                                    if ($a % $a === 0) {\n                  \
    \                          if ($a % $a === 0) {\n                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                  return true;\n                                            \
    \    }\n                                            }\n                      \
    \                  }\n                                    }\n                \
    \                }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4i1v9ij.php:52\n\
    Stack trace:\n#0 /tmp/tmpu4i1v9ij.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpu4i1v9ij.php\
    \ on line 52\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6i_iy11.php:32\n\
    Stack trace:\n#0 /tmp/tmph6i_iy11.php(41): test()\n#1 {main}\n  thrown in /tmp/tmph6i_iy11.php\
    \ on line 32\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) return false;\n    if ($a % 2 != 0) return false;\n    if ($a\
    \ % 3 == 0) return false;\n    if ($a % 4 == 0) return false;\n    if ($a % 5\
    \ == 0) return false;\n    if ($a % 6 == 0) return false;\n    if ($a % 7 == 0)\
    \ return false;\n    if ($a % 8 == 0) return false;\n    if ($a % 9 == 0) return\
    \ false;\n    if ($a % 10 == 0) return false;\n    if ($a % 11 == 0) return false;\n\
    \    if ($a % 12 == 0) return false;\n    if ($a % 13 == 0) return false;\n  \
    \  if ($a % 14 == 0) return false;\n    if ($a % 15 == 0) return false;\n    if\
    \ ($a % 16 == 0) return false;\n    if ($a % 17 == 0) return false;\n    if ($a\
    \ % 18 == 0) return false;\n    if ($a % 19 == 0) return false;\n    if ($a %\
    \ 20 == 0) return false;\n    if ($a % 21 == 0) return false;\n    if ($a % 22\
    \ == 0) return false;\n    if ($a % 23 == 0) return false;\n    if ($a % 24 ==\
    \ 0) return false;\n    if ($a % 25 == 0) return false;\n    if ($a % 26 == 0)\
    \ return false;\n    if ($a % 27 == 0) return false;\n    if ($a % 28 == 0) return\
    \ false;\n    if ($a % 29 == 0) return false;\n    if ($a % 30 == 0) return false;\n\
    \    if ($a % 31 == 0) return false;\n    if ($a % 32 == 0) return false;\n  \
    \  if ($a % 33 == 0) return false;\n    if ($a % 34 == 0) return false;\n    if\
    \ ($a % 35 == 0) return false;\n    if ($a % 36 == 0) return false;\n    if ($a\
    \ % 37 == 0) return false;\n    if ($a % 38 == 0) return false;\n    if ($a %\
    \ 39 == 0) return false;\n    if ($a % 40 == 0) return false;\n    if ($a % 41\
    \ == 0) return false;\n    if ($a % 42 == 0) return false;\n    if ($a % 43 ==\
    \ 0) return false;\n    if ($a % 44 == 0) return false;\n    if ($a % 45 == 0)\
    \ return false;\n    if ($a % 46 == 0) return false;\n    if ($a % 47 == 0) return\
    \ false;\n    if ($a % 48 == 0) return false;\n    if ($a % 49 == 0) return false;\n\
    \    if ($a % 50 == 0) return false;\n    if ($a % 51 == 0) return false;\n  \
    \  if ($a % 52\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpuialah5n.php
    on line 71

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwkvqb6h.php:28\n\
    Stack trace:\n#0 /tmp/tmpgwkvqb6h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgwkvqb6h.php\
    \ on line 28\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n  \
    \  }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 11 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 13 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 17 === 0) {\n        return true;\n    }\n    if ($a % 19 === 0) {\n \
    \       return true;\n    }\n    if ($a % 23 === 0) {\n        return true;\n\
    \    }\n    if ($a % 29 === 0) {\n        return true;\n    }\n    if ($a % 37\
    \ === 0) {\n        return true;\n    }\n    if ($a % 43 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 49 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 63 === 0) {\n        return true;\n    }\n    if ($a % 69 === 0) {\n \
    \       return true;\n    }\n    if ($a % 73 === 0) {\n        return true;\n\
    \    }\n    if ($a % 79 === 0) {\n        return true;\n    }\n    if ($a % 83\
    \ === 0) {\n        return true;\n    }\n    if ($a % 89 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 97 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 103 === 0) {\n        return true;\n    }\n    if ($a % 109 === 0) {\n\
    \        return true;\n    }\n    if ($a % 113 === 0) {\n        return true;\n\
    \    }\n    if ($a % 119 === 0) {\n        return true;\n    }\n    if ($a % 123\
    \ === 0) {\n        return true;\n    }\n    if ($a % 129 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 135 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 141 === 0) {\n        return true;\n    }\n    if ($a % 147 === 0) {\n\
    \        return true;\n    }\n    if ($a % 153 === 0) {\n        return true;\n\
    \    }\n    if ($a % 159 === 0) {\n        return true;\n    }\n    if ($a % 165\
    \ === 0) {\n        return true;\n    }\n    if ($a % 171 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 177 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 183 === 0) {\n        return true;\n    }\n    if ($a % 189 === 0) {\n\
    \        return true;\n    }\n    if ($a % 195 === 0) {\n        return true;\n\
    \    }\n    if ($a % 201 === 0) {\n        return true;\n    }\n    if ($a % 209\
    \ === 0) {\n        return true;\n    }\n    if ($a % 215 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 221 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 227 === 0) {\n        return true;\n    }\n    if ($a % 233 === 0) {\n\
    \        return true;\n    }\n    if ($a % 239 === 0) {\n        return true;\n\
    \    }\n    if (\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp99tc_szk.php on line 155

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpfm61it4f.php
    on line 122

    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmrqn64k.php:35\n\
    Stack trace:\n#0 /tmp/tmpvmrqn64k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvmrqn64k.php\
    \ on line 35\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwkvqb6h.php:28\n\
    Stack trace:\n#0 /tmp/tmpgwkvqb6h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgwkvqb6h.php\
    \ on line 28\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    return iscube($a / 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.5 to int loses precision\
    \ in /tmp/tmp0wca4o0e.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp0wca4o0e.php:34\nStack trace:\n#0 /tmp/tmp0wca4o0e.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wca4o0e.php on line 34\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwkvqb6h.php:28\n\
    Stack trace:\n#0 /tmp/tmpgwkvqb6h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgwkvqb6h.php\
    \ on line 28\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1kpjzij.php:33\n\
    Stack trace:\n#0 /tmp/tmp_1kpjzij.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_1kpjzij.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bx2z5et.php:37\n\
    Stack trace:\n#0 /tmp/tmp4bx2z5et.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bx2z5et.php\
    \ on line 37\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq3am2tv.php:34\n\
    Stack trace:\n#0 /tmp/tmpyq3am2tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyq3am2tv.php\
    \ on line 34\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5756ofcr.php:32\n\
    Stack trace:\n#0 /tmp/tmp5756ofcr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5756ofcr.php\
    \ on line 32\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                if ($a % $a == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhtoz3dz.php:36\n\
    Stack trace:\n#0 /tmp/tmpnhtoz3dz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnhtoz3dz.php\
    \ on line 36\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 2 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 3 !== 0) {\n        return false;\n    }\n    if ($a % 4\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 5 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 6 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 7 !== 0) {\n        return false;\n    }\n    if ($a % 8 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 9 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 10 !== 0) {\n        return false;\n    }\n    if ($a % 11\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 12 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 13 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 14 !== 0) {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 16 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 17 !== 0) {\n        return false;\n    }\n    if ($a % 18\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 19 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 20 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 21 !== 0) {\n        return false;\n    }\n    if ($a % 22 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 23 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 24 !== 0) {\n        return false;\n    }\n    if ($a % 25\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 26 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 27 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 28 !== 0) {\n        return false;\n    }\n    if ($a % 29 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 30 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 31 !== 0) {\n        return false;\n    }\n    if ($a % 32\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 33 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 34 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 35 !== 0) {\n        return false;\n    }\n    if ($a % 36 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 37 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 38 !== 0) {\n        return false;\n    }\n    if ($a % 39\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 40 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 41 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 42 !== 0) {\n        return false;\n    }\n    if ($a % 43 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 44 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 45 !== 0) {\n        return false;\n    }\n    if (\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoljup0yr.php on line 158

    '
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycvu71ki.php:34\n\
    Stack trace:\n#0 /tmp/tmpycvu71ki.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpycvu71ki.php\
    \ on line 34\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 9 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlsakn9s.php:33\n\
    Stack trace:\n#0 /tmp/tmpvlsakn9s.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvlsakn9s.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 1 !== 0 || $a < 0)\n        return false;\n    if ($a === 1)\n \
    \       return true;\n    if ($a === 2)\n        return true;\n    if ($a ===\
    \ 3)\n        return true;\n    if ($a === 4)\n        return true;\n    if ($a\
    \ === 5)\n        return true;\n    if ($a === 6)\n        return true;\n    if\
    \ ($a === 7)\n        return true;\n    if ($a === 8)\n        return true;\n\
    \    if ($a === 9)\n        return true;\n    if ($a === 10)\n        return true;\n\
    \    if ($a === 11)\n        return true;\n    if ($a === 12)\n        return\
    \ true;\n    if ($a === 13)\n        return true;\n    if ($a === 14)\n      \
    \  return true;\n    if ($a === 15)\n        return true;\n    if ($a === 16)\n\
    \        return true;\n    if ($a === 17)\n        return true;\n    if ($a ===\
    \ 18)\n        return true;\n    if ($a === 19)\n        return true;\n    if\
    \ ($a === 20)\n        return true;\n    if ($a === 21)\n        return true;\n\
    \    if ($a === 22)\n        return true;\n    if ($a === 23)\n        return\
    \ true;\n    if ($a === 24)\n        return true;\n    if ($a === 25)\n      \
    \  return true;\n    if ($a === 26)\n        return true;\n    if ($a === 27)\n\
    \        return true;\n    if ($a === 28)\n        return true;\n    if ($a ===\
    \ 29)\n        return true;\n    if ($a === 30)\n        return true;\n    if\
    \ ($a === 31)\n        return true;\n    if ($a === 32)\n        return true;\n\
    \    if ($a === 33)\n        return true;\n    if ($a === 34)\n        return\
    \ true;\n    if ($a === 35)\n        return true;\n    if ($a === 36)\n      \
    \  return true;\n    if ($a === 37)\n        return true;\n    if ($a === 38)\n\
    \        return true;\n    if ($a === 39)\n        return true;\n    if ($a ===\
    \ 40)\n        return true;\n    if ($a === 41)\n        return true;\n    if\
    \ ($a === 42)\n        return true;\n    if ($a === 43)\n        return true;\n\
    \    if ($a === 44)\n        return true;\n    if ($a === 45)\n        return\
    \ true;\n    if ($a === 46)\n        return true;\n    if ($a === 47)\n      \
    \  return true;\n    if ($a === 48)\n        return true;\n    if ($a === 49)\n\
    \        return true;\n    if ($a === 50)\n        return true;\n    if ($a ===\
    \ 51)\n        return true;\n    if ($a === 52)\n        return true;\n    if\
    \ ($a === 53)\n        return true;\n    if ($a === 54)\n        return true;\n\
    \    if ($a === 55)\n        return true;\n    if ($a === 56)\n        return\
    \ true;\n    if ($a === 57)\n        return true;\n    if ($a === 58)\n      \
    \  return true;\n    if ($a === \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmplcfe0n3j.php on line 138

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    if ($a\
    \ % $a === 0) {\n                        if ($a % $a === 0) {\n              \
    \              if ($a % $a === 0) {\n                                if ($a %\
    \ $a === 0) {\n                                    if ($a % $a === 0) {\n    \
    \                                    if ($a % $a === 0) {\n                  \
    \                          if ($a % $a === 0) {\n                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                  if ($a % $a === 0) {\n                                    \
    \                    if ($a % $a === 0) {\n                                  \
    \                          if ($a % $a === 0) {\n                            \
    \                                    if ($a % $a === 0) {\n                  \
    \                                                  if ($a % $a === 0) {\n    \
    \                                                                    if ($a %\
    \ $a === 0) {\n                                                              \
    \              if ($a % $a === 0) {\n                                        \
    \                                        if ($a % $a === 0) {\n              \
    \                                                                      if ($a\
    \ % $a === 0) {\n                                                            \
    \                            if ($a % $a === 0) {\n                          \
    \                                                                  if ($a % $a\
    \ === 0) {\n                                                                 \
    \                               if ($a % $a === 0) {\n                       \
    \                                                                            \
    \ if ($a % $a === 0) {\n                                                     \
    \                                                   if ($a % $a === 0) {\n   \
    \                                                                            \
    \                             if ($a % $a === 0) {\n                         \
    \                                                                            \
    \                                           if ($a % $a === 0) {\n           \
    \                                                                            \
    \                                                             if ($a % $a ===\
    \ 0) {\n                                                                     \
    \                                                                            \
    \       if ($a % $a === 0) {\n                                               \
    \                                                                            \
    \                                 if ($a % $a === 0) {\n                     \
    \                                                                            \
    \                                                               if ($a % $a ===\
    \ 0) {\n                                                                     \
    \                                                                            \
    \                   if ($a % $a === 0) {\n                                   \
    \                                                                            \
    \                                                         if ($a % $a === 0) {\n\
    \                                                                            \
    \                                                                            \
    \                    if ($a % $a === 0) {\n                                  \
    \                                                                            \
    \                                                                  if ($a % $a\
    \ === 0) {\n                                                                 \
    \                                                                            \
    \                                       if ($a % $a === 0) {\n               \
    \                                                                            \
    \                                                                            \
    \                 if ($a % $a === 0) {\n                                     \
    \                                                                            \
    \                                                                           if\
    \ ($a % $a === 0) {\n                                                        \
    \                                                                            \
    \                                                            if ($a % $a === 0)\
    \ {\n                                                                        \
    \                                                                            \
    \                                                if ($a % $a === 0) {\n      \
    \                                                                            \
    \                                                                            \
    \                                          if ($a % $a === 0) {\n            \
    \                                                                            \
    \                                                                            \
    \                                        if ($a % $a === 0) {\n              \
    \                                                                            \
    \                                                                            \
    \                                          if ($a % $a === 0) {\n            \
    \                                                                            \
    \                                                                            \
    \                                                if ($a % $a === 0) {\n      \
    \                                                                            \
    \                                                                            \
    \                                                          if ($a % $a === 0)\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                        if ($a\
    \ % $a === 0) {\n                                                            \
    \                                                                            \
    \                                                                            \
    \            if ($a % $a === 0) {\n                                          \
    \                                                                            \
    \                                                                            \
    \                                  if ($a % $a === 0) {\n                    \
    \                                                                            \
    \                                                                            \
    \                                                            if ($a % $a === 0)\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                            \
    \            if ($a % $a === 0) {\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 69 in /tmp/tmpwpv34lot.php on line 86

    '
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 2 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 3 !== 0) {\n        return false;\n    }\n    if ($a % 4\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 5 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 6 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 7 !== 0) {\n        return false;\n    }\n    if ($a % 8 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 9 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 10 !== 0) {\n        return false;\n    }\n    if ($a % 11\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 12 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 13 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 14 !== 0) {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 16 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 17 !== 0) {\n        return false;\n    }\n    if ($a % 18\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 19 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 20 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 21 !== 0) {\n        return false;\n    }\n    if ($a % 22 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 23 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 24 !== 0) {\n        return false;\n    }\n    if ($a % 25\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 26 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 27 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 28 !== 0) {\n        return false;\n    }\n    if ($a % 29 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 30 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 31 !== 0) {\n        return false;\n    }\n    if ($a % 32\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 33 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 34 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 35 !== 0) {\n        return false;\n    }\n    if ($a % 36 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 37 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 38 !== 0) {\n        return false;\n    }\n    if ($a % 39\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 40 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 41 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 42 !== 0) {\n        return false;\n    }\n    if ($a % 43 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 44 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 45 !== 0) {\n        return false;\n    }\n    if (\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoljup0yr.php on line 158

    '
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmrqn64k.php:35\n\
    Stack trace:\n#0 /tmp/tmpvmrqn64k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvmrqn64k.php\
    \ on line 35\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n  \
    \  }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbylw46_6.php:39\n\
    Stack trace:\n#0 /tmp/tmpbylw46_6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbylw46_6.php\
    \ on line 39\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) return false;\n    if ($a % 3 == 0) return true;\n    if ($a\
    \ % 5 == 0) return true;\n    if ($a % 7 == 0) return true;\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vo68xkk.php:31\n\
    Stack trace:\n#0 /tmp/tmp6vo68xkk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6vo68xkk.php\
    \ on line 31\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_13agho.php:31\n\
    Stack trace:\n#0 /tmp/tmp5_13agho.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5_13agho.php\
    \ on line 31\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    if ($a\
    \ % $a === 0) {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnn9j31e.php:39\n\
    Stack trace:\n#0 /tmp/tmprnn9j31e.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprnn9j31e.php\
    \ on line 39\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hp4qi49.php:33\n\
    Stack trace:\n#0 /tmp/tmp2hp4qi49.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2hp4qi49.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hp4qi49.php:33\n\
    Stack trace:\n#0 /tmp/tmp2hp4qi49.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2hp4qi49.php\
    \ on line 33\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe8css09.php:35\n\
    Stack trace:\n#0 /tmp/tmpbe8css09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbe8css09.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % 2 == 0) {\n            if ($a % 3 ==\
    \ 0) {\n                if ($a % 4 == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tl9r13a.php:36\n\
    Stack trace:\n#0 /tmp/tmp1tl9r13a.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1tl9r13a.php\
    \ on line 36\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    if\
    \ ($a % 7 == 0) return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9yltrhu.php:29\n\
    Stack trace:\n#0 /tmp/tmpb9yltrhu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpb9yltrhu.php\
    \ on line 29\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bx2z5et.php:37\n\
    Stack trace:\n#0 /tmp/tmp4bx2z5et.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bx2z5et.php\
    \ on line 37\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    if\
    \ ($a % 7 == 0) return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9yltrhu.php:29\n\
    Stack trace:\n#0 /tmp/tmpb9yltrhu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpb9yltrhu.php\
    \ on line 29\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 3 === 1) {\n        return false;\n \
    \   }\n    if ($a % 3 === 2) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hrphjh3.php:39\n\
    Stack trace:\n#0 /tmp/tmp3hrphjh3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3hrphjh3.php\
    \ on line 39\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi40l35dp.php:30\n\
    Stack trace:\n#0 /tmp/tmpi40l35dp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi40l35dp.php\
    \ on line 30\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 != 0)\n        return\
    \ false;\n    if ($a % 5 != 0)\n        return false;\n    if ($a % 7 != 0)\n\
    \        return false;\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnho2p9t3.php:35\n\
    Stack trace:\n#0 /tmp/tmpnho2p9t3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnho2p9t3.php\
    \ on line 35\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a % $a == 0) {\n            if ($a\
    \ % $a % $a % $a == 0) {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmlcney9.php:35\n\
    Stack trace:\n#0 /tmp/tmpkmlcney9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkmlcney9.php\
    \ on line 35\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp709ok0_k.php:34\n\
    Stack trace:\n#0 /tmp/tmp709ok0_k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp709ok0_k.php\
    \ on line 34\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bx2z5et.php:37\n\
    Stack trace:\n#0 /tmp/tmp4bx2z5et.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4bx2z5et.php\
    \ on line 37\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    if\
    \ ($a % 7 == 0) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcq71w3_r.php:30\n\
    Stack trace:\n#0 /tmp/tmpcq71w3_r.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcq71w3_r.php\
    \ on line 30\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                if ($a % $a == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15cssrh8.php:37\n\
    Stack trace:\n#0 /tmp/tmp15cssrh8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp15cssrh8.php\
    \ on line 37\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiq6c8me6.php:32\n\
    Stack trace:\n#0 /tmp/tmpiq6c8me6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiq6c8me6.php\
    \ on line 32\n"
  timestamp: 1659823602
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qammxdi.php:33\n\
    Stack trace:\n#0 /tmp/tmp_qammxdi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_qammxdi.php\
    \ on line 33\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd0dmsns.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd0dmsns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfd0dmsns.php\
    \ on line 35\n"
  timestamp: 1659730601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrver2h.php:35\n\
    Stack trace:\n#0 /tmp/tmpjtrver2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjtrver2h.php\
    \ on line 35\n"
  timestamp: 1659730601
