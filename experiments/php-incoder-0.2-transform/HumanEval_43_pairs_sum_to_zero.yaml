name: HumanEval_43_pairs_sum_to_zero
language: php
prompt: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n// it\
  \ returns True if there are two distinct elements in the list that\n// sum to zero,\
  \ and False otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n\
  // >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1,\
  \ 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n\
  // >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n"
tests: "function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $sum = 0;\n    foreach ($l as $item) {\n        $sum += $item;\n\
    \    }\n    return $sum == 0;\n}\n", "    $pairs = array();\n    foreach ($l as\
    \ $i => $x) {\n        $pairs[$i][$x] = 1;\n    }\n    $sum = 0;\n    foreach\
    \ ($pairs as $i => $pair) {\n        foreach ($pair as $x => $count) {\n     \
    \       $sum += $count;\n        }\n        if ($sum < 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $sum = 0;\n    foreach\
    \ ($l as $item) {\n        $sum += $item;\n    }\n    return ($sum == 0);\n}\n",
  "    $sum = 0;\n    foreach ($l as $item) {\n        $sum += $item;\n    }\n   \
    \ return $sum == 0;\n}\n", "    $pairs = array();\n    foreach ($l as $i => $x)\
    \ {\n        $pairs[$i] = $x;\n    }\n    $pairs = array_count_values($pairs);\n\
    \    foreach ($pairs as $i => $x) {\n        if ($x == 1) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $sum = 0;\n    foreach\
    \ ($l as $item) {\n        $sum += $item;\n    }\n    return $sum == 0;\n}\n",
  "    $pairs = array();\n    foreach ($l as $i => $v) {\n        if ($v < 0) {\n\
    \            $v = -$v;\n        }\n        $pairs[$v][] = $i;\n    }\n    $pairs\
    \ = array_count_values($pairs);\n    foreach ($pairs as $v => $p) {\n        if\
    \ ($p > 1) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    $pairs = array();\n    foreach ($l as $i => $v) {\n        $pairs[$v]\
    \ = $i;\n    }\n    $sum = 0;\n    foreach ($pairs as $i => $v) {\n        $sum\
    \ += $i;\n        if ($sum < 0) {\n            $sum = 0;\n        }\n    }\n \
    \   return $sum == 0;\n}\n", "    $sum = 0;\n    foreach ($l as $item) {\n   \
    \     $sum += $item;\n    }\n    return $sum == 0;\n}\n", "    $sum = 0;\n   \
    \ $n = count($l);\n    for ($i = 0; $i < $n; $i++) {\n        $sum += $l[$i];\n\
    \    }\n    return ($sum == 0);\n}\n", "  $sum = 0;\n  foreach ($l as $item) {\n\
    \    $sum += $item;\n  }\n  return $sum == 0;\n}\n", "    $pairs = array();\n\
    \    $sum = 0;\n    foreach ($l as $i => $v) {\n        if ($v > 0) {\n      \
    \      $pairs[$v] = $i;\n            $sum += $v;\n        }\n    }\n    if ($sum\
    \ == 0) {\n        return false;\n    }\n    $pairs[$sum] = count($l);\n    return\
    \ array_count_values($pairs) == $pairs;\n}\n", "    $sum = 0;\n    foreach ($l\
    \ as $item) {\n        $sum += $item;\n    }\n    return $sum == 0;\n}\n", " \
    \   $sum = 0;\n    foreach ($l as $item) {\n        $sum += $item;\n    }\n  \
    \  return $sum == 0;\n}\n", "    $pairs = array();\n    foreach ($l as $i => $x)\
    \ {\n        foreach ($l as $j => $y) {\n            if ($i == $j) continue;\n\
    \            if ($x + $y == 0) $pairs[$i][$j] = true;\n        }\n    }\n    return\
    \ count($pairs) == 2;\n}\n", "    $pairs = array();\n    $sum = 0;\n    foreach\
    \ ($l as $n) {\n        $pairs[$n] = $sum;\n        $sum += $n;\n    }\n    $pairs[$sum]\
    \ = 1;\n    $sum -= 1;\n    foreach ($pairs as $n => $sum2) {\n        if ($sum2\
    \ != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    $pairs = array();\n    foreach ($l as $i => $v) {\n        $pairs[$v] = $i;\n\
    \    }\n    $sum = 0;\n    foreach ($pairs as $i => $v) {\n        $sum += $i;\n\
    \        if ($sum < 0) {\n            $sum = 0;\n        }\n    }\n    return\
    \ $sum == 0;\n}\n", "    $pairs = array();\n    foreach ($l as $item) {\n    \
    \    $pairs[$item] = $item;\n    }\n    $pairs = array_count_values($pairs);\n\
    \    foreach ($pairs as $item => $count) {\n        if ($count > 1) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}", "    $sum = 0;\n\
    \    foreach ($l as $i => $x) {\n        if ($x > 0) {\n            $sum += $x;\n\
    \        }\n    }\n    return $sum == 0;\n}\n", "    $sum = 0;\n    foreach ($l\
    \ as $i => $v) {\n        $sum += $v;\n        if ($sum < 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
