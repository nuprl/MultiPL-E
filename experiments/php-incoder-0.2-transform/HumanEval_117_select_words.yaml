name: HumanEval_117_select_words
language: php
prompt: "<?php\n// Given a string s and a natural number n, you have been tasked to\
  \ implement \n// a function that returns a list of all words from string s that\
  \ contain exactly \n// n consonants, in order these words appear in the string s.\n\
  // If the string s is empty then the function should return an empty list.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>>\
  \ select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n//\
  \ >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"\
  Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n\
  // array(\"Uncle\")\nfunction select_words($s, $n) {\n"
tests: "function candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
  little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
  \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4)\
  \ !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"\
  )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $words = array();\n    $words = explode(' ', $s);\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThank you so much!\
    \ I appreciate your help.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use explode. Hope it helps.\n<|/ c |>\n<| c |>\nThank you so much! I appreciate\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n", "    $words = array();\n    $words = explode(\" \",\
    \ $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n\
    \            $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I've tried your code, but\
    \ I got this error \"Warning: explode() expects parameter 2 to be string, array\
    \ given in C:\\xampp\\htdocs\\words\\wordlist.php on line 14\"\n<|/ c |>\n<| c\
    \ |>\nSorry, I forgot to add `\" \"` after `$s`. Please try again.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I've tried your code, but I got this error \"\
    Warning: explode() expects parameter 2 to be string, array given in C:\\xampp\\\
    htdocs\\words\\wordlist.php on line 14\"\n<|/ c |>\n<| c |>\nSorry, I forgot to\
    \ add `\" \"` after `$s`. Please try again.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I've tried your code, but I got this error \"Warning: explode() expects\
    \ parameter 2 to be string, array given in C:\\xampp\\htdocs\\words\\wordlist.php\
    \ on line 14\"\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string\
    \ = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n$words = array();\n\
    $words = explode(\" \", $string);\n$result = array();\nforeach ($words as $word)\
    \ {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I've tried your code,\
    \ but I got this error \"Warning: explode() expects parameter 2 to be string,\
    \ array given in C:\\xampp\\htdocs\\words\\wordlist.php on line 14\"\n<|/ c |>\n\
    <| c |>\nSorry, I forgot to add `\" \"` after `$s`. Please try again.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I've tried your code, but I got this error \"\
    Warning: explode() expects parameter 2 to be string, array given in C:\\xampp\\\
    htdocs\\words\\", "    $words = array();\n    $words = explode(\" \", $s);\n \
    \   foreach ($words as $word) {\n        $words = explode(\" \", $word);\n   \
    \     $count = 0;\n        foreach ($words as $word) {\n            if ($count\
    \ == $n) {\n                $words[$count] = $word;\n                $count++;\n\
    \            }\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI added a test case to my original post. Your code does not work\
    \ correctly for that test case.\n<|/ c |>\n<| c |>\nI added a test case to my\
    \ original post. Your code does not work correctly for that test case.\n<|/ c\
    \ |>\n<| c |>\nI added a test case to my original post. Your code does not work\
    \ correctly for that test case.\n<|/ c |>\n<| c |>\nI added a test case to my\
    \ original post. Your code does not work correctly for that test case.\n<|/ c\
    \ |>\n<| c |>\nI added a test case to my original post. Your code does not work\
    \ correctly for that test case.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php", " \
    \   $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        $words = explode(\" \", $word);\n        $count = 0;\n   \
    \     foreach ($words as $word) {\n            if (strlen($word) == $n) {\n  \
    \              $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n",
  "    $words = array();\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n       \
    \     continue;\n        }\n        $wordCount = 0;\n        $wordCount = 0;\n\
    \        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n \
    \       $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n  \
    \      $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n   \
    \     $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n    \
    \    $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n     \
    \   $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n      \
    \  $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n       \
    \ $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount\
    \ = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount =\
    \ 0;\n        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n\
    \        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n \
    \       $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n  \
    \      $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n   \
    \     $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n    \
    \    $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n     \
    \   $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n      \
    \  $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n       \
    \ $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount\
    \ = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount =\
    \ 0;\n        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n\
    \        $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n \
    \       $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n  \
    \      $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n   \
    \     $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n    \
    \    $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n     \
    \   $wordCount = 0;\n        $wordCount = 0;\n        $wordCount = 0;\n      \
    \  $", "    $words = array();\n    $words = preg_split('/\\s+/', $s);\n    $words\
    \ = array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_numeric');\n\
    \    $words = array_filter($words, 'is_array');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_scalar');\n    $words = array_filter($words, 'is_integer');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_integer');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_string');\n    $words\
    \ = array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_integer');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_array');\n\
    \    $words = array_filter($words, 'is_object');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_integer');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_array');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_integer');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_object');\n    $words =\
    \ array_filter($words, 'is_scalar');\n    $words = array_filter($words, 'is_integer');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_integer');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_string');\n    $", " \
    \   $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n\
    \            continue;\n        }\n        $consonants = count_consonants($word);\n\
    \        if ($consonants == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      if (strlen($word) == 0) {\n            continue;\n        }\n        $letters\
    \ = str_split($word);\n        $count = 0;\n        foreach ($letters as $letter)\
    \ {\n            if ($letter == \"a\" || $letter == \"e\" || $letter == \"i\"\
    \ || $letter == \"o\" || $letter == \"u\") {\n                $count++;\n    \
    \        }\n        }\n        if ($count == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n", "    $words = array();\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    $consonants = array(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $vowels_count\
    \ = count($vowels);\n    $consonants_count = count($consonants);\n    $s = preg_replace('/[^a-zA-Z\\\
    s]/', '', $s);\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == 0) {\n            continue;\n        }\n   \
    \     $word_count = count($word);\n        $consonant_count = 0;\n        for\
    \ ($i = 0; $i < $word_count; $i++) {\n            if (in_array($word[$i], $vowels))\
    \ {\n                $consonant_count += $vowels_count;\n            } else {\n\
    \                $consonant_count += $consonants_count;\n            }\n     \
    \   }\n        if ($consonant_count == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. Your code works perfectly but i was looking for an algorithm\
    \ that can solve this problem in O(n) time.\n<|/ c |>\n<| c |>\nI added a O(n)\
    \ solution that uses O(n) extra space.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly but i was looking for an algorithm that can solve\
    \ this problem in O(n) time.\n<|/ c |>\n<| c |>\nI added a O(n) solution that\
    \ uses O(n) extra space.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ \"Mary had a little lamb\";\n$n = 4; // number of consonants\n$words = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($words as $word) {\n    $word_count\
    \ = count($word);\n    $consonant_count = 0;\n    for ($i = 0; $i < $word_count;\
    \ $i++) {\n        if (in_array($word[$i], $vowels)) {\n            $consonant_count\
    \ += $vowels_count;\n        } else {\n            $consonant_count += $consonants_count;\n\
    \        }\n    }\n    if ($consonant_count == $n) {\n        $result[] = $word;\n\
    \    }\n}\nprint_r($result);\n</code>", "    $words = array();\n    $words = preg_split('/\\\
    s+/', $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help! I appreciate it!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n    $words =\
    \ explode(\" \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n\
    \        if (strlen($word) == 0) {\n            continue;\n        }\n       \
    \ $letters = str_split($word);\n        $count = 0;\n        foreach ($letters\
    \ as $letter) {\n            if ($letter == \"a\" || $letter == \"e\" || $letter\
    \ == \"i\" || $letter == \"o\" || $letter == \"u\") {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $words[] =\
    \ $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work. Try it with `select_words(\"Hello world\", 4)`\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added the test cases and output to\
    \ the answer. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it only works\
    \ with `select_words(\"Hello world\", 4)` and not with `select_words(\"Hello world\"\
    , 3)`\n<|/ c |>\n<| c |>\nI added a test case for that as well. Does it work for\
    \ you?\n<|/ c |>\n<| c |>\nYes, it works. But it only works with `select_words(\"\
    Hello world\", 4)` and not with `select_words(\"Hello world\", 3)`\n<|/ c |>\n\
    <| a tags=php,algorithm |>\n<code>", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      if (strlen($word) == 0) {\n            continue;\n        }\n        $count\
    \ = 0;\n        $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n \
    \       $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\");\n        $vowels_count = count($vowels);\n        $consonants_count\
    \ = count($consonants);\n        $word_length = strlen($word);\n        for ($i\
    \ = 0; $i < $word_length; $i++) {\n            $char = substr($word, $i, 1);\n\
    \            if (in_array($char, $vowels)) {\n                $count++;\n    \
    \        }\n            if (in_array($char, $consonants)) {\n                $count++;\n\
    \            }\n            if ($count == $n) {\n                $words[] = $word;\n\
    \            }\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately this does not work. As I\
    \ said in the question, I am not allowed to use any built in functions. I must\
    \ implement my own functions. I appreciate your help though.\n<|/ c |>\n<| c |>\n\
    I added a solution that does not use any built-in functions. I hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you so much! I appreciate your help.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      if (strlen($word) == 0) {\n            continue;\n        }\n        $count\
    \ = count($word);\n        if ($count == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| c |>\nThanks so much for this! I really appreciate it!\n<|/ c |>\n<| c |>\n\
    No problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string\
    \ = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n$words = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThanks so much for this! I really appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little\
    \ lamb\";\n$n = 4; // number of consonants\n$words = explode(\" \", $string);\n\
    $result = array();\nforeach ($words as $word) {\n    if (strlen($word) == $n)\
    \ {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThanks so much for this! I really appreciate it!\n<|/ c |>\n<|\
    \ a tags=php,string |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n\
    $n = 4; // number of consonants\n$words = explode(\" \", $string);\n$result =\
    \ array();\nforeach ($words as $word) {\n    if (strlen($word) == $n) {\n    \
    \    $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for this! I really appreciate it!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4;\
    \ // number of consonants\n$words = explode(\" \", $string);\n$result = array();\n\
    foreach ($words as $word) {\n    if (", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      if (strlen($word) == 0) {\n            continue;\n        }\n        $vowels\
    \ = \"aeiou\";\n        $consonants = \"bcdfghjklmnpqrstvwxyz\";\n        $vowels_count\
    \ = str_word_count($word, $vowels);\n        $consonants_count = str_word_count($word,\
    \ $consonants);\n        if ($vowels_count == $n) {\n            $words[] = $word;\n\
    \        }\n        if ($consonants_count == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for the help. I appreciate it. I will try this out and see how it goes.\n\
    <|/ c |>\n<| c |>\nI tested this and it works. Thanks so much! I appreciate it.\n\
    <|/ c |>\n<| c |>\nI added a test case that doesn't work. Can you please take\
    \ a look and see if you have any suggestions?\n<|/ c |>\n<| c |>\nI added a test\
    \ case that doesn't work. Can you please take a look and see if you have any suggestions?\n\
    <|/ c |>\n<| c |>\nI added a test case that doesn't work. Can you please take\
    \ a look and see if you have any suggestions?\n<|/ c |>\n<| a tags=php,string,arrays\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4;\n$words =\
    \ array();\n$words = explode(\" \", $string);\n$vowels = \"aeiou\";\n$consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n$vowels_count = str_word_count($words[0], $vowels);\n\
    $consonants_count = str_word_count($words[0], $consonants);\nif ($vowels_count\
    \ == $n) {\n    $words[] = $words[0];\n}\nif ($consonants_count == $n) {\n   \
    \ $words[] = $words[0];\n}\nprint_r($words);", "    $words = array();\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"Mary had a little\
    \ lamb\";\n$array = explode(\" \", $string);\n$result = array();\nforeach ($array\
    \ as $word) {\n    if (strlen($word) == 4) {\n        $result[] = $word;\n   \
    \ }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$string\
    \ = \"Mary had a little lamb\";\n$array = explode(\" \", $string);\n$result =\
    \ array();\nforeach ($array as $word) {\n    if (strlen($word) == 4) {\n     \
    \   $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string\
    \ dscore=0 |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"Mary\
    \ had a little lamb\";\n$array = explode(\" \", $string);\n$result = array();\n\
    foreach ($array as $word) {\n    if (strlen($word) == 4) {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$array = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($array as $word) {\n    if (strlen($word)\
    \ == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little\
    \ lamb\";\n$array = explode(\" \", $string);\n$result = array();\nforeach ($array\
    \ as $word) {\n    if (strlen($word) == 4) {\n        $result[] = $word;\n   \
    \ }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$array = explo", " \
    \   $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for the help but i need to use only loops and if statements no other functions.\n\
    <|/ c |>\n<| c |>\nI added a solution using only loops and if statements.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\"\
    ;\n$n = 4; // number of consonants required\n$words = array();\n$words = explode(\"\
    \ \", $string);\n$count = count($words);\n$i = 0;\n$j = 0;\n$k = 0;\n$l = 0;\n\
    $m = 0;\n$n = 0;\n$o = 0;\n$p = 0;\n$q = 0;\n$r = 0;\n$s = 0;\n$t = 0;\n$u = 0;\n\
    $v = 0;\n$w = 0;\n$x = 0;\n$y = 0;\n$z = 0;\n$a = 0;\n$b = 0;\n$c = 0;\n$d = 0;\n\
    $e = 0;\n$f = 0;\n$g = 0;\n$h = 0;\n$i = 0;\n$j = 0;\n$k = 0;\n$l = 0;\n$m = 0;\n\
    $n = 0;\n$o = 0;\n$p = 0;\n$q = 0;\n$r = 0;\n$s = 0;\n$t = 0;\n$u = 0;\n$v = 0;\n\
    $w = 0;\n$x = 0;\n$y = 0;\n$z = 0;\n$a = 0;\n$b = 0;\n$c = 0;\n$d = 0;\n$e = 0;\n\
    $f = 0;\n$g = 0;\n$h = 0;\n$i = 0;\n$j = 0;\n$k = 0;\n$l = 0;\n$m = 0;\n$n = 0;\n\
    $o = 0;\n$p = 0;\n$q = 0;\n$r = 0;\n$s = 0;\n$t = 0;\n$u = 0;\n$v = 0;\n$w = 0;\n\
    $x = 0;\n$y = 0;\n$z = 0;\n$a = 0;\n$b = 0;\n$c = 0;\n$d = 0;\n$e = 0;\n$f = 0;\n\
    $g = 0;\n$h = 0;\n$i = 0;\n$j = 0;\n$k = 0;\n$l = 0;\n$m = 0;\n$n = 0;\n$o = 0;\n\
    $p = 0;\n$q = 0;\n$r = 0;\n$s = 0;\n$t = 0;", "    $words = array();\n    foreach\
    \ (str_split($s) as $word) {\n        if (strlen($word) == $n) {\n           \
    \ $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI like your solution, however it only works if you have a list\
    \ of words. What if you have a list of sentences and you need to find words in\
    \ each sentence?\n<|/ c |>\n<| c |>\nI updated my answer to include a function\
    \ that will find words in sentences.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ however it only works if you have a list of words. What if you have a list of\
    \ sentences and you need to find words in each sentence?\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a function that will find words in sentences.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$string = \"Mary had a little lamb\";\n$words\
    \ = explode(\" \", $string);\n$count = count($words);\n$count = 0;\n$result =\
    \ array();\nforeach ($words as $word) {\n    if (strlen($word) == 4) {\n     \
    \   $result[] = $word;\n        $count++;\n    }\n}\nif ($count == $count) {\n\
    \    echo $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10774194)\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer\n<|/ c |>\n<| c |>\nI\
    \ added an explanation to the answer\n<|/ c |>\n<| c |>\nI added an explanation\
    \ to the answer\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had\
    \ a little lamb\";\n$words = explode(\" \", $string);\n$count = count($words);\n\
    $count = 0;\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == 4) {\n        $result[] = $word;\n        $count++;\n    }\n}\nif ($count\
    \ == $count) {\n    echo $result;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request ", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much\
    \ for the help! I really appreciate it. I will try this out and let you know how\
    \ it goes.\n<|/ c |>\n<| c |>\nI implemented your solution and it works great!\
    \ Thank you so much! I really appreciate your help.\n<|/ c |>\n<| c |>\nGlad I\
    \ could help. If this answer solved your problem, please consider accepting it\
    \ by clicking the green checkmark to the left of the answer. Thanks!\n<|/ c |>\n\
    <| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"Mary had a little lamb\"\
    ;\n$n = 4;\n$words = explode(\" \", $string);\n$result = array();\nforeach ($words\
    \ as $word) {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n  \
    \  }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much\
    \ for the help! I really appreciate it. I will try this out and let you know how\
    \ it goes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a\
    \ little lamb\";\n$n = 4;\n$words = explode(\" \", $string);\n$result = array();\n\
    foreach ($words as $word) {\n    if (strlen($word) == $n) {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThanks so much for the help! I really appreciate it. I will try\
    \ this out and let you know how it goes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"Mary had a little lamb\";\n$n = 4;\n$words = explode(\" \"\
    , $string);\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nThank", "    $words = array();\n   \
    \ $words = explode(\" \", $s);\n    $words = array_filter($words);\n    $words\
    \ = array_unique($words);\n    $words = array_slice($words, 0, $n);\n    return\
    \ $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `select_words(\"\
    Hello world\", 4)` returns `array(\"world\")` instead of `array(\"Hello\", \"\
    world\")`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Maybe you missed\
    \ something in the question?\n<|/ c |>\n<| c |>\nI tested it again and it works\
    \ fine for me. Maybe you missed something in the question?\n<|/ c |>\n<| c |>\n\
    I tested it again and it works fine for me. Maybe you missed something in the\
    \ question?\n<|/ c |>\n<| c |>\nI tested it again and it works fine for me. Maybe\
    \ you missed something in the question?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $words = array();\n    foreach (str_split($s) as $letter) {\n   \
    \     if (preg_match('/^[aeiou]$/', $letter)) {\n            $words[] = $letter;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,algorithm |>\n\
    <| c |>\nThanks so much for your help! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "    $words = array();\n    $words = explode(' ', $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n",
  "    $words = array();\n    foreach (str_split($s) as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks for your help! I appreciate it.\n\
    <|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n\
    $words = array();\n$words = explode(\" \", $string);\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. I am not allowed to use any loops or arrays. I am only allowed to use\
    \ if, else, switch, and return statements.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses only if, else, switch, and return statements.\n<|/ c |>\n<| c |>\n\
    Thank you for your help. I appreciate it.\n<|/ c |>\n<| a tags=php |>\n<code>\n\
    <?php", "    $words = array();\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words\
    \ = explode(\" \", $string);\n$result = array();\nforeach ($words as $word) {\n\
    \    if (strlen($word) == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a tags=php,string |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n$result = array();\n\
    foreach ($words as $word) {\n    if (strlen($word) == 4) {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,string |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words\
    \ = explode(\" \", $string);\n$result = array();\nforeach ($words as $word) {\n\
    \    if (strlen($word) == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n<?php\n$string\
    \ = \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n$result =\
    \ array();\nforeach ($words as $word) {\n    if (strlen($word) == 4) {\n     \
    \   $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words\
    \ = explode(\" \", $string);\n$result = array();\nforeach ($words as $word) {\n\
    \    if (strlen($word) == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n<?php\n$string\
    \ = \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n$result =\
    \ array();\nforeach (", "    $words = array();\n    $words = explode(' ', $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a tags=php |>\n<| c |>\nThanks so much for your help. I really appreciate it.\
    \ I will try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nHi again,\
    \ I have tried your code, and it works perfectly. Thank you so much for helping\
    \ me out. I am very grateful for your help.\n<|/ c |>\n<| c |>\nHi again, I have\
    \ tried your code, and it works perfectly. Thank you so much for helping me out.\
    \ I am very grateful for your help. I have one more question. How would I go about\
    \ adding another condition to the code? I want the code to only return words that\
    \ contain exactly 3 consonants. I have tried adding another condition to the code\
    \ but it doesn't work. Would you be able to help me out with this? Thank you so\
    \ much in advance.\n<|/ c |>\n<| c |>\nHi again, I have tried your code, and it\
    \ works perfectly. Thank you so much for helping me out. I am very grateful for\
    \ your help. I have one more question. How would I go about adding another condition\
    \ to the code? I want the code to only return words that contain exactly 3 consonants.\
    \ I have tried adding another condition to the code but it doesn't work. Would\
    \ you be able to help me out with this? Thank you so much in advance.\n<|/ c |>\n\
    <| c |>\nHi again, I have tried your code, and it works perfectly. Thank you so\
    \ much for helping me out. I am very grateful for your help. I have one more question.\
    \ How would I go about adding another condition to the code? I want the code to\
    \ only return words that contain exactly 3 consonants. I have tried adding another\
    \ condition to the code but it doesn't work. Would you be able to help me out\
    \ with this? Thank you so much in advance.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you for your help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n\
    $words = array();\n$words = explode(\" \", $string);\n$consonants = array(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\nforeach ($words\
    \ as $word) {\n    if (strlen($word) == $n) {\n        $words[] = $word;\n   \
    \ }\n}\n$result = array_diff($words, $consonants);\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nThank you for your help! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little\
    \ lamb\";\n$n = 4; // number of consonants\n$words = array();\n$words = explode(\"\
    \ \", $string);\n$consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\");\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == $n) {\n        $words[] = $word;\n    }\n}\n$result = array_diff($words,\
    \ $consonants);\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| c |>\nThank you for your help! I appreciate it!\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number\
    \ of consonants\n$words = array();\n$words = explode(\" \", $string);\n$consonants\
    \ = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis\
    \ doesn't work. Try it with `select_words(\"Hello world\", 4)`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it with `select_words(\"Hello world\", 4)`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `select_words(\"Hello world\", 4)`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `select_words(\"Hello world\", 4)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `select_words(\"Hello world\", 4)`.\n\
    <|/ c |>\n<| a tags=php |>\n<code>\n<?php", "    $words = array();\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words\
    \ as $word) {\n        $letters = str_split($word);\n        $count = 0;\n   \
    \     foreach ($letters as $letter) {\n            if ($letter == \"a\" || $letter\
    \ == \"e\" || $letter == \"i\" || $letter == \"o\" || $letter == \"u\") {\n  \
    \              $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n\
    </code>\n<|/ a tags=php,string,arrays,function |>\n<| c |>\nThank you so much\
    \ for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad\
    \ I could help!\n<|/ c |>\n<| a tags=php,string,arrays,function |>\n<code>", " \
    \   $words = array();\n    $words = explode(' ', $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}", "    $words = array();\n    foreach(str_split($s)\
    \ as $letter) {\n        if (strlen($letter) == $n) {\n            $words[] =\
    \ $letter;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThank you so much for taking the time to write this out. I really\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI added some comments to the code so you can see what each part does.\
    \ Hope it helps!\n<|/ c |>\n<| c |>\nThank you so much for taking the time to\
    \ write this out. I really appreciate it. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI added some comments to the code so you can\
    \ see what each part does. Hope it helps!\n<|/ c |>\n<| c |>\nThank you so much\
    \ for taking the time to write this out. I really appreciate it. I will try this\
    \ out and let you know how it goes.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    <?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\
    \ to find\n$words = array();\n$words = explode(\" \", $string);\n$count = count($words);\n\
    for ($i = 0; $i < $count; $i++) {\n    if (strlen($words[$i]) == $n) {\n     \
    \   echo $words[$i];\n    }\n}", "    $words = array();\n    $i = 0;\n    $len\
    \ = strlen($s);\n    while($i < $len) {\n        $words[] = substr($s, $i, $n);\n\
    \        $i += $n;\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word\
    \ = trim($word);\n        $word = str_replace(\" \", \"\", $word);\n        $word\
    \ = str_replace(\",\", \"\", $word);\n        $word = str_replace(\"!\", \"\"\
    , $word);\n        $word = str_replace(\"?\", \"\", $word);\n        $word = str_replace(\"\
    ;\", \"\", $word);\n        $word = str_replace(\"'\", \"\", $word);\n       \
    \ $word = str_replace(\"(\", \"\", $word);\n        $word = str_replace(\")\"\
    , \"\", $word);\n        $word = str_replace(\"[\", \"\", $word);\n        $word\
    \ = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"{\", \"\"\
    , $word);\n        $word = str_replace(\"}\", \"\", $word);\n        $word = str_replace(\"\
    [\", \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n       \
    \ $word = str_replace(\"(\", \"\", $word);\n        $word = str_replace(\")\"\
    , \"\", $word);\n        $word = str_replace(\"{\", \"\", $word);\n        $word\
    \ = str_replace(\"}\", \"\", $word);\n        $word = str_replace(\"[\", \"\"\
    , $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"\
    '\", \"\", $word);\n        $word = str_replace(\"!\", \"\", $word);\n       \
    \ $word = str_replace(\"?\", \"\", $word);\n        $word = str_replace(\";\"\
    , \"\", $word);\n        $word = str_replace(\",\", \"\", $word);\n        $word\
    \ = str_replace(\":\", \"\", $word);\n        $word = str_replace(\";\", \"\"\
    , $word);\n        $word = str_replace(\"!\", \"\", $word);\n        $word = str_replace(\"\
    ?\", \"\", $word);\n        $word = str_replace(\",\", \"\", $word);\n       \
    \ $word = str_replace(\";\", \"\", $word);\n        $word = str_replace(\",\"\
    , \"\", $word);\n        $word = str_replace(\";\", \"\", $word);\n        $word\
    \ = str_replace(\";\", \"\", $word);\n        $word = str_replace(\";\", \"\"\
    , $word);\n        $word = str_replace(\";\", \"\", $word);\n        $word = str_replace(\"\
    ;\", \"\", $word);\n        $word = str_replace(\";\", \"\", $word);\n       \
    \ $word = str_replace(\";\", \"\", $word);\n        $word = str_replace(\";\"\
    , \"\", $word);\n        $word = str_replace(\";\", \"\", $word);\n        $word\
    \ = str_replace(\";\", \"\", $word);\n        $word = str_replace(\";\", \"\"\
    , $word);\n        $word = str_replace(\";", "    $words = array();\n    foreach\
    \ (str_split($s) as $word) {\n        if (strlen($word) == $n) {\n           \
    \ $words[] = $word;\n        }\n    }\n    return $words;\n}\n", "    $words =\
    \ array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n\
    \        if (strlen($word) == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\
    This doesn't work if the word is longer than the desired number of consonants.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it yourself. It returns\
    \ an empty array if the word is longer than the desired number of consonants.\n\
    <|/ c |>\n<| c |>\nI tested it again and it does work. Try it yourself. It returns\
    \ an empty array if the word is longer than the desired number of consonants.\n\
    <|/ c |>\n<| c |>\nI tested it again and it does work. Try it yourself. It returns\
    \ an empty array if the word is longer than the desired number of consonants.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n    $i = 0;\n\
    \    while($i < strlen($s)) {\n        $words[] = substr($s, $i, 1);\n       \
    \ $i += 1;\n    }\n    sort($words);\n    $result = array();\n    foreach($words\
    \ as $word) {\n        if(strlen($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the word is longer than the\
    \ specified length. For example, `select_words(\"Hello world\", 4)` returns `array(\"\
    world\")` instead of `array(\"Hello\", \"world\")`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've edited my answer to fix the problem.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n    $i = 0;\n    $len\
    \ = strlen($s);\n    while($i < $len) {\n        $word = substr($s, $i, 1);\n\
    \        if($word == ' ') {\n            $i++;\n            continue;\n      \
    \  }\n        $consonants = count_consonants($word);\n        if($consonants ==\
    \ $n) {\n            $words[] = $word;\n        }\n        $i++;\n    }\n    return\
    \ $words;\n}\n", "    $words = array();\n    $words = explode(\" \", $s);\n  \
    \  foreach ($words as $word) {\n        if (strlen($word) == $n) {\n         \
    \   $words[] = $word;\n        }\n    }\n    return $words;\n}", "    $words =\
    \ array();\n    foreach (str_split($s) as $char) {\n        if ($char === ' ')\
    \ {\n            $words[] = '';\n        } else {\n            $words[] = $char;\n\
    \        }\n    }\n    return $words;\n}\n", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words =\
    \ array();\n    $i = 0;\n    $len = strlen($s);\n    while($i < $len) {\n    \
    \    $j = 0;\n        $substr = substr($s, $i, $n);\n        $len = strlen($substr);\n\
    \        while($j < $len) {\n            $consonants = str_split($substr[$j]);\n\
    \            foreach($consonants as $consonant) {\n                if(in_array($consonant,\
    \ $consonants)) {\n                    $words[] = $substr;\n                }\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ $words;\n}\n</code>\n<|/ a tags=string,php,algorithm |>\n<| c |>\nI really appreciate\
    \ your efforts, but I guess I wasn't clear enough in my question. I want to find\
    \ all words that contains exactly n consonants. So \"Mary had a little lamb\"\
    \ should return \"little\" and \"lamb\" but not \"Mary\" and \"lamb\".\n<|/ c\
    \ |>\n<| c |>\nI updated my answer to reflect your clarification.\n<|/ c |>\n\
    <| c |>\nThank you very much! I really appreciate your efforts, but I guess I\
    \ wasn't clear enough in my question. I want to find all words that contains exactly\
    \ n consonants. So \"Mary had a little lamb\" should return \"little\" and \"\
    lamb\" but not \"Mary\" and \"lamb\".\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to reflect your clarification.\n<|/ c |>\n<| c |>\nThank you very much! I really\
    \ appreciate your efforts, but I guess I wasn't clear enough in my question. I\
    \ want to find all words that contains exactly n consonants. So \"Mary had a little\
    \ lamb\" should return \"little\" and \"lamb\" but not \"Mary\" and \"lamb\".\n\
    <|/ c |>\n<| a tags=string,php,algorithm |>\n<code>\n<?php\n$string = \"Mary had\
    \ a little lamb\";\n$n = 3;\n$words = array();\n$words = preg_split('/\\s+/',\
    \ $string);\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = array_filter($words,\
    \ 'strlen');\n$words = array_filter($words, 'strlen');\n$words = ", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n       \
    \     continue;\n        }\n        $vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n        $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\");\n        $vowels_count = count(array_intersect($vowels,\
    \ str_split($word)));\n        $consonants_count = count(array_intersect($consonants,\
    \ str_split($word)));\n        if ($vowels_count == $n) {\n            $words[]\
    \ = $word;\n        }\n        if ($consonants_count == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,algorithm |>\n<code>\n<?php", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n\
    \        if (strlen($word) == 0) {\n            continue;\n        }\n       \
    \ $count = 0;\n        $letters = str_split($word);\n        foreach ($letters\
    \ as $letter) {\n            $count += substr_count($letter, \"a\");\n       \
    \ }\n        if ($count == $n) {\n            $words[] = $word;\n        }\n \
    \   }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your help! I really appreciate it. I tried your code, but I got this error \"\
    Warning: explode() expects parameter 2 to be string, array given in C:\\wamp\\\
    www\\wordcount\\wordcount.php on line 20\"\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to show you how to use `explode()`. You were passing an array instead of a string.\n\
    <|/ c |>\n<| c |>\nThanks again! I really appreciate it. I tried your code, but\
    \ I got this error \"Warning: explode() expects parameter 2 to be string, array\
    \ given in C:\\wamp\\www\\wordcount\\wordcount.php on line 20\"\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to show you how to use `explode()`. You were passing\
    \ an array instead of a string.\n<|/ c |>\n<| c |>\nThanks again! I really appreciate\
    \ it. I tried your code, but I got this error \"Warning: explode() expects parameter\
    \ 2 to be string, array given in C:\\wamp\\www\\wordcount\\wordcount.php on line\
    \ 20\"\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php", "    $words = array();\n \
    \   $words = explode(\" \", $s);\n    $words = array_filter($words);\n    $words\
    \ = array_unique($words);\n    $words = array_slice($words, 0, $n);\n    return\
    \ $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer.\
    \ Unfortunately I cannot use any string functions like explode, array_filter or\
    \ array_unique. I am not allowed to use any string functions. I must use only\
    \ loops, if statements, if else, switch statements, arrays, for loops, while loops,\
    \ if statements, switch statements, arrays, for loops, while loops, if statements,\
    \ switch statements, arrays, for loops, while loops, if statements, switch statements,\
    \ arrays, for loops, while loops, if statements, switch statements, arrays, for\
    \ loops, while loops, if statements, switch statements, arrays, for loops, while\
    \ loops, if statements, switch statements, arrays, for loops, while loops, if\
    \ statements, switch statements, arrays, for loops, while loops, if statements,\
    \ switch statements, arrays, for loops, while loops, if statements, switch statements,\
    \ arrays, for loops, while loops, if statements, switch statements, arrays, for\
    \ loops, while loops, if statements, switch statements, arrays, for loops, while\
    \ loops, if statements, switch statements, arrays, for loops, while loops, if\
    \ statements, switch statements, arrays, for loops, while loops, if statements,\
    \ switch statements, arrays, for loops, while loops, if statements, switch statements,\
    \ arrays, for loops, while loops, if statements, switch statements, arrays, for\
    \ loops, while loops, if statements, switch statements, arrays, for loops, while\
    \ loops, if statements, switch statements, arrays, for loops, while loops, if\
    \ statements, switch statements, arrays, for loops, while loops, if statements,\
    \ switch statements, arrays, for loops, while loops, if statements, switch statements,\
    \ arrays, for loops, while loops, if statements, switch statements, arrays, for\
    \ loops, while loops, if statements, switch statements, arrays, for loops, while\
    \ loops, if statements, switch statements, arrays, for loops, while loops, if\
    \ statements, switch statements, arrays, for loops, while loops, if statements,\
    \ switch statements, arrays, for loops, while loops, if statements, switch statements,\
    \ arrays, for loops, while loops, if statements, switch statements, arrays, for\
    \ loops, while loops, if statements, ", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    $words = array_filter($words);\n    $words = array_unique($words);\n\
    \    $words = array_slice($words, 0, $n);\n    return $words;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI appreciate your efforts, but the problem is that I cannot use\
    \ any of those functions. I must implement my own functions. I already have my\
    \ own functions to count vowels, consonants, etc. and to remove duplicate words.\
    \ But I cannot use any of those functions. I must implement my own functions to\
    \ count vowels, consonants, etc. and to remove duplicate words. But I cannot use\
    \ any of those functions. I must implement my own functions to count vowels, consonants,\
    \ etc. and to remove duplicate words. But I cannot use any of those functions.\
    \ I must implement my own functions to count vowels, consonants, etc. and to remove\
    \ duplicate words. But I cannot use any of those functions.\n<|/ c |>\n<| c |>\n\
    I appreciate your efforts, but the problem is that I cannot use any of those functions.\
    \ I must implement my own functions. I already have my own functions to count\
    \ vowels, consonants, etc. and to remove duplicate words. But I cannot use any\
    \ of those functions. I must implement my own functions to count vowels, consonants,\
    \ etc. and to remove duplicate words. But I cannot use any of those functions.\
    \ I must implement my own functions to count vowels, consonants, etc. and to remove\
    \ duplicate words. But I cannot use any of those functions.\n<|/ c |>\n<| c |>\n\
    I appreciate your efforts, but the problem is that I cannot use any of those functions.\
    \ I must implement my own functions. I already have my own functions to count\
    \ vowels, consonants, etc. and to remove duplicate words. But I cannot use any\
    \ of those functions. I must implement my own functions to count vowels, consonants,\
    \ etc. and to remove duplicate words. But I cannot use any of those functions.\
    \ I must implement my own functions to count vowels, consonants, etc. and to remove\
    \ duplicate words. But I cannot use any of those functions.\n<|/ c |>\n<| c |>\n\
    I appreciate your efforts, but the problem is that I cannot use any of those functions.\
    \ I must implement my own functions. I already have my own functions to count\
    \ vowels, consonants, etc. and to remove duplicate ", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    $words = array_filter($words);\n    $words\
    \ = array_unique($words);\n    $words = array_slice($words, 0, $n);\n    return\
    \ $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks for your answer. Unfortunately,\
    \ the code does not work as expected. For example, if I run `select_words(\"Hello\
    \ world\", 4)` I should get `array(\"world\")` but I get `array(\"Hello\", \"\
    world\")`.\n<|/ c |>\n<| c |>\nI edited my answer to include a function that should\
    \ do what you want. Let me know if that works.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Unfortunately, the code does not work as expected. For example,\
    \ if I run `select_words(\"Hello world\", 4)` I should get `array(\"world\")`\
    \ but I get `array(\"Hello\", \"world\")`.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a function that should do what you want. Let me know if that works.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately, the code does not work\
    \ as expected. For example, if I run `select_words(\"Hello world\", 4)` I should\
    \ get `array(\"world\")` but I get `array(\"Hello\", \"world\")`.\n<|/ c |>\n\
    <| a tags=php |>\n<code>\n<?php", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      $word = str_replace(\" \", \"\", $word);\n        $word = str_replace(\"\
    ,\", \"\", $word);\n        $word = str_replace(\".\", \"\", $word);\n       \
    \ $word = str_replace(\"!\", \"\", $word);\n        $word = str_replace(\"?\"\
    , \"\", $word);\n        $word = str_replace(\";\", \"\", $word);\n        $word\
    \ = str_replace(\":\", \"\", $word);\n        $word = str_replace(\"(\", \"\"\
    , $word);\n        $word = str_replace(\")\", \"\", $word);\n        $word = str_replace(\"\
    [\", \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n       \
    \ $word = str_replace(\"{\", \"\", $word);\n        $word = str_replace(\"}\"\
    , \"\", $word);\n        $word = str_replace(\"'\", \"\", $word);\n        $word\
    \ = str_replace(\"\\\"\", \"\", $word);\n        $word = str_replace(\"&\", \"\
    \", $word);\n        $word = str_replace(\"%\", \"\", $word);\n        $word =\
    \ str_replace(\"$\", \"\", $word);\n        $word = str_replace(\"!\", \"\", $word);\n\
    \        $word = str_replace(\"?\", \"\", $word);\n        $word = str_replace(\"\
    ;\", \"\", $word);\n        $word = str_replace(\":\", \"\", $word);\n       \
    \ $word = str_replace(\"(\", \"\", $word);\n        $word = str_replace(\")\"\
    , \"\", $word);\n        $word = str_replace(\"[\", \"\", $word);\n        $word\
    \ = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"{\", \"\"\
    , $word);\n        $word = str_replace(\"}\", \"\", $word);\n        $word = str_replace(\"\
    '\", \"\", $word);\n        $word = str_replace(\"\\\"\", \"\", $word);\n    \
    \    $word = str_replace(\"&\", \"\", $word);\n        $word = str_replace(\"\
    %\", \"\", $word);\n        $word = str_replace(\"$\", \"\", $word);\n       \
    \ $word = str_replace(\"!\", \"\", $word);\n        $word = str_replace(\"?\"\
    , \"\", $word);\n        $word = str_replace(\";\", \"\", $word);\n        $word\
    \ = str_replace(\":\", \"\", $word);\n        $word = str_replace(\"(\", \"\"\
    , $word);\n        $word = str_replace(\")\", \"\", $word);\n        $word = str_replace(\"\
    [\", \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n       \
    \ $word = str_replace(\"{\", \"\", $word);\n        $word = str_replace(\"}\"\
    , \"\", $word);\n        $word = str_replace", "    $words = array();\n    foreach\
    \ (str_word_count($s) as $word) {\n        if (strlen($word) == $n) {\n      \
    \      $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks so much for your help! I really appreciate it.\
    \ I tried your code, but I got this error when I ran it: Parse error: syntax error,\
    \ unexpected '$word' (T_VARIABLE) in /Applications/XAMPP/xamppfiles/htdocs/wordcount/wordcount.php\
    \ on line 20\n<|/ c |>\n<| c |>\nSorry, I forgot to add the closing bracket for\
    \ the foreach loop. I've edited my answer with the correct code.\n<|/ c |>\n<|\
    \ c |>\nThanks so much for your help! I really appreciate it. I tried your code,\
    \ but I got this error when I ran it: Parse error: syntax error, unexpected '$word'\
    \ (T_VARIABLE) in /Applications/XAMPP/xamppfiles/htdocs/wordcount/wordcount.php\
    \ on line 20\n<|/ c |>\n<| c |>\nI edited my answer with the correct code. There\
    \ was a missing closing bracket for the foreach loop.\n<|/ c |>\n<| c |>\nThanks\
    \ so much for your help! I really appreciate it. I tried your code, but I got\
    \ this error when I ran it: Parse error: syntax error, unexpected '$word' (T_VARIABLE)\
    \ in /Applications/XAMPP/xamppfiles/htdocs/wordcount/wordcount.php on line 20\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    Thanks so much for your help! I really appreciate it!\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number\
    \ of consonants to find\n$words = explode(\" \", $string);\n$result = array();\n\
    foreach ($words as $word) {\n    if (strlen($word) == $n) {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);", "    $words = array();\n    $words =\
    \ explode(' ', $s);\n    $words = array_filter($words, 'is_string');\n    $words\
    \ = array_filter($words, 'is_numeric');\n    $words = array_filter($words, 'is_array');\n\
    \    $words = array_filter($words, 'is_object');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n    $words\
    \ = array_filter($words, 'is_bool');\n    $words = array_filter($words, 'is_int');\n\
    \    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_object');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_int');\n    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_object');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_int');\n    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_object');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_int');\n    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_object');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_int');\n    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_object');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_int');\n    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter", "    $words = array();\n    \n   \
    \ // Your code here\n    \n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(' ', $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $i = 0;\n    $len = strlen($s);\n    while($i\
    \ < $len) {\n        $j = 0;\n        $word = \"\";\n        while($j < $n) {\n\
    \            $letter = substr($s, $i, 1);\n            if($letter != \" \") {\n\
    \                $word .= $letter;\n                $j++;\n            } else\
    \ {\n                break;\n            }\n        }\n        if($word != \"\"\
    ) {\n            $words[] = $word;\n        }\n        $i++;\n    }\n    return\
    \ $words;\n}\n", "    $words = array();\n    $words = explode(\" \", $s);\n  \
    \  $words = array_filter($words);\n    $words = array_unique($words);\n    $words\
    \ = array_slice($words, 0, $n);\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to return a list of words that contain the given number\
    \ of consonants, not a list of words that contain the given number of letters.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to reflect that.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n",
  "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        $word = strtolower($word);\n        $count = substr_count($word,\
    \ \"a\");\n        if ($count == $n) {\n            $words[] = $word;\n      \
    \  }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThis\
    \ doesn't work. `select_words(\"Hello world\", 4)` returns `array(\"world\")`\
    \ instead of `array()`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test cases. I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and PHP 5.4.4 and it works. I added the test cases.\
    \ I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\nI tested it on\
    \ PHP 5.3.10 and PHP 5.4.4 and it works. I added the test cases. I tested it on\
    \ PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and\
    \ PHP 5.4.4 and it works. I added the test cases. I tested it on PHP 5.3.10 and\
    \ PHP 5.4.4.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word\
    \ = trim($word);\n        if (strlen($word) == 0) {\n            continue;\n \
    \       }\n        $consonants = count_consonants($word);\n        if ($consonants\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer, but this does not work when there are multiple words in\
    \ the string that contain $n. For example, if $n is 3, then \"Mary had a little\
    \ lamb\" would return \"little\" instead of \"Mary\" and \"lamb\".\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that should work for multiple\
    \ words. I tested it and it works.\n<|/ c |>\n<| c |>\nThanks for your answer,\
    \ but this does not work when there are multiple words in the string that contain\
    \ $n. For example, if $n is 3, then \"Mary had a little lamb\" would return \"\
    little\" instead of \"Mary\" and \"lamb\".\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that should work for multiple words. I tested it and it\
    \ works.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php", "    $words = array();\n\
    \    $vowels = \"aeiou\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $vowels_count\
    \ = count($vowels);\n    $consonants_count = count($consonants);\n    $vowels_index\
    \ = 0;\n    $consonants_index = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n  \
    \  $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n\
    \    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n\
    \    $x = 0;\n    $y = 0;\n    $z = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found\
    \ = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found\
    \ = 0;\n    $consonants_found = 0;\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n",
  "    $words = array();\n    $words = explode(' ', $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = str_replace(\" \"\
    , \"\", $word);\n        $word = str_replace(\",\", \"\", $word);\n        $word\
    \ = str_replace(\"!\", \"\", $word);\n        $word = str_replace(\"?\", \"\"\
    , $word);\n        $word = str_replace(\"'\", \"\", $word);\n        $word = str_replace(\"\
    ;\", \"\", $word);\n        $word = str_replace(\":\", \"\", $word);\n       \
    \ $word = str_replace(\";\", \"\", $word);\n        $word = str_replace(\"(\"\
    , \"\", $word);\n        $word = str_replace(\")\", \"\", $word);\n        $word\
    \ = str_replace(\"[\", \"\", $word);\n        $word = str_replace(\"]\", \"\"\
    , $word);\n        $word = str_replace(\"{\", \"\", $word);\n        $word = str_replace(\"\
    }\", \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n       \
    \ $word = str_replace(\"[\", \"\", $word);\n        $word = str_replace(\"]\"\
    , \"\", $word);\n        $word = str_replace(\"{\", \"\", $word);\n        $word\
    \ = str_replace(\"}\", \"\", $word);\n        $word = str_replace(\"(\", \"\"\
    , $word);\n        $word = str_replace(\")\", \"\", $word);\n        $word = str_replace(\"\
    ;\", \"\", $word);\n        $word = str_replace(\"!\", \"\", $word);\n       \
    \ $word = str_replace(\"?\", \"\", $word);\n        $word = str_replace(\"'\"\
    , \"\", $word);\n        $word = str_replace(\",\", \"\", $word);\n        $word\
    \ = str_replace(\":\", \"\", $word);\n        $word = str_replace(\";\", \"\"\
    , $word);\n        $word = str_replace(\"(\", \"\", $word);\n        $word = str_replace(\"\
    )\", \"\", $word);\n        $word = str_replace(\"[\", \"\", $word);\n       \
    \ $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"{\"\
    , \"\", $word);\n        $word = str_replace(\"}\", \"\", $word);\n        $word\
    \ = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"[\", \"\"\
    , $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"\
    {\", \"\", $word);\n        $word = str_replace(\"}\", \"\", $word);\n       \
    \ $word = str_replace(\"(\", \"\", $word);\n        $word = str_replace(\")\"\
    , \"\", $word);\n        $word = str_replace(\";\", \"\", $word);\n        $word\
    \ = str_replace(\"!\", \"\", $word);\n        $word = str_replace(\"?\", \"\"\
    , $word);\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word\
    \ = trim($word);\n        if (strlen($word) == 0) {\n            continue;\n \
    \       }\n        $letters = str_split($word);\n        $count = 0;\n       \
    \ foreach ($letters as $letter) {\n            if ($letter == \"a\" || $letter\
    \ == \"e\" || $letter == \"i\" || $letter == \"o\" || $letter == \"u\") {\n  \
    \              $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThank you for your answer. I am not allowed to use\
    \ any built-in PHP functions. I should also note that the string may contain spaces.\n\
    <|/ c |>\n<| c |>\nI added a solution that does not use any built-in PHP functions.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThank you for your answer. I am not allowed\
    \ to use any built-in PHP functions. I should also note that the string may contain\
    \ spaces.\n<|/ c |>\n<| c |>\nI added a solution that does not use any built-in\
    \ PHP functions. I hope it helps.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    <?php\n$string = \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n\
    $count = count($words);\n$result = array();\nfor ($i = 0; $i < $count; $i++) {\n\
    \    $letters = str_split($words[$i]);\n    $count = 0;\n    foreach ($letters\
    \ as $letter) {\n        if ($letter == \"a\" || $letter == \"e\" || $letter ==\
    \ \"i\" || $letter == \"o\" || $letter == \"u\") {\n            $count++;\n  \
    \      }\n    }\n    if ($count == $n) {\n        $result[] = $words[$i];\n  \
    \  }\n}\nprint_r($result);", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n\
    \            $words[] = $word;\n        }\n    }\n    return $words;\n}\n", " \
    \   $words = array();\n    $i = 0;\n    $len = strlen($s);\n    while($i < $len)\
    \ {\n        $word = substr($s, $i, 1);\n        $i++;\n        $j = 0;\n    \
    \    $len2 = strlen($word);\n        while($j < $len2) {\n            $c = substr($word,\
    \ $j, 1);\n            if($c != $word[$j]) {\n                break;\n       \
    \     }\n            $j++;\n        }\n        if($j == $len2) {\n           \
    \ $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nI believe this fails for `select_words(\"Hello world\", 4)` as\
    \ it will return `array(\"world\")` instead of `array(\"Hello\", \"world\")`\n\
    <|/ c |>\n<| c |>\nI believe this fails for `select_words(\"Hello world\", 4)`\
    \ as it will return `array(\"world\")` instead of `array(\"Hello\", \"world\"\
    )`\n<|/ c |>\n<| c |>\nI believe this fails for `select_words(\"Hello world\"\
    , 4)` as it will return `array(\"world\")` instead of `array(\"Hello\", \"world\"\
    )`\n<|/ c |>\n<| c |>\nI believe this fails for `select_words(\"Hello world\"\
    , 4)` as it will return `array(\"world\")` instead of `array(\"Hello\", \"world\"\
    )`\n<|/ c |>\n<| c |>\nI believe this fails for `select_words(\"Hello world\"\
    , 4)` as it will return `array(\"world\")` instead of `array(\"Hello\", \"world\"\
    )`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    $words = array();\n    $words =\
    \ explode(\" \", $s);\n    $words = array_filter($words);\n    $words = array_unique($words);\n\
    \    $words = array_slice($words, 0, $n);\n    return $words;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nI appreciate your efforts, but this doesn't solve\
    \ the problem. I am not looking for a solution to my homework, I am looking for\
    \ a solution to my problem. I am not looking for a solution to my homework, I\
    \ am looking for a solution to my problem. I am not looking for a solution to\
    \ my homework, I am looking for a solution to my problem. I am not looking for\
    \ a solution to my homework, I am looking for a solution to my problem. I am not\
    \ looking for a solution to my homework, I am looking for a solution to my problem.\
    \ I am not looking for a solution to my homework, I am looking for a solution\
    \ to my problem. I am not looking for a solution to my homework, I am looking\
    \ for a solution to my problem. I am not looking for a solution to my homework,\
    \ I am looking for a solution to my problem. I am not looking for a solution to\
    \ my homework, I am looking for a solution to my problem. I am not looking for\
    \ a solution to my homework, I am looking for a solution to my problem. I am not\
    \ looking for a solution to my homework, I am looking for a solution to my problem.\
    \ I am not looking for a solution to my homework, I am looking for a solution\
    \ to my problem. I am not looking for a solution to my homework, I am looking\
    \ for a solution to my problem. I am not looking for a solution to my homework,\
    \ I am looking for a solution to my problem. I am not looking for a solution to\
    \ my homework, I am looking for a solution to my problem. I am not looking for\
    \ a solution to my homework, I am looking for a solution to my problem. I am not\
    \ looking for a solution to my homework, I am looking for a solution to my problem.\
    \ I am not looking for a solution to my homework, I am looking for a solution\
    \ to my problem. I am not looking for a solution to my homework, I am looking\
    \ for a solution to my problem. I am not looking for a solution to my homework,\
    \ I am looking for a solution to my problem. I am not looking for a solution to\
    \ my homework, I am looking for a solution to my problem. I am not looking for\
    \ a solution to my homework, I am looking for a solution to my problem. I am not\
    \ looking for a solution to my homework, I am looking for a solution to my problem.\
    \ I am not looking for a solution to my homework, I am looking for a solution\
    \ to my problem. I am not ", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n      \
    \  $count = count($word);\n        if ($count == $n) {\n            $words[] =\
    \ $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $i = 0;\n    $len = strlen($s);\n    while($i < $len) {\n        $words[]\
    \ = substr($s, $i, 1);\n        $i += 1;\n    }\n    return $words;\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThanks for your answer. Can you please explain\
    \ me how this works?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Can you please explain\
    \ me how this works?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    $words = array_filter($words);\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis doesn't work. Try it with `select_words(\"Hello world\", 4)`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\"\
    ;\n$n = 4;\n$words = explode(\" \", $string);\n$result = array();\nforeach ($words\
    \ as $word) {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n  \
    \  }\n}\nprint_r($result);", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n\
    \            $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nThis doesn't work if you pass it a string\
    \ with spaces in it.  It will split it into separate words.  Try it with `select_words(\"\
    Hello world\", 4)`\n<|/ c |>\n<| c |>\nI added a note about that to the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    $words = array();\n    $words = preg_split('/\\\
    s+/', $s);\n    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_bool');\n    $words = array_filter($words, 'is_int');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_bool');\n    $words = array_filter($words, 'is_int');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_bool');\n    $words = array_filter($words, 'is_int');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_bool');\n    $words = array_filter($words, 'is_int');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_bool');\n    $words = array_filter($words, 'is_int');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_object');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_bool');\n    $words = array_filter($words, 'is_int');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $", "  \
    \  $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| c |>\nThank you so much! This was very helpful!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $words = array();\n    $words = explode(' ', $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n", "    $words\
    \ = array();\n    foreach (str_split($s) as $letter) {\n        if (strlen($letter)\
    \ == $n) {\n            $words[] = $letter;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThank you so much! I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    $words = array_filter($words);\n    $words = array_unique($words);\n    $words\
    \ = array_slice($words, 0, $n);\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    $words = array_filter($words);\n    $words\
    \ = array_unique($words);\n    $words = array_slice($words, 0, $n);\n    return\
    \ $words;\n}", "    $words = array();\n    $words = explode(\" \", $s);\n    $words\
    \ = array_filter($words);\n    $words = array_unique($words);\n    $words = array_slice($words,\
    \ 0, $n);\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error \"Warning: array_slice()\
    \ expects parameter 1 to be array, null given in C:\\wamp\\www\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\words\\\
    words\\words\\words\\words\\words\\words\\words\\words\\", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/18608594)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to return\
    \ a list of words that contain the specified number of consonants. He also stated\
    \ that he was having trouble with the logic of his code. He also stated that he\
    \ was having trouble with the logic of his code. He also stated that he was having\
    \ trouble with the logic of his code. He also stated that he was having trouble\
    \ with the logic of his code. He also stated that he was having trouble with the\
    \ logic of his code. He also stated that he was having trouble with the logic\
    \ of his code. He also stated that he was having trouble with the logic of his\
    \ code. He also stated that he was having trouble with the logic of his code.\
    \ He also stated that he was having trouble with the logic of his code. He also\
    \ stated that he was having trouble with the logic of his code. He also stated\
    \ that he was having trouble with the logic of his code. He also stated that he\
    \ was having trouble with the logic of his code. He also stated that he was having\
    \ trouble with the logic of his code. He also stated that he was having trouble\
    \ with the logic of his code. He also stated that he was having trouble with the\
    \ logic of his code. He also stated that he was having trouble with the logic\
    \ of his code. He also stated that he was having trouble with the logic of his\
    \ code. He also stated that he was having trouble with the logic of his code.\
    \ He also stated that he was having trouble with the logic of his code. He also\
    \ stated that he was having trouble with the logic of his code. He also stated\
    \ that he was having trouble with the logic of his code. He also stated that he\
    \ was ", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $i = 0;\n    $len = strlen($s);\n    while ($i < $len) {\n        $words[]\
    \ = substr($s, $i, 1);\n        $i += 1;\n    }\n    return $words;\n}\n", " \
    \   $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThis doesn't work if you have a word like\
    \ \"uncle\" in the string and you search for \"uncl\"\n<|/ c |>\n<| c |>\nYes,\
    \ I know. That's why I wrote \"You may assume the input string contains only letters\
    \ and spaces.\"\n<|/ c |>\n<| c |>\nI see what you mean now. My mistake.\n<|/\
    \ c |>\n<| c |>\nI added a solution that should work for you\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        $letters = str_split($word);\n        $count =\
    \ 0;\n        foreach ($letters as $letter) {\n            if ($letter == \"a\"\
    \ || $letter == \"e\" || $letter == \"i\" || $letter == \"o\" || $letter == \"\
    u\") {\n                $count++;\n            }\n        }\n        if ($count\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! But I still don't\
    \ understand how I can use your code to solve my problem. Can you please explain\
    \ it a little bit more? Thanks!\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your help! But I still\
    \ don't understand how I can use your code to solve my problem. Can you please\
    \ explain it a little bit more? Thanks!\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your help! But I\
    \ still don't understand how I can use your code to solve my problem. Can you\
    \ please explain it a little bit more? Thanks!\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number\
    \ of consonants to find\n$words = array();\n$words = explode(\" \", $string);\n\
    $count = 0;\nforeach ($words as $word) {\n    $letters = str_split($word);\n \
    \   foreach ($letters as $letter) {\n        if ($letter == \"a\" || $letter ==\
    \ \"e\" || $letter == \"i\" || $letter == \"o\" || $letter == \"u\") {\n     \
    \       $count++;\n        }\n    }\n    if ($count == $n) {\n        $words[]\
    \ = $word;\n    }\n}\nprint_r($words);", "    $words = array();\n    $i = 0;\n\
    \    $len = strlen($s);\n    while($i < $len) {\n        $j = 0;\n        $word\
    \ = \"\";\n        while($j < $n) {\n            $j++;\n            $word .= $s[$i];\n\
    \            $i++;\n        }\n        $words[] = $word;\n    }\n    return $words;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/11889444)\n<|/ c\
    \ |>\n<| c |>\nThis does provide an answer to the question. He asked how to solve\
    \ the problem of finding all words in a string that contain exactly n consonants.\
    \ I provided a solution that does exactly that. He also asked how to solve the\
    \ problem of finding all words in a string that contain exactly n vowels. I provided\
    \ a solution that does exactly that. He also asked how to solve the problem of\
    \ finding all words in a string that contain exactly n vowels and exactly n consonants.\
    \ I provided a solution that does exactly that. He also asked how to solve the\
    \ problem of finding all words in a string that contain exactly n vowels and exactly\
    \ n consonants. I provided a solution that does exactly that. He also asked how\
    \ to solve the problem of finding all words in a string that contain exactly n\
    \ vowels and exactly n consonants. I provided a solution that does exactly that.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/11889444)\n<|/ c |>\n<| c |>\nI provided\
    \ a solution that does exactly that. He also asked how to solve the problem of\
    \ finding all words in a string that contain exactly n vowels. I provided a solution\
    \ that does exactly that. He also asked how to solve the problem of finding all\
    \ words in a string that contain exactly n vowels and exactly n consonants. I\
    \ provided a solution that does exactly that. He also asked how to solve the problem\
    \ of finding all words in a string that contain exactly n vowels and exactly n\
    \ consonants. I provided a solution that does exactly that. He also asked how\
    \ to solve the problem of ", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $word) {\n        $letters = str_split($word);\n\
    \        $count = 0;\n        foreach ($letters as $letter) {\n            if\
    \ ($letter == \"a\" || $letter == \"e\" || $letter == \"i\" || $letter == \"o\"\
    \ || $letter == \"u\") {\n                $count++;\n            }\n        }\n\
    \        if ($count == $n) {\n            $words[] = $word;\n        }\n    }\n\
    \    return $words;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly but i need to use only loops and\
    \ arrays. I edited my question and added my code with loops. Can you please help\
    \ me to improve my code?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that uses only loops and arrays. I hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly but i need to use only loops and\
    \ arrays. I edited my question and added my code with loops. Can you please help\
    \ me to improve my code?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that uses only loops and arrays. I hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"Mary had a little lamb\";\n$words = explode(\" \",\
    \ $string);\n$count = count($words);\n$result = [];\nfor($i = 0; $i < $count;\
    \ $i++) {\n    $letters = str_split($words[$i]);\n    $count = 0;\n    foreach($letters\
    \ as $letter) {\n        if($letter == \"a\" || $letter == \"e\" || $letter ==\
    \ \"i\" || $letter == \"o\" || $letter == \"u\") {\n            $count++;\n  \
    \      }\n    }\n    if($count == 4) {\n        $result[] = $words[$i];\n    }\n\
    }\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly but i need to use only loops and\
    \ arrays. I edited my question and added my code with loops. Can you please help\
    \ me to improve my code?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ \"Mary had a little lamb\";\n$", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n",
  "    $words = array();\n    $words = explode(\" \", $s);\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_numeric');\n    $words\
    \ = array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_array');\n    $words = array_filter($words, 'is_object');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = ", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_numeric');\n    $words = array_filter($words, 'is_integer');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_bool');\n    $words = array_filter($words, 'is_null');\n\
    \    $words = array_filter($words, 'is_array');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_scalar');\n    $words = array_filter($words, 'is_numeric');\n\
    \    $words = array_filter($words, 'is_integer');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_null');\n    $words = array_filter($words, 'is_array');\n\
    \    $words = array_filter($words, 'is_object');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n    $words\
    \ = array_filter($words, 'is_numeric');\n    $words = array_filter($words, 'is_integer');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_scalar');\n    $words = array_filter($words, 'is_null');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_object');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_scalar');\n\
    \    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_integer');\n    $words = array_filter($words, 'is_string');\n    $words\
    \ = array_filter($words, 'is_scalar');\n    $words = array_filter($words, 'is_null');\n\
    \    $words = array_filter($words, 'is_array');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_scalar');\n    $words = array_filter($words, 'is_numeric');\n\
    \    $words = array_filter($words, 'is_integer');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_null');\n    $words = ", "    $words = array();\n \
    \   $words = explode(\" \", $s);\n    $words = array_filter($words);\n    $words\
    \ = array_unique($words);\n    $words = array_slice($words, 0, $n);\n    return\
    \ $words;\n}\n", "    $words = array();\n    $words = explode(\" \", $s);\n  \
    \  foreach ($words as $word) {\n        if (strlen($word) == $n) {\n         \
    \   $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks for the help! I appreciate it!\n<|/ c |>\n<| c\
    \ |>\nNo problem! If this answer solved your problem, please consider marking\
    \ it as accepted by clicking the check mark next to the answer. Thanks!\n<|/ c\
    \ |>\n<| c |>\nI did but my reputation is too low for it to show publicly\n<|/\
    \ c |>\n<| c |>\nNo worries! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n\
    $words = explode(\" \", $string);\n$result = array();\nforeach ($words as $word)\
    \ {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);",
  "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your help. I understand that my code is not the most efficient, but\
    \ I wanted to try and solve the problem without using regex. My code was working\
    \ fine until I added the if statement to check if there are more than 2 consonants\
    \ in the string. Now it just returns an empty array. Do you know why this is?\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that does not use\
    \ regex. Hope it helps.\n<|/ c |>\n<| c |>\nThanks so much! I understand my code\
    \ was a little confusing and I appreciate you taking the time to help me out.\
    \ I will try and implement your solution and see how it goes. Thanks again!\n\
    <|/ c |>\n<| c |>\nNo problem! Let me know if you have any questions.\n<|/ c |>\n\
    <| c |>\nHi again, I have tried implementing your solution and I am still getting\
    \ an empty array. I am not sure why. Do you know why this is?\n<|/ c |>\n<| a\
    \ tags=arrays,php,string |>\n<code>\n<?php\n$string = \"Mary had a little lamb\"\
    ;\n$array = explode(\" \", $string);\n$consonants = array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\");\n$consonants_count = count($consonants);\n$consonants_count\
    \ = count($consonants);\n$consonants_count = count($consonants);\n$consonants_count\
    \ = count($consonants);\n$consonants_count = count($consonants);\n$consonants_count\
    \ = count($consonants);\n$consonants_count = count($consonants);\n$consonants_count\
    \ = count($consonants);\n$consonants_count = count($consonants);\n$consonants_count\
    \ = count($consonants);\n$consonants_count = count($consonants);\n$consonants_count\
    \ = count($consonants);\n$consonants_count = count($consonants);\n$consonants_count\
    \ = count($conson", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    $words = array_filter($words);\n    $words = array_unique($words);\n    $words\
    \ = array_slice($words, 0, $n);\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. I am not allowed to use any loops or arrays. I only need to use if statements\
    \ and conditional statements.\n<|/ c |>\n<| c |>\nI added a solution that does\
    \ not use any loops or arrays. But I still think you should try to understand\
    \ how it works.\n<|/ c |>\n<| c |>\nThank you for your help. I understand it now.\
    \ I am just trying to understand how it works. I appreciate your help.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that does not use any loops or arrays. But I\
    \ still think you should try to understand how it works.\n<|/ c |>\n<| a |>\n\
    <code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n\
    \n$words = explode(\" \", $string);\n$result = array();\nforeach ($words as $word)\
    \ {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a tags=php dscore=0 |>\n<| c |>\nThank you for your answer. I am\
    \ not allowed to use any loops or arrays. I only need to use if statements and\
    \ conditional statements.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n$string\
    \ = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n\n$words = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I am not allowed to use\
    \ any loops or arrays. I only need to use if statements and conditional statements.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\"\
    ;\n$n = 4; // number of consonants\n\n$words = explode(\" \", $string);\n$result\
    \ = array();\nforeach ($words as $word) {\n    if (strlen($", "    $words = array();\n\
    \    \n    // Your code here\n    \n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n", "    $words = array();\n    $words = explode(\" \",\
    \ $s);\n    $words = array_filter($words);\n    $words = array_unique($words);\n\
    \    $words = array_slice($words, 0, $n);\n    return $words;\n}\n</code>\n<|/\
    \ a tags=php,arrays,string |>\n<| c |>\nI appreciate your effort but this does\
    \ not solve the problem of not being able to use array_filter\n<|/ c |>\n<| c\
    \ |>\nI added a solution that uses array_filter\n<|/ c |>\n<| c |>\nThanks for\
    \ your effort but this does not solve the problem of not being able to use array_filter\n\
    <|/ c |>\n<| c |>\nI added a solution that uses array_filter\n<|/ c |>\n<| c |>\n\
    Thanks for your effort but this does not solve the problem of not being able to\
    \ use array_filter\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n<?php",
  "    $words = array();\n    $vowels = \"aeiou\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    $vowels_count = count($vowels);\n    $consonants_count = count($consonants);\n\
    \    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = strlen($s);\n    while($i < $l)\
    \ {\n        $word = substr($s, $i, 1);\n        if($word == \" \") {\n      \
    \      $i++;\n            continue;\n        }\n        $word_length = strlen($word);\n\
    \        if($word_length == 1) {\n            $words[] = $word;\n            $i++;\n\
    \            continue;\n        }\n        $j = 0;\n        while($j < $word_length)\
    \ {\n            if($word[$j] == $vowels[$k]) {\n                $words[] = $word;\n\
    \                $i++;\n                $j++;\n                $k++;\n       \
    \         $word_length--;\n                $k = $k == $vowels_count ? $k : $k\
    \ + 1;\n                $j = $j == $consonants_count ? $j : $j + 1;\n        \
    \        $word_length--;\n                $j = $j == $consonants_count ? $j :\
    \ $j + 1;\n                $word_length--;\n                $j = $j == $consonants_count\
    \ ? $j : $j + 1;\n                $word_length--;\n                $j = $j ==\
    \ $consonants_count ? $j : $j + 1;\n                $word_length--;\n        \
    \        $j = $j == $consonants_count ? $j : $j + 1;\n                $word_length--;\n\
    \                $j = $j == $consonants_count ? $j : $j + 1;\n               \
    \ $word_length--;\n                $j = $j == $consonants_count ? $j : $j + 1;\n\
    \                $word_length--;\n                $j = $j == $consonants_count\
    \ ? $j : $j + 1;\n                $word_length--;\n                $j = $j ==\
    \ $consonants_count ? $j : $j + 1;\n                $word_length--;\n        \
    \        $j = $j == $consonants_count ? $j : $j + 1;\n                $word_length--;\n\
    \                $j = $j == $consonants_count ? $j : $j + 1;\n               \
    \ $word_length--;\n                $j = $j == $consonants_count ? $j : $j + 1;\n\
    \                $word_length--;\n                $j = $j == $consonants_count\
    \ ? $j : $j + 1;\n                $word_length--;", "    $words = array();\n \
    \   $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n", "    $words = array();\n    $i = 0;\n    $len = strlen($s);\n\
    \    while($i < $len) {\n        $j = 0;\n        $k = 0;\n        while($j <\
    \ $n && $k < $len) {\n            if($s[$j] == $s[$k]) {\n                $j++;\n\
    \                $k++;\n            }\n            else {\n                $words[]\
    \ = $s[$j];\n                $j++;\n                $k++;\n            }\n   \
    \     }\n        $i++;\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you for your answer! I appreciate it. I will try this out\
    \ and see if it works. I appreciate your help and time.\n<|/ c |>\n<| c |>\nI\
    \ ran your code, and it works great! Thank you so much! I appreciate your time\
    \ and help.\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a\
    \ tags=php,arrays,string |>\n<code>", "    $words = array();\n    $i = 0;\n  \
    \  $len = strlen($s);\n    while($i < $len) {\n        $words[] = substr($s, $i,\
    \ 1);\n        $i += 1;\n    }\n    sort($words);\n    $count = 0;\n    $len =\
    \ count($words);\n    while($count < $n) {\n        if(in_array($words[$count],\
    \ $words)) {\n            $count++;\n        }\n    }\n    return $words;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary\
    \ had a little lamb\";\n$n = 4; // number of consonants required\n$words = array();\n\
    $i = 0;\n$len = strlen($string);\nwhile($i < $len) {\n    $words[] = substr($string,\
    \ $i, 1);\n    $i += 1;\n}\nsort($words);\n$count = 0;\n$len = count($words);\n\
    while($count < $n) {\n    if(in_array($words[$count], $words)) {\n        $count++;\n\
    \    }\n}\nprint_r($words);", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    $words = array_filter($words);\n    $words = array_unique($words);\n\
    \    $words = array_slice($words, 0, $n);\n    return $words;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ built-in functions. I must implement my own functions. I edited my question\
    \ to include my own functions. I hope this helps.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include your functions. I hope this helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your help. I edited my question to include my own functions. I hope\
    \ this helps.\n<|/ c |>\n<| c |>\nI edited my answer to include your functions.\
    \ I hope this helps.\n<|/ c |>\n<| c |>\nThanks for your help. I edited my question\
    \ to include my own functions. I hope this helps.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    foreach ($words as $word) {\n        $word = trim($word);\n        if (strlen($word)\
    \ == 0) {\n            continue;\n        }\n        $count = 0;\n        $letters\
    \ = str_split($word);\n        foreach ($letters as $letter) {\n            $count\
    \ += substr_count($letter, \"a\");\n        }\n        if ($count == $n) {\n \
    \           $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work as expected. Try it out with select_words(\"Mary had a little lamb\", 4)\
    \ and you'll see that \"little\" isn't in the result.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've updated my answer to include a solution that should work\
    \ as expected.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this\
    \ doesn't work as expected. Try it out with select_words(\"Mary had a little lamb\"\
    , 4) and you'll see that \"little\" isn't in the result.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've updated my answer to include a solution that should\
    \ work as expected.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work as expected. Try it out with select_words(\"Mary had a little\
    \ lamb\", 4) and you'll see that \"little\" isn't in the result.\n<|/ c |>\n<|\
    \ a |>\n<code>", "    $words = array();\n    $words = explode(\" \", $s);\n  \
    \  $words = array_filter($words);\n    $words = array_unique($words);\n    $words\
    \ = array_slice($words, 0, $n);\n    return $words;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis code doesn't work when there are multiple spaces between words.\
    \ For example, if `$s = \"Hello world\"`, then `$n = 3` should return `array(\"\
    Hello\", \"world\")`, but your code returns `array(\"Hello\", \"world\", \"world\"\
    )`.\n<|/ c |>\n<| c |>\nI edited the code so that it now works with multiple spaces\
    \ between words. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work when there are multiple spaces between words. For example, if `$s = \"\
    Hello world\"`, then `$n = 3` should return `array(\"Hello\", \"world\")`, but\
    \ your code returns `array(\"Hello\", \"world\", \"world\")`.\n<|/ c |>\n<| c\
    \ |>\nI edited the code so that it now works with multiple spaces between words.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis code doesn't work when\
    \ there are multiple spaces between words. For example, if `$s = \"Hello world\"\
    `, then `$n = 3` should return `array(\"Hello\", \"world\")`, but your code returns\
    \ `array(\"Hello\", \"world\", \"world\")`.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php", "    $words = array();\n    $i = 0;\n    $len = strlen($s);\n\
    \    while($i < $len) {\n        $words[] = substr($s, $i, 1);\n        $i +=\
    \ 1;\n    }\n    $len = count($words);\n    for($i = 0; $i < $n; $i++) {\n   \
    \     $found = false;\n        for($j = 0; $j < $len; $j++) {\n            if($words[$j]\
    \ == substr($s, $i, 1)) {\n                $found = true;\n                break;\n\
    \            }\n        }\n        if(!$found) {\n            return array();\n\
    \        }\n    }\n    return $words;\n}\n", "    $words = array();\n    $words\
    \ = preg_split('/\\s+/', $s);\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_null');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $words = array_filter($words, 'is_callable');\n    $words\
    \ = array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_callable');\n\
    \    $words = array_filter($words, 'is_callable');\n    $words = array_filter($words,\
    \ 'is_callable');\n    $", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n      \
    \  if (strlen($word) == 0) {\n            continue;\n        }\n        $consonants\
    \ = count_consonants($word);\n        if ($consonants == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    $words = array_filter($words, \"is_string\"\
    );\n    $words = array_filter($words, \"is_numeric\");\n    $words = array_filter($words,\
    \ \"is_array\");\n    $words = array_filter($words, \"is_null\");\n    $words\
    \ = array_filter($words, \"is_bool\");\n    $words = array_filter($words, \"is_object\"\
    );\n    $words = array_filter($words, \"is_scalar\");\n    $words = array_filter($words,\
    \ \"is_callable\");\n    $words = array_filter($words, \"is_resource\");\n   \
    \ $words = array_filter($words, \"is_scalar\");\n    $words = array_filter($words,\
    \ \"is_array\");\n    $words = array_filter($words, \"is_object\");\n    $words\
    \ = array_filter($words, \"is_scalar\");\n    $words = array_filter($words, \"\
    is_callable\");\n    $words = array_filter($words, \"is_resource\");\n    $words\
    \ = array_filter($words, \"is_scalar\");\n    $words = array_filter($words, \"\
    is_array\");\n    $words = array_filter($words, \"is_object\");\n    $words =\
    \ array_filter($words, \"is_scalar\");\n    $words = array_filter($words, \"is_callable\"\
    );\n    $words = array_filter($words, \"is_resource\");\n    $words = array_filter($words,\
    \ \"is_scalar\");\n    $words = array_filter($words, \"is_array\");\n    $words\
    \ = array_filter($words, \"is_object\");\n    $words = array_filter($words, \"\
    is_scalar\");\n    $words = array_filter($words, \"is_callable\");\n    $words\
    \ = array_filter($words, \"is_resource\");\n    $words = array_filter($words,\
    \ \"is_scalar\");\n    $words = array_filter($words, \"is_array\");\n    $words\
    \ = array_filter($words, \"is_object\");\n    $words = array_filter($words, \"\
    is_scalar\");\n    $words = array_filter($words, \"is_callable\");\n    $words\
    \ = array_filter($words, \"is_resource\");\n    $words = array_filter($words,\
    \ \"is_scalar\");\n    $words = array_filter($words, \"is_array\");\n    $words\
    \ = array_filter($words, \"is_object\");\n    $words = array_filter($words, \"\
    is_scalar\");\n    $words = array_filter($words, \"is_callable\");\n    $words\
    \ = array_filter($words, \"is_resource\");\n    $words = array_filter($words,\
    \ \"is_scalar\");\n    $words = array_filter($words, \"is_array\");\n    $words\
    \ = array_filter($words, \"is_object\");\n    $words = array_filter($words, \"\
    is_scalar\");\n    $words = array_filter($words, \"is_callable\");\n    $words\
    \ = array_filter($words, \"is_resource\");\n    $words = ", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `select_words(\"Mary had a little lamb\", 4)`\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've updated my answer to account for that.\n<|/ c |>\n<|\
    \ c |>\nThis still doesn't work. Try it with `select_words(\"Hello world\", 4)`\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with `select_words(\"\
    Hello world\", 4)`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words =\
    \ array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n\
    \        $word = trim($word);\n        if (strlen($word) == 0) {\n           \
    \ continue;\n        }\n        $count = 0;\n        $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n        $consonants = array(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        $vowels_count = count($vowels);\n\
    \        $consonants_count = count($consonants);\n        $word_count = strlen($word);\n\
    \        for ($i = 0; $i < $word_count; $i++) {\n            $letter = $word[$i];\n\
    \            if ($letter == \" \") {\n                continue;\n            }\n\
    \            $count++;\n            if ($count == $n) {\n                $words[]\
    \ = $word;\n                break;\n            }\n            if (in_array($letter,\
    \ $vowels)) {\n                $count++;\n            }\n            if (in_array($letter,\
    \ $consonants)) {\n                $count++;\n            }\n        }\n    }\n\
    \    return $words;\n}\n", "    $words = array();\n    $i = 0;\n    while(count($words)\
    \ < $n && $i < strlen($s)) {\n        $word = substr($s, $i, 1);\n        if($word\
    \ == ' ' || $word == '-' || $word == '_') {\n            $i++;\n            continue;\n\
    \        }\n        $words[] = $word;\n        $i++;\n    }\n    return $words;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ work. Try it out with select_words(\"Hello world\", 4)\n<|/ c |>\n<| c |>\n\
    I added a test case to my answer. Does it work for you?\n<|/ c |>\n<| c |>\nYes,\
    \ it does. Thank you very much!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}", "    $words = array();\n    foreach (explode(\"\
    \ \", $s) as $word) {\n        if (strlen($word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $i = 0;\n    $len = strlen($s);\n    while($i < $len) {\n        $j = 0;\n\
    \        $word = \"\";\n        while($j < $n) {\n            $letter = substr($s,\
    \ $i, 1);\n            if($letter != \" \") {\n                $word .= $letter;\n\
    \                $j++;\n            }\n        }\n        if($word != \"\") {\n\
    \            $words[] = $word;\n        }\n        $i++;\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(\" \", $s);\n    $words = array_filter($words);\n\
    \    $words = array_unique($words);\n    $words = array_slice($words, 0, $n);\n\
    \    return $words;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThanks\
    \ for the answer. Can you please explain what this line is doing?\n$words = array_filter($words);\n\
    <|/ c |>\n<| c |>\nIt removes duplicate words from the array. [array_filter](http://php.net/manual/en/function.array-filter.php)\
    \ is a function that removes elements from an array that do not satisfy a certain\
    \ criteria. In this case, the criteria is that the word should be unique.\n<|/\
    \ c |>\n<| c |>\nThanks for the explanation. Can you please explain what this\
    \ line is doing?\n$words = array_filter($words);\n<|/ c |>\n<| c |>\nIt removes\
    \ duplicate words from the array. [array_filter](http://php.net/manual/en/function.array-filter.php)\
    \ is a function that removes elements from an array that do not satisfy a certain\
    \ criteria. In this case, the criteria is that the word should be unique.\n<|/\
    \ c |>\n<| c |>\nThanks for the explanation. Can you please explain what this\
    \ line is doing?\n$words = array_filter($words);\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"Mary had a little lamb\";\n$words = explode(\" \",\
    \ $string);\n$words = array_unique($words);\n$words = array_slice($words, 0, 4);\n\
    print_r($words);", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThanks\
    \ for your answer. Your code works fine but i want to know why my code is not\
    \ working and why my code is not giving any error or warning. Can you please explain\
    \ me why my code is not working and why my code is not giving any error or warning.\n\
    <|/ c |>\n<| c |>\nYour code is not working because you didn't use any loop to\
    \ iterate over the words in `$s`. Your code is not giving any error because you\
    \ didn't use any error reporting mechanism. Your code is not giving any warning\
    \ because you didn't use any error reporting mechanism. Your code is not giving\
    \ any error because you didn't use any error reporting mechanism. Your code is\
    \ not giving any error because you didn't use any error reporting mechanism. Your\
    \ code is not giving any error because you didn't use any error reporting mechanism.\
    \ Your code is not giving any error because you didn't use any error reporting\
    \ mechanism. Your code is not giving any error because you didn't use any error\
    \ reporting mechanism. Your code is not giving any error because you didn't use\
    \ any error reporting mechanism. Your code is not giving any error because you\
    \ didn't use any error reporting mechanism. Your code is not giving any error\
    \ because you didn't use any error reporting mechanism. Your code is not giving\
    \ any error because you didn't use any error reporting mechanism. Your code is\
    \ not giving any error because you didn't use any error reporting mechanism. Your\
    \ code is not giving any error because you didn't use any error reporting mechanism.\n\
    <|/ c |>\n<| c |>\nYour code is not giving any error because you didn't use any\
    \ error reporting mechanism. Your code is not giving any error because you didn't\
    \ use any error reporting mechanism. Your code is not giving any error because\
    \ you didn't use any error reporting mechanism. Your code is not giving any error\
    \ because you didn't use any error reporting mechanism. Your code is not giving\
    \ any error because you didn't use any error reporting mechanism. Your code is\
    \ not giving any error because you didn't use any error reporting mechanism. Your\
    \ code is not giving any error because you didn't use any error reporting mechanism.\
    \ Your code is not giving any error because you didn't use any error reporting\
    \ mechanism", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        $word = trim($word);\n        if (strlen($word)\
    \ == 0) {\n            continue;\n        }\n        $letters = str_split($word);\n\
    \        $count = 0;\n        foreach ($letters as $letter) {\n            if\
    \ ($letter == \"a\" || $letter == \"e\" || $letter == \"i\" || $letter == \"o\"\
    \ || $letter == \"u\") {\n                $count++;\n            }\n        }\n\
    \        if ($count == $n) {\n            $words[] = $word;\n        }\n    }\n\
    \    return $words;\n}\n", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n\
    \            $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n\
    <|/ a tags=php |>\n<| c |>\nThanks for your answer. I'm still learning PHP and\
    \ I appreciate your help. I understand how your solution works but I'm having\
    \ trouble understanding how it works. I understand that you're splitting the string\
    \ into an array but I don't understand how you're getting the words that contain\
    \ the number of consonants you're looking for. Could you please explain how this\
    \ works?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks so much for your help. I understand it now. One last\
    \ question, what is the purpose of the $n variable in the function? I understand\
    \ that you're getting the number of consonants you're looking for but I don't\
    \ understand why you're using $n. Thanks again!\n<|/ c |>\n<| c |>\nThe `$n` variable\
    \ is just there to keep track of how many consonants we're looking for. Since\
    \ we're looking for the number of consonants, we could just as easily have used\
    \ `$s` instead. Since we're looking for the number of consonants, we could also\
    \ have used `$n` instead. Since we're looking for the number of consonants, we\
    \ could also have used `$i` instead. Since we're looking for the number of consonants,\
    \ we could also have used `$j` instead. Since we're looking for the number of\
    \ consonants, we could also have used `$k` instead. Since we're looking for the\
    \ number of consonants, we could also have used `$l` instead. Since we're looking\
    \ for the number of consonants, we could also have used `$m` instead. Since we're\
    \ looking for the number of consonants, we could also have used `$n` instead.\n\
    <|/ c |>\n<| c |>\nThanks so much for your help. I understand it now. One last\
    \ question, what is the purpose of the $n variable in the function? I understand\
    \ that you're getting the number of consonants you're looking for but I don't\
    \ understand why you're using $n. Thanks again!\n<|/ c |>\n<| a tags=php |>\n\
    <code>", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        if (strlen($word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = preg_split('/\\s+/', $s);\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for me. However I still don't understand why my code doesn't work.\
    \ Could you please explain it to me?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer, hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ code works perfectly for me. However I still don't understand why my code doesn't\
    \ work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer, hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ code works perfectly for me. However I still don't understand why my code doesn't\
    \ work. Could you please explain it to me?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n", "    $words = array();\n    $words = preg_split('/\\s+/', $s);\n   \
    \ $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_null');\n    $words = array_filter($words, 'is_array');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $", "    $words = array();\n    foreach (str_word_count($s, 1) as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $words = array();\n    $vowels = \"aeiou\";\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $vowels_count = count($vowels);\n    $consonants_count\
    \ = count($consonants);\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n\
    \    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n\
    \    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n\
    \    $y = 0;\n    $z = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $vowels_found = 0;\n\
    \    $consonants_found = 0;\n    $vowels_found = 0;\n    $consonants_found = 0;\n",
  "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n\
    \            continue;\n        }\n        $count = 0;\n        $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        $consonants = array(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        foreach ($vowels\
    \ as $vowel) {\n            if (strpos($word, $vowel) !== false) {\n         \
    \       $count++;\n            }\n        }\n        foreach ($consonants as $consonant)\
    \ {\n            if (strpos($word, $consonant) !== false) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $words[] =\
    \ $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nI appreciate your efforts, but this does not solve the problem\
    \ as stated in the question. Your code returns an empty array for \"Hello world\"\
    \ when it should return \"world\".\n<|/ c |>\n<| c |>\nI apologize for not reading\
    \ the question thoroughly enough. I've updated my answer to include a solution\
    \ that works.\n<|/ c |>\n<| c |>\nThank you for taking the time to write this\
    \ up. I appreciate it. I will test it out and let you know if it works.\n<|/ c\
    \ |>\n<| c |>\nThis works perfectly. Thank you so much for your help.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "    $words = array();\n    $words = explode(' ', $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n", "    $words\
    \ = array();\n    $vowels = \"aeiou\";\n    $consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    $vowels_count = count($vowels);\n    $consonants_count = count($consonants);\n\
    \    $vowels_index = array_search($vowels, $s);\n    $consonants_index = array_search($consonants,\
    \ $s);\n    $vowels_count = count($vowels);\n    $consonants_count = count($consonants);\n\
    \    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n\
    \    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n\
    \    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n\
    \    $vowels_index = 0;\n    $consonants_index = 0;\n    $vowels_count = 0;\n\
    \    $consonants_count = 0;\n    $vowels_index = 0;\n    $consonants_index = 0;\n\
    \    $vowels_count = 0;\n    $consonants_count = 0;\n    $vowels_index = 0;\n\
    \    $consonants_index = 0;\n    $vowels_count = 0;\n    $consonants_count = 0;\n\
    \    $vowels_index = 0;\n    $consonants_index = 0;\n    $vowels_count = 0;\n\
    \    $consonants_count = 0;\n    $vowels_index = 0;\n    $consonants_index = 0;\n\
    \    $vowels_count = 0;\n    $consonants_count = 0;\n    $vowels_index = 0;\n\
    \    $consonants_index = 0;\n    $vowels_count = 0;\n    $consonants_count = 0;\n\
    \    $vowels_index = 0;\n    $consonants_index = 0;\n    $vowels_count = 0;\n\
    \    $consonants_count = 0;\n    $vowels_index = 0;\n    $consonants_index = 0;\n\
    \    $vowels_count = 0;\n    $consonants_count = 0;\n    $vowels_index = 0;\n\
    \    $consonants_index = 0;\n    $vowels_count = 0;\n    $consonants_count = 0;\n\
    \    $vowels_index = 0;\n    $consonants_index = 0;\n    $vowels_count = 0;\n\
    \    $consonants_count = 0;\n    $vowels_index = 0;\n    $consonants_index = 0;\n\
    \    $vowels_count = 0;\n    $consonants_count = 0;\n    $vowels_index = 0;\n\
    \    $consonants_index = 0;\n    $vowels_count = 0;\n    $consonants_count = 0;\n\
    \    $vowels_index = 0;\n    $consonants_index = 0;\n    $vowels_count = 0;\n\
    \    $consonants_count = 0;\n    $vowels_index", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    $words = array_filter($words, \"is_string\");\n \
    \   $words = array_filter($words, \"is_numeric\");\n    $words = array_filter($words,\
    \ \"is_array\");\n    $words = array_filter($words, \"is_object\");\n    $words\
    \ = array_filter($words, \"is_bool\");\n    $words = array_filter($words, \"is_scalar\"\
    );\n    $words = array_filter($words, \"is_callable\");\n    $words = array_filter($words,\
    \ \"is_resource\");\n    $words = array_filter($words, \"is_int\");\n    $words\
    \ = array_filter($words, \"is_float\");\n    $words = array_filter($words, \"\
    is_double\");\n    $words = array_filter($words, \"is_string\");\n    $words =\
    \ array_filter($words, \"is_array\");\n    $words = array_filter($words, \"is_object\"\
    );\n    $words = array_filter($words, \"is_bool\");\n    $words = array_filter($words,\
    \ \"is_scalar\");\n    $words = array_filter($words, \"is_callable\");\n    $words\
    \ = array_filter($words, \"is_resource\");\n    $words = array_filter($words,\
    \ \"is_int\");\n    $words = array_filter($words, \"is_float\");\n    $words =\
    \ array_filter($words, \"is_double\");\n    $words = array_filter($words, \"is_string\"\
    );\n    $words = array_filter($words, \"is_array\");\n    $words = array_filter($words,\
    \ \"is_object\");\n    $words = array_filter($words, \"is_bool\");\n    $words\
    \ = array_filter($words, \"is_scalar\");\n    $words = array_filter($words, \"\
    is_callable\");\n    $words = array_filter($words, \"is_resource\");\n    $words\
    \ = array_filter($words, \"is_int\");\n    $words = array_filter($words, \"is_float\"\
    );\n    $words = array_filter($words, \"is_double\");\n    $words = array_filter($words,\
    \ \"is_string\");\n    $words = array_filter($words, \"is_array\");\n    $words\
    \ = array_filter($words, \"is_object\");\n    $words = array_filter($words, \"\
    is_bool\");\n    $words = array_filter($words, \"is_scalar\");\n    $words = array_filter($words,\
    \ \"is_callable\");\n    $words = array_filter($words, \"is_resource\");\n   \
    \ $words = array_filter($words, \"is_int\");\n    $words = array_filter($words,\
    \ \"is_float\");\n    $words = array_filter($words, \"is_double\");\n    $words\
    \ = array_filter($words, \"is_string\");\n    $words = array_filter($words, \"\
    is_array\");\n    $words = array_filter($words, \"is_object\");\n    $words =\
    \ array_filter($words, \"is_bool\");\n    $words = ", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word\
    \ = trim($word);\n        if (strlen($word) == 0) {\n            continue;\n \
    \       }\n        $consonants = count_consonants($word);\n        if ($consonants\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"\
    Mary had a little lamb\";\n$words = explode(\" \", $string);\n$result = array();\n\
    foreach ($words as $word) {\n    if (strlen($word) == 4) {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"\
    Mary had a little lamb\";\n$words = explode(\" \", $string);\n$result = array();\n\
    foreach ($words as $word) {\n    if (strlen($word) == 4) {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"\
    Mary had a little lamb\";\n$words = explode", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer! I appreciate\
    \ it! I did some research and found out that my code was actually correct. My\
    \ problem was that I was trying to solve a problem on HackerRank which was a little\
    \ different than my code. Thank you for your help though!\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    foreach ($words as $word) {\n        $word = trim($word);\n        if (strlen($word)\
    \ == 0) {\n            continue;\n        }\n        $consonants = count_consonants($word);\n\
    \        if ($consonants == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n", "    $words = array();\n    $vowels = \"aeiou\"\
    ;\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $vowels_count = count($vowels);\n\
    \    $consonants_count = count($consonants);\n    $vowels_index = 0;\n    $consonants_index\
    \ = 0;\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n\
    \ = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t\
    \ = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z\
    \ = 0;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n    $vowels_found = false;\n    $consonants_found = false;\n    $vowels_found\
    \ = false;\n    $consonants_found = false;\n    $vowels_found = false;\n    $consonants_found\
    \ = false;\n", "    $words = array();\n    $i = 0;\n    $len = strlen($s);\n \
    \   while($i < $len) {\n        $words[] = substr($s, $i, 1);\n        $i += 1;\n\
    \    }\n    $words = array_unique($words);\n    $count = count($words);\n    for($i\
    \ = 0; $i < $count; $i++) {\n        if($words[$i] == $n) {\n            $words[$i]\
    \ = $n;\n        }\n    }\n    return $words;\n}", "    $words = array();\n  \
    \  foreach (str_split($s) as $char) {\n        if ($char == ' ') {\n         \
    \   $words[] = $char;\n        }\n    }\n    return $words;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks for your answer, but this doesn't work. Try it\
    \ on \"Mary had a little lamb\" and you'll see that it returns \"lamb\" instead\
    \ of \"little\".\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to include a solution that doesn't require a loop.\n<|/ c |>\n<| a |>\n<code>",
  "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      if (strlen($word) == 0) {\n            continue;\n        }\n        $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        $consonants = array(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        $vowels_count\
    \ = count(array_intersect($vowels, str_split($word)));\n        $consonants_count\
    \ = count(array_intersect($consonants, str_split($word)));\n        if ($vowels_count\
    \ == $n && $consonants_count == $n) {\n            $words[] = $word;\n       \
    \ }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you for your answer! I really appreciate it. I will try this out and see how\
    \ it goes. I appreciate your time and effort.\n<|/ c |>\n<| c |>\nI got it to\
    \ work! Thank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=arrays,php,string\
    \ |>\n<code>\n$string = \"Mary had a little lamb\";\n$vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n$consonants = array(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n$words = explode(\" \", $string);\n\
    $result = array();\nforeach($words as $word){\n    $vowels_count = count(array_intersect($vowels,\
    \ str_split($word)));\n    $consonants_count = count(array_intersect($consonants,\
    \ str_split($word)));\n    if($vowels_count == $n && $consonants_count == $n){\n\
    \        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you for your answer! I really appreciate it. I will try this\
    \ out and see how it goes. I appreciate your time and effort.\n<|/ c |>\n<| a\
    \ tags=arrays,php,string |>\n<code>\n$string = \"Mary had a little lamb\";\n$vowel",
  "    $words = array();\n    $words = explode(' ', $s);\n    foreach ($words as $word)\
    \ {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n     \
    \   }\n    }\n    return $words;\n}\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $letters = str_split($word);\n\
    \        $count = 0;\n        foreach ($letters as $letter) {\n            if\
    \ ($letter == \"a\" || $letter == \"e\" || $letter == \"i\" || $letter == \"o\"\
    \ || $letter == \"u\") {\n                $count++;\n            }\n        }\n\
    \        if ($count == $n) {\n            $words[] = $word;\n        }\n    }\n\
    \    return $words;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `Fatal error: Uncaught\
    \ Error: Cannot use object of type stdClass as array`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to add `->` after `$words[] = $word;`\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Your code works perfectly for me. Thank you very much.\n\
    <|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"Mary had\
    \ a little lamb\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    $newArray = array();\nfor ($i = 0; $i < $count; $i++) {\n    $newArray[] = str_replace(\"\
    a\",\"\",$array[$i]);\n    $newArray[] = str_replace(\"e\",\"\",$array[$i]);\n\
    \    $newArray[] = str_replace(\"i\",\"\",$array[$i]);\n    $newArray[] = str_replace(\"\
    o\",\"\",$array[$i]);\n    $newArray[] = str_replace(\"u\",\"\",$array[$i]);\n\
    }\n$count = count($newArray);\n$newArray = array_filter($newArray);\n$newArray\
    \ = array_unique($newArray);\n$newArray = array_slice($newArray, 0, $n);\n$newArray\
    \ = array_slice($newArray, $n);\nprint_r($newArray);\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ `Fatal error: Uncaught Error: Cannot use object of type stdClass as array`\n\
    <|/ c |>\n<| c |>\nI edited my answer, I forgot to add `->` after `$words[] =\
    \ $word;`\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach\
    \ ($words as $word) {\n        $word = trim($word);\n        if (strlen($word)\
    \ == 0) {\n            continue;\n        }\n        $consonants = count_consonants($word);\n\
    \        if ($consonants == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_numeric');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_null');\n    $words = array_filter($words, 'is_array');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = ", "    $words = array();\n    $words = preg_split('/\\s+/', $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ built in functions. I should also mention that I am not allowed to use any loops.\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a solution without loops.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any built in\
    \ functions. I should also mention that I am not allowed to use any loops.\n<|/\
    \ c |>\n<| c |>\nI updated my answer to include a solution without loops.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any built in\
    \ functions. I should also mention that I am not allowed to use any loops.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>", "    $words = array();\n    $vowels = \"aeiou\"\
    ;\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $vowels_count = count($vowels);\n\
    \    $consonants_count = count($consonants);\n    $vowels_index = array_search($vowels,\
    \ $s);\n    $consonants_index = array_search($consonants, $s);\n    $vowels_index\
    \ += $n;\n    $consonants_index += $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $vowels_index\
    \ -= $n;\n    $consonants_index -= $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $vowels_index\
    \ -= $n;\n    $consonants_index -= $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $vowels_index\
    \ -= $n;\n    $consonants_index -= $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $vowels_index\
    \ -= $n;\n    $consonants_index -= $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $vowels_index\
    \ -= $n;\n    $consonants_index -= $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $vowels_index\
    \ -= $n;\n    $consonants_index -= $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $vowels_index\
    \ -= $n;\n    $consonants_index -= $n;\n    $vowels_index -= $n;\n    $consonants_index\
    \ -= $n;\n    $vowels_index -= $n;\n    $consonants_index -= $n;\n    $", "  \
    \  $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words = explode(\"\
    \ \", $string);\n$count = count($words);\n$result = array();\nfor($i = 0; $i <\
    \ $count; $i++) {\n    $result[] = substr($words[$i], 0, $n);\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,string |>\n<code>\n<?php\n$string =\
    \ \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n$count = count($words);\n\
    $result = array();\nfor($i = 0; $i < $count; $i++) {\n    $result[] = substr($words[$i],\
    \ 0, $n);\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add\
    \ some explanation to your answer such that others can learn from it\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words\
    \ = explode(\" \", $string);\n$count = count($words);\n$result = array();\nfor($i\
    \ = 0; $i < $count; $i++) {\n    $result[] = substr($words[$i], 0, $n);\n}\nprint_r($result);\n\
    </code>\n<|/ a tags=php,string |>\n<| a |>\n<code>\n<?php\n$string = \"Mary had\
    \ a little lamb\";\n$words = explode(\" \", $string);\n$count = count($words);\n\
    $result = array();\nfor($i = 0; $i < $count; $i++) {\n    $result[] = substr($words[$i],\
    \ 0, $n);\n}\nprint_r($result);\n</code>\n<|/ a tags=php,string dscore=0 |>\n\
    <| a tags=php,string |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n\
    $words = explode(\" \", $string);\n$count = count($words);\n$result = array();\n\
    for($i = 0; $i < $count; $i++) {\n    $result[] = substr($word", "    $words =\
    \ array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n\
    \        if (strlen($word) == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n</code>\n<|/ a tags=php,string,arrays |>\n<| c\
    \ |>\nI appreciate your effort, but this does not solve the problem. Your code\
    \ does not return any words that contain the given number of consonants.\n<|/\
    \ c |>\n<| c |>\nI misunderstood your question, sorry. I've updated my answer,\
    \ please take a look.\n<|/ c |>\n<| c |>\nThank you for your effort. I appreciate\
    \ it, but this does not solve the problem. Your code does not return any words\
    \ that contain the given number of consonants.\n<|/ c |>\n<| c |>\nI misunderstood\
    \ your question, sorry. I've updated my answer, please take a look.\n<|/ c |>\n\
    <| c |>\nThank you for your effort. I appreciate it, but this does not solve the\
    \ problem. Your code does not return any words that contain the given number of\
    \ consonants.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    $words = array();\n \
    \   \n    // Your code here\n    \n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(' ', $s);\n    foreach ($words as $word) {\n        $word\
    \ = trim($word);\n        if (strlen($word) == 0) {\n            continue;\n \
    \       }\n        $consonants = count_consonants($word);\n        if ($consonants\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. Your code works fine for small strings, but for large\
    \ strings it takes too much time. Can you please suggest me any solution for large\
    \ strings?\n<|/ c |>\n<| c |>\nI added a solution that should work for large strings.\
    \ Please let me know if it works for you.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works fine for small strings, but for large strings it takes\
    \ too much time. Can you please suggest me any solution for large strings?\n<|/\
    \ c |>\n<| c |>\nI added a solution that should work for large strings. Please\
    \ let me know if it works for you.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    <?php", "    $words = array();\n    $i = 0;\n    $len = strlen($s);\n    while($i\
    \ < $len) {\n        $j = 0;\n        $word = \"\";\n        while($j < $n) {\n\
    \            $word .= $s[$i];\n            $j++;\n        }\n        $words[]\
    \ = $word;\n        $i++;\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nI appreciate your efforts, but the code you provided does not work\
    \ as intended. Try it out with select_words(\"Hello world\", 4) and you will see\
    \ what I mean.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to include a solution that should work now.\n<|/ c |>\n<| c |>\nThank you for\
    \ your efforts, but I still don't get it. Your code does not work as intended\
    \ for select_words(\"Hello world\", 4). Try it out with select_words(\"Hello world\"\
    , 4) and you will see what I mean.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated my answer to include a solution that should work now.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      $count = count($word);\n        if ($count == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThank you so\
    \ much for helping me out! I really appreciate it!\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php", "    $words = array();\n    $vowels = \"aeiou\";\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $vowels_count = count($vowels);\n    $consonants_count\
    \ = count($consonants);\n    $vowels_index = 0;\n    $consonants_index = 0;\n\
    \    $vowels_found = 0;\n    $consonants_found = 0;\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n    $l = strlen($s);\n    while($i < $l) {\n        $char = substr($s,\
    \ $i, 1);\n        if($char == \" \") {\n            $words[] = substr($s, $i,\
    \ 1);\n            $i++;\n            continue;\n        }\n        if($char ==\
    \ \"a\") {\n            if($vowels_found == 0) {\n                $words[] = substr($s,\
    \ $i, 1);\n                $i++;\n                continue;\n            }\n \
    \           if($vowels_found == 1) {\n                $words[] = substr($s, $i,\
    \ 1);\n                $i++;\n                continue;\n            }\n     \
    \   }\n        if($char == \"e\") {\n            if($vowels_found == 0) {\n  \
    \              $words[] = substr($s, $i, 1);\n                $i++;\n        \
    \        continue;\n            }\n            if($vowels_found == 1) {\n    \
    \            $words[] = substr($s, $i, 1);\n                $i++;\n          \
    \      continue;\n            }\n        }\n        if($char == \"i\") {\n   \
    \         if($vowels_found == 0) {\n                $words[] = substr($s, $i,\
    \ 1);\n                $i++;\n                continue;\n            }\n     \
    \       if($vowels_found == 1) {\n                $words[] = substr($s, $i, 1);\n\
    \                $i++;\n                continue;\n            }\n        }\n\
    \        if($char == \"o\") {\n            if($vowels_found == 0) {\n        \
    \        $words[] = substr($s, $i, 1);\n                $i++;\n              \
    \  continue;\n            }\n            if($vowels_found == 1) {\n          \
    \      $words[] = substr($s, $i, 1);\n                $i++;\n                continue;\n\
    \            }\n        }\n        if($char == \"u\") {\n            if($vowels_found\
    \ == 0) {\n                $words[] = substr($s, $i, 1);\n                $i++;\n\
    \                continue;\n            }\n            if($vowels_found == 1)\
    \ {\n                $words[] = substr($s, $i, 1);\n                $i++;\n  \
    \              continue;\n            }\n        }\n        if($char == \"y\"\
    ) {\n            if($vowels_found == 0) {\n                $words[] = substr($s,\
    \ $i, 1);\n                $i++;\n                continue;\n            }\n \
    \           if($vowels_found == 1) {\n                $words[] = ", "    $words\
    \ = array();\n    foreach (explode(' ', $s) as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = preg_split('/\\s+/', $s);\n    $words\
    \ = array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_numeric');\n\
    \    $words = array_filter($words, 'is_array');\n    $words = array_filter($words,\
    \ 'is_null');\n    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_resource');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_numeric');\n    $words = array_filter($words, 'is_null');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_resource');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_numeric');\n    $words = array_filter($words, 'is_null');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_resource');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_numeric');\n    $words = array_filter($words, 'is_null');\n\
    \    $words = array_filter($words, 'is_bool');\n    $words = array_filter($words,\
    \ 'is_object');\n    $words = array_filter($words, 'is_scalar');\n    $words =\
    \ array_filter($words, 'is_callable');\n    $words = array_filter($words, 'is_resource');\n\
    \    $words = array_filter($words, 'is_scalar');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_array');\n    $words =\
    \ array_filter($words, 'is_numeric');\n    $words = array_filter($words, 'is_null');\n\
    \    $words = array_filter($words, 'is_bool');\n    $", "    $words = array();\n\
    \    $words = preg_split('/\\s+/', $s);\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_numeric');\n    $words = array_filter($words,\
    \ 'is_array');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $words = array_filter($words, 'is_string');\n\
    \    $words = array_filter($words, 'is_string');\n    $words = array_filter($words,\
    \ 'is_string');\n    $words = array_filter($words, 'is_string');\n    $words =\
    \ array_filter($words, 'is_string');\n    $", "    $words = array();\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n</code>\n<|/ a tags=php |>\n<| c |>\nThis doesn't work if you have a word like\
    \ \"uncle\" which has 3 consonants. \"uncle\" should be in the result but your\
    \ code returns an empty array.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited\
    \ the answer to account for that case.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a word like \"uncle\" which has 3 consonants. \"uncle\" should be in\
    \ the result but your code returns an empty array.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've edited the answer to account for that case.\n<|/ c |>\n<| a tags=php\
    \ |>\n<code>", "    $words = array();\n    $vowels = array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\");\n    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $words = explode(\" \", $s);\n \
    \   foreach ($words as $word) {\n        $word_count = count(explode(\" \", $word));\n\
    \        if ($word_count == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer, but this doesn't solve the problem of not being able to use any\
    \ loops. I appreciate your effort though.\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to include a solution that does not use any loops.\n<|/ c |>\n<| c |>\nThanks\
    \ for your effort, but this still doesn't solve the problem of not being able\
    \ to use any loops. I appreciate your effort though.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that does not use any loops.\n<|/ c |>\n<| c\
    \ |>\nThanks for your effort, but this still doesn't solve the problem of not\
    \ being able to use any loops. I appreciate your effort though.\n<|/ c |>\n<|\
    \ a tags=php |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n$consonants = array(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$words = explode(\"\
    \ \", $string);\n$count = 0;\n$result = array();\nforeach ($words as $word) {\n\
    \    $word_count = count(explode(\" \", $word));\n    if ($word_count == 4) {\n\
    \        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer, but this doesn't solve the problem of not\
    \ being able to use any loops. I appreciate your effort though.\n<|/ c |>\n<|\
    \ c |>\nI updated my answer to include a solution that does not use any loops.",
  "    $words = array();\n    $i = 0;\n    $len = strlen($s);\n    while ($i < $len)\
    \ {\n        $word = substr($s, $i, 1);\n        $j = 0;\n        while ($j <\
    \ $n) {\n            if ($word[$j] != \"a\" && $word[$j] != \"e\" && $word[$j]\
    \ != \"i\" && $word[$j] != \"o\" && $word[$j] != \"u\") {\n                $words[]\
    \ = $word;\n                break;\n            }\n            $j++;\n       \
    \ }\n        $i++;\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. I am not allowed to use any built in functions. I should also not use\
    \ any loops.\n<|/ c |>\n<| c |>\nI added a solution that does not use any loops.\n\
    <|/ c |>\n<| c |>\nThank you for your answer. I am not allowed to use any built\
    \ in functions. I should also not use any loops.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that does not use any loops.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    <?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n\
    $words = explode(\" \", $string);\n$result = array();\nforeach ($words as $word)\
    \ {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I am not allowed\
    \ to use any built in functions. I should also not use any loops.\n<|/ c |>\n\
    <| a tags=php,string |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n\
    $n = 4; // number of consonants\n$words = explode(\" \", $string);\n$result =\
    \ array();\nforeach ($words as $word) {\n    if (strlen($word) == $n) {\n    \
    \    $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer. I am not allowed to use any built in\
    \ functions. I should also not use any loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n\
    $words = explode(\" \", $string);\n$result = array();\nforeach ($words as $word)\
    \ {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a tags=php,string |>\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n",
  "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any loops or arrays. I am only\
    \ allowed to use strlen and explode. I am also not allowed to use any loops or\
    \ arrays. I am only allowed to use strlen and explode. I am also not allowed to\
    \ use any loops or arrays. I am only allowed to use strlen and explode. I am also\
    \ not allowed to use any loops or arrays. I am only allowed to use strlen and\
    \ explode. I am also not allowed to use any loops or arrays. I am only allowed\
    \ to use strlen and explode. I am also not allowed to use any loops or arrays.\
    \ I am only allowed to use strlen and explode. I am also not allowed to use any\
    \ loops or arrays. I am only allowed to use strlen and explode. I am also not\
    \ allowed to use any loops or arrays. I am only allowed to use strlen and explode.\
    \ I am also not allowed to use any loops or arrays. I am only allowed to use strlen\
    \ and explode. I am also not allowed to use any loops or arrays. I am only allowed\
    \ to use strlen and explode. I am also not allowed to use any loops or arrays.\
    \ I am only allowed to use strlen and explode. I am also not allowed to use any\
    \ loops or arrays. I am only allowed to use strlen and explode. I am also not\
    \ allowed to use any loops or arrays. I am only allowed to use strlen and explode.\
    \ I am also not allowed to use any loops or arrays. I am only allowed to use strlen\
    \ and explode. I am also not allowed to use any loops or arrays. I am only allowed\
    \ to use strlen and explode. I am also not allowed to use any loops or arrays.\
    \ I am only allowed to use strlen and explode. I am also not allowed to use any\
    \ loops or arrays. I am only allowed to use strlen and explode. I am also not\
    \ allowed to use any loops or arrays. I am only allowed to use strlen and explode.\
    \ I am also not allowed to use any loops or arrays. I am only allowed to use strlen\
    \ and explode. I am also not allowed to use any loops or arrays. I am only allowed\
    \ to use strlen and explode. I am also not allowed to use any loops or arrays.\
    \ I am only allowed to use strlen and explode. I am also not allowed to use any\
    \ loops or arrays. I am only allowed to use strlen and explode. I am ", "    $words\
    \ = array();\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n\
    \        if (strlen($word) == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ the help! I appreciate it!\n<|/ c |>\n<| c |>\nI added a solution that uses\
    \ `explode()` to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string\
    \ = \"Mary had a little lamb\";\n$n = 4;\n$words = explode(\" \", $string);\n\
    $result = array();\nforeach ($words as $word) {\n    if (strlen($word) == $n)\
    \ {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n\
    $n = 4;\n$words = explode(\" \", $string);\n$result = array();\nforeach ($words\
    \ as $word) {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n  \
    \  }\n}\nprint_r($result);\n</code>\n<|/ a tags=php |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a tags=php |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4;\n\
    $words = explode(\" \", $string);\n$result = array();\nforeach ($words as $word)\
    \ {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n\
    $string = \"Mary had a little lamb\";\n$n = 4;\n$words = explode(\" \", $string);\n\
    $result = array();\nforeach ($words as $word) {\n    if (strlen($word) == $n)\
    \ {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/", "    $words = array();\n    $words = explode(' ', $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work if there are multiple spaces between\
    \ words. Try it with `select_words(\"Hello world\", 4)`.\n<|/ c |>\n<| c |>\n\
    I added a note about that to the answer.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any built-in functions. I only need to use loops and\
    \ if statements.\n<|/ c |>\n<| c |>\nI added a solution that uses only loops and\
    \ if statements.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any built-in functions. I only need to use loops and if statements.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little lamb\"\
    ;\n$n = 4; // number of consonants\n$words = explode(\" \", $string);\n$result\
    \ = array();\nforeach ($words as $word) {\n    if (strlen($word) == $n) {\n  \
    \      $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any built-in functions.\
    \ I only need to use loops and if statements.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$n = 4; // number\
    \ of consonants\n$words = explode(\" \", $string);\n$result = array();\nforeach\
    \ ($words as $word) {\n    if (strlen($word) == $n) {\n        $result[] = $word;\n\
    \    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I am not allowed to use any built-in functions. I only need to\
    \ use loops and if statements.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php\n\
    $string = \"Mary had a little lamb\";\n$n = 4; // number of consonants\n$words\
    \ = explode(\" \", $string);\n$result = array();\nforeach ($words as $word) {\n\
    \    if (strlen($word", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    $words = array_filter($words);\n    $words = array_unique($words);\n    $words\
    \ = array_slice($words, 0, $n);\n    return $words;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/17755453)\n<|/ c |>\n<| c |>\nThis does provide\
    \ an answer to the question. He asked how to get all words that contain a certain\
    \ number of consonants. I provided a solution that does exactly that. He also\
    \ asked how to get all words that contain a certain number of consonants. I provided\
    \ a solution that does exactly that. He also asked how to get all words that contain\
    \ a certain number of consonants. I provided a solution that does exactly that.\
    \ He also asked how to get all words that contain a certain number of consonants.\
    \ I provided a solution that does exactly that. He also asked how to get all words\
    \ that contain a certain number of consonants. I provided a solution that does\
    \ exactly that. He also asked how to get all words that contain a certain number\
    \ of consonants. I provided a solution that does exactly that. He also asked how\
    \ to get all words that contain a certain number of consonants. I provided a solution\
    \ that does exactly that. He also asked how to get all words that contain a certain\
    \ number of consonants. I provided a solution that does exactly that. He also\
    \ asked how to get all words that contain a certain number of consonants. I provided\
    \ a solution that does exactly that. He also asked how to get all words that contain\
    \ a certain number of consonants. I provided a solution that does exactly that.\
    \ He also asked how to get all words that contain a certain number of consonants.\
    \ I provided a solution that does exactly that. He also asked how to get all words\
    \ that contain a certain number of consonants. I provided a solution that does\
    \ exactly that. He also asked how to get all words that contain a certain number\
    \ of consonants. I provided a solution that does exactly that. He also asked how\
    \ to get all words that contain a certain number of consonants. I provided a solution\
    \ that does exactly that. He also asked how to get all words that contain a certain\
    \ number of consonants. I ", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $word) {\n        $word = str_replace(\" \", \"\
    \", $word);\n        $word = str_replace(\",\", \"\", $word);\n        $word =\
    \ str_replace(\".\", \"\", $word);\n        $word = str_replace(\"!\", \"\", $word);\n\
    \        $word = str_replace(\"?\", \"\", $word);\n        $word = str_replace(\"\
    ;\", \"\", $word);\n        $word = str_replace(\":\", \"\", $word);\n       \
    \ $word = str_replace(\"'\", \"\", $word);\n        $word = str_replace(\"\\\"\
    \", \"\", $word);\n        $word = str_replace(\"(\", \"\", $word);\n        $word\
    \ = str_replace(\")\", \"\", $word);\n        $word = str_replace(\"[\", \"\"\
    , $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"\
    {\", \"\", $word);\n        $word = str_replace(\"}\", \"\", $word);\n       \
    \ $word = str_replace(\"[\", \"\", $word);\n        $word = str_replace(\"]\"\
    , \"\", $word);\n        $word = str_replace(\"{\", \"\", $word);\n        $word\
    \ = str_replace(\"}\", \"\", $word);\n        $word = str_replace(\"]\", \"\"\
    , $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"\
    ]\", \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n       \
    \ $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"]\"\
    , \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word\
    \ = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"]\", \"\"\
    , $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"\
    ]\", \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n       \
    \ $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"]\"\
    , \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word\
    \ = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"]\", \"\"\
    , $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"\
    ]\", \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n       \
    \ $word = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"]\"\
    , \"\", $word);\n        $word = str_replace(\"]\", \"\", $word);\n        $word\
    \ = str_replace(\"]\", \"\", $word);\n        $word = str_replace(\"]\", \"\"\
    , $word);\n        $word = str", "    $words = array();\n    $i = 0;\n    $len\
    \ = strlen($s);\n    while($i < $len) {\n        $j = 0;\n        $word = \"\"\
    ;\n        while($j < $n) {\n            $j++;\n            $word .= $s[$i];\n\
    \        }\n        $words[] = $word;\n        $i++;\n    }\n    return $words;\n\
    }", "    $words = array();\n    $words = explode(\" \", $s);\n    $words = array_filter($words);\n\
    \    $words = array_unique($words);\n    $words = array_slice($words, 0, $n);\n\
    \    return $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThank you for the\
    \ answer. I am not allowed to use any built-in functions. I appreciate your help\
    \ though.\n<|/ c |>\n<| c |>\nI added a solution without built-in functions.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n\
    \        if (strlen($word) == 0) {\n            continue;\n        }\n       \
    \ $consonants = count_consonants($word);\n        if ($consonants == $n) {\n \
    \           $words[] = $word;\n        }\n    }\n    return $words;\n}\n", " \
    \   $words = array();\n    $words = explode(\" \", $s);\n    $words = array_filter($words);\n\
    \    $words = array_unique($words);\n    $words = array_slice($words, 0, $n);\n\
    \    return $words;\n}\n", "    $words = array();\n    $words = explode(\" \"\
    , $s);\n    $words = array_filter($words);\n    $words = array_unique($words);\n\
    \    $words = array_slice($words, 0, $n);\n    return $words;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. `select_words(\"Hello world\", 4)`\
    \ returns `array(\"world\")` instead of `array(\"Hello\", \"world\")`.\n<|/ c\
    \ |>\n<| c |>\nI missed that requirement. Updated my answer.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n<?php\n$string = \"Mary had a little lamb\";\n$words = explode(\"\
    \ \", $string);\n$words = array_filter($words);\n$words = array_unique($words);\n\
    $words = array_slice($words, 0, 4);\nprint_r($words);", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word\
    \ = trim($word);\n        if (strlen($word) == 0) {\n            continue;\n \
    \       }\n        $consonants = count_consonants($word);\n        if ($consonants\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(\" \", $s);\n    foreach ($words\
    \ as $word) {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n\
    \            continue;\n        }\n        $letters = str_split($word);\n    \
    \    $count = 0;\n        foreach ($letters as $letter) {\n            if ($letter\
    \ == \"a\" || $letter == \"e\" || $letter == \"i\" || $letter == \"o\" || $letter\
    \ == \"u\") {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $words[] = $word;\n        }\n    }\n    return\
    \ $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts but\
    \ I really need to solve this problem without using any built-in PHP functions.\
    \ I appreciate your efforts but I really need to solve this problem without using\
    \ any built-in PHP functions. I appreciate your efforts but I really need to solve\
    \ this problem without using any built-in PHP functions. I appreciate your efforts\
    \ but I really need to solve this problem without using any built-in PHP functions.\
    \ I appreciate your efforts but I really need to solve this problem without using\
    \ any built-in PHP functions. I appreciate your efforts but I really need to solve\
    \ this problem without using any built-in PHP functions. I appreciate your efforts\
    \ but I really need to solve this problem without using any built-in PHP functions.\
    \ I appreciate your efforts but I really need to solve this problem without using\
    \ any built-in PHP functions. I appreciate your efforts but I really need to solve\
    \ this problem without using any built-in PHP functions. I appreciate your efforts\
    \ but I really need to solve this problem without using any built-in PHP functions.\
    \ I appreciate your efforts but I really need to solve this problem without using\
    \ any built-in PHP functions. I appreciate your efforts but I really need to solve\
    \ this problem without using any built-in PHP functions. I appreciate your efforts\
    \ but I really need to solve this problem without using any built-in PHP functions.\
    \ I appreciate your efforts but I really need to solve this problem without using\
    \ any built-in PHP functions. I appreciate your efforts but I really need to solve\
    \ this problem without using any built-in PHP functions. I appreciate your efforts\
    \ but I really need to solve this problem without using any built-in PHP functions.\
    \ I appreciate your efforts but I really need to solve this problem without using\
    \ any built-in PHP functions. I appreciate your efforts but I really need to solve\
    \ this problem without ", "    $words = array();\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $consonants = array(\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $words = explode(\" \", $s);\n\
    \    foreach ($words as $word) {\n        $word = strtolower($word);\n       \
    \ $word_count = str_word_count($word);\n        if ($word_count == $n) {\n   \
    \         $words[] = $word;\n        }\n    }\n    return $words;\n}", "    $words\
    \ = array();\n    \n    if ($s == \"\") {\n        return $words;\n    }\n   \
    \ \n    $vowels = \"aeiou\";\n    \n    $vowels_count = count($vowels);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);\n    \n    $vowels_count = strlen($s);\n    \n\
    \    $vowels_count = strlen($s);", "    $words = array();\n    foreach (str_word_count($s)\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. Unfortunately I cannot use any built-in PHP functions.\
    \ I must implement my own functions. I edited my question to clarify this.\n<|/\
    \ c |>\n<| c |>\nI added a solution using only `foreach` and `strlen`.\n<|/ c\
    \ |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n$string = \"Mary had a little\
    \ lamb\";\n$n = 3;\n$words = array();\n$words = preg_split('/\\s+/', $string);\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($words, 'strlen');\n\
    $words = array_filter($words, 'strlen');\n$words = array_filter($word", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n       \
    \     continue;\n        }\n        $consonants = count_consonants($word);\n \
    \       if ($consonants == $n) {\n            $words[] = $word;\n        }\n \
    \   }\n    return $words;\n}\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n\
    </code>\n<|/ a tags=php,string |>\n<| c |>\nThanks for your answer. Your code\
    \ works fine but i need it to return an array with all the words that contains\
    \ exactly $n consonants. So if $n is 3 then it should return an array with all\
    \ the words that contains 3 consonants. I edited my question to make it more clear.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a function that does exactly\
    \ what you want.\n<|/ c |>\n<| c |>\nThanks again for your help. I tested your\
    \ code and it works fine but i need it to return an array with all the words that\
    \ contains exactly $n consonants. So if $n is 3 then it should return an array\
    \ with all the words that contains 3 consonants. I edited my question to make\
    \ it more clear.\n<|/ c |>\n<| c |>\nI edited my answer to include a function\
    \ that does exactly what you want.\n<|/ c |>\n<| c |>\nThanks again for your help.\
    \ I tested your code and it works fine but i need it to return an array with all\
    \ the words that contains exactly $n consonants. So if $n is 3 then it should\
    \ return an array with all the words that contains 3 consonants. I edited my question\
    \ to make it more clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ \"Mary had a little lamb\";\n$n = 4; // number of consonants\n$words = explode(\"\
    \ \", $string);\n$result = array();\nforeach ($words as $word) {\n    if (strlen($word)\
    \ == $n) {\n        $result[] = $word;\n    }\n}\nprint_r($result);", "    $words\
    \ = array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word)\
    \ {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n       \
    \     continue;\n        }\n        $count = count($word);\n        $consonants\
    \ = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    );\n        $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n        $consonant_count\
    \ = 0;\n        $vowel_count = 0;\n        $word_count = 0;\n        for ($i =\
    \ 0; $i < $count; $i++) {\n            $letter = $word[$i];\n            if (in_array($letter,\
    \ $consonants)) {\n                $consonant_count++;\n            }\n      \
    \      if (in_array($letter, $vowels)) {\n                $vowel_count++;\n  \
    \          }\n        }\n        if ($consonant_count == $n) {\n            $words[$word_count]\
    \ = $word;\n            $word_count++;\n        }\n        if ($vowel_count ==\
    \ $n) {\n            $words[$word_count] = $word;\n            $word_count++;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer, but this doesn't work. Try it yourself with these inputs:\n\
    `select_words(\"Mary had a little lamb\", 4)`\n`select_words(\"Mary had a little\
    \ lamb\", 3)`\n`select_words(\"simple white space\", 2)`\n`select_words(\"Hello\
    \ world\", 4)`\n`select_words(\"Uncle sam\", 3)`\n<|/ c |>\n<| c |>\nOkay, I see\
    \ what you mean. I'll update my answer.\n<|/ c |>\n<| c |>\nThanks again, but\
    \ this still doesn't work. Try it yourself with these inputs:\n`select_words(\"\
    Mary had a little lamb\", 4)`\n`select_words(\"Mary had a little lamb\", 3)`\n\
    `select_words(\"simple white space\", 2)`\n`select_words(\"Hello world\", 4)`\n\
    `select_words(\"Uncle sam\", 3)`\n<|/ c |>\n<| c |>\nOkay, I see what you mean.\
    \ I'll update my answer.\n<|/ c |>\n<| c |>\nThanks again, but this still doesn't\
    \ work. Try it yourself with these inputs:\n`select_words(\"Mary had a little\
    \ lamb\", 4)`", "    $words = array();\n    $words = explode(\" \", $s);\n   \
    \ foreach ($words as $word) {\n        if (strlen($word) == $n) {\n          \
    \  $words[] = $word;\n        }\n    }\n    return $words;\n}", "    $words =\
    \ array();\n    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n\
    \        if (strlen($word) == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much! I appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem! I added some comments to help you understand\
    \ what's going on. Let me know if you have any questions.\n<|/ c |>\n<| c |>\n\
    Thanks so much! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem! I added some\
    \ comments to help you understand what's going on. Let me know if you have any\
    \ questions.\n<|/ c |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php", "    $words = array();\n    foreach (str_split($s)\
    \ as $letter) {\n        if (strlen($letter) == $n) {\n            $words[] =\
    \ $letter;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        if\
    \ (strlen($word) == $n) {\n            $words[] = $word;\n        }\n    }\n \
    \   return $words;\n}", "    $words = array();\n    $words = explode(' ', $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a tags=php,string |>\n<| c |>\nThanks for your answer. Can you please explain\
    \ me how this works?\n<|/ c |>\n<| c |>\nI added comments to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Mary had a little\
    \ lamb\";\n$words = explode(\" \", $string);\n$result = array();\nforeach($words\
    \ as $word) {\n    if(strlen($word) == 4) {\n        $result[] = $word;\n    }\n\
    }\nprint_r($result);", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a tags=php,string,arrays |>\n<| c |>\nThanks for your answer. I'm still new\
    \ to PHP and I didn't know about explode. I'll definitely look into it.\n<|/ c\
    \ |>\n<| a tags=php,string,arrays |>\n<code>\n<?php\n$string = \"Mary had a little\
    \ lamb\";\n$words = explode(\" \", $string);\n$result = array();\nforeach ($words\
    \ as $word) {\n    if (strlen($word) == 4) {\n        $result[] = $word;\n   \
    \ }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string,arrays\
    \ |>\n<code>\n$string = \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n\
    $result = array();\nforeach ($words as $word) {\n    if (strlen($word) == 4) {\n\
    \        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,string,arrays |>\n<code>\n$string = \"Mary had a little lamb\"\
    ;\n$words = explode(\" \", $string);\n$result = array();\nforeach ($words as $word)\
    \ {\n    if (strlen($word) == 4) {\n        $result[] = $word;\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,string,arrays |>\n<code>\n$string =\
    \ \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n$result = array();\n\
    foreach ($words as $word) {\n    if (strlen($word) == 4) {\n        $result[]\
    \ = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$string = \"Mary had a little lamb\";\n$words = explode(\" \", $string);\n\
    $result = array();\nforeach ($words as $word) {\n    if (strlen($word) == 4) {\n\
    \        $result[] = $word;\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| a tags=php,string,", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        $word = trim($word);\n  \
    \      if (strlen($word) == 0) {\n            continue;\n        }\n        $consonants\
    \ = count_consonants($word);\n        if ($consonants == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\n", "    $words = array();\n\
    \    $words = explode(\" \", $s);\n    foreach ($words as $word) {\n        $word\
    \ = trim($word);\n        if (strlen($word) == 0) {\n            continue;\n \
    \       }\n        $consonants = count_consonants($word);\n        if ($consonants\
    \ == $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\n", "    $words = array();\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $words[] = $word;\n\
    \        }\n    }\n    return $words;\n}\n</code>\n<|/ a tags=php |>\n<| c |>\n\
    I appreciate your efforts, but this does not answer the question. Your code does\
    \ not return any words that contain the specified number of consonants. Your code\
    \ returns all words that contain the specified number of consonants. Your code\
    \ does not return all words that contain exactly n consonants. Your code does\
    \ not return all words that contain exactly n consonants. Your code does not return\
    \ all words that contain exactly n consonants. Your code does not return all words\
    \ that contain exactly n consonants. Your code does not return all words that\
    \ contain exactly n consonants. Your code does not return all words that contain\
    \ exactly n consonants. Your code does not return all words that contain exactly\
    \ n consonants. Your code does not return all words that contain exactly n consonants.\
    \ Your code does not return all words that contain exactly n consonants. Your\
    \ code does not return all words that contain exactly n consonants. Your code\
    \ does not return all words that contain exactly n consonants. Your code does\
    \ not return all words that contain exactly n consonants. Your code does not return\
    \ all words that contain exactly n consonants. Your code does not return all words\
    \ that contain exactly n consonants. Your code does not return all words that\
    \ contain exactly n consonants. Your code does not return all words that contain\
    \ exactly n consonants. Your code does not return all words that contain exactly\
    \ n consonants. Your code does not return all words that contain exactly n consonants.\
    \ Your code does not return all words that contain exactly n consonants. Your\
    \ code does not return all words that contain exactly n consonants. Your code\
    \ does not return all words that contain exactly n consonants. Your code does\
    \ not return all words that contain exactly n consonants. Your code does not return\
    \ all words that contain exactly n consonants. Your code does not return all words\
    \ that contain exactly n consonants. Your code does not return all words that\
    \ contain exactly n consonants. Your code does not return all words that contain\
    \ exactly n consonants. Your code does not return all words that contain exactly\
    \ n consonants. Your code does not return all words that contain exactly n consonants.\
    \ Your code does not return all words that contain exactly n consonants. Your\
    \ code does not return all words that contain exactly n consonants. Your code\
    \ does not return all words that contain exactly n consonants. Your code does\
    \ not return ", "    $words = array();\n    $words = explode(\" \", $s);\n   \
    \ foreach ($words as $word) {\n        $word = trim($word);\n        if (strlen($word)\
    \ == 0) {\n            continue;\n        }\n        $consonants = count_consonants($word);\n\
    \        if ($consonants == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\n", "    $words = array();\n    $words = explode(\"\
    \ \", $s);\n    foreach ($words as $word) {\n        if (strlen($word) == $n)\
    \ {\n            $words[] = $word;\n        }\n    }\n    return $words;\n}\n\
    </code>\n<|/ a tags=php,string,arrays,function |>\n<| c |>\nThanks for your answer.\
    \ I've tried your code but unfortunately it didn't work. I've added the code I\
    \ wrote to my original post so you can see what I've done.\n<|/ c |>\n<| c |>\n\
    I added a comment to the code explaining what it does. I hope that helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your help. I've tried your code but unfortunately\
    \ it didn't work. I've added the code I wrote to my original post so you can see\
    \ what I've done.\n<|/ c |>\n<| c |>\nI added a comment to the code explaining\
    \ what it does. I hope that helps.\n<|/ c |>\n<| c |>\nThanks for your help. I've\
    \ tried your code but unfortunately it didn't work. I've added the code I wrote\
    \ to my original post so you can see what I've done.\n<|/ c |>\n<| a tags=php,string,arrays,function\
    \ |>\n<code>\n<?php", "    $words = array();\n    $words = explode(\" \", $s);\n\
    \    foreach ($words as $word) {\n        if (strlen($word) == $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThanks so much for taking the time to write this\
    \ out! I appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome! I hope it helps you.\
    \ Let me know if you have any questions.\n<|/ c |>\n<| a dscore=0 |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
