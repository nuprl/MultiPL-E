name: HumanEval_34_unique
language: php
prompt: "<?php\n// Return sorted unique elements in a list\n// >>> unique(array(5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123))\n// array(0, 2, 3, 5, 9, 123)\nfunction unique($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
  \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a))\
    \ continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    return\
    \ array_unique($l);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "  $a = array();\n\
    \  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n  \
    \  foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n        $a[$e]\
    \ = 1;\n    }\n    return array_keys($a);\n}\n", "\t$l = array_values($l);\n\t\
    sort($l);\n\t$l = array_unique($l);\n\treturn $l;\n}\n", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e,\
    \ $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "   \
    \ return array_unique(array_map('unserialize', array_map('serialize', $l)));\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "\t$l = array_reverse($l);\n\
    \tsort($l);\n\t$l = array_unique($l);\n\tsort($l);\n\treturn $l;\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n\
    \    return array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n\
    \    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n \
    \ return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n\
    \        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n\
    \    return array_keys($a);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
