name: HumanEval_34_unique
language: php
prompt: "<?php\n// Return sorted unique elements in a list\n// >>> unique(array(5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123))\n// array(0, 2, 3, 5, 9, 123)\nfunction unique($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
  \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a))\
    \ continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    return\
    \ array_unique($l);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "  $a = array();\n\
    \  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n  \
    \  foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n        $a[$e]\
    \ = 1;\n    }\n    return array_keys($a);\n}\n", "\t$l = array_values($l);\n\t\
    sort($l);\n\t$l = array_unique($l);\n\treturn $l;\n}\n", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e,\
    \ $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "   \
    \ return array_unique(array_map('unserialize', array_map('serialize', $l)));\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "\t$l = array_reverse($l);\n\
    \tsort($l);\n\t$l = array_unique($l);\n\tsort($l);\n\treturn $l;\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n\
    \    return array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n\
    \    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n \
    \ return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n\
    \        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n\
    \    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (in_array($e, $a)) {\n            continue;\n        }\n     \
    \   $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "  $a = array();\n  foreach ($l as $v) {\n    if (in_array($v, $a)) {\n  \
    \    continue;\n    }\n    $a[$v] = 1;\n  }\n  return $a;\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n        $a[$e]\
    \ = 1;\n    }\n    return array_keys($a);\n}\n", "    return array_filter(array_unique($l));\n\
    }", "    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    return $s;\n}\n", "  $a = array();\n\
    \  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n\
    \  }\n  return array_keys($a);\n}", "  $a = array();\n  foreach ($l as $e) {\n\
    \    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $k => $v) {\n\t\tif (!in_array($v, $a))\
    \ {\n\t\t\t$a[$k] = $v;\n\t\t}\n\t}\n\treturn $a;\n}\n", "    return array_unique(array_map('unserialize',\
    \ array_map('serialize', $l)));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for me on PHP 5.3.10. `array_unique` returns an empty array for\
    \ me.\n<|/ c |>\n<| c |>\nThis doesn't work for me on PHP 5.3.10. `array_unique`\
    \ returns an empty array for me.\n<|/ c |>\n<| c |>\nThis doesn't work for me\
    \ on PHP 5.3.10. `array_unique` returns an empty array for me.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for me on PHP 5.3.10. `array_unique` returns an empty\
    \ array for me.\n<|/ c |>\n<| c |>\nThis doesn't work for me on PHP 5.3.10. `array_unique`\
    \ returns an empty array for me.\n<|/ c |>\n<| a tags=arrays,php,sorting |>\n\
    <code>\n$array = array(\n    array(\n        'name' => 'John',\n        'age'\
    \ => 25\n    ),\n    array(\n        'name' => 'John',\n        'age' => 25\n\
    \    ),\n    array(\n        'name' => 'John',\n        'age' => 25\n    ),\n\
    \    array(\n        'name' => 'John',\n        'age' => 25\n    ),\n    array(\n\
    \        'name' => 'John',\n        'age' => 25\n    ),\n    array(\n        'name'\
    \ => 'John',\n        'age' => 25\n    ),\n    array(\n        'name' => 'John',\n\
    \        'age' => 25\n    ),\n    array(\n        'name' => 'John',\n        'age'\
    \ => 25\n    ),\n    array(\n        'name' => 'John',\n        'age' => 25\n\
    \    ),\n    array(\n        'name' => 'John',\n        'age' => 25\n    ),\n\
    \    array(\n        'name' => 'John',\n        'age' => 25\n    ),\n    array(\n\
    \        'name' => 'John',\n        'age' => 25\n    ),\n    array(\n        'name'\
    \ => 'John',\n        'age' => 25\n    ),\n    array(\n        'name' => 'John',\n\
    \        'age' => 25\n    ),\n    array(\n        'name' => 'John',\n        'age'\
    \ => 25\n    ),\n    array(\n        'name' => 'John',\n        'age' => 25\n\
    \    ),\n    array(\n        'name' => 'John',\n        'age' => 25\n    ),\n\
    \    array(\n        'name' => 'John',\n        'age' => 25\n    ),\n    array(\n\
    \        'name' => 'John',\n        'age' => 25\n    ),\n    array(\n        'name'\
    \ => 'John',\n        'age' => ", "    $a = array();\n    foreach ($l as $e) {\n\
    \        if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e]\
    \ = 1;\n    }\n    return array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l\
    \ as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n   \
    \         $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $v) {\n        if (in_array($v, $a))\
    \ {\n            continue;\n        }\n        $a[$v] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ but I find it a bit confusing to read. I'd prefer `array_unique` over `array_intersect`\
    \ because `array_intersect` returns an array of the elements that exist in both\
    \ arrays. `array_unique` returns an array of the elements that exist only in one\
    \ of the arrays.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show that\
    \ `array_intersect` can do more than `array_unique` can.\n<|/ c |>\n<| c |>\n\
    I like this solution, but I find it a bit confusing to read. I'd prefer `array_unique`\
    \ over `array_intersect` because `array_intersect` returns an array of the elements\
    \ that exist in both arrays. `array_unique` returns an array of the elements that\
    \ exist only in one of the arrays.\n<|/ c |>\n<| c |>\nI agree with you. I just\
    \ wanted to show that `array_intersect` can do more than `array_unique` can.\n\
    <|/ c |>\n<| c |>\nI like this solution, but I find it a bit confusing to read.\
    \ I'd prefer `array_unique` over `array_intersect` because `array_intersect` returns\
    \ an array of the elements that exist in both arrays. `array_unique` returns an\
    \ array of the elements that exist only in one of the arrays.\n<|/ c |>\n<| a\
    \ tags=arrays,php |>\n<code>\n$array1 = array('a', 'b', 'c', 'd');\n$array2 =\
    \ array('a', 'b', 'c', 'd', 'e');\n\n$array3 = array_diff($array1, $array2);\n\
    $array4 = array_diff($array2, $array1);\n\nprint_r($array3);\nprint_r($array4);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have duplicate values\
    \ in either array\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate\
    \ values in either array\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate\
    \ values in either array\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate\
    \ values in either array\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate\
    \ values in either array\n<|/ c |>\n<| a |>\n<code>\n$array1 = array('a', 'b',\
    \ 'c', 'd');", "    return array_unique(array_map('intval', $l));\n}", "  $a =\
    \ array();\n  foreach ($l as $v) {\n    if (in_array($v, $a)) {\n      continue;\n\
    \    }\n    $a[$v] = $v;\n  }\n  return $a;\n}\n", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e]\
    \ = 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l\
    \ as $e) {\n        if (in_array($e, $a)) {\n            continue;\n        }\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "\t$a = array();\n\
    \tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t\
    }\n\t}\n\treturn array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e)\
    \ {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n\
    \  return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $v) {\n\
    \        if (in_array($v, $a)) {\n            continue;\n        }\n        $a[$v]\
    \ = 1;\n    }\n    return array_keys($a);\n}", "  $a = array();\n  foreach ($l\
    \ as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e,\
    \ $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "  $a\
    \ = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n  \
    \  $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", "    return\
    \ array_unique($l);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n    \
    \    if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e]\
    \ = 1;\n    }\n    return array_keys($a);\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "   \
    \ $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n \
    \           continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", " \
    \   $s = array();\n    foreach ($l as $v) {\n        if (in_array($v, $s)) {\n\
    \            continue;\n        }\n        $s[] = $v;\n    }\n    return $s;\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$l = array_values($l);\n\tsort($l);\n\t$l = array_unique($l);\n\treturn\
    \ $l;\n}\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e,\
    \ $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n    \
    \        continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "\t$s = array();\n\tforeach ($l as $k => $v) {\n\t\tif (!in_array($v, $s)) {\n\t\
    \t\t$s[] = $v;\n\t\t}\n\t}\n\treturn $s;\n}\n", "\t$a = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "   \
    \ $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $s = array();\n    foreach ($l as $k => $v) {\n        if (in_array($v, $s))\
    \ {\n            unset($l[$k]);\n        } else {\n            $s[] = $v;\n  \
    \      }\n    }\n    return $l;\n}\n", "\t$a = array();\n\tforeach ($l as $v)\
    \ {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "\t$a = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t\
    }\n\t}\n\treturn array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e)\
    \ {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (in_array($e,\
    \ $a)) {\n\t\t\tcontinue;\n\t\t}\n\t\t$a[$e] = 1;\n\t}\n\treturn array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $v) {\n      \
    \  if (in_array($v, $a)) continue;\n        $a[$v] = $v;\n    }\n    return $a;\n\
    }", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\
    \t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "\t\
    $a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v]\
    \ = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a =\
    \ array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n      \
    \      continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "    $a = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $a))\
    \ {\n            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n}\n",
  "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", "    $s = array();\n    foreach\
    \ ($l as $i => $e) {\n        if (!isset($s[$e])) {\n            $s[$e] = $i;\n\
    \        }\n    }\n    return array_values($s);\n}\n", "\t$a = array();\n\tforeach\
    \ ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\t\
    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n \
    \       if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "    return array_filter(\n   \
    \     $l,\n        function ($el) {\n            return !in_array($el, $l);\n\
    \        }\n    );\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n   \
    \         $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "    $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "\t$a\
    \ = array();\n\tforeach ($l as $k => $v) {\n\t\tif ($v != $a[$k]) {\n\t\t\t$a[$k]\
    \ = $v;\n\t\t}\n\t}\n\treturn $a;\n}\n", "    return array_unique(array_map('intval',\
    \ $l));\n}", "    $a = array();\n    foreach ($l as $e) {\n        if (!in_array($e,\
    \ $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "\t$l = array_values($l);\n\
    \tsort($l);\n\t$l = array_unique($l);\n\treturn $l;\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n            $a[$e]\
    \ = 1;\n        }\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n  \
    \  foreach ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n\
    \        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  $a\
    \ = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n  \
    \  $a[$e] = 1;\n  }\n  return array_keys($a);\n}", "\t$a = array();\n\tforeach\
    \ ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\t\
    return array_keys($a);\n}\n", "    return array_unique(array_map('unserialize',\
    \ array_map('serialize', $l)));\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\n$array = array(\n    array('id' => 1,\
    \ 'name' => 'John'),\n    array('id' => 2, 'name' => 'Jane'),\n    array('id'\
    \ => 3, 'name' => 'Jack'),\n    array('id' => 4, 'name' => 'Jill'),\n    array('id'\
    \ => 5, 'name' => 'Jack'),\n    array('id' => 6, 'name' => 'Jill'),\n    array('id'\
    \ => 7, 'name' => 'Jill'),\n    array('id' => 8, 'name' => 'Jill'),\n    array('id'\
    \ => 9, 'name' => 'Jill'),\n    array('id' => 10, 'name' => 'Jill'),\n    array('id'\
    \ => 11, 'name' => 'Jill'),\n    array('id' => 12, 'name' => 'Jill'),\n    array('id'\
    \ => 13, 'name' => 'Jill'),\n    array('id' => 14, 'name' => 'Jill'),\n    array('id'\
    \ => 15, 'name' => 'Jill'),\n    array('id' => 16, 'name' => 'Jill'),\n    array('id'\
    \ => 17, 'name' => 'Jill'),\n    array('id' => 18, 'name' => 'Jill'),\n    array('id'\
    \ => 19, 'name' => 'Jill'),\n    array('id' => 20, 'name' => 'Jill'),\n    array('id'\
    \ => 21, 'name' => 'Jill'),\n    array('id' => 22, 'name' => 'Jill'),\n    array('id'\
    \ => 23, 'name' => 'Jill'),\n    array('id' => 24, 'name' => 'Jill'),\n    array('id'\
    \ => 25, 'name' => 'Jill'),\n    array('id' => 26, 'name' => 'Jill'),\n    array('id'\
    \ => 27, 'name' => 'Jill'),\n    array('id' => 28, 'name' => 'Jill'),\n    array('id'\
    \ => 29, 'name' => 'Jill'),\n    array('id' => 30, 'name' => 'Jill'),\n    array('id'\
    \ => 31, 'name' => 'Jill'),\n    array('id' => 32, 'name' => 'Jill'),\n    array('id'\
    \ => 33, 'name' => 'Jill'),\n    array('id' => 34, 'name' => 'Jill'),\n    array('id'\
    \ => 35, 'name' => 'Jill'),\n    array('id' => 36, 'name' => 'Jill'),\n    array('",
  "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `array_unique`\
    \ does a lot more than just remove duplicates.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, this is much more elegant and efficient.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. `array_unique` does a lot more than just remove duplicates.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. `array_unique` does a lot\
    \ more than just remove duplicates.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `array_unique` does a lot more than just remove duplicates.\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"\
    b\", \"c\");\n$array = array_unique($array);\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis should be the accepted answer. `array_unique` does a lot more than\
    \ just remove duplicates.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `array_unique` does a lot more than just remove duplicates.\n<|/ c |>\n<| c\
    \ |>\nThis should be the accepted answer. `array_unique` does a lot more than\
    \ just remove duplicates.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `array_unique` does a lot more than just remove duplicates.\n<|/ c |>\n<| c\
    \ |>\nThis should be the accepted answer. `array_unique` does a lot more than\
    \ just remove duplicates.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array =\
    \ array(\"a\", \"b\", \"c\", \"a\", \"b\", \"c\");\n$array = array_unique($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `array_unique`\
    \ does a lot more than just remove duplicates.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. `array_unique` does a lot more than just remove duplicates.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c", "    $a = array();\n    foreach ($l as $e) {\n        if\
    \ (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] = 1;\n\
    \    }\n    return array_keys($a);\n}\n", "    $s = array();\n    foreach ($l\
    \ as $v) {\n        if (!in_array($v, $s)) {\n            $s[] = $v;\n       \
    \ }\n    }\n    return $s;\n}\n", "  $a = array();\n  foreach ($l as $e) {\n \
    \   if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e,\
    \ $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "   \
    \ $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n \
    \           continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n\
    \    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", "\t$a = array();\n\tforeach\
    \ ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\t\
    return array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if\
    \ (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $v) {\n        if (in_array($v, $a))\
    \ {\n            continue;\n        }\n        $a[$v] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (in_array($e,\
    \ $a)) continue;\n\t\t$a[$e] = 1;\n\t}\n\treturn array_keys($a);\n}\n", "    $a\
    \ = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) continue;\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "\t$a = array();\n\
    \tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t\
    }\n\t}\n\treturn array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e)\
    \ {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n\
    \  return array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n  \
    \  if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}", "    $s = array();\n    foreach ($l\
    \ as $v) {\n        if (in_array($v, $s)) {\n            continue;\n        }\n\
    \        $s[] = $v;\n    }\n    return $s;\n}\n", "\t$a = array();\n\tforeach\
    \ ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\t\
    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n \
    \       if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e]\
    \ = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) {\n            continue;\n     \
    \   }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  $a = array();\n\
    \  foreach ($l as $v) {\n    if (in_array($v, $a)) {\n      continue;\n    }\n\
    \    $a[$v] = 1;\n  }\n  return array_keys($a);\n}\n", "    $a = array();\n  \
    \  foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    return array_unique(array_map('unserialize', array_unique(array_map('serialize',\
    \ $l))));\n}", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\
    \t\t$a[$v] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $s = array();\n\
    \    foreach ($l as $k => $v) {\n        if (!in_array($v, $s)) {\n          \
    \  $s[] = $v;\n        }\n    }\n    return $s;\n}", "    $s = array();\n    foreach\
    \ ($l as $k => $v) {\n        if (!in_array($v, $s)) {\n            $s[] = $v;\n\
    \        }\n    }\n    return $s;\n}\n", "  $a = array();\n  foreach ($l as $e)\
    \ {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n\
    \      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n",
  "\t$s = array();\n\tforeach ($l as $k => $v) {\n\t\tif (!in_array($v, $s)) {\n\t\
    \t\t$s[] = $v;\n\t\t}\n\t}\n\treturn $s;\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $a)) {\n            $a[$e] = 1;\n  \
    \      }\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        if (in_array($e, $a)) continue;\n        $a[$e] = 1;\n\
    \    }\n    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l\
    \ as $e) {\n        if (in_array($e, $a)) {\n            continue;\n        }\n\
    \        $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "\t$a = array();\n\
    \tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t\
    }\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as\
    \ $e) {\n        if (in_array($e, $a)) {\n            continue;\n        }\n \
    \       $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $v) {\n        if (in_array($v, $a))\
    \ continue;\n        $a[$v] = 1;\n    }\n    return array_keys($a);\n}", "   \
    \ $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n \
    \           continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "    $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n\
    \    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (in_array($e, $a)) {\n            continue;\n        }\n     \
    \   $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  $a = array();\n \
    \ foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n\
    \  }\n  return array_keys($a);\n}", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (in_array($e, $a)) {\n            continue;\n        }\n     \
    \   $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  $a = array();\n \
    \ foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n\
    \  }\n  return array_keys($a);\n}", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (in_array($e, $a)) {\n            continue;\n        }\n     \
    \   $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "  $a = array();\n \
    \ foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n\
    \  }\n  return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (in_array($e, $a)) {\n            continue;\n        }\n     \
    \   $a[$e] = 1;\n    }\n    return array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $v) {\n        if (in_array($v, $a)) {\n            continue;\n\
    \        }\n        $a[$v] = 1;\n    }\n    return array_keys($a);\n}\n", "  \
    \  $a = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $a)) {\n\
    \            $a[$e] = 1;\n        }\n    }\n    return array_keys($a);\n}\n",
  "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e]\
    \ = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n    foreach\
    \ ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", " \
    \   $s = array();\n    foreach ($l as $v) {\n        if (in_array($v, $s)) {\n\
    \            continue;\n        }\n        $s[] = $v;\n    }\n    return $s;\n\
    }\n", "    $a = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $a)) {\n            $a[$v] = 1;\n        }\n    }\n    return array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n\
    \    return array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e)\
    \ {\n        if (in_array($e, $a)) {\n            continue;\n        }\n     \
    \   $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "  $a = array();\n  foreach\
    \ ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "    $s = array();\n    foreach ($l as $v) {\n      \
    \  if (in_array($v, $s)) {\n            continue;\n        }\n        $s[] = $v;\n\
    \    }\n    return $s;\n}\n", "\t$l = array_values($l);\n\tsort($l);\n\t$l = array_unique($l);\n\
    \treturn $l;\n}\n", "    $s = array();\n    foreach ($l as $k => $v) {\n     \
    \   if (!in_array($v, $s)) {\n            $s[] = $v;\n        }\n    }\n    return\
    \ $s;\n}\n", "\t$a = array();\n\tforeach ($l as $k => $v) {\n\t\tif (in_array($v,\
    \ $a)) {\n\t\t\tunset($l[$k]);\n\t\t} else {\n\t\t\t$a[$v] = 1;\n\t\t}\n\t}\n\t\
    return $l;\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) {\n      continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) {\n  \
    \    continue;\n    }\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}\n", " \
    \   $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a)) {\n\
    \            continue;\n        }\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}", "    $a = array();\n    foreach ($l as $e) {\n        if\
    \ (in_array($e, $a)) continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $a)) {\n\
    \t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n}\n", "    $a = array();\n\
    \    foreach ($l as $e) {\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n\
    }\n", "\t$l = array_values($l);\n\tsort($l);\n\t$l = array_unique($l);\n\treturn\
    \ $l;\n}\n", "    return array_unique(array_map('unserialize', array_map('serialize',\
    \ $l)));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution doesn't work for\
    \ me. I'm getting `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"a\" => 1, \"\
    b\" => 2, \"c\" => 3, \"d\" => 4, \"e\" => 5);\n$array = array_unique($array);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis solution doesn't work for me.\
    \ I'm getting `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/mysite/functions.php\
    \ on line 4`\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. I'm getting\
    \ `", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (!in_array($e, $a)) {\n            $a[$e] = 1;\n        }\n    }\n    return\
    \ array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as $e) {\n    if (in_array($e,\
    \ $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n}", "  $a =\
    \ array();\n  foreach ($l as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e]\
    \ = 1;\n  }\n  return array_keys($a);\n}\n", "\t$l = array_values($l);\n\tsort($l);\n\
    \t$l = array_unique($l);\n\treturn $l;\n}\n", "  $a = array();\n  foreach ($l\
    \ as $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return\
    \ array_keys($a);\n}\n", "    $a = array();\n    foreach ($l as $e) {\n      \
    \  if (in_array($e, $a)) {\n            continue;\n        }\n        $a[$e] =\
    \ 1;\n    }\n    return array_keys($a);\n}\n", "  $a = array();\n  foreach ($l\
    \ as $e) {\n    if (in_array($e, $a)) {\n      continue;\n    }\n    $a[$e] =\
    \ 1;\n  }\n  return array_keys($a);\n}\n", "  $a = array();\n  foreach ($l as\
    \ $e) {\n    if (in_array($e, $a)) continue;\n    $a[$e] = 1;\n  }\n  return array_keys($a);\n\
    }", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ continue;\n        $a[$e] = 1;\n    }\n    return array_keys($a);\n}", "   \
    \ return array_unique(array_map('unserialize', array_map('serialize', $l)));\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a |>\n<code>\n$array = array(\n\
    \    array('id' => 1, 'name' => 'John'),\n    array('id' => 2, 'name' => 'Jane'),\n\
    \    array('id' => 3, 'name' => 'Jack'),\n    array('id' => 4, 'name' => 'Jill'),\n\
    \    array('id' => 5, 'name' => 'Jack'),\n    array('id' => 6, 'name' => 'Jill'),\n\
    \    array('id' => 7, 'name' => 'Jack'),\n    array('id' => 8, 'name' => 'Jill'),\n\
    \    array('id' => 9, 'name' => 'Jack'),\n    array('id' => 10, 'name' => 'Jill'),\n\
    \    array('id' => 11, 'name' => 'Jack'),\n    array('id' => 12, 'name' => 'Jill'),\n\
    \    array('id' => 13, 'name' => 'Jack'),\n    array('id' => 14, 'name' => 'Jill'),\n\
    \    array('id' => 15, 'name' => 'Jack'),\n    array('id' => 16, 'name' => 'Jill'),\n\
    \    array('id' => 17, 'name' => 'Jack'),\n    array('id' => 18, 'name' => 'Jill'),\n\
    \    array('id' => 19, 'name' => 'Jack'),\n    array('id' => 20, 'name' => 'Jill'),\n\
    \    array('id' => 21, 'name' => 'Jack'),\n    array('id' => 22, 'name' => 'Jill'),\n\
    \    array('id' => 23, 'name' => 'Jack'),\n    array('id' => 24, 'name' => 'Jill'),\n\
    \    array('id' => 25, 'name' => 'Jack'),\n    array('id' => 26, 'name' => 'Jill'),\n\
    \    array('id' => 27, 'name' => 'Jack'),\n    array('id' => 28, 'name' => 'Jill'),\n\
    \    array('id' => 29, 'name' => 'Jack'),\n    array('id' => 30, 'name' => 'Jill'),\n\
    \    array('id' => 31, 'name' => 'Jack'),\n    array('id' => 32, 'name' => 'Jill'),\n\
    \    array('id' => 33, 'name' => 'Jack'),\n    array('id' => 34, 'name' => 'Jill'),\n\
    \    array('id' => 35, 'name' => 'Jack'),\n    array('id' => 36, 'name' => 'Jill'),\n\
    \    array('id' => 37, 'name' => 'J", "\t$a = array();\n\tforeach ($l as $e) {\n\
    \t\tif (!in_array($e, $a)) {\n\t\t\t$a[$e] = 1;\n\t\t}\n\t}\n\treturn array_keys($a);\n\
    }\n", "    $a = array();\n    foreach ($l as $e) {\n        if (in_array($e, $a))\
    \ {\n            continue;\n        }\n        $a[$e] = 1;\n    }\n    return\
    \ array_keys($a);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
