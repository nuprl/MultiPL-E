language: php
name: HumanEval_2_truncate_number
results:
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer == $number)\
    \ {\n        return $integer;\n    }\n    if ($integer < 0) {\n        $decimals\
    \ = floor($number * log10($number));\n        $integer = floor($number * pow(10,\
    \ $decimals));\n    }\n    return $integer / pow(10, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hildnb6.php:26\n\
    Stack trace:\n#0 /tmp/tmp0hildnb6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0hildnb6.php\
    \ on line 26\n"
  timestamp: 1659730962
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    $integer = $integer - ($integer % 1);\n    return $integer . '.' . substr($decimals,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6acp0fp.php:22\n\
    Stack trace:\n#0 /tmp/tmpy6acp0fp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpy6acp0fp.php\
    \ on line 22\n"
  timestamp: 1659730962
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number - $integer);\n    }\n    return $decimals\
    \ ? $number - $integer : 0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730962
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  return\
    \ $decimals > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthoal_8c.php:19\n\
    Stack trace:\n#0 /tmp/tmpthoal_8c.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpthoal_8c.php\
    \ on line 19\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 0) {\n        return 0;\n    }\n    return intval($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeve7c_jo.php:20\n\
    Stack trace:\n#0 /tmp/tmpeve7c_jo.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpeve7c_jo.php\
    \ on line 20\n"
  timestamp: 1659730962
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxct638kn.php:17\n\
    Stack trace:\n#0 /tmp/tmpxct638kn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpxct638kn.php\
    \ on line 17\n"
  timestamp: 1659730962
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    $decimals = $decimals - 1;\n  }\n  return $number - intval($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730962
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6ocwjwt.php:17\n\
    Stack trace:\n#0 /tmp/tmpo6ocwjwt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpo6ocwjwt.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqz_2lred.php:18\n\
    Stack trace:\n#0 /tmp/tmpqz_2lred.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqz_2lred.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiem26pd8.php:18\n\
    Stack trace:\n#0 /tmp/tmpiem26pd8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiem26pd8.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number - $integer);\n    }\n    return $decimals\
    \ ? round($number, $decimals) : $number;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla80pyp4.php:22\n\
    Stack trace:\n#0 /tmp/tmpla80pyp4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpla80pyp4.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer == $number)\
    \ {\n        return $decimals;\n    }\n    $decimals = $number - $integer;\n \
    \   return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4onexmg.php:25\n\
    Stack trace:\n#0 /tmp/tmpz4onexmg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpz4onexmg.php\
    \ on line 25\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehavryod.php:18\n\
    Stack trace:\n#0 /tmp/tmpehavryod.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpehavryod.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $number\
    \ = round($number, 0);\n  return $number < 1 ? 1 : $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1x4ykbj.php:18\n\
    Stack trace:\n#0 /tmp/tmpr1x4ykbj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpr1x4ykbj.php\
    \ on line 18\n"
  timestamp: 1659730962
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = max($decimals, 0);\n    $decimals = min($decimals, 1);\n    return\
    \ $number - $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpza52jhn3.php:21\n\
    Stack trace:\n#0 /tmp/tmpza52jhn3.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpza52jhn3.php\
    \ on line 21\n"
  timestamp: 1659730962
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45oecq7a.php:22\n\
    Stack trace:\n#0 /tmp/tmp45oecq7a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp45oecq7a.php\
    \ on line 22\n"
  timestamp: 1659730929
