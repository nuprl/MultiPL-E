name: HumanEval_12_longest
language: php
prompt: "<?php\n// Out of list of strings, return the longest one. Return the first\
  \ one in case of multiple\n// strings of the same length. Return None in case the\
  \ input list is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
  a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n//\
  \ \"ccc\"\nfunction longest($strings) {\n"
tests: "function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"\
  zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    $lengths = array_map('strlen',\
    \ $strings);\n    foreach ($lengths as $length) {\n        if ($longest === null\
    \ || $length >= $longest) {\n            $longest = $length;\n        }\n    }\n\
    \    return $longest === null ? null : $strings[$longest];\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest === \"\" ? null : $longest;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ For example, `array(\"a\", \"bb\", \"ccc\")` will return `\"a\"` instead of\
    \ `\"ccc\"`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it in a minute.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$array1 = array(\"a\",\"b\",\"c\",\"d\",\"\
    e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array2 = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"\
    o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array3\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$array4 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array5 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array6 = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array7 = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_reduce($strings, function ($carry, $string) {\n \
    \       return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \    return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        $length += strlen($string);\n        if ($longest\
    \ === null || $length > $longest) {\n            $longest = $string;\n       \
    \ }\n    }\n    return $longest === null ? null : $longest;\n}\n", "    $longest\
    \ = null;\n    $lengths = array_map(function($s) { return strlen($s); }, $strings);\n\
    \    sort($lengths);\n    $longest = array_pop($lengths);\n    foreach ($lengths\
    \ as $length) {\n        if ($length > strlen($longest)) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest ? $strings[array_search($longest,\
    \ $lengths)] : null;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    $array = array_filter($array, function($v){\n    return $v > 1;\n});\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_slice($array,\
    \ 0, 1);\n$array = array_slice($array, 0, -1);\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array =\
    \ array_count_values($array);\n$array = array_filter($array, function($v){\n \
    \   return $v > 1;\n});\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_slice($array, 0, 1);\n$array = array_slice($array, 0, -1);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n$array = array_filter($array,\
    \ function($v){\n    return $v > 1;\n});\n$array = array_keys($array);\n$array\
    \ = array_values($array);\n$array = array_slice($array, 0, 1);\n$array = array_slice($array,\
    \ 0, -1);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest\
    \ = array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n\n    return $longest === \"\
    \" ? null : $longest;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution,\
    \ but I prefer to use `array_reduce` instead of `array_map` because `array_map`\
    \ will create an array of arrays, while `array_reduce` will create an array of\
    \ strings. I believe that `array_reduce` is more efficient in this case.\n<|/\
    \ c |>\n<| c |>\n: I agree with you, `array_reduce` is more efficient. I've updated\
    \ my answer accordingly.\n<|/ c |>\n<| c |>\nI like this solution, but I prefer\
    \ to use `array_reduce` instead of `array_map` because `array_map` will create\
    \ an array of arrays, while `array_reduce` will create an array of strings. I\
    \ believe that `array_reduce` is more efficient in this case.\n<|/ c |>\n<| c\
    \ |>\n: I agree, `array_reduce` is more efficient. I've updated my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI like this solution, but I prefer to use `array_reduce` instead\
    \ of `array_map` because `array_map` will create an array of arrays, while `array_reduce`\
    \ will create an array of strings. I believe that `array_reduce` is more efficient\
    \ in this case.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI like this solution,\
    \ but I prefer to use `array_reduce` instead of `array_map` because `array_map`\
    \ will create an array of arrays, while `array_reduce` will create an array of\
    \ strings. I believe that `array_reduce` is more efficient in this case.\n<|/\
    \ c |>\n<| c |>\n: I agree, `array_reduce` is more efficient. I've updated my\
    \ answer accordingly.\n<|/ c |>\n<| c |>\nI like this solution, but I prefer to\
    \ use `array_reduce` instead of `array_map` because `array_map` will create an\
    \ array of arrays, while `array_reduce` will create an array of strings. I believe\
    \ that `array_reduce` is more efficient in this case.\n<|/ c |>\n<| c |>\n", " \
    \   if (empty($strings)) {\n        return null;\n    }\n    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if (empty($longest) || $length > strlen($longest[0])) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_reduce($strings, function\
    \ ($carry, $item) {\n        return strlen($carry) > strlen($item) ? $carry :\
    \ $item;\n    });\n\n    return $longest === \"\" ? null : $longest;\n}\n", " \
    \   $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if ($length > $length) {\n      \
    \      $longest = $string;\n        }\n    }\n    return $longest ?: null;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    return $longest > 0 ? $strings[0] : null;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if you have empty strings\
    \ in your array\n<|/ c |>\n<| c |>\nIt doesn't work if you have empty strings\
    \ in your array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd', 'e', 'f');\n$longest = array_reduce($array, function($a, $b)\
    \ { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't work if you have empty strings in your array\n<|/ c |>\n\
    <| c |>\nIt doesn't work if you have empty strings in your array\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work if you have empty strings in your array\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e', 'f');\n\
    $longest = array_reduce($array, function($a, $b) { return strlen($a) > strlen($b)\
    \ ? $a : $b; });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you\
    \ have empty strings in your array\n<|/ c |>\n<| c |>\nIt doesn't work if you\
    \ have empty strings in your array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $longest = array_reduce($array, function($a, $b) { return strlen($a) > strlen($b)\
    \ ? $a : $b; });\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if you\
    \ have empty strings in your array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array('a', 'b', 'c', 'd', 'e', 'f');\n$longest = array_reduce($array,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd', 'e', 'f');\n$longest = array_reduce($array, function($a, $b) { return strlen($a)\
    \ > strlen($b) ? $a : $b; });\n</code>\n<|/ a dscore=4 |>\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return max($carry, strlen($string));\n    });\n\
    \n    return $longest === 1 ? $strings[0] : $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n    });\n\n    return $longest === \"\" ? null : $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return max($carry, strlen($string));\n    });\n    return\
    \ $longest === false ? null : $strings[array_search($longest, $strings)];\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n\n    return $longest === \"\" ? null : $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest ?: null;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return $carry ===\
    \ null ? $string : max($carry, strlen($string));\n    });\n    return $longest\
    \ === null ? null : $longest;\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n</code>\n<|/ a dscore=3 |>\n<|\
    \ c |>\nThis doesn't work if there are multiple strings of the same length\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if there are multiple strings of the same length\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    );\n$array = array_count_values($array);\narsort($array);\n$array = array_keys($array);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if there\
    \ are multiple strings of the same length\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    $array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\");\n$array = array_count_values($array);\narsort($array);\n$array =\
    \ array_keys($array);\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays,sorting\
    \ |>\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if\
    \ ($longest === null || strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_shift($strings);\n  \
    \  foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_reduce($strings, function ($carry, $item) {\n        return strlen($carry)\
    \ > strlen($item) ? $carry : $item;\n    });\n    return $longest === \"\" ? null\
    \ : $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n    }\n\
    \    $longest = array_shift($strings);\n    foreach ($strings as $string) {\n\
    \        if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $item) {\n        return strlen($carry) > strlen($item) ? $carry : $item;\n\
    \    });\n    return $longest === \"\" ? null : $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n    });\n    return $longest;\n}\n", "    if (empty($strings)) {\n\
    \        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array();\n    $lengths = array();\n    foreach ($strings\
    \ as $string) {\n        $lengths[] = strlen($string);\n    }\n    sort($lengths);\n\
    \    foreach ($lengths as $length) {\n        if ($length > 0) {\n           \
    \ $longest[] = $strings[$length];\n        }\n    }\n    return empty($longest)\
    \ ? null : $longest[0];\n}\n", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest\
    \ = array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n\
    \    return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > $length) {\n            $longest = $string;\n        }\n    }\n    return\
    \ $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n    }\n\n\
    \    $longest = array();\n    $lengths = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n            $longest[$length] = $string;\n\
    \        } else {\n            $lengths[$length] += 1;\n        }\n    }\n\n \
    \   arsort($lengths);\n    foreach ($lengths as $length => $count) {\n       \
    \ if ($count > 1) {\n            return $longest[$length];\n        }\n    }\n\
    \n    return null;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $maxLength = 0;\n    $longestString = null;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $maxLength) {\n            $maxLength = $length;\n       \
    \     $longestString = $string;\n        }\n    }\n    return $longestString;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n    return count($strings) >\
    \ 1 ? $longest : null;\n}\n", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n    });\n    return $longest;\n}\n", "    $longest = null;\n   \
    \ foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_reduce($strings, function ($carry, $item) {\n        return max($carry,\
    \ strlen($item));\n    });\n    return $longest === false ? null : $strings[array_search(max($longest),\
    \ $strings)];\n}\n", "    if (empty($strings)) {\n        return null;\n    }\n\
    \n    $longest = array_reduce($strings, function ($carry, $string) {\n       \
    \ return max($carry, strlen($string));\n    });\n\n    return $longest === false\
    \ ? null : $strings[array_search($longest, $strings)];\n}\n", "    $longest =\
    \ null;\n    foreach ($strings as $string) {\n        if ($longest === null ||\
    \ strlen($string) > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n    \
    \    return null;\n    }\n\n    $longest = array_reduce($strings, function ($result,\
    \ $string) {\n        return max($result, strlen($string));\n    });\n\n    return\
    \ $longest === 1 ? $strings[0] : $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array();\n    foreach ($strings as $string) {\n     \
    \   $length = strlen($string);\n        if ($length > count($longest)) {\n   \
    \         $longest = array($string);\n        } else if ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n\n    return count($longest)\
    \ > 1 ? $longest[0] : null;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| a\
    \ dscore=0 |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n$longest\
    \ = array_reduce($strings, function($a, $b) { return strlen($a) > strlen($b) ?\
    \ $a : $b; });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$longest = array_reduce($strings, function($a, $b) { return strlen($a)\
    \ > strlen($b) ? $a : $b; });\n</code>\n<|/ a tags=php,arrays,string |>\n<| c\
    \ |>\nPlease add some explanation to your answer such that others can learn from\
    \ it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$strings = array('abc', 'def', 'ghi',\
    \ 'jkl');\n$longest = array_reduce($strings, function($a, $b) { return strlen($a)\
    \ > strlen($b) ? $a : $b; });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a\
    \ tags=php,arrays,string |>\n<code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n\
    $longest = array_reduce($strings, function($a, $b) { return strlen($a) > strlen($b)\
    \ ? $a : $b; });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$strings = array('abc', 'def', 'ghi', 'jkl');\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a dscore", "    $longest = null;\n    foreach ($strings as $string) {\n  \
    \      if ($longest === null || strlen($string) > strlen($longest)) {\n      \
    \      $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "  \
    \  $longest = null;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $lengths = array_map(function($s) { return strlen($s);\
    \ }, $strings);\n    foreach ($lengths as $k => $v) {\n        if ($longest ===\
    \ null || $v > $longest) {\n            $longest = $v;\n        }\n    }\n   \
    \ return $longest === null ? null : $strings[$longest];\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's very\
    \ simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's very simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's very simple.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's very simple.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's very simple.\n<|/\
    \ c |>\n<| a |>\n<code>", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array();\n    foreach ($strings as $string) {\n     \
    \   $length = strlen($string);\n        if (empty($longest) || $length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array();\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = array($string);\n        } else if ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return count($longest)\
    \ > 1 ? $longest[0] : null;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return max($carry, strlen($string));\n    });\n    return\
    \ $longest === false ? null : $strings[array_search($longest, $strings)];\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are multiple\
    \ strings of the same length. Try it with `array(\"a\", \"bb\", \"ccc\")`.\n<|/\
    \ c |>\n<| c |>\n: Yes, I know. That's why I wrote \"Return the first one in case\
    \ of multiple strings of the same length\". And I wrote \"Return None in case\
    \ the input list is empty.\"\n<|/ c |>\n<| c |>\n: I added a version that does\
    \ what you want.\n<|/ c |>\n<| c |>\n: I added a version that does what you want.\n\
    <|/ c |>\n<| c |>\n: I added a version that does what you want.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\n$longest = array_reduce($array, function($carry, $string)\
    \ {\n    return max($carry, strlen($string));\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$longest = array_reduce($array, function($carry,\
    \ $string) {\n    return max($carry, strlen($string));\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$longest = array_reduce($array, function($carry,\
    \ $string) {\n    return max($carry, strlen($string));\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$longest = array_reduce($array, function($carry,\
    \ $string) {\n    return max($carry, strlen($string));\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$longest = array_reduce($array, function($carry,\
    \ $string) {\n    return max($carry, strlen($string));\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$longest = array_reduce($array, function($carry,\
    \ $string) {\n    return max($carry, strlen($string));\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,", "    if (empty($strings)) {\n        return null;\n   \
    \ }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return $carry === null ? $string : max($carry, strlen($string));\n\
    \    });\n    return $longest === null ? null : $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_reduce($strings, function ($carry, $string) {\n \
    \       return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \    return $longest;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your solution,\
    \ however it returns \"bb\" instead of \"bbccc\"\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ to add `array_reverse()` to the `array_reduce()` call. Fixed now.\n<|/ c |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$strings = array(\"a\", \"bb\", \"ccc\"\
    , \"dddd\");\n$longest = array_reduce($strings, function ($carry, $string) {\n\
    \    return strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI like your solution, however it returns \"bb\" instead\
    \ of \"bbccc\"\n<|/ c |>\n<| c |>\nYes, I forgot to add `array_reverse()` to the\
    \ `array_reduce()` call. Fixed now.\n<|/ c |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$strings = array(\"a\", \"bb\", \"ccc\", \"dddd\");\n$longest = array_reduce($strings,\
    \ function ($carry, $string) {\n    return strlen($carry) > strlen($string) ?\
    \ $carry : $string;\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your solution,\
    \ however it returns \"bb\" instead of \"bbccc\"\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array(\"a\", \"bb\", \"ccc\", \"dddd\");\n$longest =\
    \ array_reduce($strings, function ($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI like your solution, however it returns \"bb\" instead of \"bbccc\"\n<|/\
    \ c |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array(\"a\", \"bb\"\
    , \"ccc\", \"dddd\");\n$longest = array_reduce($strings, function ($carry, $string)\
    \ {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $longest = $string;\n\
    \            $length = strlen($string);\n        }\n    }\n    return $longest\
    \ ?: null;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array('a', 'b', 'c', 'd', 'e');\n$longest = array_reduce($array, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$longest\
    \ = array_reduce($array, function($a, $b) {\n    return strlen($a) > strlen($b)\
    \ ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$longest = array_reduce($array,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array('a', 'b', 'c', 'd',\
    \ 'e');\n$longest = array_reduce($array, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$longest = array_reduce($array,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('a', 'b', 'c',\
    \ 'd', 'e');\n$longest = array_reduce($array, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$longest = array_reduce($array,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array('a', '", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($longest\
    \ === null || $length > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n\n    $longest = count($strings) > 0 ? $strings[0]\
    \ : null;\n    foreach ($strings as $string) {\n        if (strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_reduce($strings, function ($carry, $string) {\n\
    \        return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \n    return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_reduce($strings, function ($carry, $string) {\n\
    \        return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \n    return $longest === \"\" ? null : $longest;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nI like this solution. Very concise. Thanks!\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if you\
    \ have empty strings in your array. Try it with `array('', 'a', 'b', 'c')`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work because `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns `0` for empty strings.\
    \ `strlen` returns `0` for empty strings. `strlen` returns ", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array();\n    $longestLength\
    \ = -1;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_reduce($strings, function ($carry, $item) {\n        return strlen($carry)\
    \ > strlen($item) ? $carry : $item;\n    });\n    return $longest;\n}\n", "  \
    \  if (empty($strings)) {\n        return null;\n    }\n    $longest = count($strings)\
    \ > 0 ? $strings[0] : null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_reduce($strings, function ($carry, $string) {\n \
    \       return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \    return $longest === \"\" ? null : $longest;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ Try `array(\"a\", \"bb\", \"ccc\", \"ddd\")`.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that works with multiple strings of the same length. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple strings\
    \ of the same length. Try `array(\"a\", \"bb\", \"ccc\", \"ddd\")`.\n<|/ c |>\n\
    <| c |>\n: I added a version that works with multiple strings of the same length.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$longest\
    \ = array_reduce($array, function($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a dscore=2 |>\n<code>\n$longest = array_reduce($array, function($carry,\
    \ $string) {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a dscore=2 |>\n<code>\n$longest\
    \ = array_reduce($array, function($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$longest = array_reduce($array, function($carry,\
    \ $string) {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a dscore=1 |>\n<code>\n$longest\
    \ = array_reduce($array, function($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$longest = array_reduce($array,\
    \ function($carry, $string) {", "    $longest = null;\n    $lengths = array_map(function($s)\
    \ { return strlen($s); }, $strings);\n    asort($lengths);\n    $longest = array_pop($lengths);\n\
    \    if (count($lengths) > 0) {\n        $longest = array_pop($lengths);\n   \
    \ }\n    return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n   \
    \ foreach ($strings as $string) {\n        $length = strlen($string);\n      \
    \  if ($length > $length) {\n            $longest = $string;\n        }\n    }\n\
    \    return $longest;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work\
    \ if you have multiple strings of the same length. Try `longest(array(\"a\", \"\
    bb\", \"ccc\"))`\n<|/ c |>\n<| c |>\n: Yes, I know. That's why I wrote \"Return\
    \ the first one in case of multiple strings of the same length.\"\n<|/ c |>\n\
    <| c |>\nI see what you mean. My bad.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n$array = array_slice($array, 0,\
    \ 1);\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ strings of the same length. Try `longest(array(\"a\", \"bb\", \"ccc\"))`\n<|/\
    \ c |>\n<| c |>\n: Yes, I know. That's why I wrote \"Return the first one in case\
    \ of multiple strings of the same length.\"\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. My bad.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\narsort($array);\n\
    $array = array_keys($array);\n$array = array_slice($array, 0, 1);\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n$array = array_count_values($array);\narsort($array);\n$array = array_keys($",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n    });\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return max($carry, strlen($string));\n\
    \    });\n\n    return $longest === 1 ? $strings[0] : $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $maxLength = 0;\n    $longestString = null;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $maxLength) {\n            $maxLength = $length;\n       \
    \     $longestString = $string;\n        }\n    }\n    return $longestString;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest\
    \ = count($strings) > 0 ? max(array_map('strlen', $strings)) : 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > $longest) {\n            $longest = $length;\n        }\n    }\n\n    return\
    \ $longest > 0 ? $strings[0] : null;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_reduce($strings, function ($carry, $string) {\n \
    \       return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \    return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $maxLength = 0;\n    $longestString = null;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > $maxLength)\
    \ {\n            $maxLength = $length;\n            $longestString = $string;\n\
    \        }\n    }\n    return $longestString;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($longest\
    \ === null || $length > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($length > $length) {\n       \
    \     $longest = $string;\n        }\n    }\n    return $longest ?: null;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_reduce($strings, function ($carry, $string) {\n \
    \       return max($carry, strlen($string));\n    });\n    return $longest ===\
    \ false ? null : $strings[$longest];\n}\n", "    if (empty($strings)) {\n    \
    \    return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    $lengths = array_map(function($s)\
    \ { return strlen($s); }, $strings);\n    foreach ($lengths as $length) {\n  \
    \      if ($longest === null || $length > $longest) {\n            $longest =\
    \ $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array();\n    $lengths = array_map('strlen', $strings);\n    foreach ($strings\
    \ as $string) {\n        $length = max($lengths);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array();\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > count($longest)) {\n            $longest = $string;\n \
    \       }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n  \
    \      return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return $carry === null ? $string : $carry > strlen($string)\
    \ ? $string : $carry;\n    });\n\n    return $longest === null ? null : $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_reduce($strings, function ($carry, $string) {\n        return $carry ===\
    \ null ? $string : max($carry, strlen($string));\n    });\n    return $longest\
    \ === null ? null : $longest;\n}\n", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    $longest = array_reduce($strings, function ($carry, $string)\
    \ {\n        return max($carry, strlen($string));\n    });\n    return $longest\
    \ === false ? null : $strings[array_search($longest, $strings)];\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return $carry === null ? $string : max($carry, strlen($string));\n\
    \    });\n    return $longest === null ? null : $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array();\n\
    \    $longestLength = -1;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $longestLength) {\n            $longest\
    \ = $string;\n            $longestLength = $length;\n        }\n    }\n    return\
    \ $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > $length) {\n            $longest\
    \ = $string;\n            $length  = strlen($string);\n        }\n    }\n    return\
    \ $longest ?: null;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$strings = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a tags=php,string |>\n<| a |>\n<code>\n<?php\n$strings = array(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\");\n$longest = array_reduce($strings, function($a, $b) { return\
    \ strlen($a) > strlen($b) ? $a : $b; });\n</code>\n<|/ a tags=php,string dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings = array(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\");\n$longest = array_reduce($strings, function($a, $b) { return strlen($a)\
    \ > strlen($b) ? $a : $b; });\n</code>\n<|/ a tags=php,string |>\n<| a dscore=0\
    \ |>\n<code>\n$strings = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$longest = array_reduce($strings,\
    \ function($a, $b) { return strlen($a) > strlen($b) ? $a : $b; });\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"", "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest\
    \ = array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n\n\
    \    return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n\n    return $longest;\n}\n", "    $longest = null;\n\
    \    $length = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    $longest = array_reduce($strings, function ($carry, $string)\
    \ {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n   \
    \ });\n    return $longest;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_reduce($strings, function ($carry, $string) {\n\
    \        return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \n    return count($strings) > 1 ? $longest : null;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\");\n$array = array_unique($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);\n$array = array_slice($array, 0, count($array)\
    \ - 1);\n$array = array_reverse($array);", "    if (empty($strings)) {\n     \
    \   return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n\n    return $longest === \"\" ? null : $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_reduce($strings, function ($carry, $string) {\n \
    \       return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \    return $longest === \"\" ? null : $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array();\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if (empty($longest)\
    \ || $length > strlen($longest)) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n\n    $longest = array_reduce($strings, function ($carry, $string)\
    \ {\n        return $carry === null ? $string : max($carry, strlen($string));\n\
    \    });\n\n    return $longest === null ? null : $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_reduce($strings, function\
    \ ($carry, $item) {\n        return max($carry, strlen($item));\n    });\n\n \
    \   return $longest === 1 ? $strings[0] : $longest;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array2 = array(\"a\"\
    ,\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"\
    ,\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array3\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$array4 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array5 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\
    s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array6 = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array7 = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $array8 = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n", "    $longest = null;\n    $lengths = array_map(function($s)\
    \ { return strlen($s); }, $strings);\n    foreach ($lengths as $k => $v) {\n \
    \       if ($longest === null || $v > $longest) {\n            $longest = $v;\n\
    \        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest === null ? null : $longest;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I wonder if there is\
    \ a way to make it more efficient. I'm thinking about a solution where you only\
    \ have to loop through the array once, instead of twice. Maybe by using a stack?\n\
    <|/ c |>\n<| c |>\nI added a solution that uses only a single loop and a stack\
    \ to my answer.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$longest = array_reduce($array,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple strings of\
    \ the same length\n<|/ c |>\n<| c |>\nIt does. `array_reduce` will return the\
    \ longest string in the array. `strlen` will return the length of the longest\
    \ string.\n<|/ c |>\n<| c |>\nI see what you're saying, but I believe that `strlen`\
    \ will return the length of the longest string in the array. `array_reduce` will\
    \ return the longest string in the array. `strlen` will return the length of the\
    \ longest string.\n<|/ c |>\n<| c |>\nYes, you're right. `strlen` returns the\
    \ length of the longest string in the array. `array_reduce` returns the longest\
    \ string in the array. `strlen` returns the length of the longest string.\n<|/\
    \ c |>\n<| c |>\nI see what you're saying, but I believe that `strlen` will return\
    \ the length of the longest string in the array. `array_reduce` will return the\
    \ longest string in the array. `strlen` will return the length of the longest\
    \ string.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$longest = array();\n$longestLength\
    \ = -1;\nforeach ($array as $value) {\n    $length = strlen($value);\n    if ($length\
    \ > $longestLength) {\n        $longest = $value;\n        $longestLength = $length;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to make it more efficient. I'm thinking about a solution where\
    \ you only have to loop through the array once, instead of ", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return max($carry, strlen($string));\n    });\n\
    \    return $strings[array_search(max($strings), $strings)];\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return $carry === null ? $string : (strlen($carry)\
    \ > strlen($string) ? $carry : $string);\n    });\n\n    return $longest === null\
    \ ? null : $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n\n    return $longest === \"\" ? null : $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $max = null;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($max))\
    \ {\n            $max = $string;\n        }\n    }\n    return $max;\n}\n", " \
    \   if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    $lengths = array_map('strlen',\
    \ $strings);\n    foreach ($lengths as $length) {\n        if ($longest === null\
    \ || $length >= $longest) {\n            $longest = $length;\n        }\n    }\n\
    \    return $longest === null ? null : $strings[$longest];\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$result = array();\n$longest = -1;\n\
    foreach($array as $key => $value){\n    if($longest < strlen($value)){\n     \
    \   $longest = strlen($value);\n    }\n    $result[$key] = $value;\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$longest = -1;\nforeach($array\
    \ as $key => $value){\n    if($longest < strlen($value)){\n        $longest =\
    \ strlen($value);\n    }\n}\nprint_r($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"\
    f\",\"g\",\"h\",\"i\");\n$longest = -1;\nforeach($array as $key => $value){\n\
    \    if($longest < strlen($value)){\n        $longest = strlen($value);\n    }\n\
    }\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$longest\
    \ = -1;\nforeach($array as $key => $value){\n    if($longest < strlen($value)){\n\
    \        $longest = strlen($value);\n    }\n}\nprint_r($array);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$longest = -1;\nforeach($array as $key\
    \ => $value){\n    if($longest < strlen($value)){\n        $longest = strlen($value);\n\
    \    }\n}\nprint_r($array);", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return max($carry, strlen($string));\n    });\n\
    \n    return $longest === 1 ? $strings[0] : $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_reduce($strings, function\
    \ ($carry, $string) {\n        return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n    });\n    return count($strings) > 1 ? $longest : null;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings as\
    \ $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_reduce($strings, function ($carry, $string) {\n\
    \        return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \n    return $longest === \"\" ? null : $longest;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = array_shift($strings);\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_reduce($strings, function ($carry, $item) {\n \
    \       return $carry > strlen($item) ? $carry : $item;\n    });\n\n    return\
    \ $longest === null ? null : $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = max($length, strlen($string));\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest === null ? null : $longest;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
