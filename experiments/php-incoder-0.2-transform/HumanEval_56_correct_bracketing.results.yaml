language: php
name: HumanEval_56_correct_bracketing
results:
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($el) {\n    return $el != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpueoc2ttl.php:26\n\
    Stack trace:\n#0 /tmp/tmpueoc2ttl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpueoc2ttl.php\
    \ on line 26\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou8i0rc3.php:29\n\
    Stack trace:\n#0 /tmp/tmpou8i0rc3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpou8i0rc3.php\
    \ on line 29\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = explode(\"<\", $brackets);\n  $closed_brackets = explode(\"\
    >\", $brackets);\n  foreach ($open_brackets as $open_bracket => $closed_bracket)\
    \ {\n    if ($open_bracket != $closed_bracket) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss825tdq.php:28\n\
    Stack trace:\n#0 /tmp/tmpss825tdq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpss825tdq.php\
    \ on line 28\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \">\";\n  });\n  return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi14n3bnr.php:26\n\
    Stack trace:\n#0 /tmp/tmpi14n3bnr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi14n3bnr.php\
    \ on line 26\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjd1v8th.php:30\n\
    Stack trace:\n#0 /tmp/tmphjd1v8th.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphjd1v8th.php\
    \ on line 30\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]+/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]+/', $brackets);\n  $opening_brackets = array_unique($opening_brackets);\n\
    \  $closing_brackets = array_unique($closing_brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like\
    \ this solution, but I feel like it would be better to use a regex to determine\
    \ if brackets are balanced. That way the function doesn't have to worry about\
    \ what kind of brackets it's dealing with. Also, what about nested brackets? `[[]]`\n\
    <|/ c |>\n<| c |>\n: I agree, that would be better. I've added a regex solution\
    \ to my answer.\n<|/ c |>\n<| c |>\nI like your solution, but I feel like it would\
    \ be better to use a regex to determine if brackets are balanced. That way the\
    \ function doesn't have to worry about what kind of brackets it's dealing with.\
    \ Also, what about nested brackets? `[[]]`\n<|/ c |>\n<| c |>\n: I agree, that\
    \ would be better. I've added a regex solution to my answer.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I feel like it would be better to use a regex to determine\
    \ if brackets are balanced. That way the function doesn't have to worry about\
    \ what kind of brackets it's dealing with. Also, what about nested brackets? `[[]]`\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets = array(\"<\", \">\"\
    );\n$string = \"<>\";\n$opening_brackets = preg_split('/[\\<\\>]+/', $brackets);\n\
    $closing_brackets = preg_split('/[\\<\\>]+/', $brackets);\n$opening_brackets =\
    \ array_unique($opening_brackets);\n$closing_brackets = array_unique($closing_brackets);\n\
    $opening_brackets = array_diff($opening_brackets, $closing_brackets);\n$opening_brackets\
    \ = array_diff($opening_brackets, array_intersect($closing_brackets, $opening_brackets));\n\
    $opening_brackets = array_diff\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_b7wnock.php on line 19

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjd1v8th.php:30\n\
    Stack trace:\n#0 /tmp/tmphjd1v8th.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphjd1v8th.php\
    \ on line 30\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"<\") {\n            $opening_brackets[]\
    \ = $bracket;\n        } else if ($bracket == \">\") {\n            $closing_brackets[]\
    \ = $bracket;\n        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3r41lwx7.php:34\n\
    Stack trace:\n#0 /tmp/tmp3r41lwx7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3r41lwx7.php\
    \ on line 34\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57pv5xei.php:26\n\
    Stack trace:\n#0 /tmp/tmp57pv5xei.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp57pv5xei.php\
    \ on line 26\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array();\n\
    \  foreach ($brackets as $b) {\n    if ($b == \"<\") {\n      $opening_brackets[]\
    \ = $b;\n    } else {\n      if (array_search($b, $opening_brackets) === false)\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ay13eeo.php:32\n\
    Stack trace:\n#0 /tmp/tmp4ay13eeo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4ay13eeo.php\
    \ on line 32\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7qlkkvz8.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $key\
    \ => $bracket) {\n    if ($bracket == \"<\") {\n      if ($key > 0) {\n      \
    \  $brackets[$key - 1] .= \">\";\n      }\n    }\n    if ($bracket == \">\") {\n\
    \      if ($key < count($brackets) - 1) {\n        $brackets[$key + 1] .= \"<\"\
    ;\n      }\n    }\n  }\n  return implode(\"<<>>\", $brackets);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr492lxy.php:34\n\
    Stack trace:\n#0 /tmp/tmpyr492lxy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyr492lxy.php\
    \ on line 34\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets);\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93dbwiq3.php:28\n\
    Stack trace:\n#0 /tmp/tmp93dbwiq3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp93dbwiq3.php\
    \ on line 28\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $opening_bracket => $closing_bracket)\
    \ {\n    if ($opening_bracket != $closing_bracket) {\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4beefk6t.php:28\n\
    Stack trace:\n#0 /tmp/tmp4beefk6t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4beefk6t.php\
    \ on line 28\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  $brackets = implode(\"\
    >\", $brackets);\n  return $brackets == $brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp812z2rld.php:34\n\
    Stack trace:\n#0 /tmp/tmp812z2rld.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp812z2rld.php\
    \ on line 34\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    return $brackets ===\
    \ '<>';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kp1c9ya.php:23\n\
    Stack trace:\n#0 /tmp/tmp4kp1c9ya.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4kp1c9ya.php\
    \ on line 23\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    return $brackets == \"\
    <>\";\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa41k8bdw.php:24\n\
    Stack trace:\n#0 /tmp/tmpa41k8bdw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa41k8bdw.php\
    \ on line 24\n"
  timestamp: 1659730990
