language: php
name: HumanEval_56_correct_bracketing
results:
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($el) {\n    return $el != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpueoc2ttl.php:26\n\
    Stack trace:\n#0 /tmp/tmpueoc2ttl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpueoc2ttl.php\
    \ on line 26\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou8i0rc3.php:29\n\
    Stack trace:\n#0 /tmp/tmpou8i0rc3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpou8i0rc3.php\
    \ on line 29\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = explode(\"<\", $brackets);\n  $closed_brackets = explode(\"\
    >\", $brackets);\n  foreach ($open_brackets as $open_bracket => $closed_bracket)\
    \ {\n    if ($open_bracket != $closed_bracket) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpss825tdq.php:28\n\
    Stack trace:\n#0 /tmp/tmpss825tdq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpss825tdq.php\
    \ on line 28\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \">\";\n  });\n  return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi14n3bnr.php:26\n\
    Stack trace:\n#0 /tmp/tmpi14n3bnr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi14n3bnr.php\
    \ on line 26\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjd1v8th.php:30\n\
    Stack trace:\n#0 /tmp/tmphjd1v8th.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphjd1v8th.php\
    \ on line 30\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]+/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]+/', $brackets);\n  $opening_brackets = array_unique($opening_brackets);\n\
    \  $closing_brackets = array_unique($closing_brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like\
    \ this solution, but I feel like it would be better to use a regex to determine\
    \ if brackets are balanced. That way the function doesn't have to worry about\
    \ what kind of brackets it's dealing with. Also, what about nested brackets? `[[]]`\n\
    <|/ c |>\n<| c |>\n: I agree, that would be better. I've added a regex solution\
    \ to my answer.\n<|/ c |>\n<| c |>\nI like your solution, but I feel like it would\
    \ be better to use a regex to determine if brackets are balanced. That way the\
    \ function doesn't have to worry about what kind of brackets it's dealing with.\
    \ Also, what about nested brackets? `[[]]`\n<|/ c |>\n<| c |>\n: I agree, that\
    \ would be better. I've added a regex solution to my answer.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I feel like it would be better to use a regex to determine\
    \ if brackets are balanced. That way the function doesn't have to worry about\
    \ what kind of brackets it's dealing with. Also, what about nested brackets? `[[]]`\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets = array(\"<\", \">\"\
    );\n$string = \"<>\";\n$opening_brackets = preg_split('/[\\<\\>]+/', $brackets);\n\
    $closing_brackets = preg_split('/[\\<\\>]+/', $brackets);\n$opening_brackets =\
    \ array_unique($opening_brackets);\n$closing_brackets = array_unique($closing_brackets);\n\
    $opening_brackets = array_diff($opening_brackets, $closing_brackets);\n$opening_brackets\
    \ = array_diff($opening_brackets, array_intersect($closing_brackets, $opening_brackets));\n\
    $opening_brackets = array_diff\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_b7wnock.php on line 19

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjd1v8th.php:30\n\
    Stack trace:\n#0 /tmp/tmphjd1v8th.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphjd1v8th.php\
    \ on line 30\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"<\") {\n            $opening_brackets[]\
    \ = $bracket;\n        } else if ($bracket == \">\") {\n            $closing_brackets[]\
    \ = $bracket;\n        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp3r41lwx7.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3r41lwx7.php:34\n\
    Stack trace:\n#0 /tmp/tmp3r41lwx7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3r41lwx7.php\
    \ on line 34\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57pv5xei.php:26\n\
    Stack trace:\n#0 /tmp/tmp57pv5xei.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp57pv5xei.php\
    \ on line 26\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array();\n\
    \  foreach ($brackets as $b) {\n    if ($b == \"<\") {\n      $opening_brackets[]\
    \ = $b;\n    } else {\n      if (array_search($b, $opening_brackets) === false)\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ay13eeo.php:32\n\
    Stack trace:\n#0 /tmp/tmp4ay13eeo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4ay13eeo.php\
    \ on line 32\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7qlkkvz8.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $key\
    \ => $bracket) {\n    if ($bracket == \"<\") {\n      if ($key > 0) {\n      \
    \  $brackets[$key - 1] .= \">\";\n      }\n    }\n    if ($bracket == \">\") {\n\
    \      if ($key < count($brackets) - 1) {\n        $brackets[$key + 1] .= \"<\"\
    ;\n      }\n    }\n  }\n  return implode(\"<<>>\", $brackets);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr492lxy.php:34\n\
    Stack trace:\n#0 /tmp/tmpyr492lxy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyr492lxy.php\
    \ on line 34\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets);\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93dbwiq3.php:28\n\
    Stack trace:\n#0 /tmp/tmp93dbwiq3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp93dbwiq3.php\
    \ on line 28\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $opening_bracket => $closing_bracket)\
    \ {\n    if ($opening_bracket != $closing_bracket) {\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4beefk6t.php:28\n\
    Stack trace:\n#0 /tmp/tmp4beefk6t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4beefk6t.php\
    \ on line 28\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  $brackets = implode(\"\
    >\", $brackets);\n  return $brackets == $brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp812z2rld.php:34\n\
    Stack trace:\n#0 /tmp/tmp812z2rld.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp812z2rld.php\
    \ on line 34\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    return $brackets ===\
    \ '<>';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kp1c9ya.php:23\n\
    Stack trace:\n#0 /tmp/tmp4kp1c9ya.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4kp1c9ya.php\
    \ on line 23\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    return $brackets == \"\
    <>\";\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa41k8bdw.php:24\n\
    Stack trace:\n#0 /tmp/tmpa41k8bdw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa41k8bdw.php\
    \ on line 24\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \"<\") {\n      $brackets[] = $b;\n    }\n  }\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  $brackets = array_unique($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwo5ov7xn.php:35\n\
    Stack trace:\n#0 /tmp/tmpwo5ov7xn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwo5ov7xn.php\
    \ on line 35\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return count(array_unique($brackets)) == 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ruzq9v0.php:27\n\
    Stack trace:\n#0 /tmp/tmp6ruzq9v0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6ruzq9v0.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != \">\") {\n   \
    \   return ($brackets[$i] == \">\");\n    }\n  }\n  return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rdk1jmv.php:28\n\
    Stack trace:\n#0 /tmp/tmp9rdk1jmv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9rdk1jmv.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp8hhoynxz.php on line 65

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array();\n\
    \  foreach ($brackets as $b) {\n    if ($b == \"<\") {\n      $opening_brackets[]\
    \ = \"<\";\n    }\n  }\n  foreach ($opening_brackets as $b) {\n    if (!in_array($b,\
    \ $brackets)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqagx8x73.php:37\n\
    Stack trace:\n#0 /tmp/tmpqagx8x73.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqagx8x73.php\
    \ on line 37\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<\", $brackets);\n    $brackets = array_filter($brackets,\
    \ function($value) {\n        return $value !== \">\";\n    });\n    return count($brackets)\
    \ === count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n \
    \   return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4j7rh5td.php:29\n\
    Stack trace:\n#0 /tmp/tmp4j7rh5td.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4j7rh5td.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $opening_bracket => $closing_bracket)\
    \ {\n    if ($opening_bracket != $closing_bracket) {\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4beefk6t.php:28\n\
    Stack trace:\n#0 /tmp/tmp4beefk6t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4beefk6t.php\
    \ on line 28\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\" && $value != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpiduope.php:27\n\
    Stack trace:\n#0 /tmp/tmpdpiduope.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdpiduope.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<([^<>]+)>/',\
    \ $brackets, $matches) &&\n         count($matches[1]) == count($brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybus6y46.php:23\n\
    Stack trace:\n#0 /tmp/tmpybus6y46.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpybus6y46.php\
    \ on line 23\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou8i0rc3.php:29\n\
    Stack trace:\n#0 /tmp/tmpou8i0rc3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpou8i0rc3.php\
    \ on line 29\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count(array_diff($brackets,\
    \ array_unique(array_map(\"trim\", $brackets)))) < 2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigsipq_e.php:28\n\
    Stack trace:\n#0 /tmp/tmpigsipq_e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpigsipq_e.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return $brackets[0]\
    \ == $brackets[1];\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7dv4u02.php:29\n\
    Stack trace:\n#0 /tmp/tmps7dv4u02.php(43): test()\n#1 {main}\n  thrown in /tmp/tmps7dv4u02.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<\", $brackets);\n  $brackets = explode(\">>\",\
    \ $brackets);\n  foreach ($brackets as $b) {\n    if ($brackets[$i] == $b) {\n\
    \      $brackets[$i] = \"\";\n    }\n  }\n  return $brackets == $brackets;\n}\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpccejpsix.php:14\nStack trace:\n#0\
    \ /tmp/tmpccejpsix.php(14): explode('>>', Array)\n#1 /tmp/tmpccejpsix.php(23):\
    \ correct_bracketing(Array)\n#2 /tmp/tmpccejpsix.php(27): candidate('<>')\n#3\
    \ /tmp/tmpccejpsix.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpccejpsix.php\
    \ on line 14\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        unset($brackets[$key]);\n        unset($brackets[$key + 1]);\n  \
    \    }\n    }\n  }\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmperc16ta9.php:30\n\
    Stack trace:\n#0 /tmp/tmperc16ta9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmperc16ta9.php\
    \ on line 30\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $key\
    \ => $value) {\n        if ($value == \"<\") {\n            $brackets[$key] =\
    \ \">\";\n        }\n    }\n    return $brackets == array_reverse($brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work for me. I've added some more examples to my question. Maybe\
    \ you can help me with that too.\n<|/ c |>\n<| c |>\nI updated my answer. Now\
    \ it works for all of your examples. I hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your effort! Unfortunately this doesn't work for me either. I've added some\
    \ more examples to my question. Maybe you can help me with that too.\n<|/ c |>\n\
    <| c |>\nI updated my answer. Now it works for all of your examples. I hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your effort! Unfortunately this doesn't\
    \ work for me either. I've added some more examples to my question. Maybe you\
    \ can help me with that too.\n<|/ c |>\n<| a |>\nI believe this regex will work:\n\
    <code>\n^<(\\w+)>$\n</code>\nIt will match any string that starts with <, followed\
    \ by one or more word characters, followed by >, followed by any number of characters\
    \ that may or may not end with >\n<|/ a dscore=0 tags=php,regex |>\n<| c |>\n\
    Thanks for your answer. Unfortunately this doesn't work for me. I've added some\
    \ more examples to my question. Maybe you can help me with that too.\n<|/ c |>\n\
    <| a dscore=0 |>\nI believe this regex will work:\n<code>\n^<(\\w+)>$\n</code>\n\
    It will match any string that starts with <, followed by one or more word characters,\
    \ followed by >, followed by any number of characters that may or may not end\
    \ with >\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work for me. I've added some more examples to my question. Maybe\
    \ you can help me with that too.\n<|/ c |>\n<| a dscore=0 |>\nThis regex will\
    \ match all your examples:\n<code>\n^<(\\w+)>$\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for me.\
    \ I've added some \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7icz7aeb.php
    on line 21

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyeqb9jnu.php:23\n\
    Stack trace:\n#0 /tmp/tmpyeqb9jnu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyeqb9jnu.php\
    \ on line 23\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($key > 0) {\n      if ($key\
    \ != count($brackets) - 1) {\n        if ($value != $brackets[$key + 1]) {\n \
    \         return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplf2uhhoe.php:33\n\
    Stack trace:\n#0 /tmp/tmplf2uhhoe.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplf2uhhoe.php\
    \ on line 33\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]*>$/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqv72rxbf.php:23\n\
    Stack trace:\n#0 /tmp/tmpqv72rxbf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqv72rxbf.php\
    \ on line 23\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    return $brackets === '<>';\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. I've tried\
    \ your solution and it works fine. However I still don't understand why my solution\
    \ doesn't work. Could you please explain me why my solution doesn't work?\n<|/\
    \ c |>\n<| c |>\n: I added some explanation to the answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation. I've tried your solution and it works fine. However\
    \ I still don't understand why my solution doesn't work. Could you please explain\
    \ me why my solution doesn't work?\n<|/ c |>\n<| c |>\n: I added some explanation\
    \ to the answer.\n<|/ c |>\n<| a |>\nTry this regex:\n<code>\n$pattern = '~^<(/?[^<>]*>)>~';\n\
    </code>\n<|/ a dscore=0 tags=php,regex |>\n<| c |>\nThanks for your answer. I've\
    \ tried your solution and it works fine. However I still don't understand why\
    \ my solution doesn't work. Could you please explain me why my solution doesn't\
    \ work?\n<|/ c |>\n<| c |>\n: Because your regex is too complicated and doesn't\
    \ work as you expect. Try my regex and you'll see that it works.\n<|/ c |>\n<|\
    \ c |>\nThanks for your explanation. I've tried your solution and it works fine.\
    \ However I still don't understand why my solution doesn't work. Could you please\
    \ explain me why my solution doesn't work?\n<|/ c |>\n<| c |>\n: Because your\
    \ regex is too complicated and doesn't work as you expect. Try my regex and you'll\
    \ see that it works.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string\
    \ = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp0ck6czb2.php
    on line 17

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_diff($brackets, array(\">\"));\n  return count($brackets)\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqifdvfq.php:24\n\
    Stack trace:\n#0 /tmp/tmplqifdvfq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplqifdvfq.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_m63nf5.php:29\n\
    Stack trace:\n#0 /tmp/tmp7_m63nf5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7_m63nf5.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = preg_split('/[\\<\\>]/', $brackets);\n    $closed_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n    $open_brackets = array_flip($open_brackets);\n\
    \    $closed_brackets = array_flip($closed_brackets);\n    foreach ($open_brackets\
    \ as $key => $value) {\n        if (!isset($closed_brackets[$key])) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n93aqmv.php:34\n\
    Stack trace:\n#0 /tmp/tmp1n93aqmv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1n93aqmv.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\" && $value != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpiduope.php:27\n\
    Stack trace:\n#0 /tmp/tmpdpiduope.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdpiduope.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehsb8rb9.php:28\n\
    Stack trace:\n#0 /tmp/tmpehsb8rb9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpehsb8rb9.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_flip($opening_brackets);\n\
    \  $closing_brackets = array_flip($closing_brackets);\n  return array_sum($opening_brackets)\
    \ == array_sum($closing_brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c\
    \ |>\nI like this solution, but I believe it can be simplified a bit. `array_sum($opening_brackets)\
    \ == array_sum($closing_brackets)` can be simplified to `array_sum($opening_brackets)\
    \ === array_sum($closing_brackets)`\n<|/ c |>\n<| c |>\nYes, you're right. I've\
    \ edited my answer to include your suggestion.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = '<<><>>';\n$opening_brackets = preg_split('/[\\\
    <\\>]/', $string);\n$closing_brackets = preg_split('/[\\<\\>]/', $string);\n$opening_brackets\
    \ = array_flip($opening_brackets);\n$closing_brackets = array_flip($closing_brackets);\n\
    $sum = 0;\nforeach ($opening_brackets as $key => $value) {\n    $sum += $value;\n\
    }\n$sum -= array_sum($closing_brackets);\nif ($sum === 0) {\n    echo 'true';\n\
    } else {\n    echo 'false';\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = '<<><>>';\n$opening_brackets = preg_split('/[\\\
    <\\>]/', $string);\n$closing_brackets = preg_split('/[\\<\\>]/', $string);\n$opening_brackets\
    \ = array_flip($opening_brackets);\n$closing_brackets = array_flip($closing_brackets);\n\
    $sum = 0;\nforeach ($opening_brackets as $key => $value) {\n    $sum += $value;\n\
    }\n$sum -= array_sum($closing_brackets);\nif ($sum === 0) {\n    echo 'true';\n\
    } else {\n    echo 'false';\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpi48cw2du.php
    on line 19

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. Try it on `<<><>>`\n<|/ c |>\n<| c |>\n: It works fine for me. Try it\
    \ on `<<><>>`\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Can you\
    \ try it on that?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Can\
    \ you try it on that?\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\
    \ Can you try it on that?\n<|/ c |>\n<| a tags=php,regex |>\nThis should work:\n\
    <code>\n$string = '<<><>>';\n$pattern = '/<<<(.*?)>>>/';\npreg_match_all($pattern,\
    \ $string, $matches);\n$matches = $matches[1];\n$matches = array_filter($matches);\n\
    $matches = array_unique($matches);\n$matches = array_map('trim', $matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($matches);\n\
    $matches = array_filter($matches);\n$matches = array_filter($matches);\n$matches\
    \ = array_filter($matches);\n$matches = array_filter($matches);\n$matches = array_filter($\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpm2rdrwov.php
    on line 19

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou8i0rc3.php:29\n\
    Stack trace:\n#0 /tmp/tmpou8i0rc3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpou8i0rc3.php\
    \ on line 29\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts0q12wz.php:24\n\
    Stack trace:\n#0 /tmp/tmpts0q12wz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpts0q12wz.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($b != \">\") {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nI like this solution, it's simple and easy to understand. Thanks!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$string = \"<<><>>\";\n$pattern = '~<(<)>~';\n\
    preg_match_all($pattern, $string, $matches);\nvar_dump($matches);\n</code>\nOutput:\n\
    <code>\narray(1) {\n  [0]=>\n  array(1) {\n    [0]=>\n    string(1) \"<\"\n  }\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if there are multiple\
    \ pairs of brackets in the string. Try it with `n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpisiom89i.php
    on line 22

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($b != \">\") {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d9qv_ao.php:28\n\
    Stack trace:\n#0 /tmp/tmp3d9qv_ao.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3d9qv_ao.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou8i0rc3.php:29\n\
    Stack trace:\n#0 /tmp/tmpou8i0rc3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpou8i0rc3.php\
    \ on line 29\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket != \">\") {\n      if ($bracket == \"<\") {\n        unset($brackets[$i]);\n\
    \      }\n    }\n  }\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mogojeg.php:29\n\
    Stack trace:\n#0 /tmp/tmp8mogojeg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8mogojeg.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5vb47__.php:27\n\
    Stack trace:\n#0 /tmp/tmpk5vb47__.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk5vb47__.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \"<\") {\n      $brackets[$b] = \">\";\n    }\n  }\n  return $brackets\
    \ === array_reverse($brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxoc01r1.php:27\n\
    Stack trace:\n#0 /tmp/tmpfxoc01r1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfxoc01r1.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<>>\", $brackets);\n    $opening_brackets = array();\n\
    \    $closing_brackets = array();\n    foreach ($brackets as $bracket) {\n   \
    \     if ($bracket == \"<\") {\n            $opening_brackets[] = \"<<\";\n  \
    \          $closing_brackets[] = \">>\";\n        } else if ($bracket == \">\"\
    ) {\n            $opening_brackets[] = \">>\";\n            $closing_brackets[]\
    \ = \"<<\";\n        } else {\n            $opening_brackets[] = $bracket;\n \
    \           $closing_brackets[] = $bracket;\n        }\n    }\n    return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplf1oz3vz.php:40\n\
    Stack trace:\n#0 /tmp/tmplf1oz3vz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmplf1oz3vz.php\
    \ on line 40\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoeundmaf.php:25\n\
    Stack trace:\n#0 /tmp/tmpoeundmaf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpoeundmaf.php\
    \ on line 25\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  $brackets_count\
    \ = count($brackets);\n  for ($i = 0; $i < $brackets_count; $i++) {\n    $opening_brackets[$i]\
    \ = substr($brackets, $i, 1);\n    $closing_brackets[$i] = substr($brackets, $i\
    \ + 1, 1);\n  }\n  $opening_brackets_count = count($opening_brackets);\n  for\
    \ ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($opening_brackets[$i]\
    \ !== \"<\") {\n      return false;\n    }\n  }\n  for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n    if ($closing_brackets[$i] !== \">\") {\n      return false;\n \
    \   }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpmkudovhf.php:15\nStack trace:\n\
    #0 /tmp/tmpmkudovhf.php(35): correct_bracketing('<>')\n#1 /tmp/tmpmkudovhf.php(39):\
    \ candidate('<>')\n#2 /tmp/tmpmkudovhf.php(53): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpmkudovhf.php on line 15\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return $brackets[0]\
    \ == \"\" && $brackets[count($brackets) - 1] == \"\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjdudymx.php:29\n\
    Stack trace:\n#0 /tmp/tmprjdudymx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprjdudymx.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = array();\n  $closed_brackets = array();\n  $open_brackets_length\
    \ = strlen($brackets);\n  for ($i = 0; $i < $open_brackets_length; $i++) {\n \
    \   $open_brackets[$i] = substr($brackets, $i, 1);\n  }\n  for ($i = 0; $i < $open_brackets_length;\
    \ $i++) {\n    if ($open_brackets[$i] == '<') {\n      $closed_brackets[$i] =\
    \ '>';\n    }\n  }\n  return $open_brackets == $closed_brackets;\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"\
    <<><>>\")` returns `true` but `correct_bracketing(\"<\")` returns `false`.\n<|/\
    \ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern = \"~<~\";\n$replacement\
    \ = \"~>~\";\n$result = preg_replace($pattern, $replacement, $string);\necho $result;\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxoz44vcs.php
    on line 26

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp518tvpr0.php:31\n\
    Stack trace:\n#0 /tmp/tmp518tvpr0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp518tvpr0.php\
    \ on line 31\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($key > 0) {\n        $brackets[$key\
    \ - 1] .= \">\";\n      }\n    }\n  }\n  return implode(\">\", $brackets);\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64z1er__.php:29\n\
    Stack trace:\n#0 /tmp/tmp64z1er__.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp64z1er__.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<\", $brackets);\n    $brackets = explode(\">>\"\
    , $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets);\n\
    \    $brackets = array_unique($brackets);\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpmzngkzqx.php:14\nStack trace:\n#0\
    \ /tmp/tmpmzngkzqx.php(14): explode('>>', Array)\n#1 /tmp/tmpmzngkzqx.php(22):\
    \ correct_bracketing(Array)\n#2 /tmp/tmpmzngkzqx.php(26): candidate('<>')\n#3\
    \ /tmp/tmpmzngkzqx.php(40): test()\n#4 {main}\n  thrown in /tmp/tmpmzngkzqx.php\
    \ on line 14\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $b) {\n    if ($brackets[$i] == \">\") {\n    \
    \  if ($brackets[$i + 1] == \">\") {\n        $brackets[$i + 1] = \"\";\n    \
    \  }\n      else {\n        unset($brackets[$i]);\n      }\n    }\n  }\n  return\
    \ implode(array_reverse($brackets)) == $brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpib6zh54q.php:33\n\
    Stack trace:\n#0 /tmp/tmpib6zh54q.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpib6zh54q.php\
    \ on line 33\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp8hhoynxz.php on line 65

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmp9wwo0sqq.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmp9wwo0sqq.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmp9wwo0sqq.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmp9wwo0sqq.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmp9wwo0sqq.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9wwo0sqq.php:33\nStack\
    \ trace:\n#0 /tmp/tmp9wwo0sqq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9wwo0sqq.php\
    \ on line 33\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/<\/" in /tmp/tmph_u_8uju.php
    on line 41

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($key > 0) {\n        $brackets[$key\
    \ - 1] .= \">\";\n      }\n    }\n  }\n  return $brackets == array_reverse($brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `<<<`\
    \ returns true, but `<<<<` returns false. `<<<<` returns false for me in PHP 5.3.10\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works. I tested it on PHP\
    \ 5.2.17 and it works. I tested it on PHP 5.1.6 and it works. I tested it on PHP\
    \ 5.0.0 and it works. I tested it on PHP 4.4.7 and it works. I tested it on PHP\
    \ 4.3.9 and it works. I tested it on PHP 4.4.6 and it works. I tested it on PHP\
    \ 4.4.5 and it works. I tested it on PHP 4.4.4 and it works. I tested it on PHP\
    \ 4.4.3 and it works. I tested it on PHP 4.4.2 and it works. I tested it on PHP\
    \ 4.4.1 and it works. I tested it on PHP 4.4.0 and it works. I tested it on PHP\
    \ 4.3.10 and it works. I tested it on PHP 4.3.9 and it works. I tested it on PHP\
    \ 4.3.8 and it works. I tested it on PHP 4.3.7 and it works. I tested it on PHP\
    \ 4.3.6 and it works. I tested it on PHP 4.3.5 and it works. I tested it on PHP\
    \ 4.3.4 and it works. I tested it on PHP 4.3.3 and it works. I tested it on PHP\
    \ 4.3.2 and it works. I tested it on PHP 4.3.1 and it works. I tested it on PHP\
    \ 4.3.0 and it works. I tested it on PHP 4.2.10 and it works. I tested it on PHP\
    \ 4.2.8 and it works. I tested it on PHP 4.2.7 and it works. I tested it on PHP\
    \ 4.2.6 and it works. I tested it on PHP 4.2.5 and it works. I tested it on PHP\
    \ 4.2.4 and it works. I tested it on PHP 4.2.3 and it works. I tested it on PHP\
    \ 4.2.2 and it works. I tested it on PHP 4.2.1 and it works. I tested it on PHP\
    \ 4.2.0 and it works. I tested it on PHP 4.1.0 and it work\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpa62xgrpg.php
    on line 23

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i] === \"<\")\
    \ {\n            $closing_brackets[] = \">\";\n        } else {\n            $closing_brackets[]\
    \ = \"</\";\n        }\n    }\n    return array_diff($opening_brackets, $closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpji866jho.php:15\nStack trace:\n\
    #0 /tmp/tmpji866jho.php(28): correct_bracketing('<>')\n#1 /tmp/tmpji866jho.php(32):\
    \ candidate('<>')\n#2 /tmp/tmpji866jho.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpji866jho.php on line 15\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehsb8rb9.php:28\n\
    Stack trace:\n#0 /tmp/tmpehsb8rb9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpehsb8rb9.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/<" in /tmp/tmpt741ppi5.php
    on line 41

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($key > 0) {\n      if ($value\
    \ != \"<\") {\n        $opening_brackets[$key] = $value;\n      }\n    }\n  }\n\
    \  $closing_brackets = array_keys(array_reverse($brackets));\n  foreach ($closing_brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($value != \">\") {\n  \
    \      $closing_brackets[$key] = $value;\n      }\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"<<><>>\";\n$opening_brackets = array(\"<\");\n$closing_brackets\
    \ = array(\">\");\n$opening_brackets_count = count($opening_brackets);\n$closing_brackets_count\
    \ = count($closing_brackets);\n$opening_brackets_count = array_sum($opening_brackets_count);\n\
    $closing_brackets_count = array_sum($closing_brackets_count);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n$closing_brackets_count = array_slice($closing_brackets_count,\
    \ 0, -1);\n$opening_brackets_count = array_slice($opening_brackets_count, 0, -1);\n\
    $closing_brackets_count = array_slice($closing_brackets_count, 0, -1);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n$closing_brackets_count = array_slice($closing_brackets_count,\
    \ 0, -1);\n$opening_brackets_count = array_slice($opening_brackets_count, 0, -1);\n\
    $closing_brackets_count = array_slice($closing_brackets_count, 0, -1);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n$closing_brackets_count = array_slice($closing_brackets_count,\
    \ 0, -1);\n$opening_brackets_count = array_slice($opening_brackets_count, 0, -1);\n\
    $closing_brackets_count = array_slice($closing_brackets_count, 0, -1);\n$opening_brackets_count\
    \ = array_slice($opening_brackets_count, 0, -1);\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzzf92eo7.php
    on line 32

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $key\
    \ => $bracket) {\n    if ($bracket != \"<\" && $bracket != \">\") {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcs88jgo7.php:27\n\
    Stack trace:\n#0 /tmp/tmpcs88jgo7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcs88jgo7.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        return true;\n      }\n    }\n    if ($value == \">\") {\n      if\
    \ ($brackets[$key + 1] == \">\") {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmp20cmrxnu.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp20cmrxnu.php:34\nStack\
    \ trace:\n#0 /tmp/tmp20cmrxnu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp20cmrxnu.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($b !== \">\") {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou3yxuc7.php:28\n\
    Stack trace:\n#0 /tmp/tmpou3yxuc7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpou3yxuc7.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmprplw4nss.php on line 65

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '<') {\n      $opening_brackets[]\
    \ = '<';\n    }\n    if ($bracket == '>') {\n      $closing_brackets[] = '>';\n\
    \    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpbqr67xs5.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpbqr67xs5.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpbqr67xs5.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpbqr67xs5.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpbqr67xs5.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbqr67xs5.php:35\nStack\
    \ trace:\n#0 /tmp/tmpbqr67xs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbqr67xs5.php\
    \ on line 35\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjd1v8th.php:30\n\
    Stack trace:\n#0 /tmp/tmphjd1v8th.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphjd1v8th.php\
    \ on line 30\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0019okvc.php:28\n\
    Stack trace:\n#0 /tmp/tmp0019okvc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0019okvc.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $key\
    \ => $value) {\n        if ($value != \">\") {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtm4fizv.php:27\n\
    Stack trace:\n#0 /tmp/tmpxtm4fizv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxtm4fizv.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"\
    <\")` returns `true`, but `correct_bracketing(\"<>\")` returns `false`.\n<|/ c\
    \ |>\n<| c |>\n: I tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| a tags=php,regex,preg-match |>\n<code>\n<?php\n$string = '<<><>>';\n\
    $pattern = '/<<<\\/?[^<>]+>/';\n$replacement = '';\n$string = preg_replace($pattern,\
    \ $replacement, $string);\necho $string;\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpo9sf39qr.php
    on line 17

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    I like this solution, although it does require a little more code than my own.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI added a more concise solution that doesn't require\
    \ any additional code.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$pattern = '~(?<!\\\
    <)(?<!\\>)(?!\\<)(?!\\>)~';\n$string = '<<><>>';\npreg_match_all($pattern, $string,\
    \ $matches);\nprint_r($matches);\n</code>\nOutput:\n<code>\nArray\n(\n    [0]\
    \ => Array\n        (\n            [0] => <<><>>\n        )\n\n)\n</code>\n<|/\
    \ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work if there are multiple\
    \ brackets within the same string. For example, `<<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><>><<><\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8vd_1wq6.php
    on line 19

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_filter($brackets,\
    \ function($item) {\n    return $item != \">\";\n  });\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmh4r0sp5.php:26\n\
    Stack trace:\n#0 /tmp/tmpmh4r0sp5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmh4r0sp5.php\
    \ on line 26\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value === \"<\") {\n      if ($key === 0) {\n        return\
    \ false;\n      }\n      if ($key === count($brackets) - 1) {\n        return\
    \ true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpej6z1zen.php:32\n\
    Stack trace:\n#0 /tmp/tmpej6z1zen.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpej6z1zen.php\
    \ on line 32\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>$/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvvs2o28.php:24\n\
    Stack trace:\n#0 /tmp/tmpvvvs2o28.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvvvs2o28.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0019okvc.php:28\n\
    Stack trace:\n#0 /tmp/tmp0019okvc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0019okvc.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7qlkkvz8.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count(array_unique($brackets))\
    \ == count($brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhakgr9f.php:24\n\
    Stack trace:\n#0 /tmp/tmphhakgr9f.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphhakgr9f.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($el) {\n        return $el !=\
    \ \">\";\n    });\n    return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplen8w5go.php:26\n\
    Stack trace:\n#0 /tmp/tmplen8w5go.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplen8w5go.php\
    \ on line 26\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value === \"<\") {\n      if ($key > 0) {\n        $brackets[$key\
    \ - 1] .= \">\";\n      }\n    } else {\n      if ($key < count($brackets) - 1)\
    \ {\n        $brackets[$key + 1] .= \"<\";\n      }\n    }\n  }\n  return $brackets[0]\
    \ === $brackets[count($brackets) - 1];\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9hzx2wx.php:33\n\
    Stack trace:\n#0 /tmp/tmpy9hzx2wx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpy9hzx2wx.php\
    \ on line 33\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ != $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64wj20lh.php:28\n\
    Stack trace:\n#0 /tmp/tmp64wj20lh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp64wj20lh.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value === \"<\") {\n      $brackets[$key] = \">\";\n   \
    \ }\n  }\n  return $brackets === array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiort0daz.php:27\n\
    Stack trace:\n#0 /tmp/tmpiort0daz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiort0daz.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = explode(\"<\", $brackets);\n    $closing_brackets\
    \ = explode(\">\", $brackets);\n    $opening_brackets_count = count($opening_brackets);\n\
    \    $closing_brackets_count = count($closing_brackets);\n    $opening_brackets_count\
    \ = min($opening_brackets_count, $closing_brackets_count);\n    for ($i = 0; $i\
    \ < $opening_brackets_count; $i++) {\n        if ($opening_brackets[$i] !== $closing_brackets[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanlvu_hi.php:31\n\
    Stack trace:\n#0 /tmp/tmpanlvu_hi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpanlvu_hi.php\
    \ on line 31\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_replace('/(<[^<>]*>)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n\
    \    $brackets = preg_replace('/(<[^<>]*>)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/(<\\/[^<>]*>)/', '', $brackets);\n    $brackets = preg_\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpwoodzrbq.php
    on line 40

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        $brackets[$i]\
    \ = \"<\" . $bracket . \">\";\n      }\n    }\n  }\n  return implode(\"\", array_diff($brackets,\
    \ array(\">\"))) == \"\";\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6n4sdu0.php:29\n\
    Stack trace:\n#0 /tmp/tmpu6n4sdu0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpu6n4sdu0.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpk2ohyeb1.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpk2ohyeb1.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpk2ohyeb1.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpk2ohyeb1.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpk2ohyeb1.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpk2ohyeb1.php:35\nStack\
    \ trace:\n#0 /tmp/tmpk2ohyeb1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpk2ohyeb1.php\
    \ on line 35\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmp_k2x8vlq.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmp_k2x8vlq.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmp_k2x8vlq.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmp_k2x8vlq.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmp_k2x8vlq.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_k2x8vlq.php:34\nStack\
    \ trace:\n#0 /tmp/tmp_k2x8vlq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_k2x8vlq.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm9ttrmg.php:27\n\
    Stack trace:\n#0 /tmp/tmpvm9ttrmg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvm9ttrmg.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ != $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64wj20lh.php:28\n\
    Stack trace:\n#0 /tmp/tmp64wj20lh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp64wj20lh.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] != \"<\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9d5zfqmw.php:33\n\
    Stack trace:\n#0 /tmp/tmp9d5zfqmw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9d5zfqmw.php\
    \ on line 33\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpn7kgmau4.php on line 43

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm9ttrmg.php:27\n\
    Stack trace:\n#0 /tmp/tmpvm9ttrmg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvm9ttrmg.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($closing_brackets[$key]\
    \ == $value) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsmlws6_.php:31\n\
    Stack trace:\n#0 /tmp/tmpwsmlws6_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwsmlws6_.php\
    \ on line 31\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return implode(\"\
    >\", $brackets) == $brackets;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdu594qx.php:29\n\
    Stack trace:\n#0 /tmp/tmpqdu594qx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqdu594qx.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</\" . $value\
    \ . \">\";\n    }\n  }\n  return count(array_diff($brackets, array(\">\"))) ==\
    \ 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogive1kk.php:27\n\
    Stack trace:\n#0 /tmp/tmpogive1kk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpogive1kk.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_unique($brackets);\n    foreach ($brackets as $b) {\n \
    \       if ($brackets[$i-1] != $b) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $i in /tmp/tmpmjm8b55w.php on line 19\n\n\
    Warning: Undefined array key -1 in /tmp/tmpmjm8b55w.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpmjm8b55w.php:31\nStack trace:\n\
    #0 /tmp/tmpmjm8b55w.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmjm8b55w.php\
    \ on line 31\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpou8i0rc3.php:29\n\
    Stack trace:\n#0 /tmp/tmpou8i0rc3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpou8i0rc3.php\
    \ on line 29\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  $brackets = implode(\"\
    >\", $brackets);\n  return $brackets == \"<>\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_mp42c1.php:30\n\
    Stack trace:\n#0 /tmp/tmp4_mp42c1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4_mp42c1.php\
    \ on line 30\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57pv5xei.php:26\n\
    Stack trace:\n#0 /tmp/tmp57pv5xei.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp57pv5xei.php\
    \ on line 26\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $b) {\n    if ($b == '<') {\n      $opening_brackets[] = '<';\n\
    \      $closing_brackets[] = '>';\n    } else if ($b == '>') {\n      $opening_brackets[]\
    \ = '>';\n      $closing_brackets[] = '<';\n    } else {\n      return false;\n\
    \    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpne4v6vcs.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpne4v6vcs.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpne4v6vcs.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpne4v6vcs.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpne4v6vcs.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpne4v6vcs.php:38\nStack\
    \ trace:\n#0 /tmp/tmpne4v6vcs.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpne4v6vcs.php\
    \ on line 38\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $i\
    \ => $b) {\n        if ($i > 0) {\n            $brackets[$i] = $brackets[$i -\
    \ 1];\n        }\n        if ($b == \">\") {\n            $brackets[$i] = \"<\"\
    ;\n        }\n    }\n    return implode(\">\", $brackets) == $brackets;\n}\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ecauit5.php:30\n\
    Stack trace:\n#0 /tmp/tmp1ecauit5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1ecauit5.php\
    \ on line 30\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5vb47__.php:27\n\
    Stack trace:\n#0 /tmp/tmpk5vb47__.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk5vb47__.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $key\
    \ => $value) {\n        if ($value != \"<\") {\n            $brackets[$key] =\
    \ \"</$value>\";\n        }\n    }\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwrki13m.php:28\n\
    Stack trace:\n#0 /tmp/tmpbwrki13m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbwrki13m.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n  return ($brackets === '<>');\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8subvrnr.php:24\n\
    Stack trace:\n#0 /tmp/tmp8subvrnr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8subvrnr.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_m63nf5.php:29\n\
    Stack trace:\n#0 /tmp/tmp7_m63nf5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7_m63nf5.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjd1v8th.php:30\n\
    Stack trace:\n#0 /tmp/tmphjd1v8th.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphjd1v8th.php\
    \ on line 30\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \"<\") {\n      $brackets[$i] = $b;\n    }\n  }\n  $brackets =\
    \ array_reverse($brackets);\n  foreach ($brackets as $b) {\n    if ($b !== \"\
    >\") {\n      $brackets[$i] = $b;\n    }\n  }\n  return $brackets[0] === $brackets[count($brackets)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $i in /tmp/tmpjocgh7b0.php on line 16\n\n\
    Warning: Undefined variable $i in /tmp/tmpjocgh7b0.php on line 16\n\nWarning:\
    \ Undefined variable $i in /tmp/tmpjocgh7b0.php on line 22\n\nWarning: Undefined\
    \ array key 2 in /tmp/tmpjocgh7b0.php on line 25\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjocgh7b0.php:33\nStack trace:\n#0 /tmp/tmpjocgh7b0.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjocgh7b0.php on line 33\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehsb8rb9.php:28\n\
    Stack trace:\n#0 /tmp/tmpehsb8rb9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpehsb8rb9.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return count($brackets) == count(array_unique($brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyn8bdjs.php:28\n\
    Stack trace:\n#0 /tmp/tmpxyn8bdjs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxyn8bdjs.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\" && $value != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpiduope.php:27\n\
    Stack trace:\n#0 /tmp/tmpdpiduope.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdpiduope.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    $brackets = array_unique($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf47lwt2i.php:29\n\
    Stack trace:\n#0 /tmp/tmpf47lwt2i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpf47lwt2i.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return implode(\" \", $brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7tbbjgt.php:27\n\
    Stack trace:\n#0 /tmp/tmpt7tbbjgt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpt7tbbjgt.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<>>\", $brackets);\n    foreach ($brackets as\
    \ $b) {\n        if ($b[0] != \"<\" || $b[1] != \">\") {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbay21tm.php:28\n\
    Stack trace:\n#0 /tmp/tmpsbay21tm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsbay21tm.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7qlkkvz8.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $i => $b) {\n        if ($i < count($brackets) - 1)\
    \ {\n            if ($brackets[$i + 1] != $b) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm17nnlf8.php:30\n\
    Stack trace:\n#0 /tmp/tmpm17nnlf8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpm17nnlf8.php\
    \ on line 30\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      return false;\n    }\n    unset($brackets[$key]);\n\
    \  }\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args) {\n \
    \   return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7daif8d.php:28\n\
    Stack trace:\n#0 /tmp/tmpz7daif8d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpz7daif8d.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value !== \"<\") {\n    \
    \  $brackets[$key] = \">\";\n    }\n  }\n  return implode(array_reverse($brackets))\
    \ === $brackets;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkf7ggzjy.php:28\n\
    Stack trace:\n#0 /tmp/tmpkf7ggzjy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkf7ggzjy.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kbkiyjn.php:29\n\
    Stack trace:\n#0 /tmp/tmp8kbkiyjn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8kbkiyjn.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have `<` and\
    \ `>` inside your `<` and `>` brackets.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nI meant that if you have `<` and `>` inside\
    \ your `<` and `>` brackets, it won't work. Try it yourself.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. Try it yourself. It works just fine.\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it yourself. It works just fine.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$str = '<><>';\n$str = preg_replace('/<[^<>]*>/', '', $str);\necho\
    \ $str;\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have `<`\
    \ and `>` inside your `<` and `>` brackets.\n<|/ c |>\n<| c |>\n: It does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It works just\
    \ fine.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It works just fine.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It works just fine.\n<|/ c\
    \ |>\n<| a tags=php,regex |>\n<code>\n$str = '<><>';\n$str = preg_replace('/<[^<>]*>/',\
    \ '', $str);\necho $str;\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ if you have `<` and `>` inside your `<` and `>` brackets.\n<|/ c |>\n<| c |>\n\
    : It does. Try it yourself.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\
    \ It works just fine.\n<|/ c |>\n<| c |>\n: It does work. Try it your\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9fqghjwn.php
    on line 17

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0019okvc.php:28\n\
    Stack trace:\n#0 /tmp/tmp0019okvc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0019okvc.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpp584x38n.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpp584x38n.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpp584x38n.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpp584x38n.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpp584x38n.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpp584x38n.php:34\nStack\
    \ trace:\n#0 /tmp/tmpp584x38n.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp584x38n.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] != \"<\"\
    ) {\n        return false;\n      }\n    } else if ($value == \">\") {\n     \
    \ if ($brackets[$key + 1] != \">\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmpip5ygglc.php on line 20\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpip5ygglc.php:33\nStack\
    \ trace:\n#0 /tmp/tmpip5ygglc.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpip5ygglc.php\
    \ on line 33\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  $brackets = implode(\"\
    >\", $brackets);\n  return $brackets == $brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp812z2rld.php:34\n\
    Stack trace:\n#0 /tmp/tmp812z2rld.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp812z2rld.php\
    \ on line 34\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>$/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvvs2o28.php:24\n\
    Stack trace:\n#0 /tmp/tmpvvvs2o28.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvvvs2o28.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    $brackets = array_unique($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf47lwt2i.php:29\n\
    Stack trace:\n#0 /tmp/tmpf47lwt2i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpf47lwt2i.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<\", $brackets);\n  $brackets = explode(\">>\",\
    \ $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($key > 0) {\n\
    \      if ($brackets[$key - 1] != $value) {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpyqfyzdul.php:14\nStack trace:\n#0\
    \ /tmp/tmpyqfyzdul.php(14): explode('>>', Array)\n#1 /tmp/tmpyqfyzdul.php(26):\
    \ correct_bracketing(Array)\n#2 /tmp/tmpyqfyzdul.php(30): candidate('<>')\n#3\
    \ /tmp/tmpyqfyzdul.php(44): test()\n#4 {main}\n  thrown in /tmp/tmpyqfyzdul.php\
    \ on line 14\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $b) {\n    if ($b == '<') {\n      $open_brackets[] = $b;\n    } else {\n\
    \      $closed_brackets[] = $b;\n    }\n  }\n  return count($open_brackets) ==\
    \ count($closed_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmppad7f4zu.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmppad7f4zu.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmppad7f4zu.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmppad7f4zu.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmppad7f4zu.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppad7f4zu.php:34\nStack\
    \ trace:\n#0 /tmp/tmppad7f4zu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppad7f4zu.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n    unset($brackets[$key]);\n\
    \  }\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args) {\n \
    \   return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt25u4nrc.php:28\n\
    Stack trace:\n#0 /tmp/tmpt25u4nrc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpt25u4nrc.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($value != \"<\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ytt5lqp.php:29\n\
    Stack trace:\n#0 /tmp/tmp0ytt5lqp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0ytt5lqp.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]*>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]*>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/<" in /tmp/tmp6sfyrt1z.php
    on line 41

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7qlkkvz8.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        unset($brackets[$key]);\n        unset($brackets[$key + 1]);\n  \
    \    }\n    }\n  }\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmperc16ta9.php:30\n\
    Stack trace:\n#0 /tmp/tmperc16ta9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmperc16ta9.php\
    \ on line 30\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm9ttrmg.php:27\n\
    Stack trace:\n#0 /tmp/tmpvm9ttrmg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvm9ttrmg.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kbkiyjn.php:29\n\
    Stack trace:\n#0 /tmp/tmp8kbkiyjn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8kbkiyjn.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = array();\n    $closed_brackets = array();\n    $open_brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $open_brackets_count; $i++) {\n \
    \       $open_brackets[$i] = $brackets[$i];\n    }\n    $open_brackets_count =\
    \ count($open_brackets);\n    for ($i = 0; $i < $open_brackets_count; $i++) {\n\
    \        if ($open_brackets[$i] === \"<\") {\n            $open_brackets[$i] =\
    \ \">\";\n        }\n    }\n    $open_brackets_count = count($open_brackets);\n\
    \    for ($i = 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i]\
    \ === \">\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n     \
    \   }\n    }\n    $open_brackets_count = count($open_brackets);\n    for ($i =\
    \ 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i] === \"\
    >\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n        }\n  \
    \  }\n    $open_brackets_count = count($open_brackets);\n    for ($i = 0; $i <\
    \ $open_brackets_count; $i++) {\n        if ($open_brackets[$i] === \"<\") {\n\
    \            $closed_brackets[$i] = $open_brackets[$i];\n        }\n    }\n  \
    \  $open_brackets_count = count($open_brackets);\n    for ($i = 0; $i < $open_brackets_count;\
    \ $i++) {\n        if ($open_brackets[$i] === \"<\") {\n            $closed_brackets[$i]\
    \ = $open_brackets[$i];\n        }\n    }\n    $open_brackets_count = count($open_brackets);\n\
    \    for ($i = 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i]\
    \ === \"<\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n     \
    \   }\n    }\n    $open_brackets_count = count($open_brackets);\n    for ($i =\
    \ 0; $i < $open_brackets_count; $i++) {\n        if ($open_brackets[$i] === \"\
    <\") {\n            $closed_brackets[$i] = $open_brackets[$i];\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 57 in /tmp/tmpd7iobi9q.php on line 79

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return array_reduce($brackets,\
    \ function($correct, $opening_bracket) {\n        return $correct && array_search($opening_bracket,\
    \ $brackets) !== FALSE;\n    }, TRUE);\n}\n</code>\n<|/ a tags=php,regex,preg-match-all,preg-match\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. Thanks\
    \ again.\n<|/ c |>\n<| c |>\nI tested it on [regex101](https://regex101.com/r/qZ2jM7/1)\
    \ but when I try to run it on php it gives me this error `Warning: preg_match_all():\
    \ Unknown modifier '(' in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n\
    <| c |>\nI tested it on [regex101](https://regex101.com/r/qZ2jM7/1) but when I\
    \ try to run it on php it gives me this error `Warning: preg_match_all(): Unknown\
    \ modifier '(' in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n<| c |>\n\
    I tested it on [regex101](https://regex101.com/r/qZ2jM7/1) but when I try to run\
    \ it on php it gives me this error `Warning: preg_match_all(): Unknown modifier\
    \ '(' in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n<| c |>\nI tested\
    \ it on [regex101](https://regex101.com/r/qZ2jM7/1) but when I try to run it on\
    \ php it gives me this error `Warning: preg_match_all(): Unknown modifier '('\
    \ in C:\\wamp\\www\\test\\test.php on line 9`\n<|/ c |>\n<| a tags=php,regex,preg-match-all,preg-match\
    \ |>\n<code>\n<?php\n$string = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnclizrgo.php
    on line 20

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $b)\
    \ {\n    if ($b[0] == \"<\" && $b[strlen($b) - 1] == \">\") {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cllysla.php:31\n\
    Stack trace:\n#0 /tmp/tmp4cllysla.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4cllysla.php\
    \ on line 31\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts0q12wz.php:24\n\
    Stack trace:\n#0 /tmp/tmpts0q12wz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpts0q12wz.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpp584x38n.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpp584x38n.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpp584x38n.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpp584x38n.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpp584x38n.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpp584x38n.php:34\nStack\
    \ trace:\n#0 /tmp/tmpp584x38n.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp584x38n.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjd1v8th.php:30\n\
    Stack trace:\n#0 /tmp/tmphjd1v8th.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphjd1v8th.php\
    \ on line 30\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_flip($opening_brackets);\n\
    \  $closing_brackets = array_flip($closing_brackets);\n  return array_diff_key($opening_brackets,\
    \ $closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71oqas96.php:25\n\
    Stack trace:\n#0 /tmp/tmp71oqas96.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp71oqas96.php\
    \ on line 25\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>$/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?$/', '', $brackets);\n    $brackets = preg_replace('/<$/', '', $brackets);\n\
    \    return $brackets === '<>';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for me. I've just tested it on some\
    \ more cases and it works perfectly for me too. Thanks again.\n<|/ c |>\n<| a\
    \ tags=php,regex |>\n<code>\n<?php\n$stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzaz7it0f.php
    on line 19

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehsb8rb9.php:28\n\
    Stack trace:\n#0 /tmp/tmpehsb8rb9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpehsb8rb9.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n    if ($value == \"\
    >\") {\n      if ($brackets[$key + 1] == \">\") {\n        $brackets[$key + 1]\
    \ = \"\";\n      }\n    }\n  }\n  return implode(\">\", $brackets) == $brackets;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 2 in /tmp/tmphcb_2njc.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphcb_2njc.php:34\nStack\
    \ trace:\n#0 /tmp/tmphcb_2njc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphcb_2njc.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = explode(\"<\", $brackets);\n    $closing_brackets\
    \ = explode(\">\", $brackets);\n    foreach ($opening_brackets as $key => $value)\
    \ {\n        if ($value !== $closing_brackets[$key]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghk6hrbg.php:28\n\
    Stack trace:\n#0 /tmp/tmpghk6hrbg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpghk6hrbg.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ != $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64wj20lh.php:28\n\
    Stack trace:\n#0 /tmp/tmp64wj20lh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp64wj20lh.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>$/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>$/', '',\
    \ $brackets);\n    return $brackets === '<>';\n}\n</code>\n<|/ a tags=php,regex,preg-match,preg-replace\
    \ |>\n<| c |>\nI like this solution, but I feel like it would be more efficient\
    \ to just use strpos() to find the position of each opening bracket, and then\
    \ use strrpos() to find the position of each closing bracket. Then, just compare\
    \ the two positions to see if they're equal. This would require less regex and\
    \ would be more efficient.\n<|/ c |>\n<| c |>\n: Yes, that would probably be more\
    \ efficient. I'll add that to my answer.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses strpos and strrpos to find the positions of each opening bracket and\
    \ closing bracket.\n<|/ c |>\n<| c |>\n: I added a solution that uses strpos and\
    \ strrpos to find the positions of each opening bracket and closing bracket.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses strpos and strrpos to find the\
    \ positions of each opening bracket and closing bracket.\n<|/ c |>\n<| a tags=php,regex,preg-match,preg-replace\
    \ |>\n<code>\n<?php\n$string = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpel5iq9py.php
    on line 19

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($el) {\n    return $el != \">\"\
    ;\n  });\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp904kzn0p.php:26\n\
    Stack trace:\n#0 /tmp/tmp904kzn0p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp904kzn0p.php\
    \ on line 26\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n  return ($brackets == \"\
    <>\");\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4imnwzeq.php:24\n\
    Stack trace:\n#0 /tmp/tmp4imnwzeq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4imnwzeq.php\
    \ on line 24\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ != $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64wj20lh.php:28\n\
    Stack trace:\n#0 /tmp/tmp64wj20lh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp64wj20lh.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = \"{\";\n      $closing_brackets[] = \"}\"; // closing brackets are optional.\n\
    \    } else if ($bracket == \">\") {\n      $opening_brackets[] = \"}\";\n   \
    \   $closing_brackets[] = \"{\";\n    } else {\n      $opening_brackets[] = $bracket;\n\
    \      $closing_brackets[] = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmpbxwgk6xw.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmpbxwgk6xw.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmpbxwgk6xw.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmpbxwgk6xw.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmpbxwgk6xw.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbxwgk6xw.php:39\nStack\
    \ trace:\n#0 /tmp/tmpbxwgk6xw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbxwgk6xw.php\
    \ on line 39\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<\\/[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\/[^<>]+>/', '',\
    \ $brackets);\n    $brackets = preg_replace('/<\\/\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/<\/" in /tmp/tmph_u_8uju.php
    on line 41

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<\", $brackets);\n  $brackets = explode(\">>\",\
    \ $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets as\
    \ $b) {\n    if ($brackets[$i] == $b) {\n      $brackets[$i] = $brackets[$i +\
    \ 1];\n    }\n  }\n  return $brackets[0] == $brackets[1];\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: explode(): Argument #2 ($string) must\
    \ be of type string, array given in /tmp/tmpgie9yfj2.php:14\nStack trace:\n#0\
    \ /tmp/tmpgie9yfj2.php(14): explode('>>', Array)\n#1 /tmp/tmpgie9yfj2.php(24):\
    \ correct_bracketing(Array)\n#2 /tmp/tmpgie9yfj2.php(28): candidate('<>')\n#3\
    \ /tmp/tmpgie9yfj2.php(42): test()\n#4 {main}\n  thrown in /tmp/tmpgie9yfj2.php\
    \ on line 14\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kbkiyjn.php:29\n\
    Stack trace:\n#0 /tmp/tmp8kbkiyjn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8kbkiyjn.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[<>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[<>]/', $brackets);\n  foreach ($opening_brackets as $key =>\
    \ $opening) {\n    if ($closing == '') {\n      return false;\n    }\n    if ($opening\
    \ != $closing) {\n      return false;\n    }\n    unset($opening_brackets[$key]);\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $closing in /tmp/tmpwr2nzv4n.php on line\
    \ 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr2nzv4n.php:32\n\
    Stack trace:\n#0 /tmp/tmpwr2nzv4n.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwr2nzv4n.php\
    \ on line 32\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $key\
    \ => $value) {\n        if ($value != \"<\") {\n            $brackets[$key] =\
    \ \"</$value>\";\n        }\n    }\n    return implode(\"\", array_diff($brackets,\
    \ array(\"\")));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy2hiv_sr.php
    on line 21

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp_clklf2j.php on line 59

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmp_k2x8vlq.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmp_k2x8vlq.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmp_k2x8vlq.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmp_k2x8vlq.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmp_k2x8vlq.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_k2x8vlq.php:34\nStack\
    \ trace:\n#0 /tmp/tmp_k2x8vlq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_k2x8vlq.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ I've tried your solution and it works fine for most cases, but it fails for\
    \ cases like `<<><>>` which should return `true` but returns `false`. I've updated\
    \ the question to include these cases.\n<|/ c |>\n<| c |>\n: I updated my answer\
    \ to handle your new cases.  It now returns `true` for `<<><>>` and `n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpgl91kn6p.php
    on line 16

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kbkiyjn.php:29\n\
    Stack trace:\n#0 /tmp/tmp8kbkiyjn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8kbkiyjn.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo098a8c.php:27\n\
    Stack trace:\n#0 /tmp/tmpfo098a8c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo098a8c.php\
    \ on line 27\n"
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ekloi8g.php:27\n\
    Stack trace:\n#0 /tmp/tmp2ekloi8g.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2ekloi8g.php\
    \ on line 27\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4pw_m73.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $b) {\n    if ($b == '<') {\n      $opening_brackets[] = $b;\n\
    \    } else {\n      $closing_brackets[] = $b;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: foreach() argument must be of type array|object, string given\
    \ in /tmp/tmp6qwpi3id.php on line 15\n\nWarning: foreach() argument must be of\
    \ type array|object, string given in /tmp/tmp6qwpi3id.php on line 15\n\nWarning:\
    \ foreach() argument must be of type array|object, string given in /tmp/tmp6qwpi3id.php\
    \ on line 15\n\nWarning: foreach() argument must be of type array|object, string\
    \ given in /tmp/tmp6qwpi3id.php on line 15\n\nWarning: foreach() argument must\
    \ be of type array|object, string given in /tmp/tmp6qwpi3id.php on line 15\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp6qwpi3id.php:34\nStack\
    \ trace:\n#0 /tmp/tmp6qwpi3id.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6qwpi3id.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count(array_diff($brackets,\
    \ array_reverse($brackets))) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps16934d6.php:28\n\
    Stack trace:\n#0 /tmp/tmps16934d6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps16934d6.php\
    \ on line 28\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7qlkkvz8.php on line 48

    '
  timestamp: 1659730990
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count(array_diff($brackets,\
    \ array_unique(array_map(\"trim\", $brackets)))) == 0;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,regex |>\nThis regex will match any number of brackets including\
    \ nested brackets:\n<code>\n/\\{(?:[^{}]|(?R))*\\}/\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"{a}b{c}d{e}f{g}h{i}j{k}l{m}n{o}p{q}r{s}t{u}v{w}x{y}z\"\
    ;\n$pattern = \"/\\{(.*?)\\}/\";\npreg_match_all($pattern, $string, $matches);\n\
    print_r($matches);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpznwakivu.php
    on line 18

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<([^<>]+)>/i',\
    \ $brackets, $matches);\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnfismh8.php:21\n\
    Stack trace:\n#0 /tmp/tmpmnfismh8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmnfismh8.php\
    \ on line 21\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = preg_split('/[\\<\\>]+/', $brackets);\n    $closing_brackets\
    \ = preg_split('/[\\<\\>]+/', $brackets);\n    foreach ($opening_brackets as $i\
    \ => $opening_bracket) {\n        if ($opening_bracket != $closing_brackets[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirdwhjqc.php:32\n\
    Stack trace:\n#0 /tmp/tmpirdwhjqc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpirdwhjqc.php\
    \ on line 32\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != $b)\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqq_4h2yn.php:29\n\
    Stack trace:\n#0 /tmp/tmpqq_4h2yn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqq_4h2yn.php\
    \ on line 29\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $opening_bracket) {\n\
    \    if ($key > 0) {\n      if ($opening_bracket != $closing_brackets[$key - 1])\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThanks so much! This works perfectly. I'm going\
    \ to have to read up on regular expressions so I can understand how this works.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nNo problem. Regex is one of the most powerful\
    \ tools in programming. It's worth learning how to use it well. There are a lot\
    \ of great resources out there. [This one](http://www.regular-expressions.info/tutorial.html)\
    \ is a great place to start. Good luck!\n<|/ c |>\n<| c |>\nThanks so much for\
    \ the link. I'll definitely check it out!\n<|/ c |>\n<| a tags=php,regex |>\n\
    This should do it:\n<code>\n$stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp3igq6im_.php
    on line 24

    '
  timestamp: 1659824206
