name: HumanEval_54_same_chars
language: php
prompt: "<?php\n// Check if two words have the same characters.\n// >>> same_chars(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
  )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
  eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
  )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
  function same_chars($s0, $s1) {\n"
tests: "function candidate(...$args) {\n    return same_chars(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabc\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dddddddabc\"\
  , \"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  eabcd\", \"dddddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcd\", \"dddddddabcf\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\"\
  , \"aaccc\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = str_replace(\" \", \"\",\
    \ $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n\
    \    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}", " \
    \   $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s1);\n    if ($s0 === $s1) {\n        return true;\n\
    \    }\n    $s0 = preg_replace('/[^a-z0-9]/', '', $s0);\n    $s1 = preg_replace('/[^a-z0-9]/',\
    \ '', $s1);\n    if ($s0 === $s1) {\n        return true;\n    }\n    $s0 = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^A-Za-z0-9]/', '', $s1);\n    if ($s0 ===\
    \ $s1) {\n        return true;\n    }\n    return false;\n}\n", "    $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\
    \\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 =\
    \ str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\\
    n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\\
    n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\\
    n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\\
    n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"",
  "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = str_replace(array(\"\\n\"\
    , \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\",\
    \ \"\\t\"), '', $s1);\n    $s0 = preg_replace('/[^a-z0-9]/', '', $s0);\n    $s1\
    \ = preg_replace('/[^a-z0-9]/', '', $s1);\n    return $s0 == $s1;\n}\n", "   \
    \ $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), array(\"\\\
    r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), array(\"\
    \\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\\r\"), array(\"\\n\"\
    ), $s0);\n    $s1 = str_replace(array(\"\\r\"), array(\"\\n\"), $s1);\n    $s0\
    \ = str_replace(array(\"\\n\"), array(\"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\"), array(\"\\r\"), $s1);\n    $s0 = str_replace(array(\"\\r\"), array(\"\\\
    r\"), $s0);\n    $s1 = str_replace(array(\"\\r\"), array(\"\\r\"), $s1);\n   \
    \ $s0 = str_replace(array(\"\\n\"), array(\"\\n\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\"), array(\"\\n\"), $s1);\n    $s0 = str_replace(array(\"\\n\"), array(\"\\\
    n\"), $s0);\n    $s1 = str_replace(array(\"\\n\"), array(\"\\n\"), $s1);\n   \
    \ $s0 = str_replace(array(\"\\n\"), array(\"\\n\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\"), array(\"\\n\"), $s1);\n    $s0 = str_replace(array(\"\\n\"), array(\"\\\
    n\"), $s0);\n    $s1 = str_replace(array(\"\\n\"), array(\"\\n\"), $s1);\n   \
    \ $s0 = str_replace(array(\"\\n\"), array(\"\\n\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\"), array(\"\\n\"), $s1);\n    $s0 = str_replace(array(\"\\n\"), array(\"\\\
    n\"), $s0);\n    $s1 = str_replace(array(\"\\n\"), array(\"\\n\"), $s1);\n   \
    \ $s0 = str_replace(array(\"\\n\"), array(\"\\n\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\"), array(\"\\n\"), $s1);\n    $s0 = str_replace(array(\"\\n\"), array(\"\\\
    n\"), $s0);\n    $s1 = str_replace(array(\"\\n\"), array(\"\\n\"), $s1);\n   \
    \ $s0 = str_replace(array(\"\\n\"), array(\"\\n\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\"), array(\"\\n\"), $s1);\n    $s0 = str_replace(array(\"\\n\"), array(\"\\\
    n\"), $s", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    if ($s0 === $s1) {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n", "  $s0 = preg_replace('/[^a-z]/', '', $s0);\n  $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n  return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0);\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0)\
    \ &&\n        count(preg_split('//', $s0)) == count(preg_split('//', $s1));\n\
    }\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \",\
    \ \"\", $s1);\n    $s0 = str_replace(\"z\", \"zz\", $s0);\n    $s1 = str_replace(\"\
    z\", \"zz\", $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    r\", \"\\t\"), '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(array(\"\\n\", \"\\t\", \"\\r\"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\t\", \"\\r\"), \"\", $s1);\n    $s0\
    \ = preg_replace(\"/[^a-zA-Z0-9 ]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\
    \ ]/\", \"\", $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0);\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "  $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n  $s1 = preg_replace('/[^a-z]/', '', $s1);\n  return strlen($s0) == strlen($s1)\
    \ && strlen($s0) == strlen($s0) &&\n    count(preg_split('//', $s0)) == count(preg_split('//',\
    \ $s1));\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = str_replace(array(\"\\r\"\
    , \"\\n\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\n\",\
    \ \"\\t\"), '', $s1);\n    return $s0 === $s1;\n}\n", "  $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), '', $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\r\"), '', $s1);\n\
    \  return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"\
    ), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/', '', $s0);\n    $s1 = preg_replace('/",
  "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n \
    \   $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n\
    \    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n\
    \    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n\
    \    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n\
    \    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n\
    \    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n\
    \    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n\
    \    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n\
    \    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/", "  $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s0);\n  $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n  $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\\
    n\", $s0);\n  $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s1);\n\
    \  $s0 = preg_replace('/(^|\\n)\\s*\\n/', \"\\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\\
    n)\\s*\\n/', \"\\n\\n\", $s1);\n  $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\\
    n\", $s0);\n  $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n  $s0 =\
    \ preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*$/', \"\\n\\n\", $s1);\n  $s0 = preg_replace('/(^|\\n)\\s*$/', \"\
    \\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n  $s0\
    \ = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s1);\n  $s0 = preg_replace('/(^|\\n)\\s*\\n/',\
    \ \"\\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\n)\\s*\\n/', \"\\n\\n\", $s1);\n\
    \  $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\\
    n)\\s*$/', \"\\n\\n\", $s1);\n  $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\
    \\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\\n\\n\", $s1);\n\
    \  $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\\
    n)\\s*$/', \"\\n\\n\", $s1);\n  $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/',\
    \ \"\\n\\n\", $s0);\n  $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\n\"\
    , $s", "    $s0 = str_replace(\"\\n\", '', $s0);\n    $s1 = str_replace(\"\\n\"\
    , '', $s1);\n    $s0 = str_replace(\"\\r\", '', $s0);\n    $s1 = str_replace(\"\
    \\r\", '', $s1);\n    $s0 = str_replace(\"\\t\", '', $s0);\n    $s1 = str_replace(\"\
    \\t\", '', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"\
    \  \", ' ', $s1);\n    $s0 = str_replace(\"  \", ' ', $s0);\n    $s1 = str_replace(\"",
  "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 =\
    \ str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n",
  "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(\" \", \"\"\
    , $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $s0 = str_replace(\"\\\
    n\", \"\", $s0);\n    $s1 = str_replace(\"\\n\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\t\", \"\", $s0);\n    $s1 = str_replace(\"\\t\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\r\", \"\", $s0);\n    $s1 = str_replace(\"\\r\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"\
    \\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\", $s1);\n    $s0 = str_replace(\"",
  "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 =\
    \ str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\n\\r\"\
    , \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\
    \\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\n\\r\", \"\\r\"\
    ), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\n\\r\"\
    , \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\\
    n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n  \
    \  $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\n\\r\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\n\\r\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\\r\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\\r\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\n\\r\"\
    , \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\
    \\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    r\"), \"\\n\", $s0);\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1\
    \ = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0\
    \ = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '',\
    \ $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0) &&\n\
    \           strlen(preg_replace('/[^a-z]/', '', $s0)) == strlen(preg_replace('/[^a-z]/',\
    \ '', $s1));\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    if (strlen($s0) == strlen($s1)) {\n        for ($i = 0; $i <\
    \ strlen($s0); $i++) {\n            if ($s0[$i] != $s1[$i]) {\n              \
    \  return false;\n            }\n        }\n        return true;\n    }\n    return\
    \ false;\n}", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\"\
    \ \", \"\", $s1);\n    $len = max(strlen($s0), strlen($s1));\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    n\", \"\\t\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    t\", \"\\r\"), \"\", $s1);\n    return $s0 === $s1;\n}", "    $s0 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\", \" \"), \"\", $s0);\n    $s1 = str_replace(array(\"\\\
    n\", \"\\r\", \"\\t\", \" \"), \"\", $s1);\n    return $s0 === $s1;\n}\n", " \
    \   $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    n\", \"\\t\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    t\", \"\\r\"), \"\", $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0)\
    \ == strlen($s1) && strpos($s0, $s1) !== false;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0)\
    \ == strlen($s1) && strlen($s0) == strlen($s0);\n}\n", "    $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\
    \\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\"), \"\
    \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\"), \"\
    \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\"), \"\
    \", $s0);\n", "    $s0 = str_replace(\"\\r\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\
    \\r\\n\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\n\", \"\\r\\n\", $s0);\n \
    \   $s1 = str_replace(\"\\n\", \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\\r\"\
    , \"\\r\\n\", $s0);\n    $s1 = str_replace(\"\\r\", \"\\r\\n\", $s1);\n    $s0\
    \ = str_replace(\"\\n\\r\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\\\
    n\\r\", \"\\r\\n\\r\\n\", $s1);\n    $s0 = str_replace(\"\\r\\r\", \"\\r\\n\\\
    r\\n\", $s0);\n    $s1 = str_replace(\"\\r\\r\", \"\\r\\n\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\\n\", \"\\r\\n\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\\
    r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\\n\", \"\\r\\n\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\\
    r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\\n\", \"\\r\\n\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\\
    r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\\n\", \"\\r\\n\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\\
    r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\\n\", \"\\r\\n\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\\
    r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\\n\", \"\\r\\n\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\\
    r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\n\\n\", \"\\r\\n\\r\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\\n\", \"\\r\\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 =\
    \ preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0\
    \ = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '',\
    \ $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0) &&\n\
    \        array_intersect(str_split($s0), str_split($s1)) == $s0;\n}", "    $s0\
    \ = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '',\
    \ $s1);\n    return $s0 === $s1;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't seem to work. `same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")` returns\
    \ `true` but `same_chars(\"abcd\", \"dddddddabc\")` returns `false`.\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer.\n<|/ c |>\n<| c |>\nThanks, this seems\
    \ to work. I'm going to try and implement it into my code now.\n<|/ c |>\n<| c\
    \ |>\nThis seems to work well, thank you. I'm going to try and implement it into\
    \ my code now.\n<|/ c |>\n<| a dscore=1 |>\nI believe this should work:\n<code>",
  "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 == $s1;\n}\n", "    $s0 = str_replace(array(\"\\r\\\
    n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/',\
    \ \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 =\
    \ preg_replace('/[\\n]+/', \"\\n\", $s", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `same_chars(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\")`.\n<|/ c |>\n<| c |>\n: I see what you mean.\
    \ Thanks for pointing that out. I've updated the answer.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Thanks for pointing that out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. Thanks for pointing that out. I've updated\
    \ the answer.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>", "    $s0 = str_replace(\"\
    \\r\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\\n\", \"\\n\", $s1);\n \
    \   $s0 = str_replace(\"\\n\", \"\\r\\n\", $s0);\n    $s1 = str_replace(\"\\n\"\
    , \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\r\\n\", $s0);\n    $s1\
    \ = str_replace(\"\\r\", \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\r\",\
    \ \"\\r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\r\", \"\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\r\\r\", \"\\r\\n\", $s0);\n    $s1 = str_replace(\"\\\
    r\\r\", \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\r\", \"\\r\\n\", $s0);\n\
    \    $s1 = str_replace(\"\\n\\r\", \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\
    \\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\", $s1);\n    $s0\
    \ = str_replace(\"\\n\", \"\\r\", $s0);\n    $s1 = str_replace(\"\\n\", \"\\r\"\
    , $s1);\n    $s0 = str_replace(\"\\r\", \"\\r\", $s0);\n    $s1 = str_replace(\"\
    \\r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\n\\r\", \"\\r\", $s0);\n    $s1\
    \ = str_replace(\"\\n\\r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\r\\r\",\
    \ \"\\r\", $s0);\n    $s1 = str_replace(\"\\r\\r\", \"\\r\", $s1);\n    $s0 =\
    \ str_replace(\"\\n\\r\", \"\\r\", $s0);\n    $s1 = str_replace(\"\\n\\r\", \"\
    \\r\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\
    \\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\n\", \"\\r\", $s0);\n    $s1\
    \ = str_replace(\"\\n\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\r\"\
    , $s0);\n    $s1 = str_replace(\"\\r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\
    \\n\\r\", \"\\r\", $s0);\n    $s1 = str_replace(\"\\n\\r\", \"\\r\", $s1);\n \
    \   $s0 = str_replace(\"\\r\\r\", \"\\r\", $s0);\n    $s1 = str_replace(\"\\r\\\
    r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\n\\r\", \"\\r\", $s0);\n    $s1\
    \ = str_replace(\"\\n\\r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\\
    n\", $s0);\n    $", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = str_replace(\" \", \"\",\
    \ $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    if (strlen($s0) == strlen($s1))\
    \ {\n        $len = strlen($s0);\n        for ($i = 0; $i < $len; $i++) {\n  \
    \          if ($s1[$i] != $s0[$i]) {\n                return false;\n        \
    \    }\n        }\n        return true;\n    }\n    return false;\n}\n", "   \
    \ $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)(\\s)/', '',\
    \ $s0);\n    $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\n)(\\s)/', '', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\n)(\\s)/', '', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\n)(\\s)/', '', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)(\\s)/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(\\s)/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(\\s)/', '', $s1);\n    $s0 = preg_replace('/(^|\\n", "    $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\
    \\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 =\
    \ str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\"\
    , \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\", \"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\"\
    , \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 =\
    \ str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\\
    n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\
    \\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\\
    n\", \"\\r\"), \"\\n\", $s1);\n    $s", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 == $s1;\n\
    }\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \",\
    \ \"\", $s1);\n    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $s0 = str_replace(\" \", \"\"\
    , $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s1);\n    if (strlen($s0) == strlen($s1)) {\n \
    \       $i = 0;\n        while ($i < strlen($s0)) {\n            if ($s0[$i] !=\
    \ $s1[$i]) {\n                return false;\n            }\n            $i++;\n\
    \        }\n        return true;\n    }\n    return false;\n}", "    $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\
    \\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\\
    n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s1);\n\
    \    $s0 = preg_replace('/(^|\\n)\\s*\\n/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*\\n/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\\
    n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n  \
    \  $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*$/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/',\
    \ \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n\
    \    $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s0);\n    $s1\
    \ = preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n/', \"\\\
    n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s0);\n  \
    \  $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*$/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n\\\
    s*$/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\"\
    , $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n    $s0 =\
    \ preg_replace('/(^|\\n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1) {\n      \
    \  return true;\n    }\n    return false;\n}", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0)\
    \ == strlen($s1) && strlen($s0) == count(preg_split('//', $s0)) && count(preg_split('//',\
    \ $s1)) == count(preg_split('//', $s0));\n}", "    $s0 = str_replace(array(\"\\\
    n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    , \"\\t\"), '', $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) ==\
    \ strlen($s0) &&\n        strpos($s0, $s1) !== false;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0)\
    \ == strlen($s1) && strlen($s0) == strlen($s0);\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    n\", \"\\r\", \"\\t\", \" \"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\r\", \"\\t\", \" \"), \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\\
    s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n\
    \    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n",
  "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n \
    \   $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\\
    r\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\n\\r\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"),\
    \ \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\
    \\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\\r\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\\r\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"),\
    \ \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\
    \\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\\
    n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\"\
    , \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\\
    n\", $s1);\n    $s", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"\
    ), \"\", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n \
    \   $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\r\"), \"\
    \", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\r\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\n\"), \" \", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\"), \" \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\r\"),\
    \ \" \", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\r\"), \" \", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \" \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"),\
    \ \" \", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\n\"), \" \", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \" \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\r\"),\
    \ \" \", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\r\"), \" \", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\", \"\\n\"), \" \", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\"), \" \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\r\"),\
    \ \" \", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\r\"), \" \", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \" \", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\r\"),\
    \ \" \", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\r\"), \" \", $", "  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s1);\n    return strlen($s0) == strlen($s1) &&\
    \ strpos($s0, $s1) !== false;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work. `same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")` returns `true`,\
    \ but `same_chars(\"abcd\", \"dddddddabc\")` returns `false`.\n<|/ c |>\n<| c\
    \ |>\nI tested it on PHP 5.3.10 and 5.3.8 and it works fine.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and 5.3.8 and it works fine.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and 5.3.8 and it works fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.3.10 and 5.3.8 and it works fine.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = str_replace(\" \", \"\",\
    \ $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s1);\n    return strlen($s0) == strlen($s1) &&\
    \ strpos($s0, $s1) !== false;\n}\n", "    $s0 = str_replace(\" \", \"\", $s0);\n\
    \    $s1 = str_replace(\" \", \"\", $s1);\n    return $s0 === $s1;\n}\n", "  \
    \  $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n\
    \    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n",
  "  $s0 = preg_replace('/[^a-z]/', '', $s0);\n  $s1 = preg_replace('/[^a-z]/', '',\
    \ $s1);\n  return $s0 === $s1;\n}", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0) == strlen($s1)\
    \ && strlen($s0) == strlen($s0);\n}\n", "    $s0 = str_replace(\" \", \"\", $s0);\n\
    \    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0), strlen($s1));\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    $s0 = str_replace(\"\
    \ \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    if (strlen($s0)\
    \ == strlen($s1)) {\n        for ($i = 0; $i < strlen($s0); $i++) {\n        \
    \    if ($s1[$i] != $s0[$i]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0)\
    \ &&\n        count(preg_split('//', $s0)) == count(preg_split('//', $s1));\n\
    }\n", "  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\" \", \"\"\
    , $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\" \", \"\
    \", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\" \",\
    \ \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\"\
    \ \", \"\", $s1);\n  $s0 = str_replace(", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\"\
    , $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n  \
    \  $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\"\
    , $s1);\n    $s0 = ", "    $s0 = str_replace(array(\"\\n\", \"\\r\"), '', $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), '', $s1);\n    $s0 = preg_replace('/[^a-z0-9]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z0-9]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n</code>\n<|/ a tags=php,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple occurrences of the same\
    \ letter. Try it with `\"abcabc\"` and `\"abcabcabc\"`.\n<|/ c |>\n<| c |>\n:\
    \ Yes, I know. That's why I said \"if there are multiple occurrences of the same\
    \ letter\".\n<|/ c |>\n<| c |>\n: I added a version that does that.\n<|/ c |>\n\
    <| c |>\n: I added a version that does that.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that does that.\n<|/ c |>\n<| a tags=php,string,algorithm |>\n<code>", "   \
    \ $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    n\", \"\\r\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), '', $s1);\n\
    \    $s0 = preg_replace('/[^a-z0-9]/', '', $s0);\n    $s1 = preg_replace('/[^a-z0-9]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 == $s1;\n\
    }\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \",\
    \ \"\", $s1);\n    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $s0 = str_replace(array(\"\\n\"\
    , \"\\r\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), '', $s1);\n\
    \    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $s0 = str_replace(array(\"\\r\", \"\\n\"\
    , \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\n\", \"\\t\"),\
    \ '', $s1);\n    $len = max(strlen($s0), strlen($s1));\n    $same = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n           \
    \ $same++;\n        }\n    }\n    return $same == $len;\n}\n", "    $s0 = str_replace(\"\
    \ \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    if (strlen($s0)\
    \ == strlen($s1)) {\n        for ($i = 0; $i < strlen($s0); $i++) {\n        \
    \    if ($s0[$i] != $s1[$i]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if (strlen($s0)\
    \ == strlen($s1)) {\n        for ($i = 0; $i < strlen($s0); $i++) {\n        \
    \    if ($s0[$i] != $s1[$i]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}\n", "    $s0 = str_replace(\"\
    \ \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\\
    n\", $s0);\n    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n  \
    \  $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n", " \
    \   $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0)\
    \ &&\n        implode('', array_map('ord', str_split($s0)) == implode('', array_map('ord',\
    \ str_split($s1)));\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n   \
    \ $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 == $s1;\n}\n", "  $s0\
    \ = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n  $s1 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s1);\n  return $s0 === $s1;\n}\n", "    $s0 = str_replace(\"\
    \ \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    if (strlen($s0)\
    \ == strlen($s1)) {\n        for ($i = 0; $i < strlen($s0); $i++) {\n        \
    \    if ($s0[$i] != $s1[$i]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}\n", "    $s0 = str_replace(\"\
    \\r\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\\n\", \"\\n\", $s1);\n \
    \   $s0 = str_replace(\"\\n\", \"\\r\\n\", $s0);\n    $s1 = str_replace(\"\\n\"\
    , \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\r\\n\", $s0);\n    $s1\
    \ = str_replace(\"\\r\", \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\r\",\
    \ \"\\r\\n\", $s0);\n    $s1 = str_replace(\"\\n\\r\", \"\\r\\n\", $s1);\n   \
    \ $s0 = str_replace(\"\\r\\r\", \"\\r\\n\", $s0);\n    $s1 = str_replace(\"\\\
    r\\r\", \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\\n\\r\", \"\\r\\n\", $s0);\n\
    \    $s1 = str_replace(\"\\n\\r\", \"\\r\\n\", $s1);\n    $s0 = str_replace(\"\
    \\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\", $s1);\n    $s0\
    \ = str_replace(\"\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\n\", \"\\n\"\
    , $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\
    \\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\n\\r\", \"\\n\", $s0);\n    $s1\
    \ = str_replace(\"\\n\\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\r\\r\",\
    \ \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\\r\", \"\\n\", $s1);\n    $s0 =\
    \ str_replace(\"\\n\\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\n\\r\", \"\
    \\n\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\r\", $s0);\n    $s1 = str_replace(\"\
    \\r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\n\", \"\\r\", $s0);\n    $s1\
    \ = str_replace(\"\\n\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\r\"\
    , $s0);\n    $s1 = str_replace(\"\\r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\
    \\n\\r\", \"\\r\", $s0);\n    $s1 = str_replace(\"\\n\\r\", \"\\r\", $s1);\n \
    \   $s0 = str_replace(\"\\r\\r\", \"\\r\", $s0);\n    $s1 = str_replace(\"\\r\\\
    r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\n\\r\", \"\\r\", $s0);\n    $s1\
    \ = str_replace(\"\\n\\r\", \"\\r\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\\
    n\\r\", $s0);\n    $s1 = str_replace(\"\\r\", \"", "    $s0 = str_replace(\" \"\
    , \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = max(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    if ($s0 === $s1) {\n        return true;\n    }\n    $s0 = preg_replace('/[^A-Z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^A-Z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^A-Za-z0-9]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^A-Za-z0-9]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^\\n]+/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^\\n]+/\", \"\", $s1);\n\
    \    return $s0 === $s1;\n}\n", "    $s0 = str_replace(\" \", \"\", $s0);\n  \
    \  $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0), strlen($s1));\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\
    \\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n \
    \   $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\n)(.)/', '$1', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)(.)/', '$1', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)(.)/', '$1', $s1);\n    $s0 = preg_replace('/(^|\\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    if (strlen($s0) > strlen($s1)) {\n        $s0 = $s1;\n      \
    \  $s1 = $s0;\n    }\n    $n = min(strlen($s0), strlen($s1));\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $s0 = str_replace(\" \", \"\"\
    , $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n</code>\n<|/ a tags=php,string |>\n<|\
    \ c |>\nThis doesn't work if $s1 contains any characters that are not in $s0.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it. The function\
    \ returns `true` if the two strings have the same characters. I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Try it\
    \ out.\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Try it out.\n<|/\
    \ c |>\n<| c |>\n: I added a test case to my answer. Try it out.\n<|/ c |>\n<|\
    \ a |>\n<code>\n$string1 = \"abc\";\n$string2 = \"abc\";\n$string3 = \"abc\";\n\
    $string4 = \"abc\";\n$string5 = \"abc\";\n$string6 = \"abc\";\n$string7 = \"abc\"\
    ;\n$string8 = \"abc\";\n$string9 = \"abc\";\n$string10 = \"abc\";\n$string11 =\
    \ \"abc\";\n$string12 = \"abc\";\n$string13 = \"abc\";\n$string14 = \"abc\";\n\
    $string15 = \"abc\";\n$string16 = \"abc\";\n$string17 = \"abc\";\n$string18 =\
    \ \"abc\";\n$string19 = \"abc\";\n$string20 = \"abc\";\n$string21 = \"abc\";\n\
    $string22 = \"abc\";\n$string23 = \"abc\";\n$string24 = \"abc\";\n$string25 =\
    \ \"abc\";\n$string26 = \"abc\";\n$string27 = \"abc\";\n$string28 = \"abc\";\n\
    $string29 = \"abc\";\n$string30 = \"abc\";\n$string31 = \"abc\";\n$string32 =\
    \ \"abc\";\n$string33 = \"abc\";\n$string34 = \"abc\";\n$string35 = \"abc\";\n\
    $string36 = \"abc\";\n$string37 = \"abc\";\n$string38 = \"abc\";\n$string39 =\
    \ \"abc\";\n$string40 = \"abc\";\n$string41 = \"abc\";\n$string42 = \"abc\";\n\
    $string43 = \"abc\";\n$string44 = \"abc\";\n$", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if (strlen($s0)\
    \ > strlen($s1)) {\n        $s0 = $s0;\n    } else {\n        $s1 = $s1;\n   \
    \ }\n    $n = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0) == strlen($s1)\
    \ && strlen($s0) == strlen($s0) && strcmp($s0, $s1) === 0;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if (strlen($s0)\
    \ > strlen($s1)) {\n        $s0 = $s1;\n        $s1 = $s0;\n    }\n    $len =\
    \ strlen($s0);\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work correctly for strings like \"abccddeeee\" where it returns true instead\
    \ of false. I've added a test case to the question.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I hope it works now. Sorry for the delay.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately this doesn't work correctly for strings like\
    \ \"abccddeeee\" where it returns true instead of false. I've added a test case\
    \ to the question.\n<|/ c |>\n<| c |>\nI edited my answer, I hope it works now.\
    \ Sorry for the delay.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't work correctly for strings like \"abccddeeee\" where it returns\
    \ true instead of false. I've added a test case to the question.\n<|/ c |>\n<|\
    \ a tags=php,string |>\n<code>", "    $s0 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\"\
    , $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*$/', '', $s1);\n   \
    \ $s0 = preg_replace('/(^|\\n)\\s*$/', '', $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', '', $s", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work for `same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")`\n<|/\
    \ c |>\n<| c |>\n: It does. I tested it before posting.\n<|/ c |>\n<| c |>\n:\
    \ I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n\
    \    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\\
    n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\
    \\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\\
    n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0\
    \ = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\
    \\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\\
    n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\
    \\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\\
    n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0\
    \ = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\
    \\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\\
    n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\
    \\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\\
    n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0\
    \ = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\
    \\n\", $s1);\n    $s0 = preg_replace('/\\n+/", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "  $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \  $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n  $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\r\"),\
    \ \"\\n\", $s1);\n  $s0 = str_replace(array(\"\\t\", \"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n  $s1 = str_replace(array(\"\\t\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \  $s0 = str_replace(array(\"\\n\", \"\\t\", \"\\r\"), \"\\n\", $s0);\n  $s1 =\
    \ str_replace(array(\"\\n\", \"\\t\", \"\\r\"), \"\\n\", $s1);\n  $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\r\"),\
    \ \"\\n\", $s1);\n  $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \  $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \  $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \  $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\\
    n\", $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\\
    r\"), \"\\n\", $s1);\n  $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\\
    n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\\
    n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n  $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \  $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\"\
    , \"\\n\", \"\\r\"), \"\\n\", $s1);\n  $s0 = str_replace(array(\"\\n\", \"\\n\"\
    , \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \  $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\"\
    , \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n  $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\"\
    , \"\\n\", \"\\r\"), \"\\n\", $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\n\"\
    , \"\\n\", \"\\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n</code>\n<|/ a tags=php,string |>\n<|\
    \ c |>\nThis does not answer the question. He wants to know if two strings have\
    \ the same characters, not if they have the same length.\n<|/ c |>\n<| c |>\n\
    Yes, but he also wants to know if two strings have the same length. He wants to\
    \ know if two strings have the same characters. He also wants to know if two strings\
    \ have the same length. He also wants to know if two strings have the same characters.\
    \ He also wants to know if two strings have the same characters. He also wants\
    \ to know if two strings have the same characters. He also wants to know if two\
    \ strings have the same characters. He also wants to know if two strings have\
    \ the same characters. He also wants to know if two strings have the same characters.\
    \ He also wants to know if two strings have the same characters. He also wants\
    \ to know if two strings have the same characters. He also wants to know if two\
    \ strings have the same characters. He also wants to know if two strings have\
    \ the same characters. He also wants to know if two strings have the same characters.\
    \ He also wants to know if two strings have the same characters. He also wants\
    \ to know if two strings have the same characters. He also wants to know if two\
    \ strings have the same characters. He also wants to know if two strings have\
    \ the same characters. He also wants to know if two strings have the same characters.\
    \ He also wants to know if two strings have the same characters. He also wants\
    \ to know if two strings have the same characters. He also wants to know if two\
    \ strings have the same characters. He also wants to know if two strings have\
    \ the same characters. He also wants to know if two strings have the same characters.\
    \ He also wants to know if two strings have the same characters. He also wants\
    \ to know if two strings have the same characters. He also wants to know if two\
    \ strings have the same characters. He also wants to know if two strings have\
    \ the same characters. He also wants to know if two strings have the same characters.\
    \ He also wants to know if two strings have the same characters. He also wants\
    \ to know if two strings have the same characters. He also wants to know if two\
    \ strings have the same characters. He also wants to ", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(\" \", \"\"\
    , $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s1);\n    $s0 = preg_replace('/[^a-z0-9]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z0-9]/', '', $s1);\n    return $s0 === $s1;\n\
    }", "    $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\", \" \"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\", \"\\t\", \" \"), \"\", $s1);\n\
    \    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 == $s1;\n}", " \
    \   $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 == $s1;\n\
    }\n", "    $s0 = str_replace(array(\"\\n\", \"\\r\"), '', $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), '', $s1);\n    $s0 = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n \
    \   $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n   \
    \ $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n   \
    \ $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n   \
    \ $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n   \
    \ $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\"\
    \ \", \"\", $s1);\n    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0)\
    \ == strlen($s1) && strlen($s0) == strlen($s0);\n}\n", "    $s0 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    r\", \"\\t\"), '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 == $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n \
    \   $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = preg_replace('/[\\\
    r\\n]+/', \"\\r\\n\", $s0);\n    $s1 = preg_replace('/[\\r\\n]+/', \"\\r\\n\"\
    , $s1);\n    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), array(\"\\n\", \"\\\
    r\"), $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), array(\"\\n\",\
    \ \"\\r\"), $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n    $s0 = preg_replace('/[\\\
    r\\n]+/', \"\\r\\n\", $s0);\n    $s1 = preg_replace('/[\\r\\n]+/', \"\\r\\n\"\
    , $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), array(\"\\r\\n\", \"\\\
    r\"), $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), array(\"\\r\\n\",\
    \ \"\\r\"), $s1);\n    $s0 = preg_replace('/[\\r\\n]+/', \"\\r\\n\", $s0);\n \
    \   $s1 = preg_replace('/[\\r\\n]+/', \"\\r\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), array(\"\\n\", \"\\r\"), $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), array(\"\\n\", \"\\r\"), $s1);\n    $s0 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n\\r]+/', \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), array(\"\\r\\n\", \"\\r\"), $s1);\n\
    \    $s0 = preg_replace('/[\\r\\n]+/", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = preg_replace(\"/\\n+/\", \"\\n\", $s0);\n    $s1\
    \ = preg_replace(\"/\\n+/\", \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\\
    n\", \"\\r\"), \"\", str_replace(array(\"\\t\", \"  \"), \" \", $s0));\n    $s1\
    \ = str_replace(array(\"\\n\", \"\\r\"), \"\", str_replace(array(\"\\t\", \" \
    \ \"), \" \", $s1));\n    $s0 = preg_replace(\"/\\n+/\", \" \", $s0);\n    $s1\
    \ = preg_replace(\"/\\n+/\", \" \", $s1);\n    $s0 = str_replace(array(\"\\n\"\
    , \"\\r\"), \" \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \" \"\
    , $s1);\n    $s0 = preg_replace(\"/\\n+/\", \" \", $s0);\n    $s1 = preg_replace(\"\
    /\\n+/\", \" \", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \" \",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s1);\n    $s0\
    \ = preg_replace(\"/\\n+/\", \" \", $s0);\n    $s1 = preg_replace(\"/\\n+/\",\
    \ \" \", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s1);\n    $s0 = preg_replace(\"\
    /\\n+/\", \" \", $s0);\n    $s1 = preg_replace(\"/\\n+/\", \" \", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\r\"), \" \", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \" \", $s1);\n    $s0 = preg_replace(\"/\\n+/\", \" \", $s0);\n\
    \    $s1 = preg_replace(\"/\\n+/\", \" \", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \" \", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"),\
    \ \" \", $s1);\n    $s0 = preg_replace(\"/\\n+/\", \" \", $s0);\n    $s1 = preg_replace(\"\
    /\\n+/\", \" \", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \" \",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s1);", "    $s0\
    \ = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '',\
    \ $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    if (strlen($s0) == strlen($s1)) {\n        $n = strlen($s0);\n\
    \        for ($i = 0; $i < $n; $i++) {\n            if ($s1[$i] != $s0[$i]) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    return false;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0) == strlen($s1)\
    \ && strlen($s0) == strlen($s0);\n}", "    $s0 = str_replace(\" \", \"\", $s0);\n\
    \    $s1 = str_replace(\" \", \"\", $s1);\n    $len = max(strlen($s0), strlen($s1));\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)[ \\t]+/', '', $s0);\n    $s1 = preg_replace('/(^|\\n)[ \\t]+/', '', $s1);\n\
    \    $s0 = preg_replace('/[ \\t]+$/', '', $s0);\n    $s1 = preg_replace('/[ \\\
    t]+$/', '', $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), \" \", $s1);\n    $s0 = preg_replace('/[\
    \ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/', ' ', $s1);\n    $s0\
    \ = preg_replace('/[ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/',\
    \ ' ', $s1);\n    $s0 = preg_replace('/[ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[\
    \ \\t]+/', ' ', $s1);\n    $s0 = preg_replace('/[ \\t]+/', ' ', $s0);\n    $s1\
    \ = preg_replace('/[ \\t]+/', ' ', $s1);\n    $s0 = preg_replace('/[ \\t]+/',\
    \ ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/', ' ', $s1);\n    $s0 = preg_replace('/[\
    \ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/', ' ', $s1);\n    $s0\
    \ = preg_replace('/[ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/',\
    \ ' ', $s1);\n    $s0 = preg_replace('/[ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[\
    \ \\t]+/', ' ', $s1);\n    $s0 = preg_replace('/[ \\t]+/', ' ', $s0);\n    $s1\
    \ = preg_replace('/[ \\t]+/', ' ', $s1);\n    $s0 = preg_replace('/[ \\t]+/',\
    \ ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/', ' ', $s1);\n    $s0 = preg_replace('/[\
    \ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/', ' ', $s1);\n    $s0\
    \ = preg_replace('/[ \\t]+/', ' ', $s0);\n    $s1 = preg_replace('/[ \\t]+/',\
    \ ' ', $s1);\n", "  $s0 = preg_replace('/[^a-z]/', '', $s0);\n  $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n  return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\r\\\
    n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = preg_replace('/\\s+/', ' ', $s0);\n    $s1 = preg_replace('/\\\
    s+/', ' ', $s1);\n    $s0 = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s0);\n    $s1\
    \ = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s1);\n    $s0 = preg_replace('/\\s+/',\
    \ ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s0);\n  \
    \  $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n    return strlen($s0)\
    \ == strlen($s1) && strlen($s0) == strlen($s0) &&\n           strpos($s0, $s1)\
    \ !== false;\n}\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\"\
    \ \", \"\", $s1);\n    $len = max(strlen($s0), strlen($s1));\n    $i = 0;\n  \
    \  while ($i < $len) {\n        if ($s1[$i] != $s0[$i]) return false;\n      \
    \  $i++;\n    }\n    return true;\n}\n", "    $s0 = str_replace(array(\"\\r\\\
    n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\r\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\\r\", \"\\r\\n\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\\r\", \"\\r\\n\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\\n\"\
    ), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\"), \"\\n\", $s1);\n \
    \   $s0 = str_replace(array(\"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\\
    r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\\r\", \"\\r\\n\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\\r\", \"\\r\\n\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\\n\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\r\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\\
    n\\r\", \"\\r\\n\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\\r\", \"\
    \\r\\n\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}", "    $s0 = str_replace(array(\"\\n\", \"\\r\"), '', $s0);\n    $s1\
    \ = str_replace(array(\"\\n\", \"\\r\"), '', $s1);\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\"\
    , $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n  \
    \  $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n  \
    \  $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\n\\r\"), \"\\n\"\
    , $s1);\n    $s0 = ", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 =\
    \ preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0\
    \ = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '',\
    \ $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0) &&\n\
    \        array_reduce(str_split($s0), function ($carry, $char) {\n           \
    \ return $carry && $char == $s1[$carry];\n        }) == false;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like this solution, although it seems a bit overkill\
    \ for my needs. I ended up using [this answer](http://stackoverflow.com/a/10905644/470749)\
    \ instead, which was a little simpler.\n<|/ c |>\n<| a tags=php,algorithm,string\
    \ |>\nI ended up using Jack's answer, but with a little modification:\n<code>",
  "    $s0 = str_replace(\"\\r\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\\\
    n\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1 =\
    \ str_replace(\"\\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\n\", \"\\n\"\
    , $s0);\n    $s1 = str_replace(\"\\n\", \"\\n\", $s1);\n    $s0 = str_replace(\"\
    \\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\", $s1);\n    $s0\
    \ = str_replace(\"\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\n\", \"\\n\"\
    , $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\
    \\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\n\", \"\\n\", $s0);\n    $s1\
    \ = str_replace(\"\\n\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\"\
    , $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\
    \\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\n\", \"\\n\", $s1);\n    $s0\
    \ = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\"\
    , $s1);\n    $s0 = str_replace(\"\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\
    \\n\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1\
    \ = str_replace(\"\\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\n\", \"\\n\"\
    , $s0);\n    $s1 = str_replace(\"\\n\", \"\\n\", $s1);\n    $s0 = str_replace(\"\
    \\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\", $s1);\n    $s0\
    \ = str_replace(\"\\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\n\", \"\\n\"\
    , $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\
    \\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\n\", \"\\n\", $s0);\n    $s1\
    \ = str_replace(\"\\n\", \"\\n\", $s1);\n    $s0 = str_replace(\"\\r\", \"\\n\"\
    , $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\", $s1);\n    $s0 = str_replace(\"\
    \\n\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\n\", \"\\n\", $s1);\n    $s0\
    \ = str_replace(\"\\r\", \"\\n\", $s0);\n    $s1 = str_replace(\"\\r\", \"\\n\"\
    , $s1);\n    $s0 = str_replace(\"\\n\", \"\\n\", $s0);", "    $s0 = str_replace(\"\
    \ \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}", "    $s0\
    \ = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\n\\r\", \"\\r\"), \"\\n\", $s1);\n \
    \   $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\\
    n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\"\
    , \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\\
    n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 =\
    \ str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\\
    n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\
    \\n\", \"\\n\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\\
    n\", \"\\r\"), \"\\n\", $s1);\n    $s", "    $s0 = str_replace(\" \", \"\", $s0);\n\
    \    $s1 = str_replace(\" \", \"\", $s1);\n    return $s0 === $s1;\n}", "    $s0\
    \ = str_replace(array(\"\\n\", \"\\r\", \"\\t\", \" \"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\n\", \"\\r\", \"\\t\", \" \"), \"\", $s1);\n    return\
    \ strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0) &&\n           strpos($s0,\
    \ $s1) !== false;\n}\n", "  $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"\
    ), '', $s0);\n  $s1 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s1);\n\
    \  return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $len = min(strlen($s0), strlen($s1));\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    $s0 = str_replace(\"\
    \ \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    return $s0 ==\
    \ $s1;\n}", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    if ($s0 === $s1) {\n        return true;\n    }\n    if (strlen($s0)\
    \ != strlen($s1)) {\n        return false;\n    }\n    $s0 = strtolower($s0);\n\
    \    $s1 = strtolower($s1);\n    $len = strlen($s0);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "  $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n  $s1 = preg_replace('/[^a-z]/', '', $s1);\n  return strlen($s0) == strlen($s1)\
    \ && strlen($s0) == strlen($s0);\n}\n", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(\" \", \"\"\
    , $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s0[$i] != $s1[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
