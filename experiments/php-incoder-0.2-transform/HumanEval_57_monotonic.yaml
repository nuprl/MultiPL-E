name: HumanEval_57_monotonic
language: php
prompt: "<?php\n// Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4,\
  \ 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10))\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
  \ 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $l = array_reverse($l);\n    $l = array_slice($l, 0, count($l)\
    \ - 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[count($l) - 1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $e) {\n        if ($e < $s) {\n            return false;\n        }\n   \
    \     if ($e > $s) {\n            return true;\n        }\n        $s = $e;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $last = array_pop($l);\n\
    \    return $l[0] > $last;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work for me. `monotonic(array(1, 20, 4, 10))` returns `false`, but `monotonic(array(4,\
    \ 1, 0, -10))` returns `true`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1,\
    \ 20, 4, 10))` returns `false`, but `monotonic(array(4, 1, 0, -10))` returns `true`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))`\
    \ returns `false`, but `monotonic(array(4, 1, 0, -10))` returns `true`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))` returns\
    \ `false`, but `monotonic(array(4, 1, 0, -10))` returns `true`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))` returns `false`,\
    \ but `monotonic(array(4, 1, 0, -10))` returns `true`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1]\
    \ : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $i => $v) {\n        if ($v < $s) {\n            return false;\n        }\n\
    \        if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "  $l = array_reverse($l);\n  $l[0] = $l[1] =\
    \ $l[2] = $l[3] = 0;\n  $n = count($l);\n  for ($i = 1; $i < $n; ++$i) {\n   \
    \ if ($l[$i] < $l[$i - 1]) {\n      return true;\n    }\n    if ($l[$i] > $l[$i\
    \ - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $first = array_shift($l);\n    $last = array_pop($l);\n    return $first\
    \ <= $last;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work\
    \ correctly for arrays with negative numbers. Try it with `array(-10, -20, -30)`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just added a\
    \ comment to the code explaining why it works.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers. Try it with `array(-10, -20, -30)`.\n<|/ c |>\n<|\
    \ c |>\nYes, it does. I tested it before posting it. I just added a comment to\
    \ the code explaining why it works.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try it with `array(-10, -20, -30)`.\n<|/ c |>\n<| a |>\n<code>", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1]\
    \ : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = $l[0];\n    $e = $l[count($l)-1];\n\
    \    return ($e < $s) || ($s == $e && $l[0] > $l[count($l)-2]);\n}\n", "    $l\
    \ = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  return\
    \ $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $s = array_shift($l);\n    foreach ($l as $i => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = -$l[0];\n    $l[1] = -$l[1];\n    return\
    \ $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n  \
    \  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        if ($e > $s) {\n            return true;\n        }\n    \
    \    $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $last = array_pop($l);\n    return $l[0] > $last;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>", "    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    $m = count($l) - 1;\n    if ($m == 0) return true;\n\
    \    if ($n == 0) return false;\n    return ($l[$m] - $l[$n] <= 0);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
