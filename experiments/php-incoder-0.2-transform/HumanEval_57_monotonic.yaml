name: HumanEval_57_monotonic
language: php
prompt: "<?php\n// Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4,\
  \ 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10))\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
  \ 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $l = array_reverse($l);\n    $l = array_slice($l, 0, count($l)\
    \ - 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[count($l) - 1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $e) {\n        if ($e < $s) {\n            return false;\n        }\n   \
    \     if ($e > $s) {\n            return true;\n        }\n        $s = $e;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $last = array_pop($l);\n\
    \    return $l[0] > $last;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ work for me. `monotonic(array(1, 20, 4, 10))` returns `false`, but `monotonic(array(4,\
    \ 1, 0, -10))` returns `true`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1,\
    \ 20, 4, 10))` returns `false`, but `monotonic(array(4, 1, 0, -10))` returns `true`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))`\
    \ returns `false`, but `monotonic(array(4, 1, 0, -10))` returns `true`.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))` returns\
    \ `false`, but `monotonic(array(4, 1, 0, -10))` returns `true`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))` returns `false`,\
    \ but `monotonic(array(4, 1, 0, -10))` returns `true`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1]\
    \ : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $i => $v) {\n        if ($v < $s) {\n            return false;\n        }\n\
    \        if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "  $l = array_reverse($l);\n  $l[0] = $l[1] =\
    \ $l[2] = $l[3] = 0;\n  $n = count($l);\n  for ($i = 1; $i < $n; ++$i) {\n   \
    \ if ($l[$i] < $l[$i - 1]) {\n      return true;\n    }\n    if ($l[$i] > $l[$i\
    \ - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $first = array_shift($l);\n    $last = array_pop($l);\n    return $first\
    \ <= $last;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work\
    \ correctly for arrays with negative numbers. Try it with `array(-10, -20, -30)`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just added a\
    \ comment to the code explaining why it works.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers. Try it with `array(-10, -20, -30)`.\n<|/ c |>\n<|\
    \ c |>\nYes, it does. I tested it before posting it. I just added a comment to\
    \ the code explaining why it works.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try it with `array(-10, -20, -30)`.\n<|/ c |>\n<| a |>\n<code>", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1]\
    \ : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = $l[0];\n    $e = $l[count($l)-1];\n\
    \    return ($e < $s) || ($s == $e && $l[0] > $l[count($l)-2]);\n}\n", "    $l\
    \ = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  return\
    \ $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $s = array_shift($l);\n    foreach ($l as $i => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = -$l[0];\n    $l[1] = -$l[1];\n    return\
    \ $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n  \
    \  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        if ($e > $s) {\n            return true;\n        }\n    \
    \    $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $last = array_pop($l);\n    return $l[0] > $last;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>", "    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    $m = count($l) - 1;\n    if ($m == 0) return true;\n\
    \    if ($n == 0) return false;\n    return ($l[$m] - $l[$n] <= 0);\n}\n", " \
    \   $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $k\
    \ => $v) {\n        if ($v < $s) {\n            return false;\n        }\n   \
    \     if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4,\
    \ 10))` returns true.\n<|/ c |>\n<| c |>\nIt works for me. `monotonic(array(1,\
    \ 20, 4, 10))` returns false. `monotonic(array(1, 2, 4, 20))` returns true.\n\
    <|/ c |>\n<| c |>\nI see that now. My mistake. Thanks.\n<|/ c |>\n<| a dscore=3\
    \ |>\nThe function below will return the difference between the highest and lowest\
    \ values in a given array:\n<code>", "    $l = array_reverse($l);\n    $l[0] =\
    \ max($l[0], $l[1]);\n    $l[1] = max($l[1], $l[2]);\n    $l[2] = max($l[2], $l[3]);\n\
    \    $l[3] = max($l[3], $l[0]);\n    return ($l[0] > $l[1] && $l[1] > $l[2] &&\
    \ $l[2] > $l[3]);\n}", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "  $l = array_reverse($l);\n  $l[0]\
    \ = array_shift($l);\n  $l[1] = array_shift($l);\n  return $l[0] > $l[1];\n}\n",
  "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n",
  "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1] : $l[0];\n    $l[1]\
    \ = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n}\n", "  $l = array_reverse($l);\n\
    \  $l[0] = array_shift($l);\n  return $l[0] > $l[count($l) - 1];\n}\n", "    $l\
    \ = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $e) {\n\
    \        if ($e < $s) {\n            return false;\n        }\n        if ($e\
    \ > $s) {\n            return true;\n        }\n        $s = $e;\n    }\n    return\
    \ true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n  \
    \  $l[1] = array_shift($l);\n    $l[2] = array_shift($l);\n    $l[3] = array_shift($l);\n\
    \    return $l[0] > $l[1] && $l[1] > $l[2] && $l[2] > $l[3];\n}\n", "    $l =\
    \ array_reverse($l);\n    $l = array_merge($l, array(0));\n    $l = array_unique($l);\n\
    \    $l = array_map('current', $l);\n    return $l[0] > $l[count($l)-1];\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=2 |>\n<code>", "    $l = array_reverse($l);\n\
    \    $l[0] = max($l[0], $l[1]);\n    $l[1] = max($l[1], $l[2]);\n    $l[2] = max($l[2],\
    \ $l[3]);\n    $l[3] = max($l[3], $l[0]);\n    return $l[0] > $l[1] && $l[1] >\
    \ $l[2] && $l[2] > $l[3];\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "  $l = array_reverse($l);\n  $l[0]\
    \ = array_shift($l);\n  return $l[0] > $l[1];\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a list of arrays with different lengths.\
    \ e.g. `array(1, 2, 3, 4)` and `array(2, 3, 4, 5)`\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  return\
    \ $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $s = $l[0];\n\
    \    $e = $l[count($l)-1];\n    return ($e < $s) || ($e == $s && $e > 0);\n}\n",
  "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n  \
    \  return $l[0] > $l[1];\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=2\
    \ |>\n<code>", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n    $m =\
    \ count($l) - 1;\n    if ($m == 0) return true;\n    if ($l[$m] < $l[$m-1]) return\
    \ true;\n    return false;\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $i => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l[0] = $l[0] > $l[1] ? $l[1] : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0]\
    \ : $l[1];\n    return $l[0] > $l[1];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\nI wrote a PHP function to do this:\n<code>", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))` returns\
    \ true.\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.2). Try `monotonic(array(1,\
    \ 20, 4, 10))` with your PHP version.\n<|/ c |>\n<| c |>\n: I added a link to\
    \ my answer that explains why this doesn't work.\n<|/ c |>\n<| c |>\n: I added\
    \ a link to my answer that explains why this doesn't work.\n<|/ c |>\n<| c |>\n\
    : I added a link to my answer that explains why this doesn't work.\n<|/ c |>\n\
    <| a tags=php,sorting |>\nI came up with a solution that doesn't require any extra\
    \ memory and doesn't require any extra comparisons.\n<code>", "  $l = array_reverse($l);\n\
    \  $s = array_shift($l);\n  foreach ($l as $v) {\n    if ($v < $s) {\n      return\
    \ false;\n    }\n    $s = max($s, $v);\n  }\n  return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    $l[0] = $l[0] - 1;\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $first = array_shift($l);\n    return\
    \ $first <= array_pop($l);\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($l[$i] <= $l[$i - 1]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = max($l[0], $l[1]);\n    $l[1] = max($l[1], $l[2]);\n    $l[2] = max($l[2],\
    \ $l[3]);\n    $l[3] = max($l[3], $l[0]);\n    return $l[0] > $l[1] && $l[1] >\
    \ $l[2] && $l[2] > $l[3];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't seem to work. `monotonic(array(1,\
    \ 20, 4, 10))` returns `true` but `monotonic(array(4, 1, 0, -10))` returns `false`\n\
    <|/ c |>\n<| c |>\nIt does work, try it out yourself. It returns `true` for `monotonic(array(1,\
    \ 20, 4, 10))` and `false` for `monotonic(array(4, 1, 0, -10))`\n<|/ c |>\n<|\
    \ c |>\nYes, it does work, but it's not a very good solution. `monotonic(array(1,\
    \ 20, 4, 10))` returns `true` but `monotonic(array(4, 1, 0, -10))` returns `false`\n\
    <|/ c |>\n<| c |>\nIt does work, try it out yourself. It returns `true` for `monotonic(array(1,\
    \ 20, 4, 10))` and `false` for `monotonic(array(4, 1, 0, -10))`\n<|/ c |>\n<|\
    \ c |>\nYes, it does work, but it's not a very good solution. `monotonic(array(1,\
    \ 20, 4, 10))` returns `true` but `monotonic(array(4, 1, 0, -10))` returns `false`\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(1, 20, 4, 10);\n$array = array_reverse($array);\n\
    $array = array_slice($array, 1);\n$array = array_reverse($array);\n$array = array_slice($array,\
    \ 1);\n$array = array_reverse($array);\n$array = array_slice($array, 1);\n$array\
    \ = array_reverse($array);\n$array = array_slice($array, 1);\n$array = array_reverse($array);\n\
    $array = array_slice($array, 1);\n$array = array_reverse($array);\n$array = array_slice($array,\
    \ 1);\n$array = array_reverse($array);\n$array = array_slice($array, 1);\n$array\
    \ = array_reverse($array);\n$array = array_slice($array, 1);\n$array = array_reverse($array);\n\
    $array = array_slice($array, 1);\n$array = array_reverse($array);\n$array = array_slice($array,\
    \ 1);\n$array = array_reverse($array);\n$array = array_slice($array, 1);\n$array\
    \ = array_reverse($array);\n$array = array_slice($array, 1);\n$array = array_reverse($array);\n\
    $array = array_slice($array, 1);\n$array = ", "    $l = array_reverse($l);\n \
    \   $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $i => $e) {\n        if ($e < $s)\
    \ {\n            return false;\n        }\n        if ($e > $s) {\n          \
    \  return true;\n        }\n        $s = $e;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = reset($l);\n    return $l[0] > $l[count($l)-1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $e) {\n        if ($e < $s) {\n            return false;\n        }\n   \
    \     if ($e > $s) {\n            return true;\n        }\n        $s = $e;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ work for me. `monotonic(array(1, 20, 4, 10))` returns `true` but `monotonic(array(4,\
    \ 1, 0, -10))` returns `false`.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10\
    \ and PHP 5.4.4 and it works as expected. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.4.4 and it works as expected.\
    \ Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\n: I tested it on\
    \ PHP 5.3.10 and PHP 5.4.4 and it works as expected. Maybe you have a different\
    \ PHP version?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.4.4 and\
    \ it works as expected. Maybe you have a different PHP version?\n<|/ c |>\n<|\
    \ a dscore=2 |>\nI wrote a function that checks if a list is monotonically increasing\
    \ or decreasing.\n<code>", "    $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2]\
    \ = $l[3] = 0;\n    $n = count($l);\n    for ($i = 0; $i < $n; ++$i) {\n     \
    \   if ($l[$i] <= $l[$i + 1]) {\n            if ($l[$i] <= $l[$i + 2]) {\n   \
    \             if ($l[$i] <= $l[$i + 3]) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n",
  "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $i =>\
    \ $v) {\n        if ($v < $s) {\n            return false;\n        }\n      \
    \  if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n   \
    \ }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $i => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $last = array_pop($l);\n    return $l[0] > $last;\n}\n", "  $l = array_reverse($l);\n\
    \  $l[0] = array_shift($l);\n  return $l[0] > $l[count($l) - 1];\n}\n", "    $l\
    \ = array_reverse($l);\n    $s = $l[0];\n    foreach ($l as $n) {\n        if\
    \ ($s < $n) {\n            $s = $n;\n        }\n    }\n    return $s < 0;\n}\n",
  "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1] : $l[0];\n    $l[1]\
    \ = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n}\n", "    $l =\
    \ array_reverse($l);\n    $n = array_shift($l);\n    foreach ($l as $k => $v)\
    \ {\n        if ($v > $n) {\n            return false;\n        }\n        if\
    \ ($v < $n) {\n            return true;\n        }\n        $n = $v;\n    }\n\
    \    return true;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n</code>\n<|/\
    \ a tags=arrays,php,sorting |>\n<| c |>\nThis doesn't work if the array is `[1,2,4,20]`\n\
    <|/ c |>\n<| c |>\nIt does work, try it out. `monotonic(array(1, 2, 4, 20))` returns\
    \ `true`, while `monotonic(array(1, 20, 4, 10))` returns `false`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `[1,2,4,20]` because `array_slice` removes the last\
    \ element of the array, so the array is now `[1,2,4]`. Then `array_reverse` reverses\
    \ the array, so the array is now `[4,2,1]`. Then `array_slice` removes the last\
    \ element of the array, so the array is now `[4,2]`. Then `array_reverse` reverses\
    \ the array, so the array is now `[2,4]`. Then `array_slice` removes the last\
    \ element of the array, so the array is now `[2]`. Then `array_reverse` reverses\
    \ the array, so the array is now `[4]`. Then `array_slice` removes the last element\
    \ of the array, so the array is now `[]`. Then `array_reverse` reverses the array,\
    \ so the array is now `[]`. Then `array_slice` removes the last element of the\
    \ array, so the array is now `[]`. Then `array_reverse` reverses the array, so\
    \ the array is now `[]`. Then `array_slice` removes the last element of the array,\
    \ so the array is now `[]`. Then `array_reverse` reverses the array, so the array\
    \ is now `[]`. Then `array_slice` removes the last element of the array, so the\
    \ array is now `[]`. Then `array_reverse` reverses the array, so the array is\
    \ now `[]`. Then `array_slice` removes the last element of the array, so the array\
    \ is now `[]`. Then `array_reverse` reverses the array, so the array is now `[]`.\
    \ Then `array_slice` removes the last element of the array, so the array is now\
    \ `[]`. Then `array_reverse` reverses the array, so the array is now `[]`. Then\
    \ `array_slice` removes the last element of the array, so the array is now `[]`.\
    \ Then `array_reverse` reverses the array, so the array is now `[]`. Then `array_slice`\
    \ removes the last element of the array, so the array is now `[]`. Then `array_reverse` ",
  "    $l = array_reverse($l);\n    $n = count($l);\n    $m = count($l) - 1;\n   \
    \ if ($n <= $m) {\n        $n = $m;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        if ($l[$i] > $l[$m]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1]\
    \ ? $l[1] : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n\
    \    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, but I prefer to use `array_slice` instead\
    \ of `array_reverse` because `array_slice` preserves the original order of the\
    \ array and `array_reverse` does not.\n<|/ c |>\n<| c |>\nYes, I agree with you.\
    \ `array_slice` would be more efficient.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    $l = array_reverse($l);\n    $l = array_merge($l, array(0));\n    $l = array_map('abs',\
    \ $l);\n    $l = array_map('count', $l);\n    return $l[0] > $l[1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_merge($l, array(0));\n    $l = array_unique($l);\n\
    \    $l = array_reverse($l);\n    return $l[0] > $l[count($l)-1];\n}\n", "   \
    \ $l = array_reverse($l);\n    $l[0] = max($l[0], $l[1]);\n    $l[1] = max($l[1],\
    \ $l[2]);\n    $l[2] = max($l[2], $l[3]);\n    $l[3] = max($l[3], $l[0]);\n  \
    \  return $l[0] > $l[1] && $l[1] > $l[2] && $l[2] > $l[3];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, because it doesn't require any additional libraries.\
    \ But it does require a little more memory than `array_diff()`, so if you have\
    \ a large array and need to do this a lot, it might be worth it.\n<|/ c |>\n<|\
    \ c |>\nI like this solution as well, but I ran into some issues with it.  I posted\
    \ a question here: http://stackoverflow.com/questions/43056442/php-array-diff-not-returning-correct-results-when-comparing-two-arrays-with-diff\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if you have duplicate values in\
    \ your array. For example, if your array is `array(1, 20, 4, 10)` then `array_diff`\
    \ will return `array(4, 10)` instead of `array(4, 10)`\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work if you have duplicate values in your array. For example,\
    \ if your array is `array(1, 20, 4, 10)` then `array_diff` will return `array(4,\
    \ 10)` instead of `array(4, 10)`\n<|/ c |>\n<| c |>\nThis solution doesn't work\
    \ if you have duplicate values in your array. For example, if your array is `array(1,\
    \ 20, 4, 10)` then `array_diff` will return `array(4, 10)` instead of `array(4,\
    \ 10)`\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    $l = array_reverse($l);\n  \
    \  $first = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $first)\
    \ {\n            return false;\n        }\n        if ($e > $first) {\n      \
    \      $first = $e;\n        }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_merge($l, array(0));\n    $l = array_unique($l);\n    $l = array_map('count',\
    \ $l);\n    return $l[0] > $l[1];\n}\n\n/**\n * Returns true if the given value\
    \ is an integer.\n *\n * @param mixed $value Value to check\n * @return bool\n\
    \ */", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $last = array_pop($l);\n \
    \   return $last > $l[0];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 0, count($l) - 1);\n    $l[] = $l[0];\n    return $l[0] > $l[count($l) - 1];\n\
    }\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? 1 :\
    \ -1;\n    $l[1] = $l[1] > $l[2] ? 1 : -1;\n    $l[2] = $l[2] > $l[3] ? 1 : -1;\n\
    \    $l[3] = $l[3] > $l[0] ? 1 : -1;\n    return $l[0] === $l[1] && $l[1] ===\
    \ $l[2] && $l[2] === $l[3] && $l[3] === $l[0];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    $l[1] = -$l[1];\n    $l[2] = -$l[2];\n    $l[3] = -$l[3];\n\
    \    return $l[0] > $l[1] && $l[1] > $l[2] && $l[2] > $l[3];\n}\n", "    $l =\
    \ array_reverse($l);\n    $n = count($l);\n    $m = count($l) - 1;\n    if ($n\
    \ <= 1) return false;\n    for ($i = 0; $i < $m; $i++) {\n        if ($l[$i] >\
    \ $l[$i + 1]) return false;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n    return $l[0] >\
    \ $l[1];\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to work when\
    \ there are duplicates in the array. `monotonic(array(1, 20, 4, 10, 20))` returns\
    \ `true` when it should be `false`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work\
    \ when there are duplicates in the array. `monotonic(array(1, 20, 4, 10, 20))`\
    \ returns `true` when it should be `false`.\n<|/ c |>\n<| c |>\nI added a fix\
    \ for duplicates.\n<|/ c |>\n<| c |>\nThis doesn't seem to work when there are\
    \ duplicates in the array. `monotonic(array(1, 20, 4, 10, 20))` returns `true`\
    \ when it should be `false`.\n<|/ c |>\n<| c |>\nI added a fix for duplicates.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "  $l = array_reverse($l);\n  $l[0] = reset($l);\n\
    \  $l[1] = end($l);\n  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_merge($l, array_fill(0, count($l), 0));\n    $l = array_map('abs',\
    \ $l);\n    $l = array_map('abs', $l);\n    $l = array_filter($l);\n    return\
    \ $l[0] > $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    $m = count($l) - 1;\n    if ($m == 0) return true;\n    if ($l[$m] < $l[$m-1])\
    \ return true;\n    return false;\n}\n", "    $l = array_reverse($l);\n    $l[0]\
    \ = $l[1] = $l[2] = $l[3] = 0;\n    $i = 1;\n    $j = 0;\n    $k = 0;\n    while\
    \ ($i < count($l)) {\n        if ($l[$i] < $l[$j]) {\n            if ($l[$i] <\
    \ $l[$k]) {\n                $l[$k] = $l[$i];\n            } else {\n        \
    \        $l[$j] = $l[$i];\n            }\n        } else {\n            if ($l[$i]\
    \ > $l[$k]) {\n                $l[$k] = $l[$i];\n            } else {\n      \
    \          $l[$j] = $l[$i];\n            }\n        }\n        $i++;\n       \
    \ $j++;\n        $k++;\n    }\n    return $l[0] > $l[1];\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4, 10))` returns\
    \ `true` when it should be `false`.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10\
    \ and PHP 5.4.3. It returns `false` on both.\n<|/ c |>\n<| c |>\n: I tested it\
    \ on PHP 5.3.10 and PHP 5.4.3. It returns `false` on both.\n<|/ c |>\n<| c |>\n\
    : I tested it on PHP 5.3.10 and PHP 5.4.3. It returns `false` on both.\n<|/ c\
    \ |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.4.3. It returns `false` on\
    \ both.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>", "    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1] && $l[0] > $l[2] && $l[0] > $l[3] && $l[0] > $l[4];\n\
    }\n", "  $l = array_reverse($l);\n  $l[0] = max($l[0], $l[1]);\n  $l[1] = max($l[1],\
    \ $l[2]);\n  $l[2] = max($l[2], $l[3]);\n  $l[3] = max($l[3], $l[0]);\n  return\
    \ $l[0] > $l[1] && $l[1] > $l[2] && $l[2] > $l[3];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_merge($l, $l);\n    return $l[0] > $l[count($l)-1];\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    $l = array_reverse($l);\n \
    \   $l = array_shift($l);\n    return $l === 0 && count($l) === count(array_unique($l));\n\
    }\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_shift($l);\n\
    \    return $l === 0 || $l === max($l);\n}\n", "    $l = array_reverse($l);\n\
    \    $last = array_pop($l);\n    return $l[0] > $last;\n}\n", "    $l = array_reverse($l);\n\
    \    $first = array_shift($l);\n    return $first <= $l;\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $v) {\n        if ($v < $s) {\n\
    \            return false;\n        }\n        if ($v > $s) {\n            return\
    \ true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", "    $l =\
    \ array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $i => $v)\
    \ {\n        if ($v < $s) {\n            return false;\n        }\n        if\
    \ ($v > $s) {\n            return true;\n        }\n        $s = $v;\n    }\n\
    \    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1]\
    \ ? $l[1] : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = $l[0];\n    foreach ($l\
    \ as $k => $v) {\n        if ($v < $s) {\n            return false;\n        }\n\
    \        if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l = array_merge($l,\
    \ $l);\n    $l = array_unique($l);\n    $l = array_map('current', $l);\n    $l\
    \ = array_filter($l);\n    return count($l) == 1;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_merge($l, $l);\n    $l = array_unique($l);\n    $l = array_map('current',\
    \ $l);\n    $l = array_filter($l);\n    $l = array_map('end', $l);\n    return\
    \ $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $l[0] =\
    \ -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n   \
    \ $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n  \
    \          return false;\n        }\n        if ($e > $s) {\n            return\
    \ true;\n        }\n        $s = $e;\n    }\n    return true;\n}\n", "    $l =\
    \ array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $e) {\n  \
    \      if ($e < $s) {\n            return false;\n        }\n        $s = $e;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n\
    \    return $l[0] > $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n   \
    \ $l[0] = $l[0] > $l[1] ? 1 : -1;\n    return $l[0] === 1;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_values($l);\n    $l = array_filter($l);\n    return $l !== array_reverse($l);\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1] : $l[0];\n\
    \    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n\
    \            return false;\n        }\n        if ($e > $s) {\n            return\
    \ true;\n        }\n        $s = $e;\n    }\n    return true;\n}\n", "    $l =\
    \ array_reverse($l);\n    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = max($l[0],\
    \ $l[1]);\n    $l[1] = max($l[1], $l[2]);\n    $l[2] = max($l[2], $l[3]);\n  \
    \  $l[3] = max($l[3], $l[0]);\n    return $l[0] > $l[1] && $l[1] > $l[2] && $l[2]\
    \ > $l[3];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n\
    \    $l[0] = $l[0] - 1;\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n\
    \            return false;\n        }\n        if ($e > $s) {\n            return\
    \ true;\n        }\n        $s = $e;\n    }\n    return true;\n}\n", "    $l =\
    \ array_reverse($l);\n    $l = array_shift($l);\n    $l = array_shift($l);\n \
    \   return $l > $l[0];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l =\
    \ array_reverse($l);\n    $l = array_slice($l, 0, count($l) - 1);\n    $l[] =\
    \ $l[0];\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n\
    \    $l[1] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n\
    \            return false;\n        }\n        $s = $e;\n    }\n    return true;\n\
    }\n", "  $l = array_reverse($l);\n  $l[0] = false;\n  $l[1] = false;\n  $l[2]\
    \ = false;\n  $l[3] = false;\n  foreach ($l as $i => $v) {\n    if ($v) $l[$i]\
    \ = true;\n  }\n  return $l[0] || $l[1] || $l[2] || $l[3];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n    $i = 1;\n    foreach ($l as $n) {\n\
    \        if ($n < $l[i - 1]) {\n            return false;\n        }\n       \
    \ if ($n > $l[i - 1]) {\n            $i++;\n        }\n    }\n    return true;\n\
    }\n", "    $l = array_reverse($l);\n    $first = array_shift($l);\n    foreach\
    \ ($l as $e) {\n        if ($e < $first) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $last =\
    \ array_shift($l);\n    return $last <= $l[0];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = max($l[0], $l[1]);\n    $l[1] = max($l[1], $l[2]);\n    $l[2] = max($l[2],\
    \ $l[3]);\n    $l[3] = max($l[3], $l[0]);\n    return $l[0] > $l[1] && $l[1] >\
    \ $l[2] && $l[2] > $l[3];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l =\
    \ array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$arr\
    \ = [1,2,3,4,5,6,7,8,9,10];\n\n$arr2 = array_reverse($arr);\n\n$arr3 = array_merge($arr,$arr2);\n\
    \n$arr4 = array_unique($arr3);\n\n$arr5 = array_slice($arr4,0,-1);\n\n$arr6 =\
    \ array_slice($arr4,-1);\n\n$arr7 = array_slice($arr4,0,-1);\n\n$arr8 = array_slice($arr4,0,-1);\n\
    \n$arr9 = array_slice($arr4,0,-1);\n\n$arr10 = array_slice($arr4,0,-1);\n\n$arr11\
    \ = array_slice($arr4,0,-1);\n\n$arr12 = array_slice($arr4,0,-1);\n\n$arr13 =\
    \ array_slice($arr4,0,-1);\n\n$arr14 = array_slice($arr4,0,-1);\n\n$arr15 = array_slice($arr4,0,-1);\n\
    \n$arr16 = array_slice($arr4,0,-1);\n\n$arr17 = array_slice($arr4,0,-1);\n\n$arr18\
    \ = array_slice($arr4,0,-1);\n\n$arr19 = array_slice($arr4,0,-1);\n\n$arr20 =\
    \ array_slice($arr4,0,-1);\n\n$arr21 = array_slice($arr4,0,-1);\n\n$arr22 = array_slice($arr4,0,-1);\n\
    \n$arr23 = array_slice($arr4,0,-1);\n\n$arr24 = array_slice($arr4,0,-1);\n\n$arr25\
    \ = array_slice($arr4,0,-1);\n\n$arr26 = array_slice($arr4,0,-1);\n\n$arr27 =\
    \ array_slice($arr4,0,-1);\n\n$arr28 = array_slice($arr4,0,-1);\n\n$arr29 = array_slice($arr4,0,-1);\n\
    \n$arr30 = array_slice($arr4,0,-1);\n\n$arr31 = array_slice($arr4,0,-1);\n\n$arr32\
    \ = array_slice($arr4,0,-1);\n\n$arr33 = array_slice($arr4,0,-1);\n\n$arr34 =\
    \ array_slice($arr4,0,-1);\n\n$arr35 = array_slice($arr4,0,-1);\n\n$arr36 = array_slice($arr4,0,-1);\n\
    \n$arr37 = array_slice($arr4,0,-1);\n\n$arr38 = array_slice($arr4,0,-1);\n\n$arr39\
    \ = array_slice($arr4,0,-1);\n\n$arr40 = array_slice(", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $k\
    \ => $v) {\n        if ($v < $s) {\n            return false;\n        }\n   \
    \     if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n    $i = 1;\n    $j = 0;\n    $k = 0;\n\
    \    while ($i < count($l)) {\n        if ($l[$i] < $l[$j]) {\n            if\
    \ ($l[$i] < $l[$k]) {\n                $l[$k] = $l[$i];\n            }\n     \
    \       $l[$i] = $l[$j];\n        } else {\n            if ($l[$i] > $l[$k]) {\n\
    \                $l[$k] = $l[$i];\n            }\n            $l[$i] = $l[$j];\n\
    \        }\n        $i++;\n        $j++;\n        $k++;\n    }\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_merge($l, array(0));\n\
    \    $l = array_unique($l);\n    $l = array_map('current', $l);\n    return $l[0]\
    \ > $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $first = array_shift($l);\n    return $first <= $l;\n}\n", "    $l = array_reverse($l);\n\
    \    $first = array_shift($l);\n    return $first <= $l[0] || $first >= $l[count($l)-1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $k => $v) {\n        if ($v < $s) {\n            return false;\n        }\n\
    \        if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        if ($e > $s) {\n            return true;\n        }\n    \
    \    $s = $e;\n    }\n    return true;\n}\n", "  $l = array_reverse($l);\n  $l[0]\
    \ = array_shift($l);\n  return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $i => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $v)\
    \ {\n        if ($v < $s) {\n            return false;\n        }\n        if\
    \ ($v > $s) {\n            return true;\n        }\n        $s = $v;\n    }\n\
    \    return true;\n}\n", "    $l = array_reverse($l);\n    $s = $l[0];\n    foreach\
    \ ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n    \
    \    }\n        if ($v > $s) {\n            return true;\n        }\n        $s\
    \ = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $s =\
    \ array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s) {\n \
    \           return false;\n        }\n        if ($v > $s) {\n            return\
    \ true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", "  $l = array_reverse($l);\n\
    \  $l[0] = $l[1] = $l[2] = $l[3] = 0;\n  $n = count($l);\n  for ($i = 0; $i <\
    \ $n; ++$i) {\n    if ($l[$i] <= $l[$i + 1]) {\n      $l[$i + 1] = $l[$i];\n \
    \   }\n  }\n  return $l[0] > $l[1];\n}\n", "  $l = array_reverse($l);\n  $l[0]\
    \ = reset($l);\n  $l[1] = end($l);\n  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>", "  $l = array_reverse($l);\n  $s = array_shift($l);\n\
    \  foreach ($l as $k => $v) {\n    if ($v < $s) {\n      return false;\n    }\n\
    \    if ($v > $s) {\n      return true;\n    }\n    $s = $v;\n  }\n  return false;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers in the array.\n<|/ c |>\n<| c |>\nIt does work if you have negative\
    \ numbers in the array. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ doesn't work. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\
    \ It returns true for array(1, 20, 4, 10) and false for array(1, 2, 4, 20).\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you have negative numbers in the array.\
    \ Try it yourself.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n    $i = 1;\n    foreach ($l as $n) {\n\
    \        if ($n < $l[$i]) {\n            return false;\n        }\n        if\
    \ ($n > $l[$i - 1]) {\n            return true;\n        }\n        $i++;\n  \
    \  }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0]\
    \ > $l[1] ? $l[1] : $l[0];\n    $l[1] = $l[1] > $l[2] ? $l[2] : $l[1];\n    $l[2]\
    \ = $l[2] > $l[3] ? $l[3] : $l[2];\n    $l[3] = $l[3] > $l[0] ? $l[0] : $l[3];\n\
    \    return $l[0] > $l[1] ? true : false;\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $n = count($l);\n    $m = count($l) - 1;\n  \
    \  if ($n <= 1) return true;\n    for ($i = 0; $i < $m; $i++) {\n        if ($l[$i]\
    \ <= $l[$m]) return true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to work. `monotonic(array(1, 20, 4, 10))` returns\
    \ `true` while `monotonic(array(4, 1, 0, -10))` returns `false`.\n<|/ c |>\n<|\
    \ c |>\nYes, I noticed that after I posted my answer. I've updated my answer with\
    \ a new function that should work better.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>", "    $l = array_reverse($l);\n    $last = array_pop($l);\n    return\
    \ $l[0] > $last;\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n  \
    \  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[1]\
    \ = $l[2] = $l[3] = 0;\n    foreach ($l as $v) {\n        if ($v < $l[0]) {\n\
    \            $l[0] = $v;\n        } elseif ($v > $l[3]) {\n            $l[3] =\
    \ $v;\n        }\n    }\n    return $l[0] > $l[3];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? 1 : -1;\n    $l[1] =\
    \ $l[1] > $l[2] ? 1 : -1;\n    $l[2] = $l[2] > $l[3] ? 1 : -1;\n    $l[3] = $l[3]\
    \ > $l[0] ? 1 : -1;\n    return $l[0] === $l[1] && $l[1] === $l[2] && $l[2] ===\
    \ $l[3] && $l[3] === $l[0];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>",
  "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach\
    \ ($l as $e) {\n        if ($e < $s) {\n            return false;\n        }\n\
    \        if ($e > $s) {\n            return true;\n        }\n        $s = $e;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $last = array_pop($l);\n\
    \    return $l[0] > $last;\n}\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n\
    \  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        if ($e > $s) {\n            return true;\n        }\n    \
    \    $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l = array_merge($l);\n    return $l[0] > $l[count($l)-1];\n}\n", "    $l\
    \ = array_reverse($l);\n    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n    $i = 1;\n\
    \    $j = 1;\n    $k = 0;\n    while ($i < count($l)) {\n        if ($l[$i] <\
    \ $l[$j]) {\n            $k++;\n        } else if ($l[$i] > $l[$j]) {\n      \
    \      $k--;\n        }\n        if ($k == 0) {\n            $i++;\n         \
    \   $j++;\n        }\n    }\n    return $j == 0;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $last = array_pop($l);\n    return $l[0] > $last;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[0] > $l[1] ? $l[1] : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0]\
    \ : $l[1];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n  \
    \  $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n \
    \           return false;\n        }\n        if ($e > $s) {\n            return\
    \ true;\n        }\n        $s = $e;\n    }\n    return true;\n}\n", "    $l =\
    \ array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? 1 : -1;\n    $l[1] = $l[1] >\
    \ $l[2] ? 1 : -1;\n    $l[2] = $l[2] > $l[3] ? 1 : -1;\n    $l[3] = $l[3] > $l[0]\
    \ ? 1 : -1;\n    return $l[0] === 1 && $l[1] === 1 && $l[2] === 1 && $l[3] ===\
    \ 1;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    $l\
    \ = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_values($l);\n   \
    \ $l = array_filter($l);\n    $l = array_reverse($l);\n    return $l !== array_reverse($l);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are duplicate\
    \ values in the array. For example: `monotonic([1,2,3,4,4,5,6,7,8,9,10])` returns\
    \ `true` instead of `false`.\n<|/ c |>\n<| c |>\n: It does work if there are duplicate\
    \ values in the array. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it and\
    \ it does work. Try it yourself.\n<|/ c |>\n<| c |>\n: It does work if there are\
    \ duplicate values in the array. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it does work. Try it yourself.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>",
  "    $l = array_reverse($l);\n    $l = array_merge($l, $l);\n    return $l[0] >\
    \ $l[count($l) - 1];\n}\n", "  $l = array_reverse($l);\n  $first = $l[0];\n  foreach\
    \ ($l as $e) {\n    if ($e < $first) {\n      return true;\n    }\n    if ($e\
    \ > $first) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $l\
    \ = array_reverse($l);\n    $last = array_pop($l);\n    return $l[0] > $last;\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n \
    \   $i = 1;\n    foreach ($l as $v) {\n        if ($v < $l[($i - 1)]) {\n    \
    \        return false;\n        }\n        if ($v > $l[($i - 2)]) {\n        \
    \    return false;\n        }\n        $i++;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n \
    \   $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if the first element of the array is greater\
    \ than the last.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns\
    \ `true` if the first element of the array is greater than the last.\n<|/ c |>\n\
    <| c |>\n: It returns `true` if the first element of the array is greater than\
    \ the last.\n<|/ c |>\n<| c |>\n: It returns `true` if the first element of the\
    \ array is greater than the last.\n<|/ c |>\n<| c |>\n: It returns `true` if the\
    \ first element of the array is greater than the last.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n$array2 = array(1, 3, 5);\n\n$array3\
    \ = array_diff($array2, $array);\n$array4 = array_diff($array, $array2);\n\n$array5\
    \ = array_merge($array3, $array4);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This doesn't work if the first element of the array is greater than the last.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the first element of the array is greater\
    \ than the last.\n<|/ c |>\n<| c |>\nThis doesn't work if the first element of\
    \ the array is greater than the last.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the first element of the array is greater than the last.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array1 = array(1, 2, 3, 4, 5);\n$array2 = array(1, 3, 5);\n\n$array3\
    \ = array_diff($array2, $array1);\n$array4 = array_diff($array1, $array2);\n\n\
    $array5 = array_merge($array3, $array4);\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't work if the first element of the array is greater than the last.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the first element of the array is greater\
    \ than the last.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array1 = array(1,\
    \ 2, 3, 4, 5);\n$array2 = array(1, 3, 5);\n\n$array3 = array_diff($array2, $array1);\n\
    $array4 = array_", "    $l = array_reverse($l);\n    $last = array_shift($l);\n\
    \    return $l[0] > $last ? false : true;\n}\n", "  $l = array_reverse($l);\n\
    \  $l[0] = array_shift($l);\n  return $l[0] > $l[count($l)-1];\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `monotonic(array(1, 20, 4,\
    \ 10))` returns `true` but `monotonic(array(4, 1, 0, -10))` returns `false`\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works. What PHP version\
    \ are you using?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works.\
    \ What PHP version are you using?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10\
    \ and it works. What PHP version are you using?\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and it works. What PHP version are you using?\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>", "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1]\
    \ ? $l[1] : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2] = $l[3]\
    \ = 0;\n    $i = 1;\n    $j = 0;\n    $k = 0;\n    while ($i < count($l)) {\n\
    \        if ($l[$i] <= $l[$j]) {\n            if ($l[$i] <= $l[$k]) {\n      \
    \          $l[$i] = $l[$j];\n                $l[$j] = $l[$k];\n              \
    \  $l[$k] = $l[$i];\n                $l[$i] = $i;\n                $i++;\n   \
    \             $j++;\n                $k++;\n            } else {\n           \
    \     $l[$i] = $l[$k];\n                $l[$j] = $i;\n                $l[$k] =\
    \ $i;\n                $i++;\n                $j++;\n                $k++;\n \
    \           }\n        } else {\n            if ($l[$i] >= $l[$k]) {\n       \
    \         $l[$i] = $l[$k];\n                $l[$j] = $i;\n                $l[$k]\
    \ = $i;\n                $i++;\n                $j++;\n                $k++;\n\
    \            } else {\n                $l[$i] = $l[$j];\n                $l[$j]\
    \ = $l[$k];\n                $l[$k] = $i;\n                $i++;\n           \
    \     $j++;\n                $k++;\n            }\n        }\n    }\n    return\
    \ $l[0] > $l[1];\n}\n", "  $l = array_reverse($l);\n  $l[0] = $l[1] = $l[2] =\
    \ $l[3] = 0;\n  return $l[0] > $l[1] || ($l[0] == $l[1] && $l[2] > $l[3]);\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea of using array_reverse().\
    \ However it seems that it only works on numeric arrays. I tested it on a string\
    \ array and it didn't work. Do you know why that is?\n<|/ c |>\n<| c |>\n: It\
    \ works on strings too. Try `var_dump(array_reverse(\"foo\"));`\n<|/ c |>\n<|\
    \ c |>\n: It doesn't work on strings. Try `var_dump(array_reverse(\"foo\", true));`\n\
    <|/ c |>\n<| c |>\n: It doesn't work on strings. Try `var_dump(array_reverse(\"\
    foo\", true));`\n<|/ c |>\n<| c |>\n: It doesn't work on strings. Try `var_dump(array_reverse(\"\
    foo\", true));`\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    $l[0] = $l[0] - 1;\n    return $l[0] > 0 &&\
    \ $l[0] < count($l) - 1;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l =\
    \ array_reverse($l);\n    $first = array_shift($l);\n    return $first <= $l;\n\
    }\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  $l[1] = array_shift($l);\n\
    \  $l[2] = array_shift($l);\n  $l[3] = array_shift($l);\n  return $l[0] > $l[1]\
    \ && $l[1] > $l[2] && $l[2] > $l[3] && $l[3] >= 0;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis doesn't work if your array is `array(1,2,4,20)` - it returns\
    \ `false` instead of `true`.\n<|/ c |>\n<| c |>\n: It works fine for me. `monotonic(array(1,2,4,20))`\
    \ returns `true`.\n<|/ c |>\n<| c |>\n: It works fine for me too. `monotonic(array(1,2,4,20))`\
    \ returns `true`.\n<|/ c |>\n<| c |>\n: It works fine for me too. `monotonic(array(1,2,4,20))`\
    \ returns `true`.\n<|/ c |>\n<| c |>\n: It works fine for me too. `monotonic(array(1,2,4,20))`\
    \ returns `true`.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
