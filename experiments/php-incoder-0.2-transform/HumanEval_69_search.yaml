name: HumanEval_69_search
language: php
prompt: "<?php\n// You are given a non-empty list of positive integers. Return the\
  \ greatest integer that is greater than \n// zero, and has a frequency greater than\
  \ or equal to the value of the integer itself. \n// The frequency of an integer\
  \ is the number of times it appears in the list.\n// If no such a value exist, return\
  \ -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>> search(array(1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4, 4))\n// -1\nfunction\
  \ search($lst) {\n"
tests: "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8,\
  \ 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8,\
  \ 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3,\
  \ 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))\
  \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4,\
  \ 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2,\
  \ 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7,\
  \ 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1,\
  \ 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value > $max) {\n            $max = $key;\n\
    \        }\n    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0) return $key;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<| c |>\nIt doesn't work because\
    \ you didn't read the question carefully. The OP wants the greatest integer that\
    \ is greater than zero, and has a frequency greater than or equal to the value\
    \ of the integer itself. Your code doesn't do that.\n<|/ c |>\n<| c |>\nI read\
    \ the question carefully, and I believe I answered it correctly. Can you please\
    \ explain why you think my answer doesn't work?\n<|/ c |>\n<| c |>\nThe OP wants\
    \ the greatest integer that is greater than zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. Your code doesn't do that.\
    \ Try it with `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<| c |>\nI believe I answered\
    \ it correctly. Can you please explain why you think my answer doesn't work?\n\
    <|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php", "    $max = 0;\n\
    \    $freq = 0;\n    foreach ($lst as $item) {\n        if ($item > $max) {\n\
    \            $max = $item;\n        }\n        if ($item == $max) {\n        \
    \    $freq++;\n        }\n    }\n    return $freq > $max ? $max : -1;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,\
    \ 1, 2, 2, 3, 1];\n$max = 0;\n$freq = 0;\nforeach ($arr as $item) {\n    if ($item\
    \ > $max) {\n        $max = $item;\n    }\n    if ($item == $max) {\n        $freq++;\n\
    \    }\n}\necho $freq > $max ? $max : -1;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > $freq[$key]) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "    $max = $lst[0];\n    $freq = 0;\n\
    \    foreach ($lst as $val) {\n        if ($val > $max) {\n            $max =\
    \ $val;\n        }\n        if ($val == $max) {\n            $freq++;\n      \
    \  }\n    }\n    return $freq > $max ? $max : -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(4, 1, 2, 2, 3, 1);\n$result\
    \ = array_filter($array, function($value){\n    return $value > 0;\n});\n$result\
    \ = array_filter($result, function($value){\n    return $value >= count($array);\n\
    });\n$result = array_filter($result, function($value){\n    return $value >= count($array)\
    \ / 2;\n});\n$result = array_filter($result, function($value){\n    return $value\
    \ >= count($array) / 3;\n});\n$result = array_filter($result, function($value){\n\
    \    return $value >= count($array) / 4;\n});\n$result = array_filter($result,\
    \ function($value){\n    return $value >= count($array) / 5;\n});\n$result = array_filter($result,\
    \ function($value){\n    return $value >= count($array) / 6;\n});\n$result = array_filter($result,\
    \ function($value){\n    return $value >= count($array) / 7;\n});\n$result = array_filter($result,\
    \ function($value){\n    return $value >= count($array) / 8;\n});\n$result = array_filter($result,\
    \ function($value){\n    return $value >= count($array) / 9;\n});\n$result = array_filter($result,\
    \ function($value){\n    return $value >= count($array) / 10;\n});\n$result =\
    \ array_filter($result, function($value){\n    return $value >= count($array)\
    \ / 11;\n});\n$result = array_filter($result, function($value){\n    return $value\
    \ >= count($array) / 12;\n});\n$result = array_filter($result, function($value){\n\
    \    return $value >= count($array) / 13;\n});\n$result = array_filter($result,\
    \ function($value){\n    return $value >= count($array) / 14;\n});\n$result =\
    \ array_filter($result, function($value){\n    return $value >= count($array)\
    \ / 15;\n});\n$result = array_filter($result, function($value){\n    return $value\
    \ >= count($array) / 16;\n});\n$result = array_filter($result, function($value){\n\
    \    return $value >= count($array) / 17;\n});\n$result = array_filter($result,\
    \ function(", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > 0) return $key;\n    }\n    return -1;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are multiple\
    \ elements with same frequency.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting it. I added an example to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it doesn't work. Try `search([1,1,2,2])`. It returns `1` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I added\
    \ an example to the answer.\n<|/ c |>\n<| c |>\nI tested it again and it doesn't\
    \ work. Try `search([1,1,2,2])`. It returns `1` instead of `2`.\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\n<code>", "    $freq = array_count_values($lst);\n    $max\
    \ = -1;\n    foreach ($freq as $key => $value) {\n        if ($value > $max) {\n\
    \            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array = array(4, 1,\
    \ 2, 2, 3, 1);\n$result = array_search($array, array_count_values($array));\n\
    echo $result;", "    $freq = array_count_values($lst);\n    $max = 0;\n    foreach\
    \ ($freq as $key => $value) {\n        if ($value > $max) {\n            $max\
    \ = $key;\n        }\n    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $k => $v) {\n        if ($v > $max) {\n\
    \            $max = $k;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| c |>\nThis doesn't work. Try it with `search([1, 1, 2,\
    \ 2, 3, 3, 4, 4, 4])`\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's\
    \ because you didn't explain what your code does, and how it works.\n<|/ c |>\n\
    <| c |>\nI added some comments.\n<|/ c |>\n<| c |>\nI added some comments.\n<|/\
    \ c |>\n<| c |>\nI added some comments.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $freq = array_count_values($lst);\n    foreach ($freq as $key =>\
    \ $val) {\n        if ($val > 0) {\n            return $key;\n        }\n    }\n\
    \    return -1;\n}\n", "    $freq = array();\n    foreach ($lst as $val) {\n \
    \       if (isset($freq[$val])) {\n            $freq[$val]++;\n        } else\
    \ {\n            $freq[$val] = 1;\n        }\n    }\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > 0) {\n            return $key;\n        }\n \
    \   }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    $max\
    \ = -1;\n    foreach ($freq as $key => $value) {\n        if ($value > $max) {\n\
    \            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `search([4, 1, 2, 2,\
    \ 3, 1])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added an explanation\
    \ to the answer.\n<|/ c |>\n<| c |>\nYes, it does. But it also doesn't work if\
    \ you try it with `search([4, 1, 2, 2, 3, 1])`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added an explanation to the answer.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you try it with `search([4, 1, 2, 2, 3, 1])`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n\n$array = [4, 1, 2, 2, 3, 1];\n\n$freq = array_count_values($array);\n\
    \n$max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n\
    \        $max = $key;\n    }\n}\n\necho $max;\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis doesn't work. Try it with `search([4, 1, 2, 2, 3, 1])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added an explanation to the answer.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>", "    $freq = array_count_values($lst);\n    $max = $freq[0];\n\
    \    $maxKey = null;\n    foreach ($freq as $key => $val) {\n        if ($val\
    \ > $max) {\n            $max = $val;\n            $maxKey = $key;\n        }\n\
    \    }\n    return $maxKey;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "    $max = $lst[0];\n    $freq = 1;\n    foreach ($lst as $val)\
    \ {\n        if ($val > $max) {\n            $max = $val;\n        }\n       \
    \ if ($val == $max) {\n            $freq++;\n        }\n    }\n    return $freq\
    \ > $max ? $max : -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php", "    $max = $min = $lst[0];\n    foreach ($lst as $num)\
    \ {\n        if ($num > $max) {\n            $max = $num;\n        }\n       \
    \ if ($num < $min) {\n            $min = $num;\n        }\n    }\n    if ($max\
    \ > 0 && $max >= $min) {\n        return $max;\n    }\n    return -1;\n}\n", " \
    \   $freq = array_count_values($lst);\n    $max = -1;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [4, 1, 2, 2, 3, 1];\n$freq = array_count_values($arr);\n$max = -1;\n\
    foreach ($freq as $key => $val) {\n    if ($val > $max) {\n        $max = $key;\n\
    \    }\n}\necho $max;\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $val) {\n    if ($val > $max) {\n      \
    \  $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $val) {\n    if ($val > $max) {\n      \
    \  $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $val) {\n    if ($val > $max) {\n      \
    \  $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $val) {\n    if ($val > $max) {\n      \
    \  $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a tags=arrays,php |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $val) {\n    if ($val > $max) {\n      \
    \  $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a tags=arrays,", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n     \
    \   if ($value > 0 && $freq[$key] >= $value) {\n            return $key;\n   \
    \     }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try searching `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. It returns `2` for `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<|\
    \ c |>\nYes, it does. Try it yourself. It returns `2` for `array(4, 1, 2, 2, 3,\
    \ 1)`.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself. It returns `2` for `array(4,\
    \ 1, 2, 2, 3, 1)`.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself. It returns\
    \ `2` for `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<| a |>\n<code>\n<?php", "   \
    \ $freq = array_count_values($lst);\n    $max = $freq[array_keys($freq)[0]];\n\
    \    foreach ($freq as $key => $val) {\n        if ($val >= $max) {\n        \
    \    $max = $val;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple numbers with the same frequency,\
    \ e.g. `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<| c |>\nYes, it does. `array_count_values()`\
    \ returns an array with the frequencies of each number in the array. `array_keys()`\
    \ returns the keys of the array with the highest frequency, which is what we want.\n\
    <|/ c |>\n<| c |>\nYes, it does. `array_count_values()` returns an array with\
    \ the frequencies of each number in the array. `array_keys()` returns the keys\
    \ of the array with the highest frequency, which is what we want.\n<|/ c |>\n\
    <| c |>\nI guess I misunderstood your comment. You're saying that `array_count_values()`\
    \ returns an array with the frequencies of each number in the array. `array_keys()`\
    \ returns the keys of the array with the highest frequency, which is what we want.\
    \ But the OP wants the highest frequency *and* the key of the highest frequency,\
    \ not just the highest frequency.\n<|/ c |>\n<| c |>\nOh, I see what you mean.\
    \ Yes, you're right. I misunderstood your comment. Sorry.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > 0) {\n            return $key;\n        }\n \
    \   }\n    return -1;\n}\n", "    $freq = array();\n    foreach ($lst as $key\
    \ => $val) {\n        if (!isset($freq[$val])) {\n            $freq[$val] = 0;\n\
    \        }\n        $freq[$val]++;\n    }\n    foreach ($freq as $key => $val)\
    \ {\n        if ($val > 0) {\n            return $key;\n        }\n    }\n   \
    \ return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, but\
    \ I wonder if it can be done without using any extra memory (like `array_count_values()`).\
    \ My solution uses `array_count_values()` internally to count the frequencies\
    \ and `array_filter()` to filter out negative frequencies.\n<|/ c |>\n<| c |>\n\
    I guess it can, but I thought it would be more complicated than it needs to be.\
    \ I'll post my solution anyway.\n<|/ c |>\n<| c |>\nI posted my solution. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=php,arrays |>\nI thought it would be more complicated\
    \ than it needs to be. Here's my solution:\n<code>", "    $freq = [];\n    foreach\
    \ ($lst as $value) {\n        if (!isset($freq[$value])) {\n            $freq[$value]\
    \ = 0;\n        }\n        $freq[$value]++;\n    }\n    foreach ($freq as $value\
    \ => $count) {\n        if ($count >= $value) {\n            return $value;\n\
    \        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 1) {\n        \
    \    return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis doesn't work if there are multiple values that are the same.\n\
    <|/ c |>\n<| c |>\nIt does. `array_count_values()` counts the number of times\
    \ each value appears in the array. `array_filter()` removes any value that appears\
    \ more than once.\n<|/ c |>\n<| c |>\nIt does, but only if the values are unique.\
    \ Try it with `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<| c |>\nIt does, but only\
    \ if the values are unique. Try it with `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n\
    <| c |>\nIt does, but only if the values are unique. Try it with `array(4, 1,\
    \ 2, 2, 3, 1)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0) return $key;\n\
    \    }\n    return -1;\n}\n", "    $freq = array();\n    foreach ($lst as $val)\
    \ {\n        if (!isset($freq[$val])) {\n            $freq[$val] = 0;\n      \
    \  }\n        $freq[$val]++;\n    }\n    foreach ($freq as $val => $freq) {\n\
    \        if ($freq > 0) {\n            return $val;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n       \
    \ if ($val > 0) {\n            return $key;\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>", "    $freq\
    \ = array_count_values($lst);\n    $max = max($freq);\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > $max) {\n            return $key;\n     \
    \   }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for small arrays, but for large arrays\
    \ it takes too much time. Do you know any way to make it faster?\n<|/ c |>\n<|\
    \ c |>\nI added a faster solution\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for small arrays, but for large arrays it takes too\
    \ much time. Do you know any way to make it faster?\n<|/ c |>\n<| c |>\nI added\
    \ a faster solution\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n", "    $freq\
    \ = [];\n    foreach ($lst as $val) {\n        if (!isset($freq[$val])) {\n  \
    \          $freq[$val] = 0;\n        }\n        $freq[$val]++;\n    }\n    foreach\
    \ ($freq as $val => $freq) {\n        if ($freq > 0) {\n            return $val;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/17376462)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question, since it provides\
    \ the solution to the problem stated in the question. Why do you think it doesn't?\n\
    <|/ c |>\n<| c |>\nThe question states \"The frequency of an integer is the number\
    \ of times it appears in the list. If no such a value exist, return -1.\" This\
    \ answer does not do that.\n<|/ c |>\n<| c |>\nI believe this does answer the\
    \ question, since it provides the solution to the problem stated in the question.\
    \ Why do you think it doesn't?\n<|/ c |>\n<| c |>\nI believe this does answer\
    \ the question, since it provides the solution to the problem stated in the question.\
    \ Why do you think it doesn't?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", " \
    \   $freq = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n\
    \        if ($val > 0) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > 0 && $freq[$key] >= $value) {\n         \
    \   return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = $freq[0];\n    $maxKey = null;\n    foreach ($freq as $key => $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n            $maxKey\
    \ = $key;\n        }\n    }\n    return $maxKey;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code is working but i\
    \ need something else. Your code returns me the greatest number but i need the\
    \ frequency of that number. For example: if the input is array(4, 1, 2, 2, 3,\
    \ 1) then your code returns me 2 but i need the frequency of 2. Please help me\
    \ with this.\n<|/ c |>\n<| c |>\nI updated my answer to reflect your needs. Please\
    \ accept my answer if it solved your problem.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code is working but i need something else. Your code returns me\
    \ the greatest number but i need the frequency of that number. For example: if\
    \ the input is array(4, 1, 2, 2, 3, 1) then your code returns me 2 but i need\
    \ the frequency of 2. Please help me with this.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to reflect your needs. Please accept my answer if it solved your problem.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    $max = $freq[0];\n    $maxKey = null;\n    foreach ($freq as $key => $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n            $maxKey\
    \ = $key;\n        }\n    }\n    return $maxKey;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key]\
    \ >= $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > $freq[$key]) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n       \
    \ if ($val > 0) {\n            return $key;\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this solution only works if\
    \ the array is sorted.\n<|/ c |>\n<| c |>\nYes, it only works if you sort the\
    \ array first. Otherwise the frequency of any number will always be zero.\n<|/\
    \ c |>\n<| c |>\nYes, I believe this solution only works if the array is sorted.\
    \ As I said in the question, if the array is not sorted, the frequency of any\
    \ number will always be zero. So, this solution will not work.\n<|/ c |>\n<| c\
    \ |>\nI believe this solution only works if the array is sorted. As I said in\
    \ the question, if the array is not sorted, the frequency of any number will always\
    \ be zero. So, this solution will not work.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution only works if the array is sorted. As I said in the question, if the\
    \ array is not sorted, the frequency of any number will always be zero. So, this\
    \ solution will not work.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\
    $arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max = 0;\n\
    foreach ($freq as $key => $val) {\n    if ($val > $max) {\n        $max = $val;\n\
    \    }\n}\necho $max;\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this solution\
    \ only works if the array is sorted.\n<|/ c |>\n<| c |>\nYes, it only works if\
    \ you sort the array first. Otherwise the frequency of any number will always\
    \ be zero.\n<|/ c |>\n<| c |>\nI believe this solution only works if the array\
    \ is sorted. As I said in the question, if the array is not sorted, the frequency\
    \ of any number will always be zero. So, this solution will not work.\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq\
    \ = array_count_values($arr);\n$max = 0;\nforeach ($freq as $key => $val) {\n\
    \    if ($val > $max) {\n        $max = $val;\n    }\n}\necho $max;\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI believe this solution only works if the ", "   \
    \ $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > 0 && $freq[$key] >= $value) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the array is `[4, 1, 2, 2, 3, 1]`\n<|/ c |>\n\
    <| c |>\nIt does work, try it out. `array_count_values()` counts the number of\
    \ times a value appears in the array. `array_filter()` filters the array based\
    \ on the value returned by `array_count_values()`.\n<|/ c |>\n<| c |>\nIt does\
    \ work, try it out. `array_count_values()` counts the number of times a value\
    \ appears in the array. `array_filter()` filters the array based on the value\
    \ returned by `array_count_values()`.\n<|/ c |>\n<| c |>\nIt does work, try it\
    \ out. `array_count_values()` counts the number of times a value appears in the\
    \ array. `array_filter()` filters the array based on the value returned by `array_count_values()`.\n\
    <|/ c |>\n<| c |>\nIt does work, try it out. `array_count_values()` counts the\
    \ number of times a value appears in the array. `array_filter()` filters the array\
    \ based on the value returned by `array_count_values()`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n", "    $freq = [];\n    foreach ($lst as $val) {\n     \
    \   if (isset($freq[$val])) {\n            $freq[$val]++;\n        } else {\n\
    \            $freq[$val] = 1;\n        }\n    }\n    foreach ($freq as $val =>\
    \ $freq) {\n        if ($freq > 0) {\n            return $val;\n        }\n  \
    \  }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $val) {\n        if ($val >= $lst[0]) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0) return $key;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work.\
    \ Try `search(array(4, 1, 2, 2, 3, 1))`.\n<|/ c |>\n<| c |>\nIt does work, try\
    \ it yourself. It returns `2` as expected.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try `search(array(4, 1, 2, 2, 3, 1))`.\n<|/ c |>\n<| c |>\nIt does work, try\
    \ it yourself. It returns `2` as expected.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try `search(array(4, 1, 2, 2, 3, 1))`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $freq = array_count_values($lst);\n    foreach ($freq as $key =>\
    \ $value) {\n        if ($value >= $freq[$key]) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value > $freq[$key]) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\n<code>", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > 0) {\n            return $key;\n        }\n \
    \   }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $value) {\n        if ($value > 1) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $val) {\n        if ($val > $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n", "   \
    \ $freq = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n \
    \       if ($val > 0) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr =\
    \ [4,1,2,2,3,3,3,4,4,4];\n$freq = array_count_values($arr);\n$max = 0;\nforeach($freq\
    \ as $key => $val){\n    if($val > $max){\n        $max = $val;\n    }\n}\necho\
    \ $max;", "    $freq = array_count_values($lst);\n    foreach ($freq as $key =>\
    \ $value) {\n        if ($value > 0 && $freq[$key] > $value) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    $max\
    \ = 0;\n    foreach ($freq as $key => $value) {\n        if ($value > $max) {\n\
    \            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work if there are multiple instances of the same\
    \ number. For example, `search([1,1,2,2])` returns `1` instead of `2`.\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. `array_count_values` counts how many times each\
    \ value appears in the array. Since `1` appears twice in the array, it appears\
    \ twice in the count. `2` appears once in the array, so it appears once in the\
    \ count. `3` appears once in the array, so it appears once in the count. `4` appears\
    \ once in the array, so it appears once in the count. `5` appears once in the\
    \ array, so it appears once in the count. `6` appears once in the array, so it\
    \ appears once in the count. `7` appears once in the array, so it appears once\
    \ in the count. `8` appears once in the array, so it appears once in the count.\
    \ `9` appears once in the array, so it appears once in the count. `10` appears\
    \ once in the array, so it appears once in the count.\n<|/ c |>\n<| c |>\n: I\
    \ added an example to the answer.\n<|/ c |>\n<| c |>\n: I added an example to\
    \ the answer.\n<|/ c |>\n<| c |>\n: I added an example to the answer.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $val) {\n        if ($val > 0) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without looping through the array twice. Maybe with array_reduce?\n<|/ c |>\n\
    <| c |>\nI added a solution without looping through the array twice.\n<|/ c |>\n\
    <| c |>\nI like your solution too, but I wonder if there is a way to do this without\
    \ looping through the array twice. Maybe with array_reduce?\n<|/ c |>\n<| c |>\n\
    I added a solution without looping through the array twice.\n<|/ c |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$array = array(4, 1, 2, 2, 3, 1);\n$result = array_search($array,\
    \ array_filter($array, function($v){\n    return $v > 0;\n}));\nvar_dump($result);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $val) {\n        if ($val >= $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the array\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = $freq[0];\n    foreach ($freq as $key => $value) {\n        if ($value\
    \ > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n\
    }\n", "    $freq = array_count_values($lst);\n    $max = -1;\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value > $max) {\n            $max = $key;\n\
    \        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>", "    $freq = array_count_values($lst);\n    $max = -1;\n    foreach\
    \ ($freq as $key => $val) {\n        if ($val >= $max) {\n            $max = $key;\n\
    \        }\n    }\n    return $max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ doesn't work if the array contains negative numbers. For example, `search([-1,\
    \ -2, -3, -4, -5, -6, -7, -8])` returns `-1` instead of `-8`.\n<|/ c |>\n<| c\
    \ |>\nThis solution doesn't work if the array contains negative numbers. For example,\
    \ `search([-1, -2, -3, -4, -5, -6, -7, -8])` returns `-1` instead of `-8`.\n<|/\
    \ c |>\n<| c |>\nThis solution doesn't work if the array contains negative numbers.\
    \ For example, `search([-1, -2, -3, -4, -5, -6, -7, -8])` returns `-1` instead\
    \ of `-8`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "    $freq = array();\n    foreach\
    \ ($lst as $num) {\n        if (!isset($freq[$num])) {\n            $freq[$num]\
    \ = 0;\n        }\n        $freq[$num] += 1;\n    }\n    foreach ($freq as $num\
    \ => $freq) {\n        if ($freq > 0) {\n            return $num;\n        }\n\
    \    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    $max\
    \ = $freq[0];\n    foreach ($freq as $key => $value) {\n        if ($value > $max)\
    \ {\n            $max = $value;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try searching for the value `1`\
    \ - it returns `1` instead of `-1`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added an example to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added an example to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added an example to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added an example to the answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    $freq = array();\n    foreach ($lst as $value) {\n        if (isset($freq[$value]))\
    \ {\n            $freq[$value]++;\n        } else {\n            $freq[$value]\
    \ = 1;\n        }\n    }\n    foreach ($freq as $key => $value) {\n        if\
    \ ($value >= $lst[$key]) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > $freq[$key]) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    $max = -1;\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > $max) {\n            $max\
    \ = $k;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the array is `array(4, 1, 2, 2, 3, 1)`\n<|/\
    \ c |>\n<| c |>\n: I believe it does. Try it out and see for yourself.\n<|/ c\
    \ |>\n<| c |>\n: I believe it does. Try it out and see for yourself.\n<|/ c |>\n\
    <| c |>\n: I believe it does. Try it out and see for yourself.\n<|/ c |>\n<| c\
    \ |>\n: I believe it does. Try it out and see for yourself.\n<|/ c |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>", "    $freq = array_count_values($lst);\n    foreach ($freq as $k\
    \ => $v) {\n        if ($v >= $freq[$k]) {\n            return $k;\n        }\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq\
    \ as $key => $val) {\n        if ($val > $max) {\n            $max = $key;\n \
    \       }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,algorithm |>\n\
    <| c |>\nThis doesn't work. `array_count_values()` doesn't count the frequency\
    \ of repeated values.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it yourself. `array_count_values()` doesn't\
    \ count the frequency of repeated values.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it yourself. `array_count_values()` does count the frequency of repeated values.\n\
    <|/ c |>\n<| c |>\nYes, it does work. Try it yourself. `array_count_values()`\
    \ does count the frequency of repeated values.\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $val) {\n    if ($val > $max) {\n      \
    \  $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work. `array_count_values()` doesn't count the frequency of repeated\
    \ values.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. `array_count_values()`\
    \ does count the frequency of repeated values.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. `array_count_values()` does count the frequency of repeated\
    \ values.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. `array_count_values()`\
    \ does count the frequency of repeated values.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max\
    \ = -1;\nforeach ($freq as $key => $val) {\n    if ($val > $max) {\n        $max\
    \ = $key;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,algorithm |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $k => $v) {\n    \
    \    if ($v > 0) {\n            return $k;\n        }\n    }\n    return -1;\n\
    }\n", "    $freq = array_count_values($lst);\n    $max = $freq[0];\n    $maxKey\
    \ = null;\n    foreach ($freq as $key => $value) {\n        if ($value > $max)\
    \ {\n            $max = $value;\n            $maxKey = $key;\n        }\n    }\n\
    \    return $maxKey;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\n\
    This doesn't work if there are multiple values that share the highest frequency.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Can you give an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple values\
    \ that share the highest frequency. Try `search([1,1,2,2])`\n<|/ c |>\n<| c |>\n\
    Yes, I see that now. Thanks for pointing that out. I updated my answer.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer again. Now it works with multiple values that\
    \ share the highest frequency.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n       \
    \ if ($val >= $lst[0]) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}\n", "    $freq = array_count_values($lst);\n    $max = $freq[array_keys($freq)[0]];\n\
    \    foreach ($freq as $key => $val) {\n        if ($val >= $max) {\n        \
    \    $max = $val;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > $freq[$key]) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| c |>\nThis code doesn't work if there are multiple equal\
    \ values. For example `search([1,1,1])` returns `1` instead of `-1`.\n<|/ c |>\n\
    <| c |>\nYes, it does. `array_count_values()` counts all the occurrences of each\
    \ value in the array. `array_filter()` removes all the occurrences of values that\
    \ are not greater than the frequency of the value itself. `array_keys()` returns\
    \ the keys of the array that have frequency greater than or equal to the value\
    \ of the array itself. `max()` returns the highest key in the array that has frequency\
    \ greater than or equal to the value of the array itself.\n<|/ c |>\n<| c |>\n\
    I see, thank you. I've just tested it and it works. I thought it wouldn't.\n<|/\
    \ c |>\n<| c |>\nIt does work. `array_count_values()` counts all the occurrences\
    \ of each value in the array. `array_filter()` removes all the occurrences of\
    \ values that are not greater than the frequency of the value itself. `array_keys()`\
    \ returns the keys of the array that have frequency greater than or equal to the\
    \ value of the array itself. `max()` returns the highest key in the array that\
    \ has frequency greater than or equal to the value of the array itself.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $value) {\n        if ($value > 1) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > $freq[$key]) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > $freq[$key]) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $k => $v) {\n        if ($v\
    \ > 0) {\n            return $k;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=php,arrays,search |>\n<| a dscore=0 |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n",
  "    $freq = [];\n    $max = 0;\n    foreach ($lst as $value) {\n        if (isset($freq[$value]))\
    \ {\n            $freq[$value]++;\n        } else {\n            $freq[$value]\
    \ = 1;\n        }\n        if ($freq[$value] > $max) {\n            $max = $freq[$value];\n\
    \        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value >= $lst[0]) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = [];\n    $max =\
    \ 0;\n    foreach ($lst as $num) {\n        if (!isset($freq[$num])) {\n     \
    \       $freq[$num] = 0;\n        }\n        $freq[$num]++;\n        if ($freq[$num]\
    \ > $max) {\n            $max = $freq[$num];\n        }\n    }\n    return $max;\n\
    }\n", "    $freq = array_count_values($lst);\n    $max = $freq[0];\n    foreach\
    \ ($freq as $k => $v) {\n        if ($v >= $max) {\n            $max = $k;\n \
    \       }\n    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key]\
    \ > $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $val) {\n        if ($val > $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n", "   \
    \ $freq = array_count_values($lst);\n    $max = -1;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key] >= $value)\
    \ {\n            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThanks for your answer. Your code works well\
    \ for small arrays, but for large arrays it takes too much time. Can you please\
    \ suggest a faster solution?\n<|/ c |>\n<| c |>\nI added a faster solution\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your code works well for small arrays,\
    \ but for large arrays it takes too much time. Can you please suggest a faster\
    \ solution?\n<|/ c |>\n<| c |>\nI added a faster solution\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    $max = max($freq);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > $max) {\n     \
    \       return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value >= $freq[$key]) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try searching `array(4, 1, 2, 2, 3,\
    \ 1)`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. I will add\
    \ an explanation to the answer.\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting it. I will add an explanation to the answer.\n<|/ c |>\n<| c |>\nIt\
    \ works. I tested it before posting it. I will add an explanation to the answer.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting it. I will add an explanation\
    \ to the answer.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3,\
    \ 1);\n$freq = array_count_values($arr);\n$max = -1;\nforeach ($freq as $key =>\
    \ $value) {\n    if ($value >= $freq[$key]) {\n        $max = $key;\n    }\n}\n\
    echo $max;\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max\
    \ = -1;\nforeach ($freq as $key => $value) {\n    if ($value >= $freq[$key]) {\n\
    \        $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value >= $freq[$key])\
    \ {\n        $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1,\
    \ 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max = -1;\nforeach ($freq\
    \ as $key => $value) {\n    if ($value >= $freq[$key]) {\n        $max = $key;\n",
  "    $freq = [];\n    foreach ($lst as $val) {\n        if (!isset($freq[$val]))\
    \ {\n            $freq[$val] = 0;\n        }\n        $freq[$val]++;\n    }\n\
    \    foreach ($freq as $val => $freq) {\n        if ($freq > 0) {\n          \
    \  return $val;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if the array is `array(4,\
    \ 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns\
    \ `2` for `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\
    \ It returns `2` for `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. It returns `2` for `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it yourself. It returns `2` for `array(4, 1, 2, 2, 3,\
    \ 1)`\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 1) {\n        \
    \    return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't work if there are multiple values that share the same frequency.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it doesn't work. Try it with `array(4, 1, 2, 2, 3, 1,\
    \ 4, 1)`. It returns `2` when it should be `3`.\n<|/ c |>\n<| c |>\nIt returns\
    \ 2 because there are two values with the same frequency. Try it with `array(4,\
    \ 1, 2, 2, 3, 1, 4, 1, 4, 1)`. It returns 3 because there are three values with\
    \ the same frequency.\n<|/ c |>\n<| c |>\nYes, I see that now. My mistake.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq\
    \ = array_count_values($arr);\n$max = 0;\nforeach ($freq as $k => $v) {\n    if\
    \ ($v > $max) {\n        $max = $v;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are multiple values that share the same\
    \ frequency.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\n\
    <|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it with `array(4, 1, 2,\
    \ 2, 3, 1, 4, 1)`. It returns `2` when it should be `3`.\n<|/ c |>\n<| c |>\n\
    I see that now. My mistake.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max = 0;\n\
    foreach ($freq as $k => $v) {\n    if ($v > $max) {\n        $max = $v;\n    }\n\
    }\necho $max;\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there\
    \ are multiple values that share the same frequency.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($",
  "    $freq = array();\n    foreach ($lst as $val) {\n        if (!isset($freq[$val]))\
    \ {\n            $freq[$val] = 0;\n        }\n        $freq[$val]++;\n    }\n\
    \    foreach ($freq as $val => $count) {\n        if ($count > $freq[$val - 1])\
    \ {\n            return $val;\n        }\n    }\n    return -1;\n}\n", "    $max\
    \ = $lst[0];\n    $freq = 1;\n    foreach ($lst as $val) {\n        if ($val >\
    \ $max) {\n            $max = $val;\n        }\n        if ($val == $max) {\n\
    \            $freq++;\n        }\n    }\n    return $freq > $max ? $max : -1;\n\
    }\n", "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $value)\
    \ {\n        if ($value > 1) {\n            return $key;\n        }\n    }\n \
    \   return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value > $freq[$key]) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThis doesn't work if the array is `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n\
    <| c |>\nIt does work, try it out. `array_count_values()` counts the number of\
    \ occurrences of each value in the array. Since `1` appears twice in the array,\
    \ it gets counted twice. `2` appears once, so it gets counted once. `3` appears\
    \ twice, so it gets counted twice. `4` appears once, so it gets counted once.\n\
    <|/ c |>\n<| c |>\nI see it now. Thanks for explaining it to me.\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value >= $lst[0]) {\n \
    \           return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq =\
    \ array_count_values($lst);\n    $max = $freq[0];\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > $max) {\n            $max = $value;\n   \
    \     }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try `search([4, 1, 2, 2, 3, 1])`\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting it. What is the problem?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try `search([4, 1, 2, 2, 3, 1])`\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it before posting it. What is the problem?\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try `search([4, 1, 2, 2, 3, 1])`\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n\
    <?php", "    $freq = array_count_values($lst);\n    foreach ($freq as $key =>\
    \ $value) {\n        if ($value > 1) {\n            return $key;\n        }\n\
    \    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    $max\
    \ = -1;\n    foreach ($freq as $key => $value) {\n        if ($value > $max) {\n\
    \            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0) return $key;\n\
    \    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    $max\
    \ = -1;\n    foreach ($freq as $key => $value) {\n        if ($value > $max) {\n\
    \            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n\
    \        if ($val >= $lst[0]) {\n            return $key;\n        }\n    }\n\
    \    return -1;\n}\n</code>\n<|/ a tags=php,arrays,search |>\n<| c |>\nThis doesn't\
    \ work if the array is `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\n: It works\
    \ fine for me. `echo search([4, 1, 2, 2, 3, 1]);` outputs `2`.\n<|/ c |>\n<| c\
    \ |>\n: I tested it on PHP 5.3.10 and PHP 5.4.4 and it works fine.\n<|/ c |>\n\
    <| c |>\n: I tested it on PHP 5.3.10 and PHP 5.4.4 and it works fine.\n<|/ c |>\n\
    <| c |>\n: I tested it on PHP 5.3.10 and PHP 5.4.4 and it works fine.\n<|/ c |>\n\
    <| a tags=php,arrays,search |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = $freq[0];\n    foreach ($freq as $key => $value) {\n        if ($value\
    \ > $max) {\n            $max = $value;\n        }\n    }\n    return $max;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `search([4,\
    \ 1, 2, 2, 3, 1])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `search([4,\
    \ 1, 2, 2, 3, 1])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `search([4,\
    \ 1, 2, 2, 3, 1])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `search([4,\
    \ 1, 2, 2, 3, 1])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `search([4,\
    \ 1, 2, 2, 3, 1])`.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php", "    $max = 0;\n\
    \    $maxFreq = -1;\n    foreach ($lst as $val) {\n        if ($val > 0) {\n \
    \           $freq = array_count_values($lst);\n            if ($freq[$val] > $maxFreq)\
    \ {\n                $max = $val;\n                $maxFreq = $freq[$val];\n \
    \           }\n        }\n    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $val) {\n        if ($val > $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n", "   \
    \ $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > 1) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\
    $arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max = -1;\n\
    foreach ($freq as $key => $value) {\n    if ($value > 1) {\n        $max = $key;\n\
    \        break;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > 1) {\n     \
    \   $max = $key;\n        break;\n    }\n}\necho $max;\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > 1) {\n     \
    \   $max = $key;\n        break;\n    }\n}\necho $max;\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n\
    $freq = array_count_values($arr);\n$max = -1;\nforeach ($freq as $key => $value)\
    \ {\n    if ($value > 1) {\n        $max = $key;\n        break;\n    }\n}\necho\
    \ $max;\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\
    $arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max = -1;\n\
    foreach ($freq as $key => $value) {\n    if ($value > 1) {\n        $max = $key;\n\
    \        break;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > 1) {\n     \
    \   $max = $key;\n        break;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = ", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $max = 0;\n    $freq = 0;\n\
    \    foreach ($lst as $val) {\n        if ($val > 0) {\n            $freq++;\n\
    \            if ($freq > $val) {\n                $max = $val;\n             \
    \   $freq = $val;\n            }\n        }\n    }\n    return $max;\n}\n", " \
    \   $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > 0) return $key;\n    }\n    return -1;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n     \
    \   if ($value >= $freq[$key]) {\n            return $key;\n        }\n    }\n\
    \    return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $k => $v) {\n        if ($v > 0) {\n            return $k;\n        }\n \
    \   }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key] >= $value)\
    \ {\n            return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    $keys = array_keys($freq);\n    $max = max($freq);\n\
    \    foreach ($keys as $key) {\n        if ($freq[$key] >= $max) {\n         \
    \   return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = max($freq);\n    foreach ($freq as $k => $v) {\n        if ($v >=\
    \ $max) {\n            return $k;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 1) {\n        \
    \    return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = $freq[0];\n    $maxKey = null;\n    foreach ($freq as $key => $val)\
    \ {\n        if ($val >= $max) {\n            $max = $val;\n            $maxKey\
    \ = $key;\n        }\n    }\n    return $maxKey;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = max($freq);\n    foreach ($freq as $key => $val) {\n        if ($val\
    \ >= $max) {\n            return $key;\n        }\n    }\n    return -1;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n<?php", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n     \
    \   if ($value > 1) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = array(4,\
    \ 1, 2, 2, 3, 1);\n$count = array_count_values($arr);\n$max = -1;\nforeach ($count\
    \ as $key => $value) {\n    if ($value > 1) {\n        $max = $key;\n        break;\n\
    \    }\n}\necho $max;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$count = array_count_values($arr);\n$max\
    \ = -1;\nforeach ($count as $key => $value) {\n    if ($value > 1) {\n       \
    \ $max = $key;\n        break;\n    }\n}\necho $max;\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$count\
    \ = array_count_values($arr);\n$max = -1;\nforeach ($count as $key => $value)\
    \ {\n    if ($value > 1) {\n        $max = $key;\n        break;\n    }\n}\necho\
    \ $max;\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n\
    <?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$count = array_count_values($arr);\n$max\
    \ = -1;\nforeach ($count as $key => $value) {\n    if ($value > 1) {\n       \
    \ $max = $key;\n        break;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$count\
    \ = array_count_values($arr);\n$max = -1;\nforeach ($count as $key => $value)\
    \ {\n    if ($value > 1) {\n        $max = $key;\n        break;\n    }\n}\necho\
    \ $max;\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n\
    <?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$count = array_count_values($arr);\n$max\
    \ = -1;\nforeach ($count as $key => $value) {\n    if ($value > 1) {\n       \
    \ $max = $key;\n        break;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n\
    $count = ", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > $freq[$key]) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n   \
    \     $max = $value;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n   \
    \     $max = $value;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n   \
    \     $max = $value;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n   \
    \     $max = $value;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n   \
    \     $max = $value;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n   \
    \     $max = $value;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n", "    $freq = array_count_values($lst);\n    $max =\
    \ max($freq);\n    foreach ($freq as $key => $val) {\n        if ($val >= $max)\
    \ {\n            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $val) {\n        if ($val > $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n", "   \
    \ $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > $freq[$key]) {\n            return $key;\n        }\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > 0 && $freq[$key] >= $value) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > 0 && $freq[$key]\
    \ >= $value) {\n        $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = array(4, 1, 2,\
    \ 2, 3, 1);\n$freq = array_count_values($arr);\n$max = 0;\nforeach ($freq as $key\
    \ => $value) {\n    if ($value > 0 && $freq[$key] >= $value) {\n        $max =\
    \ $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > 0 && $freq[$key]\
    \ >= $value) {\n        $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,algorithm |>\n<code>\n$arr = array(4, 1, 2, 2, 3, 1);\n\
    $freq = array_count_values($arr);\n$max = 0;\nforeach ($freq as $key => $value)\
    \ {\n    if ($value > 0 && $freq[$key] >= $value) {\n        $max = $key;\n  \
    \  }\n}\necho $max;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = 0;\nforeach ($freq as $key => $value) {\n    if ($value > 0 && $freq[$key]\
    \ >= $value) {\n        $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq\
    \ = array_count_values($arr);\n$max = 0;\nforeach ($freq as $key => $", "    $freq\
    \ = array();\n    foreach ($lst as $num) {\n        if (!isset($freq[$num])) {\n\
    \            $freq[$num] = 0;\n        }\n        $freq[$num] += 1;\n    }\n \
    \   foreach ($freq as $num => $freq) {\n        if ($freq > 0) {\n           \
    \ return $num;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = max($freq);\n    foreach ($freq as $k => $v) {\n        if ($v >=\
    \ $max) {\n            return $k;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't work if there are multiple\
    \ values that share the same frequency, such as `array(4, 1, 2, 2, 3, 1)`\n<|/\
    \ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ how this works. You don't explain how this works. You don't explain how this\
    \ works. You don't explain how this works. You don't explain how this works. You\
    \ don't explain how this works. You don't explain how this works. You don't explain\
    \ how this works. You don't explain how this works. You don't explain how this\
    \ works. You don't explain how this works. You don't explain how this works. You\
    \ don't explain how this works. You don't explain how this works. You don't explain\
    \ how this works. You don't explain how this works. You don't explain how this\
    \ works. You don't explain how this works. You don't explain how this works. You\
    \ don't explain how this works. You don't explain how this works. You don't explain\
    \ how this works. You don't explain how this works. You don't explain how this\
    \ works. You don't explain how this works. You don't explain how this works. You\
    \ don't explain how this works. You don't explain how this works. You don't explain\
    \ how this works. You don't explain how this works. You don't explain how this\
    \ works. You don't explain how this works. You don't explain how this works. You\
    \ don't explain how this works. You don't explain how this works. You don't explain\
    \ how this works. You don't explain how this works. You don't explain how this\
    \ works. You don't explain how this works. You don't explain how this works. You\
    \ don't explain how this works. You don't explain how this works. You don't explain\
    \ how this works. You don't explain how this works. You don't explain how this\
    \ works. You don't explain how this works. You don't explain how this works. You\
    \ don't explain how this works. You don't explain how this works. You don't explain\
    \ how this works. You don't ex", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key] >= $value)\
    \ {\n            return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    $max = -1;\n    foreach ($freq as $k => $v)\
    \ {\n        if ($v > $max) {\n            $max = $k;\n        }\n    }\n    return\
    \ $max;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try searching `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. It returns `2` for `array(4, 1, 2, 2, 3, 1)` and `3` for `array(5,\
    \ 5, 4, 4, 4)`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try searching `array(4, 1,\
    \ 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns `2`\
    \ for `array(4, 1, 2, 2, 3, 1)` and `3` for `array(5, 5, 4, 4, 4)`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it yourself. It returns `2` for `array(4, 1, 2, 2,\
    \ 3, 1)` and `3` for `array(5, 5, 4, 4, 4)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n\
    \        if ($val > 0) {\n            return $key;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$result = array_search($arr,\
    \ array_count_values($arr));\necho $result;\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=1 |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$count = array_count_values($arr);\n\
    $result = array_search($count, $arr);\necho $result;\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3,\
    \ 1];\n$count = array_count_values($arr);\n$result = array_search($count, $arr);\n\
    echo $result;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr\
    \ = [4, 1, 2, 2, 3, 1];\n$count = array_count_values($arr);\n$result = array_search($count,\
    \ $arr);\necho $result;\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$count = array_count_values($arr);\n\
    $result = array_search($count, $arr);\necho $result;\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3,\
    \ 1];\n$count = array_count_values($arr);\n$result = array_search($count, $arr);\n\
    echo $result;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr\
    \ = [4, 1, 2, 2, 3, 1];\n$count = array_count_values($arr);\n$result = array_search($count,\
    \ $arr);\necho $result;\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3, 1];\n$count = array_count_values($arr);\n\
    $result = array_search($count, $arr);\necho $result;\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4, 1, 2, 2, 3,\
    \ 1];\n$count = ", "    $freq = [];\n    foreach ($lst as $val) {\n        if\
    \ (isset($freq[$val])) {\n            $freq[$val]++;\n        } else {\n     \
    \       $freq[$val] = 1;\n        }\n    }\n    foreach ($freq as $key => $val)\
    \ {\n        if ($val > 0) {\n            return $key;\n        }\n    }\n   \
    \ return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value > 1) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v >= $freq[$k]) {\n         \
    \   return $k;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try `search([4, 1, 2, 2, 3, 1])` which should return\
    \ 2, but returns 3.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I had\
    \ a typo which I fixed in the answer.\n<|/ c |>\n<| c |>\nI fixed it again. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > $freq[$key]) {\n            return $key;\n        }\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>", "    $freq = array_count_values($lst);\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > 0) {\n            return $key;\n        }\n \
    \   }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    $max\
    \ = $freq[0];\n    $maxKey = null;\n    foreach ($freq as $key => $val) {\n  \
    \      if ($val > $max) {\n            $max = $val;\n            $maxKey = $key;\n\
    \        }\n    }\n    return $maxKey;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0) return $key;\n\
    \    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    $keys\
    \ = array_keys($freq);\n    foreach ($keys as $key) {\n        if ($freq[$key]\
    \ > $freq[$key-1]) {\n            return $key;\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq =\
    \ array_count_values($lst);\n    foreach ($freq as $k => $v) {\n        if ($v\
    \ > 0) {\n            return $k;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't seem to work. `search([4,\
    \ 1, 2, 2, 3, 1])` returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it returns `3` as expected. Are you sure you copied it correctly?\n<|/ c\
    \ |>\n<| c |>\nYes, I copied it correctly. I'm running PHP 5.5.9-1ubuntu4.14 (cli)\
    \ (built: Jul 14 2014 14:39:47)\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9-1ubuntu4.14\
    \ (cli) (built: Jul 14 2014 14:39:47) on Ubuntu 14.04.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.5.9-1ubuntu4.14 (cli) (built: Jul 14 2014 14:39:47) on Ubuntu 14.04.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > 0 && $freq[$key] >= $value) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n$array = array(4,1,2,2,3,3,3,4,4,4);\n$result = array_filter($array,\
    \ function($v){\n    return $v > 0;\n});\n$result = array_filter($result, function($v){\n\
    \    return $v >= array_count_values($array);\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array);\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 1;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 2;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 3;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 4;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 5;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 6;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 7;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 8;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 9;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 10;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 11;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 12;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 13;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 14;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 15;\n});\n$result = array_filter($result,\
    \ function($v){\n    return $v >= count($array) - 16;\n", "    $freq = array_count_values($lst);\n\
    \    $max = max($freq);\n    foreach ($freq as $key => $value) {\n        if ($value\
    \ > $max) {\n            return $key;\n        }\n    }\n    return -1;\n}\n",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n\
    \        if ($val >= $lst[0]) {\n            return $key;\n        }\n    }\n\
    \    return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value > $freq[$key]) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThis doesn't work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$array = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n\
    $result = -1;\nforeach ($freq as $k => $v) {\n    if ($v > 0) {\n        $result\
    \ = $k;\n        break;\n    }\n}\necho $result;\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis doesn't work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$array = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n\
    $result = -1;\nforeach ($freq as $k => $v) {\n    if ($v > 0) {\n        $result\
    \ = $k;\n        break;\n    }\n}\necho $result;\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>", "    $max = $lst[0];\n\
    \    $freq = 1;\n    foreach ($lst as $num) {\n        if ($num > $max) {\n  \
    \          $max = $num;\n        }\n        if ($num == $max) {\n            $freq++;\n\
    \        }\n    }\n    return $freq > $max ? $max : -1;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it yourself. It returns `2` for `array(4, 1,\
    \ 2, 2, 3, 1)` and `3` for `array(5, 5, 4, 4, 4)`.\n<|/ c |>\n<| c |>\nIt returns\
    \ `2` for `array(4, 1, 2, 2, 3, 1)` and `3` for `array(5, 5, 4, 4, 4)`.\n<|/ c\
    \ |>\n<| c |>\nIt returns `2` for `array(4, 1, 2, 2, 3, 1)` and `3` for `array(5,\
    \ 5, 4, 4, 4)`.\n<|/ c |>\n<| c |>\nIt returns `2` for `array(4, 1, 2, 2, 3, 1)`\
    \ and `3` for `array(5, 5, 4, 4, 4)`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > $freq[$key]) {\n            return $key;\n        }\n  \
    \  }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $value) {\n        if ($value >= $freq[$key]) {\n        \
    \    return $key;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0) return $key;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't\
    \ work if the array is `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| c |>\nIt does work.\
    \ `array_count_values()` counts the number of occurrences of each value in the\
    \ array. Since `1` appears twice in the array, the count is `2`. The function\
    \ returns the key of the highest count that is greater than zero.\n<|/ c |>\n\
    <| c |>\nI see what you mean. My bad.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \   $freq = array();\n    foreach ($lst as $val) {\n        if (isset($freq[$val]))\
    \ {\n            $freq[$val]++;\n        } else {\n            $freq[$val] = 1;\n\
    \        }\n    }\n    foreach ($freq as $val => $freq) {\n        if ($freq >\
    \ 0) {\n            return $val;\n        }\n    }\n    return -1;\n}\n", "  \
    \  $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c\
    \ |>\nThis doesn't work. Try it with `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<|\
    \ c |>\nIt works fine for me. `echo search([4, 1, 2, 2, 3, 1]);` outputs `2`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `array(4, 1, 2, 2, 3, 1)` because `4` appears\
    \ twice in the array. `4` appears twice in the array because `4` appears twice\
    \ in the array. `4` appears twice because `4` appears twice in the array. `4`\
    \ appears twice because `4` appears twice in the array. `4` appears twice because\
    \ `4` appears twice in the array. `4` appears twice because `4` appears twice\
    \ in the array. `4` appears twice because `4` appears twice in the array. `4`\
    \ appears twice because `4` appears twice in the array. `4` appears twice because\
    \ `4` appears twice in the array. `4` appears twice because `4` appears twice\
    \ in the array. `4` appears twice because `4` appears twice in the array. `4`\
    \ appears twice because `4` appears twice in the array. `4` appears twice because\
    \ `4` appears twice in the array. `4` appears twice because `4` appears twice\
    \ in the array. `4` appears twice because `4` appears twice in the array. `4`\
    \ appears twice because `4` appears twice in the array. `4` appears twice because\
    \ `4` appears twice in the array. `4` appears twice because `4` appears twice\
    \ in the array. `4` appears twice because `4` appears twice in the array. `4`\
    \ appears twice because `4` appears twice in the array. `4` appears twice because\
    \ `4` appears twice in the array. `4` appears twice ", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val >= $lst[0]) {\n     \
    \       return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > 0) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThis doesn't work if you have a value that appears more than once.\n\
    <|/ c |>\n<| c |>\nI thought that too, but I tested it and it works. I added a\
    \ test case to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to the answer.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php",
  "    $freq = array_count_values($lst);\n    $max = $freq[array_keys($freq)[0]];\n\
    \    foreach ($freq as $key => $val) {\n        if ($val > $max) {\n         \
    \   $max = $val;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $val) {\n        if ($val > $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 1) {\n        \
    \    return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`.\n<|/\
    \ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`.\n<|/\
    \ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`.\n<|/\
    \ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`\n<|/\
    \ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ c |>\nI still don't think this works. Try searching `array(4, 1, 2, 2, 3, 1)`\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Try it out yourself.\n<|/ c |>\n<|\
    \ c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\n$array = array(4, 1, 2, 2, 3, 1);\n$result = array_search($array, array_flip($array));\n\
    echo $result;", "    $freq = array_count_values($lst);\n    foreach ($freq as\
    \ $key => $value) {\n        if ($value > $freq[$key]) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThanks for your answer. Your code is very similar to my code. My\
    \ code works fine for small arrays but fails for large arrays. I tested your code\
    \ with large arrays and it took more than 30 seconds to execute. My code took\
    \ less than 1 second to execute.\n<|/ c |>\n<| c |>\nI tested your code with large\
    \ arrays and it took more than 30 seconds to execute. My code took less than 1\
    \ second to execute.\n<|/ c |>\n<| c |>\nI tested your code with large arrays\
    \ and it took more than 30 seconds to execute. My code took less than 1 second\
    \ to execute.\n<|/ c |>\n<| c |>\nI tested your code with large arrays and it\
    \ took more than 30 seconds to execute. My code took less than 1 second to execute.\n\
    <|/ c |>\n<| c |>\nI tested your code with large arrays and it took more than\
    \ 30 seconds to execute. My code took less than 1 second to execute.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n   \
    \ foreach ($freq as $key => $value) {\n        if ($value > 1) {\n           \
    \ return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n   \
    \ $max = 0;\n    foreach ($freq as $key => $val) {\n        if ($val > $max) {\n\
    \            $max = $key;\n        }\n    }\n    return $max;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    $max = -1;\n    foreach ($freq as $key => $value)\
    \ {\n        if ($value > $max) {\n            $max = $key;\n        }\n    }\n\
    \    return $max;\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $val) {\n        if ($val > 0) {\n            return $key;\n    \
    \    }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $k => $v) {\n        if ($v > $max) {\n\
    \            $max = $k;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| c |>\nI like your solution, however it only works if\
    \ you have a list of integers. If you have an array of strings, it will not work.\
    \ For example: search([1,2,3,4,5,6,7,8,9,0]) will return -1 instead of 8.\n<|/\
    \ c |>\n<| c |>\nI added a solution that works for strings too.\n<|/ c |>\n<|\
    \ a tags=arrays,php |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,0);\n$max = -1;\n\
    foreach ($array as $key => $value) {\n    if ($value > $max) {\n        $max =\
    \ $value;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(1,2,3,4,5,6,7,8,9,0);\n$max = -1;\nforeach ($array as $key => $value)\
    \ {\n    if ($value > $max) {\n        $max = $value;\n    }\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $val) {\n        if ($val > $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n", "   \
    \ $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > $max) {\n            $max = $key;\n     \
    \   }\n    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n",
  "    $freq = array_count_values($lst);\n    $max = -1;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n    $max\
    \ = $freq[0];\n    $maxKey = null;\n    foreach ($freq as $key => $val) {\n  \
    \      if ($val > $max) {\n            $max = $val;\n            $maxKey = $key;\n\
    \        }\n    }\n    return $maxKey === null ? -1 : max($lst);\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if there are multiple values\
    \ that share the same frequency.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ on [this example](https://3v4l.org/ZMjRf).\n<|/ c |>\n<| c |>\nI see it now.\
    \ Sorry about that. My bad.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>", "   \
    \ $freq = array_count_values($lst);\n    $max = $freq[array_keys($freq)[0]];\n\
    \    foreach ($freq as $key => $val) {\n        if ($val >= $max) {\n        \
    \    $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to work when there are multiple instances of\
    \ the same number. For example, `search([4, 1, 2, 2, 3, 1])` returns `2` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\nYes, I noticed that too. Thanks for pointing it\
    \ out. I've updated my answer.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>", " \
    \   $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > $freq[$key]) {\n            return $key;\n        }\n  \
    \  }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $k => $v) {\n        if ($v >= $freq[$k]) {\n            return $k;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key]\
    \ > $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n\
    </code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't work. Try `search([4,\
    \ 1, 2, 2, 3, 1])`\n<|/ c |>\n<| c |>\n, thanks for pointing that out. I've updated\
    \ the answer to account for that.\n<|/ c |>\n<| c |>\nI see you edited your answer\
    \ to account for that. That's great! I didn't know about `array_count_values()`.\n\
    <|/ c |>\n<| c |>\n, thanks for your comment. I've updated the answer to account\
    \ for that.\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php", "  \
    \  $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value > $max) {\n            $max = $key;\n\
    \        }\n    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = $freq[0];\n    $maxKey = null;\n    foreach ($freq as $key => $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n            $maxKey\
    \ = $key;\n        }\n    }\n    return $maxKey === null ? -1 : maxKey($freq,\
    \ $maxKey);\n}\n", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $val) {\n        if ($val > 0) {\n            return $key;\n    \
    \    }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key]\
    \ >= $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n",
  "    $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n", "    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $val) {\n        if ($val > 0) {\n            return $key;\n\
    \        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $value) {\n        if ($value >\
    \ $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| a |>\n<code>\n<?php\n$arr = array(4, 1,\
    \ 2, 2, 3, 1);\n$freq = array_count_values($arr);\n$max = -1;\nforeach ($freq\
    \ as $key => $value) {\n    if ($value > $max) {\n        $max = $key;\n    }\n\
    }\necho $max;\n</code>\n<|/ a dscore=1 tags=php,arrays,algorithm |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n  \
    \      $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n  \
    \      $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n  \
    \      $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($arr);\n\
    $max = -1;\nforeach ($freq as $key => $value) {\n    if ($value > $max) {\n  \
    \      $max = $key;\n    }\n}\necho $max;\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(4, 1, 2, 2, 3, 1);\n$freq\
    \ = array_count_values($arr);\n$max = -1;\nforeach ($freq as $key => $value) {\n\
    \    if ($value > $max) {\n        $max = $key;\n    }\n}\necho $max;\n</code>\n",
  "    $freq = array_count_values($lst);\n    foreach ($freq as $key => $value) {\n\
    \        if ($value > $freq[$key]) {\n            return $key;\n        }\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\n\
    This doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $value) {\n        if ($value >= $freq[$key]) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=php,arrays,algorithm |>\n<code>", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $k => $v) {\n        if ($v > $max) {\n\
    \            $max = $k;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a\
    \ tags=php,arrays,algorithm |>\n<| c |>\nThis solution doesn't work if there are\
    \ multiple elements with same frequency.\n<|/ c |>\n<| c |>\nIt does work if there\
    \ are multiple elements with same frequency. Try it out with `$lst = array(4,\
    \ 1, 2, 2, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\
    \ 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, ", "    $freq = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($freq as $key => $val) {\n        if ($val > $max)\
    \ {\n            $max = $key;\n        }\n    }\n    return $max;\n}\n", "   \
    \ $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n    foreach ($freq\
    \ as $key => $val) {\n        if ($val > 0) {\n            return $key;\n    \
    \    }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($freq as $k => $v) {\n        if ($v > $max) {\n\
    \            $max = $k;\n        }\n    }\n    return $max;\n}\n", "    $freq\
    \ = array_count_values($lst);\n    foreach ($freq as $key => $val) {\n       \
    \ if ($val > 0) {\n            return $key;\n        }\n    }\n    return -1;\n\
    }\n", "    $freq = array_count_values($lst);\n    $keys = array_keys($freq);\n\
    \    foreach ($keys as $key) {\n        if ($freq[$key] >= $freq[$key-1]) {\n\
    \            return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n<?php", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $k => $v) {\n        if ($v > 0) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\n", "    $freq = array_count_values($lst);\n\
    \    foreach ($freq as $key => $value) {\n        if ($value > 1) {\n        \
    \    return $key;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays,algorithm |>\n<code>", "    $freq = [];\n    foreach\
    \ ($lst as $val) {\n        if (!isset($freq[$val])) {\n            $freq[$val]\
    \ = 0;\n        }\n        $freq[$val]++;\n    }\n    foreach ($freq as $val =>\
    \ $freq) {\n        if ($freq > 0) {\n            return $val;\n        }\n  \
    \  }\n    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "    $freq = [];\n    foreach ($lst as $num) {\n        if (!isset($freq[$num]))\
    \ {\n            $freq[$num] = 0;\n        }\n        $freq[$num]++;\n    }\n\
    \    foreach ($freq as $num => $freq) {\n        if ($freq > 0) {\n          \
    \  return $num;\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it yourself. It returns `2`.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it yourself. It returns `2`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work. Try searching `array(4, 1, 2, 2, 3, 1)`\n<|/ c |>\n<| a tags=php,arrays,search\
    \ |>\n<code>\n<?php", "    $freq = array();\n    foreach ($lst as $val) {\n  \
    \      if (!isset($freq[$val])) {\n            $freq[$val] = 0;\n        }\n \
    \       $freq[$val]++;\n    }\n    foreach ($freq as $key => $val) {\n       \
    \ if ($val > 0) {\n            return $key;\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if there are\
    \ multiple values with the same frequency.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that does work if there are multiple values with the same frequency.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are multiple values with the same frequency.\n\
    <|/ c |>\n<| c |>\nI added a solution that does work if there are multiple values\
    \ with the same frequency.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array(4,\
    \ 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n$result = array_search(1,\
    \ $freq);\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if there\
    \ are multiple values with the same frequency.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n\
    $result = array_search(1, $freq);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple values with the same frequency.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n\
    $result = array_search(1, $freq);\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n\
    $result = array_search(1, $freq);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n\
    $result = array_search(1, $freq);\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(4, 1, 2, 2, 3, 1);\n$freq = array_count_values($array);\n\
    $result = array_search(1, $freq);\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1\
    \ |>\n", "    $freq = [];\n    foreach ($lst as $value) {\n        if (!isset($freq[$value]))\
    \ {\n            $freq[$value] = 0;\n        }\n        $freq[$value]++;\n   \
    \ }\n    foreach ($freq as $key => $value) {\n        if ($value > 0 && $freq[$key]\
    \ >= $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n",
  "    $freq = array();\n    foreach ($lst as $val) {\n        if (isset($freq[$val]))\
    \ {\n            $freq[$val]++;\n        } else {\n            $freq[$val] = 1;\n\
    \        }\n    }\n    foreach ($freq as $val => $freq) {\n        if ($freq >\
    \ 0) {\n            return $val;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI appreciate your answer, but this doesn't really answer the\
    \ question. Your code doesn't take into account the frequency of the integers\
    \ in the list. For example, `search([4, 1, 2, 2, 3, 1])` should return `2`, not\
    \ `1`.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that does\
    \ take into account the frequency of the integers in the list.\n<|/ c |>\n<| c\
    \ |>\nI appreciate your answer, but this doesn't really answer the question. Your\
    \ code doesn't take into account the frequency of the integers in the list. For\
    \ example, `search([4, 1, 2, 2, 3, 1])` should return `2`, not `1`.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that does take into account\
    \ the frequency of the integers in the list.\n<|/ c |>\n<| a tags=php,algorithm,arrays\
    \ |>\n<code>\n<?php", "    $freq = [];\n    foreach ($lst as $val) {\n       \
    \ if (!isset($freq[$val])) {\n            $freq[$val] = 0;\n        }\n      \
    \  $freq[$val]++;\n    }\n    foreach ($freq as $val => $freq) {\n        if ($freq\
    \ > 0) {\n            return $val;\n        }\n    }\n    return -1;\n}\n", " \
    \   $freq = array_count_values($lst);\n    $max = 0;\n    foreach ($freq as $key\
    \ => $value) {\n        if ($value > $max) {\n            $max = $key;\n     \
    \   }\n    }\n    return $max;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
