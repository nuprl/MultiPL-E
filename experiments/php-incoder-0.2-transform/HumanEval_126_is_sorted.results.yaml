language: php
name: HumanEval_126_is_sorted
results:
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    foreach ($lst as $key =>\
    \ $val) {\n        if ($val != $lst[$key - 1]) {\n            $sorted = false;\n\
    \            break;\n        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp643dqw81.php:38\n\
    Stack trace:\n#0 /tmp/tmp643dqw81.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp643dqw81.php\
    \ on line 38\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    foreach ($lst as $key =>\
    \ $val) {\n        if ($val != $lst[$key - 1]) {\n            $sorted = false;\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmppf0jlj.php:37\n\
    Stack trace:\n#0 /tmp/tmpmppf0jlj.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpmppf0jlj.php\
    \ on line 37\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    foreach\
    \ ($lst as $item) {\n        if ($item != $prev) {\n            $sorted = false;\n\
    \        }\n        $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ex44g4m.php:40\n\
    Stack trace:\n#0 /tmp/tmp5ex44g4m.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5ex44g4m.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return $lst[0]\
    \ == $lst;\n    }\n    $sorted = array_count_values($lst);\n    foreach ($sorted\
    \ as $num => $count) {\n        if ($count > 1) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzz3sukwg.php:40\n\
    Stack trace:\n#0 /tmp/tmpzz3sukwg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzz3sukwg.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if\
    \ ($item == $last) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5npy0rg2.php:42\n\
    Stack trace:\n#0 /tmp/tmp5npy0rg2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5npy0rg2.php\
    \ on line 42\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    foreach\
    \ ($lst as $item) {\n        if ($item != $prev) {\n            $sorted = false;\n\
    \            break;\n        }\n        $prev = $item;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwn3l8h9.php:41\n\
    Stack trace:\n#0 /tmp/tmpvwn3l8h9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpvwn3l8h9.php\
    \ on line 41\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = array_count_values($lst);\n    foreach\
    \ ($count as $num => $count) {\n        if ($count > 1) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuh2ymwn_.php:39\n\
    Stack trace:\n#0 /tmp/tmpuh2ymwn_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpuh2ymwn_.php\
    \ on line 39\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $sorted = false;\n    $count\
    \ = count($lst);\n    for ($i = 0; $i < $count; $i++) {\n        if ($lst[$i]\
    \ == $lst[$i - 1]) {\n            $sorted = false;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptshzskx1.php:39\n\
    Stack trace:\n#0 /tmp/tmptshzskx1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptshzskx1.php\
    \ on line 39\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    foreach\
    \ ($lst as $item) {\n        if ($item != $prev) {\n            $sorted = false;\n\
    \        }\n        $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ex44g4m.php:40\n\
    Stack trace:\n#0 /tmp/tmp5ex44g4m.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5ex44g4m.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $sorted = false;\n    $len\
    \ = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($lst[$i] ==\
    \ $lst[$i - 1]) {\n            $sorted = false;\n            break;\n        }\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplokjgpi.php:40\n\
    Stack trace:\n#0 /tmp/tmpplokjgpi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpplokjgpi.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    foreach\
    \ ($lst as $item) {\n        if ($item != $prev) {\n            $sorted = false;\n\
    \            break;\n        }\n        $prev = $item;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwn3l8h9.php:41\n\
    Stack trace:\n#0 /tmp/tmpvwn3l8h9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpvwn3l8h9.php\
    \ on line 41\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fhzv5p.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fhzv5p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fhzv5p.php\
    \ on line 40\n"
  timestamp: 1659730952
- exit_code: 255
  program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    foreach\
    \ ($lst as $item) {\n        if ($item < $prev) {\n            $sorted = false;\n\
    \            break;\n        }\n        $prev = $item;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplb1p52o0.php:49\n\
    Stack trace:\n#0 /tmp/tmplb1p52o0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmplb1p52o0.php\
    \ on line 49\n"
  timestamp: 1659730952
