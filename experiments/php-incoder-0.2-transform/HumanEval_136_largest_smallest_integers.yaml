name: HumanEval_136_largest_smallest_integers
language: php
prompt: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n//\
  \ the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n// array(null,\
  \ 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n// >>> largest_smallest_integers(array(0))\n\
  // array(null, null)\nfunction largest_smallest_integers($lst) {\n"
tests: "function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
  \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7,\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3,\
  \ 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1,\
  \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $value)\
    \ {\n    if ($smallest === NULL || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === NULL || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n", "  $smallest = null;\n\
    \  $largest = null;\n  foreach ($lst as $item) {\n    if ($smallest === null ||\
    \ $item < $smallest) {\n      $smallest = $item;\n    }\n    if ($largest ===\
    \ null || $item > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n", "  $max_negative = array();\n  $min_positive = array();\n\
    \  foreach ($lst as $item) {\n    if ($item < 0) {\n      $max_negative[] = $item;\n\
    \    } else {\n      $min_positive[] = $item;\n    }\n  }\n  if (count($max_negative)\
    \ > count($min_positive)) {\n    return $max_negative;\n  }\n  return $min_positive;\n\
    }\n", "  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n\
    \    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n", "  $largest = null;\n\
    \  $smallest = null;\n  foreach ($lst as $value) {\n    if ($largest === null\
    \ || $value < $smallest) {\n      $smallest = $value;\n    }\n    if ($largest\
    \ === null || $value > $largest) {\n      $largest = $value;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n", "  $smallest = array();\n  $largest = array();\n\
    \  foreach ($lst as $item) {\n    if ($item < 0) {\n      $smallest[] = $item;\n\
    \    } else {\n      $largest[] = $item;\n    }\n  }\n  if (count($smallest) ==\
    \ 0) {\n    return array(null, null);\n  }\n  if (count($largest) == 0) {\n  \
    \  return array(null, null);\n  }\n  $smallest_key = array_keys($smallest);\n\
    \  $largest_key = array_keys($largest);\n  $smallest_value = $smallest[$smallest_key];\n\
    \  $largest_value = $largest[$largest_key];\n  if ($smallest_value < $largest_value)\
    \ {\n    return array($smallest_value, $largest_value);\n  }\n  return array($largest_value,\
    \ $smallest_value);\n}\n", "  $smallest = NULL;\n  $largest = NULL;\n  foreach\
    \ ($lst as $item) {\n    if ($smallest === NULL || $item < $smallest) {\n    \
    \  $smallest = $item;\n    }\n    if ($largest === NULL || $item > $largest) {\n\
    \      $largest = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n",
  "  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n    if ($smallest\
    \ === NULL || $item < $smallest) {\n      $smallest = $item;\n    }\n    if ($largest\
    \ === NULL || $item > $largest) {\n      $largest = $item;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n", "  $largest = null;\n  $smallest = null;\n\
    \  foreach ($lst as $item) {\n    if ($largest === null || $item > $largest) {\n\
    \      $largest = $item;\n    }\n    if ($smallest === null || $item < $smallest)\
    \ {\n      $smallest = $item;\n    }\n  }\n  return array($smallest, $largest);\n\
    }\n", "  $negatives = array();\n  $positives = array();\n  foreach ($lst as $num)\
    \ {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } else {\n      $positives[]\
    \ = $num;\n    }\n  }\n  if (count($negatives) == 0) {\n    return array(null,\
    \ null);\n  }\n  if (count($positives) == 0) {\n    return array(null, null);\n\
    \  }\n  $largest = max($negatives);\n  $smallest = min($positives);\n  return\
    \ array($largest, $smallest);\n}\n", "  $negative = array();\n  $positive = array();\n\
    \  foreach ($lst as $value) {\n    if ($value < 0) {\n      $negative[] = $value;\n\
    \    } else {\n      $positive[] = $value;\n    }\n  }\n  if (count($negative)\
    \ == 0 && count($positive) == 0) {\n    return array(null, null);\n  }\n  if (count($negative)\
    \ == 0) {\n    return array(0, $positive[0]);\n  }\n  if (count($positive) ==\
    \ 0) {\n    return $negative;\n  }\n  $max = $negative[0];\n  $min = $positive[0];\n\
    \  foreach ($negative as $value) {\n    if ($value > $max) {\n      $max = $value;\n\
    \    }\n  }\n  foreach ($positive as $value) {\n    if ($value < $min) {\n   \
    \   $min = $value;\n    }\n  }\n  return array($max, $min);\n}\n", "  $largest\
    \ = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n    if ($largest\
    \ === null || $value < $largest) {\n      $largest = $value;\n    }\n    if ($smallest\
    \ === null || $value > $smallest) {\n      $smallest = $value;\n    }\n  }\n \
    \ return array($smallest, $largest);\n}\n", "  $negatives = array();\n  $positives\
    \ = array();\n  foreach ($lst as $value) {\n    if ($value < 0) {\n      $negatives[]\
    \ = $value;\n    } else {\n      $positives[] = $value;\n    }\n  }\n  if (count($negatives)\
    \ == 0 && count($positives) == 0) {\n    return array(null, null);\n  }\n  if\
    \ (count($negatives) == 0) {\n    return array(0, $positives[0]);\n  }\n  if (count($positives)\
    \ == 0) {\n    return $negatives[0];\n  }\n  $max = max($negatives);\n  $min =\
    \ min($positives);\n  return array($max, $min);\n}\n", "  $smallest = NULL;\n\
    \  $largest = NULL;\n  foreach ($lst as $item) {\n    if ($smallest === NULL ||\
    \ $item < $smallest) {\n      $smallest = $item;\n    }\n    if ($largest ===\
    \ NULL || $item > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n", "  $largest = null;\n  $smallest = null;\n  foreach ($lst\
    \ as $value) {\n    if ($smallest === null || $value < $smallest) {\n      $smallest\
    \ = $value;\n    }\n    if ($largest === null || $value > $largest) {\n      $largest\
    \ = $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n", "  $largest\
    \ = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n    if ($largest\
    \ === null || $item > $largest) {\n      $largest = $item;\n    }\n    if ($smallest\
    \ === null || $item < $smallest) {\n      $smallest = $item;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n", "  $smallest = NULL;\n  $largest = NULL;\n\
    \  foreach ($lst as $item) {\n    if ($smallest === NULL || $item < $smallest)\
    \ {\n      $smallest = $item;\n    }\n    if ($largest === NULL || $item > $largest)\
    \ {\n      $largest = $item;\n    }\n  }\n  return array($smallest, $largest);\n\
    }\n", "  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst\
    \ as $val) {\n    if ($val < $smallest) {\n      $smallest = $val;\n    }\n  \
    \  if ($val > $largest) {\n      $largest = $val;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n", "  $min_int = PHP_INT_MAX;\n  $max_int = PHP_INT_MIN;\n  foreach\
    \ ($lst as $item) {\n    if ($item < $min_int) {\n      $min_int = $item;\n  \
    \  }\n    if ($item > $max_int) {\n      $max_int = $item;\n    }\n  }\n  return\
    \ array($min_int, $max_int);\n}\n", "  $smallest = null;\n  $largest = null;\n\
    \  foreach ($lst as $item) {\n    if (is_int($item)) {\n      if ($smallest ===\
    \ null || $item < $smallest) {\n        $smallest = $item;\n      }\n      if\
    \ ($largest === null || $item > $largest) {\n        $largest = $item;\n     \
    \ }\n    }\n  }\n  return array($smallest, $largest);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
