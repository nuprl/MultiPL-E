name: HumanEval_16_count_distinct_characters
language: php
prompt: "<?php\n// Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n//\
  \ 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return count_distinct_characters(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"abcde\") !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"abcdecadeCADE\") !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aaaaAAAAaaaa\") !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Jerry jERRY JeRRRY\") !== 5) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $characters = array();\n    foreach (str_split($string) as $char)\
    \ {\n        $characters[$char] = isset($characters[$char]) ? $characters[$char]\
    \ + 1 : 1;\n    }\n    return count($characters);\n}\n", "    $chars = array();\n\
    \    foreach (str_split($string) as $char) {\n        $chars[$char] = isset($chars[$char])\
    \ ? $chars[$char] + 1 : 1;\n    }\n    return count($chars);\n}\n", "    $characters\
    \ = array();\n    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $characters[$string[$i]] = 1;\n    }\n    return count(array_keys($characters));\n\
    }\n", "    $chars = preg_split('//', $string);\n    $distinct_chars = array();\n\
    \    foreach ($chars as $char) {\n        $distinct_chars[] = strtolower($char);\n\
    \    }\n    return count($distinct_chars);\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n</code>\n<|/ a tags=php,string,arrays |>\n<| c |>\n\
    This doesn't seem to work if the string contains only 1 unique character\n<|/\
    \ c |>\n<| c |>\nIt does work, just tested it. It counts how many distinct characters\
    \ are in the string. `count_distinct_characters(\"xyzXYZ\")` returns `3` because\
    \ there are 3 distinct characters in the string. `count_distinct_characters(\"\
    Jerry\")` returns `4` because there are 4 distinct characters in the string.\n\
    <|/ c |>\n<| c |>\nYes, but if you have only 1 unique character in the string,\
    \ it returns 0, not 1.\n<|/ c |>\n<| c |>\nIt does return 1 if the string contains\
    \ only 1 unique character. `count_distinct_characters(\"a\")` returns `1`.\n<|/\
    \ c |>\n<| c |>\nIt does return 1 if the string contains only 1 unique character.\
    \ `count_distinct_characters(\"a\")` returns `1`.\n<|/ c |>\n<| a tags=php,string,arrays\
    \ |>\n<code>\n<?php\n$string = \"Hello World\";\n$array = str_split($string);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique", "   \
    \ $chars = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I\
    \ wonder how it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n\
    I like it too, but I wonder how it compares to other solutions posted so far.\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it compares\
    \ to other solutions posted so far.\n<|/ c |>\n<| c |>\nI like it too, but I wonder\
    \ how it compares to other solutions posted so far.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Hello World\";\n$chars = str_split($string);\n$count\
    \ = count($chars);\n$unique = array_count_values($chars);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n", "    return\
    \ count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    return\
    \ preg_match_all('/./u', $string, $matches) ? count($matches[0]) : 0;\n}\n", " \
    \   $characters = array();\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $character = $string[$i];\n        if (array_key_exists($character,\
    \ $characters)) {\n            $characters[$character]++;\n        } else {\n\
    \            $characters[$character] = 1;\n        }\n    }\n    return count($characters);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `count_distinct_characters(\"\
    Jerry\")` returns `4` instead of `3`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\n: I added a PHP function which does\
    \ this for you. Hope it helps.\n<|/ c |>\n<| c |>\n: I added a PHP function which\
    \ does this for you. Hope it helps.\n<|/ c |>\n<| c |>\n: I added a PHP function\
    \ which does this for you. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $characters[$string[$i]] = 1;\n    }\n \
    \   return count(array_keys($characters));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($chars));\n}\n", "    $characters = array();\n\
    \    foreach (str_split($string) as $char) {\n        $characters[$char] = isset($characters[$char])\
    \ ? $characters[$char] + 1 : 1;\n    }\n    return count($characters);\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThis doesn't work if you have multiple spaces\
    \ between words. Try it with `\"abc def\"`.\n<|/ c |>\n<| c |>\nI guess it depends\
    \ on the definition of \"distinct\" characters. I assumed that \"distinct\" characters\
    \ are those that do not appear in any other character sequence. Your example is\
    \ \"abc\" and \"def\" distinct, but \"abc def\" is not distinct because of the\
    \ spaces.\n<|/ c |>\n<| c |>\nYes, I agree. My point was that your solution doesn't\
    \ work if there are multiple spaces between words. Your solution doesn't work\
    \ if there are multiple spaces between words. Try it with `\"abc def\"`.\n<|/\
    \ c |>\n<| c |>\nI guess I misunderstood your question. I thought you wanted to\
    \ count the number of distinct characters in a string. I'll update my answer.\n\
    <|/ c |>\n<| c |>\nI updated my answer to account for multiple spaces between\
    \ words.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string = \"abc def\";\n$array =\
    \ explode(\" \", $string);\n$count = count($array);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work if you have multiple spaces between words. Try\
    \ it with `\"abc def\"`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string = \"abc\
    \ def\";\n$array = explode(\" \", $string);\n$count = count($array);\n</code>\n\
    <|/ a tags=php,string |>\n<| a dscore=2 |>\n<code>\n$string = \"abc def\";\n$array\
    \ = explode(\" \", $string);\n$count = count($array);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = \"abc def\";\n$array = explode(\" \"\
    , $string);\n$count = count($array);\n</code>\n<|/ a tags=php,string |>\n<| a\
    \ |>\n<code>\n$string = \"abc def\";\n$array = explode(\" \", $string);\n$count\
    \ = count($array);\n", "    $chars = preg_split('//', $string);\n    $count =\
    \ count($chars);\n    $chars = array_map('strtolower', $chars);\n    $chars =\
    \ array_count_values($chars);\n    return $count;\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `count_distinct_characters(\"Jerry\")` returns `4` instead of `3`.\n<|/\
    \ c |>\n<| c |>\nIt does work. `count_distinct_characters(\"Jerry\")` returns\
    \ `3` as expected.\n<|/ c |>\n<| c |>\nIt doesn't work for me. `count_distinct_characters(\"\
    Jerry\")` returns `4` instead of `3`.\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works just fine. Are you sure you're testing it correctly?\n<|/ c |>\n<|\
    \ c |>\nYes, I'm sure. I'm running PHP 5.6.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php", "    $chars = preg_split('//', $string);\n    $count = count($chars);\n\
    \    $distinct = 0;\n    foreach ($chars as $char) {\n        $distinct += mb_strlen($char,\
    \ 'UTF-8');\n    }\n    return $count;\n}\n", "    $characters = array();\n  \
    \  foreach (str_split($string) as $character) {\n        $characters[$character]\
    \ = isset($characters[$character]) ? $characters[$character] + 1 : 1;\n    }\n\
    \    return count($characters);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work correctly for strings like \"abcABC\"\n<|/ c |>\n<| c |>\nI didn't\
    \ say it wouldn't, I said it wouldn't. That's why I said \"regardless of case\"\
    \n<|/ c |>\n<| c |>\nOh, I missed that part. Sorry\n<|/ c |>\n<| c |>\nI added\
    \ a version that doesn't care about case\n<|/ c |>\n<| a tags=php,string |>\n\
    <code>\n$string = 'abcABC';\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = implode('', $unique);\necho $unique;\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't work correctly for strings like \"abcABC\"\
    \n<|/ c |>\n<| a |>\n<code>\n$string = 'abcABC';\n$chars = str_split($string);\n\
    $count = count($chars);\n$unique = array_count_values($chars);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = implode('', $unique);\necho $unique;\n</code>\n<|/ a\
    \ dscore=1 tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string = 'abcABC';\n\
    $chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = implode('', $unique);\n\
    echo $unique;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $chars = array_map('strtolower',\
    \ $chars);\n    $count = count($chars);\n    return $count;\n}\n", "    return\
    \ count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars\
    \ = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $count = count($chars);\n    $distinct_chars = array_count_values($chars);\n\
    \    return $distinct_chars[$string];\n}\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| c |>\nThis doesn't work if there are multiple instances of the same character\
    \ in the string. For example, `count_distinct_characters('abbcc')` returns `3`\
    \ instead of `2`.\n<|/ c |>\n<| c |>\nI agree with you, however I believe that\
    \ OP was looking for a solution that would work for any string and would not require\
    \ any additional libraries. I believe that my solution is more elegant and less\
    \ prone to errors. I believe that my solution is more efficient than yours.\n\
    <|/ c |>\n<| c |>\nI agree with you that your solution is more elegant and less\
    \ prone to errors. I believe that my solution is more efficient than yours. However,\
    \ I believe that your solution is more efficient than mine. My solution uses less\
    \ memory and less processing time than yours. I believe that your solution is\
    \ more efficient than mine. My solution uses less memory and less processing time\
    \ than yours. I believe that your solution is more efficient than mine. My solution\
    \ uses less memory and less processing time than yours. I believe that your solution\
    \ is more efficient than mine. My solution uses less memory and less processing\
    \ time than yours. I believe that your solution is more efficient than mine. My\
    \ solution uses less memory and less processing time than yours. I believe that\
    \ your solution is more efficient than mine. My solution uses less memory and\
    \ less processing time than yours.\n<|/ c |>\n<| c |>\nI believe that your solution\
    \ is more efficient than mine. My solution uses less memory and less processing\
    \ time than yours. I believe that your solution is more efficient than mine. My\
    \ solution uses less memory and less processing time than yours. I believe that\
    \ your solution is more efficient than mine. My solution uses less memory and\
    \ less processing time than yours. I believe that your solution is more efficient\
    \ than mine. My solution uses less memory and less processing time than yours.\
    \ I believe that your solution is more efficient than mine. My solution uses less\
    \ memory and less processing time than yours. I believe that your solution is\
    \ more efficient than mine. My solution uses less memory and less processing time\
    \ than yours.\n<|/ c |>\n<| c |>\nI believe that your solution is more efficient\
    \ than ", "    $characters = array_count_values(str_split($string));\n    return\
    \ count(array_filter($characters, function($value) { return $value > 1; }));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!in_array($character,\
    \ $characters)) {\n            $characters[] = $character;\n        }\n    }\n\
    \    return count($characters);\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I am not very familiar with PHP, so I didn't\
    \ know about `array_map()`. However, I did find another solution that I posted\
    \ as an answer.\n<|/ c |>\n<| a |>\nI figured out a solution that I liked better.\
    \ Instead of using preg_split(), I used preg_match_all() and used the regex pattern\
    \ /[a-z]/i. This pattern will match any lowercase letter, regardless of case.\n\
    <code>\n<?php", "    $characters = array();\n    $length = strlen($string);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $char = strtolower($string[$i]);\n\
    \        if (!isset($characters[$char])) {\n            $characters[$char] = 1;\n\
    \        } else {\n            $characters[$char]++;\n        }\n    }\n    return\
    \ count($characters);\n}\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($chars));\n}\n", "    $characters = array();\n\
    \    foreach (str_split($string) as $char) {\n        $characters[$char] = isset($characters[$char])\
    \ ? $characters[$char] + 1 : 1;\n    }\n    return count($characters);\n}\n",
  "    $characters = array();\n    $string = strtolower($string);\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        $characters[$string[$i]] = 1;\n    }\n\
    \    return count($characters);\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\n\
    This doesn't answer the question of how to count distinct characters in a string.\
    \ Also, your function doesn't return anything useful.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my answer explaining how it works.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my answer explaining how it works.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my answer explaining how it works.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my answer explaining how it works.\n<|/ c |>\n<| a |>\n<code>\n\
    $string = \"abcde\";\n$count = count($string);\n$unique = array_count_values(str_split($string));\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique, 0,\
    \ $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string);\n    $count = count($chars);\n\
    \    $distinct_chars = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n</code>\n<|/ a\
    \ tags=php,string |>\n<| c |>\nThis doesn't work if there are multiple spaces\
    \ between words. For example, `count_distinct_characters('  ')` returns `1` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if there are multiple spaces between\
    \ words. For example, `count_distinct_characters('  ')` returns `1` instead of\
    \ `2`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = \"Hello World\";\n$string\
    \ = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = strtolower($string);\n$string = preg_replace('/[\\\
    s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/', ' ', $string);\n$string\
    \ = preg_replace('/[\\s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/',\
    \ ' ', $string);\n$string = preg_replace('/[\\s]+/', ' ', $string);\n$string =\
    \ preg_replace('/[\\s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/',\
    \ ' ', $string);\n$string = preg_replace('/[\\s]+/', ' ', $string);\n$string =\
    \ preg_replace('/[\\s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/',\
    \ ' ', $string);\n$string = preg_replace('/[\\s]+/', ' ', $string);\n$string =\
    \ preg_replace('/[\\s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/',\
    \ ' ', $string);\n$string = preg_replace('/[\\s]+/', ' ', $string);\n$string =\
    \ preg_replace('/[\\s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/',\
    \ ' ', $string);\n$string = preg_replace('/[\\s]+/', ' ', $string);\n$string =\
    \ preg_replace('/[\\s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/',\
    \ ' ', $string);\n$string = preg_replace('/[\\s]+/', ' ', $string);\n$string =\
    \ preg_replace('/[\\s]+/', ' ', $string);\n$string = preg_replace('/[\\s]+/',\
    \ ' ', $string);\n", "    return preg_match_all('/[[:upper:]]/', $string) + preg_match_all('/[[:lower:]]/',\
    \ $string);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you\
    \ have multiple uppercase letters in a row. `count_distinct_characters(\"ABBC\"\
    )` returns `3` instead of `4`.\n<|/ c |>\n<| c |>\nI didn't realize that - thanks\
    \ for pointing that out. I've updated my answer to account for that case.\n<|/\
    \ c |>\n<| c |>\nI added a second solution that doesn't require a regex.\n<|/\
    \ c |>\n<| a tags=php,string |>\n<code>\n$string = \"ABBC\";\n$count = substr_count($string,\
    \ 'A');\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ uppercase letters in a row. `substr_count($string, 'A')` returns `3` instead\
    \ of `4`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = \"ABBC\";\n$count\
    \ = substr_count($string, 'A');\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"ABBC\";\n$count = substr_count($string, 'A');\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = \"ABBC\";\n$count = substr_count($string,\
    \ 'A');\n</code>\n<|/ a tags=php,string |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = \"ABBC\";\n$count = substr_count($string, 'A');\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string |>\n<code>\n$string = \"ABBC\";\n$count = substr_count($string,\
    \ 'A');\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>\n$string\
    \ = \"ABBC\";\n$count = substr_count($string, 'A');\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$string = \"ABBC\";\n$count = substr_count($string,\
    \ 'A');\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n\
    $string = \"ABBC\";\n$count = substr_count(", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work for\
    \ me. `count_distinct_characters('a') === 1`\n<|/ c |>\n<| c |>\nI tested it on\
    \ PHP 7.2.17 and it works. I added a link to the PHP manual where you can find\
    \ more information about this function.\n<|/ c |>\n<| c |>\nI tested it on PHP\
    \ 7.2.17 and it works. I added a link to the PHP manual where you can find more\
    \ information about this function.\n<|/ c |>\n<| c |>\nI tested it on PHP 7.2.17\
    \ and it works. I added a link to the PHP manual where you can find more information\
    \ about this function.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php\n$string\
    \ = 'abc';\n$chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = implode('', $unique);\n\
    echo $unique;", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($chars));\n}\n", "    $chars = array();\n    $char_count\
    \ = 0;\n    $chars = str_split($string);\n    foreach ($chars as $char) {\n  \
    \      $char_count++;\n    }\n    return $char_count;\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work if you have a string like `'aBcDeFgHijKlMNOPQRSTUVWXYZ'`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for strings like `'aBcDeFgHijKlMNOPQRSTUVWXYZ'`\n\
    <|/ c |>\n<| c |>\nI tested it and it works for me. Can you give me an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work for strings like\
    \ `'aBcDeFgHijKlMNOPQRSTUVWXYZ'`\n<|/ c |>\n<| c |>\nIt doesn't work for strings\
    \ like `'aBcDeFgHijKlMNOPQRSTUVWXYZ'`\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'aBcDeFgHijKlMNOPQRSTUVWXYZ';\n$chars = str_split($string);\n$count\
    \ = count($chars);\n$unique = array_count_values($chars);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = implode('', $unique);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work\
    \ if you have a string like `'aBcDeFgHijKlMNOPQRSTUVWXYZ'`\n<|/ c |>\n<| c |>\n\
    It doesn't work for strings like `'aBcDeFgHijKlMNOPQRSTUVWXYZ'`\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for strings like `'aBcDeFgHijKlMNOPQRSTUVWXYZ'`\n<|/ c\
    \ |>\n<| a dscore=4 |>\n<code>\n$string = 'aBcDeFgHijKlMNOPQRSTUVWXYZ';\n$chars\
    \ = str_split($string);\n$count = count($char", "    $chars = preg_split('//',\
    \ $string);\n    $counts = array_count_values($chars);\n    return count($counts);\n\
    }\n", "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n", "    $characters =\
    \ array();\n    foreach (str_split($string) as $char) {\n        $characters[$char]\
    \ = isset($characters[$char]) ? $characters[$char] + 1 : 1;\n    }\n    return\
    \ count(array_keys($characters));\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   return count(array_count_values(str_split($string)));\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for your answer. I am not able to understand how this works. Can\
    \ you please explain it a bit?\n<|/ c |>\n<| c |>\nThe `array_count_values` function\
    \ counts the number of occurrences of each character in the string. `str_split`\
    \ splits the string into individual characters. `array_count_values` then counts\
    \ the number of occurrences of each character in the split string. `array_count_values`\
    \ returns a multidimensional array where the keys are the characters and the values\
    \ are the occurrences. `count` then counts the number of occurrences of each character\
    \ in the multidimensional array.\n<|/ c |>\n<| c |>\nThanks again. Can you please\
    \ explain how this works in detail? I am not able to understand how this works.\n\
    <|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nThanks again.\
    \ Can you please explain how this works in detail? I am not able to understand\
    \ how this works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Hello\
    \ World\";\n$array = str_split($string);\n$count = count($array);\n$unique = array_count_values($array);\n\
    $unique = array_unique($unique);\n$count = count($unique);\necho $count;", " \
    \   $chars = array();\n    foreach (str_split($string) as $char) {\n        $chars[$char]\
    \ = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n    }\n    return count(array_keys($chars));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `count_distinct_characters(\"\
    abbcc\")`.\n<|/ c |>\n<| c |>\nIt works. Try it with `count_distinct_characters(\"\
    abbcc\")`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_distinct_characters(\"\
    abbcc\")`.\n<|/ c |>\n<| c |>\nIt works. Try it with `count_distinct_characters(\"\
    abbcc\")`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_distinct_characters(\"\
    abbcc\")`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php", "    $chars = array();\n\
    \    $chars[] = $string[0];\n    $chars[] = $string[1];\n    $chars[] = $string[2];\n\
    \    $chars[] = $string[3];\n    $chars[] = $string[4];\n    $chars[] = $string[5];\n\
    \    $chars[] = $string[6];\n    $chars[] = $string[7];\n    $chars[] = $string[8];\n\
    \    $chars[] = $string[9];\n    $chars[] = $string[10];\n    $chars[] = $string[11];\n\
    \    $chars[] = $string[12];\n    $chars[] = $string[13];\n    $chars[] = $string[14];\n\
    \    $chars[] = $string[15];\n    $chars[] = $string[16];\n    $chars[] = $string[17];\n\
    \    $chars[] = $string[18];\n    $chars[] = $string[19];\n    $chars[] = $string[20];\n\
    \    $chars[] = $string[21];\n    $chars[] = $string[22];\n    $chars[] = $string[23];\n\
    \    $chars[] = $string[24];\n    $chars[] = $string[25];\n    $chars[] = $string[26];\n\
    \    $chars[] = $string[27];\n    $chars[] = $string[28];\n    $chars[] = $string[29];\n\
    \    $chars[] = $string[30];\n    $chars[] = $string[31];\n    $chars[] = $string[32];\n\
    \    $chars[] = $string[33];\n    $chars[] = $string[34];\n    $chars[] = $string[35];\n\
    \    $chars[] = $string[36];\n    $chars[] = $string[37];\n    $chars[] = $string[38];\n\
    \    $chars[] = $string[39];\n    $chars[] = $string[40];\n    $chars[] = $string[41];\n\
    \    $chars[] = $string[42];\n    $chars[] = $string[43];\n    $chars[] = $string[44];\n\
    \    $chars[] = $string[45];\n    $chars[] = $string[46];\n    $chars[] = $string[47];\n\
    \    $chars[] = $string[48];\n    $chars[] = $string[49];\n    $chars[] = $string[50];\n\
    \    $chars[] = $string[51];\n    $chars[] = $string", "    $chars = preg_split('//',\
    \ $string);\n    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work if there\
    \ are multiple spaces between words. e.g. `count_distinct_characters(\"abc def\
    \ ghi\")` returns `3` instead of `4`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns\
    \ `4` for `\"abc def ghi\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself.\
    \ It returns `4` for `\"abc def ghi\"`.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it yourself. It returns `4` for `\"abc def ghi\"`.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$string = 'abc def ghi';\n$chars = preg_split('//', $string);\n\
    $chars = array_map('strtolower', $chars);\n$chars = array_unique($chars);\necho\
    \ count($chars);\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't\
    \ work if there are multiple spaces between words. e.g. `count_distinct_characters(\"\
    abc def ghi\")` returns `3` instead of `4`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It returns `4` for `\"abc def ghi\"`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it yourself. It returns `4` for `\"abc def ghi\"`.\n<|/ c\
    \ |>\n<| c |>\n: It does work. Try it yourself. It returns `4` for `\"abc def\
    \ ghi\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `4`\
    \ for `\"abc def ghi\"`.\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string\
    \ = 'abc def ghi';\n$chars = preg_split('//', $string);\n$chars = array_map('strtolower',\
    \ $chars);", "    $chars = array();\n    $char_count = array();\n    foreach (str_split($string)\
    \ as $char) {\n        $chars[$char] = true;\n        $char_count[$char] = isset($char_count[$char])\
    \ ? $char_count[$char] + 1 : 1;\n    }\n    return count(array_keys($chars));\n\
    }\n", "    $characters = array();\n    foreach (str_split($string) as $character)\
    \ {\n        $characters[$character] = isset($characters[$character]) ? $characters[$character]\
    \ + 1 : 1;\n    }\n    return count($characters);\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work if the string contains numbers or other characters\
    \ that aren't letters. For example, `count_distinct_characters(\"ab12cde\")` returns\
    \ `3` instead of `4`.\n<|/ c |>\n<| c |>\nI agree with you. I've added a solution\
    \ that doesn't use regex. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    $chars = array();\n    $char_count = 0;\n    $string_length\
    \ = strlen($string);\n    for ($i = 0; $i < $string_length; $i++) {\n        $char\
    \ = strtolower($string[$i]);\n        if (!isset($chars[$char])) {\n         \
    \   $chars[$char] = 1;\n            $char_count++;\n        } else {\n       \
    \     $chars[$char]++;\n        }\n    }\n    return $char_count;\n}\n", "   \
    \ $chars = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| a tags=php,string |>\n<code>\n<?php\n$string = \"Hello World\";\n$chars = str_split($string);\n\
    $chars = array_unique($chars);\n$count = count($chars);\necho $count;", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!isset($characters[$character]))\
    \ {\n            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return count($characters);\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ your solution, but I believe that `preg_split` will split on every single character\
    \ in the string. `preg_match_all` will split on every single character in the\
    \ string and return the number of matches. I believe that `preg_split` is more\
    \ efficient than `preg_match_all`.\n<|/ c |>\n<| c |>\nYes, you're right. I was\
    \ thinking about `preg_match_all` but then I thought about `preg_split` which\
    \ I thought was more efficient. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that uses `preg_split`.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I believe that `preg_split` will split on every single\
    \ character in the string. `preg_match_all` will split on every single character\
    \ in the string and return the number of matches. I believe that `preg_split`\
    \ is more efficient than `preg_match_all`.\n<|/ c |>\n<| c |>\nI believe that\
    \ `preg_split` is more efficient than `preg_match_all` because `preg_split` will\
    \ split on every single character in the string and return the number of matches.\
    \ `preg_match_all` will split on every single character in the string and return\
    \ the number of matches. `preg_split` is more efficient than `preg_match_all`\
    \ because `preg_split` will split on every single character in the string and\
    \ return the number of matches. `preg_match_all` will split on every single character\
    \ in the string and return the number of matches. `preg_split` is more efficient\
    \ than `preg_match_all` because `preg_split` will split on every single character\
    \ in the string and return the number of matches. `preg_match_all` will split\
    \ on every single character in the string and return the number of matches. `preg_split`\
    \ is more efficient than `preg_match_all` because `preg_split` will split on every\
    \ single character in the string and return the number of matches. `preg_match_all`\
    \ will split on every single character in the string and return the number of\
    \ matches. `preg_split` is more efficient than `preg_match_all` because `preg_split`\
    \ will split on every single character in the string and return the number of\
    \ matches. `preg_match_all` will split on every single character ", "    return\
    \ count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n</code>\n<|/\
    \ a tags=php,string,arrays |>\n<| c |>\nThis doesn't work if the string contains\
    \ unicode characters. For example: `count_distinct_characters('\xD6')` returns\
    \ `1` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work when the string contains\
    \ unicode characters. For example: `count_distinct_characters('\xD6')` returns\
    \ `1` instead of `2`.\n<|/ c |>\n<| a tags=php,string,arrays |>\n<code>", "  \
    \  return count(array_count_values(str_split($string)));\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,string |>\n<code>\n<?php\n$string = \"Hello World\";\n$array\
    \ = str_split($string);\n$count = count($array);\n$unique = array_count_values($array);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_merge($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = array_unique($unique);\n$unique = array_unique($unique);\n\
    $unique = array_unique($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_unique($unique);\n$unique = ", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[$char]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n</code>\n<|/ a\
    \ tags=php,string |>\n<| a dscore=2 |>\n<code>", "    $characters = array();\n\
    \    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    $character = $string[$i];\n        if (!isset($characters[$character])) {\n\
    \            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return count($characters);\n}\n", "    return count(array_unique(str_split(strtolower($string))));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the string contains numbers,\
    \ punctuation, or other non-letters.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't require the string to be lowercased.\n<|/ c |>\n<| a dscore=4 |>\n<code>",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) { return $value > 1; }));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) { return $count >\
    \ 1; }));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work if\
    \ the string contains any non-alphanumeric characters, like `'!@#$%^&*()_+=-`~[]{}<>?:\"\
    \\''`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work if you try it with a string like `'!@#$%^&*()_+=-`~[]{}<>?:\"\
    \\''`.\n<|/ c |>\n<| c |>\nIt doesn't work if you try it with a string like `'!@#$%^&*()_+=-`~[]{}<>?:\"\
    \\''`.\n<|/ c |>\n<| c |>\nIt doesn't work if you try it with a string like `'!@#$%^&*()_+=-`~[]{}<>?:\"\
    \\''`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php\n$string = \"Hello World!\"\
    ;\n$array = str_split($string);\n$count = count($array);\n$unique = array_count_values($array);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$", "    $chars = array_count_values(str_split($string));\n\
    \    return array_sum(array_slice($chars, 0, 1));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,string |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = strtolower($string);\n$string = preg_replace('/\\s/',\
    \ '', $string);\n$string = preg_replace('/[^a-z0-9]/', '', $string);\n$string\
    \ = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/\\s/', '', $string);\n$string = preg_",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct\
    \ = 0;\n    foreach ($chars as $char) {\n        $distinct += mb_strlen($char,\
    \ 'UTF-8');\n    }\n    return $count;\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $chars = array_map('strtolower', $chars);\n \
    \   return count(array_unique($chars));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like this solution, however it fails to count the characters in \"Jerry\" as\
    \ 4 distinct characters. I believe it counts \"J\" as 2 distinct characters and\
    \ \"e\" as 1 distinct character. I'm going to try and fix it myself but if you\
    \ have any suggestions I'd love to hear them.\n<|/ c |>\n<| c |>\nI fixed it by\
    \ changing `preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY)` to `preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE)`. Thanks for the\
    \ help!\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require `PREG_SPLIT_DELIM_CAPTURE`.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution without preg_split:\n<code>", " \
    \   $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\n<?php\n$string = \"Jerry\";\n$array = str_split($string);\n$count\
    \ = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_combine($unique, $unique);\n$unique = array_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique", "    $chars = preg_split('//', $string);\n    $count\
    \ = count($chars);\n    $distinct_chars = array();\n    foreach ($chars as $char)\
    \ {\n        $distinct_chars[strtolower($char)] = 1;\n    }\n    return $count\
    \ - count($distinct_chars);\n}\n", "    $characters = preg_split('//', $string);\n\
    \    $distinct_characters = array();\n    foreach ($characters as $character)\
    \ {\n        $distinct_characters[$character] = 1;\n    }\n    return count($distinct_characters);\n\
    }\n", "    $chars = array();\n    foreach (str_split($string) as $char) {\n  \
    \      $chars[$char] = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n    }\n\
    \    return count($chars);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'abc';\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_", "    $characters = array();\n    foreach (str_split($string)\
    \ as $char) {\n        $characters[strtolower($char)] = 1;\n    }\n    return\
    \ count($characters);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"Jerry\";\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = array_unique($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = array_unique($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = array_unique($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = array_unique($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = array_unique($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys(", "    $characters\
    \ = array();\n    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $character = $string[$i];\n        if (!in_array($character, $characters))\
    \ {\n            $characters[] = $character;\n        }\n    }\n    return count($characters);\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) {\n        return $value > 1;\n    }));\n}\n", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n\
    \    $distinct_chars = array_count_values($chars);\n    return $count;\n}\n",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) { return $value > 1; }));\n}\n", "    $characters = array();\n\
    \    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    $character = $string[$i];\n        if (!array_key_exists($character, $characters))\
    \ {\n            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return array_sum($characters);\n}\n", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!isset($characters[$character]))\
    \ {\n            $characters[$character] = 0;\n        }\n        $characters[$character]++;\n\
    \    }\n    return count($characters);\n}\n", "    $chars = preg_split('//u',\
    \ $string);\n    $count = count($chars);\n    $chars = array_map('strtolower',\
    \ $chars);\n    $chars = array_count_values($chars);\n    return $count;\n}\n\
    </code>\n<|/ a tags=php,string,arrays,count |>\n<| c |>\nThis doesn't work if\
    \ there are multiple spaces between words. Example: \"Hello World\" would return\
    \ \"2\" instead of \"3\".\n<|/ c |>\n<| c |>\nI added a solution that does handle\
    \ multiple spaces between words.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$string\
    \ = \"Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    </code>\n<|/ a tags=php,string,arrays,count |>\n<| c |>\nThis doesn't work if\
    \ there are multiple spaces between words. Example: \"Hello World\" would return\
    \ \"2\" instead of \"3\".\n<|/ c |>\n<| a tags=php,string,arrays,count |>\n<code>\n\
    $string = \"Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if there are multiple spaces\
    \ between words. Example: \"Hello World\" would return \"2\" instead of \"3\"\
    .\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string = \"Hello World\";\n$array = explode(\"\
    \ \", $string);\n$count = count($array);\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| a tags=php,string,arrays,count |>\n<code>\n$string = \"Hello World\"\
    ;\n$array = explode(\" \", $string);\n$count = count($array);\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=php,string,arrays,count |>\n<code>\n$string = \"Hello\
    \ World\";\n$array = explode(\" \", $string);\n$count = count($array);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,string,arrays,count |>\n<code>\n$string = \"\
    Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,string,arrays,count |>\n<code>\n$string = \"\
    Hello World\";\n$array = explode(\" \", $string);\n$", "    return count(array_unique(str_split(strtolower($string))));\n\
    }\n", "    $characters = array();\n    foreach (str_split($string) as $char) {\n\
    \        $characters[$char] = isset($characters[$char]) ? $characters[$char] +\
    \ 1 : 1;\n    }\n    return count($characters);\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $count = count($chars);\n    $distinct_chars = array();\n   \
    \ foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)] = 1;\n\
    \    }\n    return $count - count($distinct_chars);\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $count = count($chars);\n    $chars = array_map('strtolower',\
    \ $chars);\n    $chars = array_count_values($chars);\n    $count = array_sum($chars);\n\
    \    return $count;\n}\n", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n", "    $characters = preg_split('//u', $string);\n    $count = count($characters);\n\
    \    $distinct_characters = array();\n    foreach ($characters as $character)\
    \ {\n        $distinct_characters[$character] = 1;\n    }\n    return $count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $characters = array();\n   \
    \ foreach (str_split($string) as $char) {\n        $characters[$char] = isset($characters[$char])\
    \ ? $characters[$char] + 1 : 1;\n    }\n    return count($characters);\n}\n",
  "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n", "    return preg_match_all('/[a-z]+/', $string,\
    \ $matches) ? count($matches[0]) : 0;\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return array_sum(array_slice($characters, 0, 1));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nI like this solution, but I believe it would be more efficient\
    \ to just use `str_split` once, instead of calling it twice for each character\
    \ in the string.\n<|/ c |>\n<| c |>\nYes, I agree with you. I've edited my answer\
    \ to reflect that.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'abc';\n\
    $chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = $unique[$chars[0]];\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'abc';\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = $unique[$chars[0]];\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$string = 'abc';\n$chars = str_split($string);\n\
    $count = count($chars);\n$unique = array_count_values($chars);\n$unique = $unique[$chars[0]];\n\
    </code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string =\
    \ 'abc';\n$chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = $unique[$chars[0]];\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'abc';\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = $unique[$chars[0]];\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>\n$string = 'abc';\n$chars =\
    \ str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = $unique[$chars[0]];\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$string = 'abc';\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values(", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n</code>\n<|/ a tags=php,string,arrays,count |>\n<|\
    \ c |>\nThis doesn't work if there are multiple repeated characters in the string.\
    \ For example, `count_distinct_characters('abcabc')` returns `3` instead of `2`.\n\
    <|/ c |>\n<| c |>\n: I updated my answer to account for repeated characters.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are multiple repeated characters\
    \ in the string. For example, `count_distinct_characters('abcabc')` returns `3`\
    \ instead of `2`.\n<|/ c |>\n<| c |>\n: I updated my answer to account for repeated\
    \ characters.\n<|/ c |>\n<| c |>\nThis doesn't work if there are multiple repeated\
    \ characters in the string. For example, `count_distinct_characters('abcabc')`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = 'abcabc';\n\
    $array = str_split($string);\n$count = count($array);\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| c |>\nThis doesn't work if there are multiple repeated characters in\
    \ the string. For example, `count_distinct_characters('abcabc')` returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if there are multiple repeated\
    \ characters in the string. For example, `count_distinct_characters('abcabc')`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ multiple repeated characters in the string. For example, `count_distinct_characters('abcabc')`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ multiple repeated characters in the string. For example, `count_distinct_characters('abcabc')`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = 'abcabc';\n\
    $array = str_split($string);\n$count = count($array);\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| c |>\nThis doesn't work if there are multiple repeated characters in\
    \ the string. For example, `count_distinct_characters('abcabc')` returns `3` instead\
    \ of `2`.\n<|/ c |>\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n</code>\n<|/ a\
    \ tags=php,string,algorithm |>\n<| c |>\nThis doesn't work. Try it with `count_distinct_characters(\"\
    abc\")`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with `count_distinct_characters(\"\
    abc\")`.\n<|/ c |>\n<| c |>\n: It works. Try it with `count_distinct_characters(\"\
    abc\")`.\n<|/ c |>\n<| c |>\n: It works. Try it with `count_distinct_characters(\"\
    abc\")`.\n<|/ c |>\n<| c |>\n: It works. Try it with `count_distinct_characters(\"\
    abc\")`.\n<|/ c |>\n<| a tags=php,string,algorithm |>\n<code>", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n", "    return\
    \ count(array_unique(str_split(strtolower($string))));\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    return preg_match_all('/./u',\
    \ $string, $matches) ? count($matches[0]) : 0;\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $distinct_chars = array_count_values($chars);\n    return count($distinct_chars);\n\
    }\n", "    $chars = preg_split('//', $string);\n    $counts = array_count_values($chars);\n\
    \    return count($counts);\n}\n", "    return count(preg_split('//u', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars = preg_split('//', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars = array_count_values($chars);\n\
    \    return $count - array_sum($distinct_chars);\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't\
    \ work if you have a string like `'abc'` - it returns `3` instead of `2`.\n<|/\
    \ c |>\n<| c |>\n: That's a good point. I've added a fix for that case.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have a string like `'abc'` - it returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| c |>\n: Yes, that's a good point. I've added\
    \ a fix for that case.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ like `'abc'` - it returns `3` instead of `2`.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$string = 'abc';\n$count = preg_match_all('/./u', $string, $matches);\n\
    </code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work if you have a string\
    \ like `'abc'` - it returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like `'abc'` - it returns `3` instead of `2`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have a string like `'abc'` - it returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ like `'abc'` - it returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like `'abc'` - it returns `3` instead of `2`.\n<|/\
    \ c |>\n<| a |>\n<code>\n$string = 'abc';\n$count = preg_match_all('/./u', $string,\
    \ $matches);\n</code>\n<|/ a tags=php,string dscore=5 |>\n<| c |>\nThis doesn't\
    \ work if you have a string like `'abc'` - it returns `3` instead of `2`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have a string like `'abc'` - it returns\
    \ `3` instead of `2", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work if there\
    \ are non-ASCII characters in the string. For example, `count_distinct_characters('\xD6\
    ')` returns `1` instead of `2`.\n<|/ c |>\n<| c |>\n: I added a solution that\
    \ should handle non-ASCII characters.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = \"Jerry\";\n$string = preg_replace('/[^A-Za-z]/', '', $string);\n$string =\
    \ preg_replace('/[^A-Za-z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/",
  "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) { return $count >\
    \ 1; }));\n}\n</code>\n<|/ a tags=php,string,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_distinct_characters(\"abaB\")`\n<|/ c |>\n<| c |>\n\
    It works. I tested it with `count_distinct_characters(\"abaB\")` and it returned\
    \ `3`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_distinct_characters(\"\
    abaB\")`\n<|/ c |>\n<| c |>\nIt works. I tested it with `count_distinct_characters(\"\
    abaB\")` and it returned `3`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `count_distinct_characters(\"abaB\")`\n<|/ c |>\n<| a tags=php,string,algorithm\
    \ |>\n<code>\n$string = \"abaB\";\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = implode('', $unique);\necho $unique;\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This doesn't work. Try it with `count_distinct_characters(\"abaB\")`\n<|/ c |>\n\
    <| c |>\nIt works. I tested it with `count_distinct_characters(\"abaB\")` and\
    \ it returned `3`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_distinct_characters(\"\
    abaB\")`\n<|/ c |>\n<| c |>\nIt works. I tested it with `count_distinct_characters(\"\
    abaB\")` and it returned `3`.\n<|/ c |>\n<| a tags=php,string,algorithm |>\n<code>\n\
    <?php\n$string = \"abaB\";\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = implode('', $unique);\necho $unique;", "    return preg_match_all('/[[:lower:]]/',\
    \ $string) + preg_match_all('/[[:upper:]]/', $string);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if there are multiple uppercase letters in a\
    \ row. For example, `count_distinct_characters('abBcC')` returns `3` instead of\
    \ `4`.\n<|/ c |>\n<| c |>\n: That's a good point. I've added a version that doesn't\
    \ have that problem.\n<|/ c |>\n<| c |>\n: I've added a version that doesn't have\
    \ that problem.\n<|/ c |>\n<| c |>\n: I've added a version that doesn't have that\
    \ problem.\n<|/ c |>\n<| c |>\n: I've added a version that doesn't have that problem.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$string = 'abBcC';\n$array = str_split($string);\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThis doesn't work if the string contains any\
    \ non-alphanumeric characters, such as `!@#$%^&*()[]{}<>?/`\n<|/ c |>\n<| c |>\n\
    This doesn't work if the string contains any non-alphanumeric characters, such\
    \ as `!@#$%^&*()[]{}<>?/`\n<|/ c |>\n<| c |>\nThis doesn't work if the string\
    \ contains any non-alphanumeric characters, such as `!@#$%^&*()[]{}<>?/`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if the string contains any non-alphanumeric\
    \ characters, such as `!@#$%^&*()[]{}<>?/`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the string contains any non-alphanumeric characters, such as `!@#$%^&*()[]{}<>?/`\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'abcde';\n$count = preg_match_all('/./',\
    \ $string, $matches);\necho $count;\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't work if the string contains any non-alphanumeric characters, such as\
    \ `!@#$%^&*()[]{}<>?/`\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains\
    \ any non-alphanumeric characters, such as `!@#$%^&*()[]{}<>?/`\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if the string contains any non-alphanumeric characters,\
    \ such as `!@#$%^&*()[]{}<>?/`\n<|/ c |>\n<| c |>\nThis doesn't work if the string\
    \ contains any non-alphanumeric characters, such as `!@#$%^&*()[]{}<>?/`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if the string contains any non-alphanumeric\
    \ characters, such as `!@#$%^&*()[]{}<>?/`\n<|/ c |>\n<| a tags=php,string |>\n\
    <code>\n$string = 'abcde';\n$count = preg_match_all('/./', $", "    $characters\
    \ = preg_split('//u', $string);\n    $distinct_characters = array();\n    foreach\
    \ ($characters as $character) {\n        $distinct_characters[$character] = 1;\n\
    \    }\n    return count($distinct_characters);\n}\n", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($count) { return $count > 1; }));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are duplicate\
    \ characters in the string. For example, `count_distinct_characters('abba')` returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my\
    \ answer to account for that case.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work for\
    \ \"Jerry\" because it returns 4 instead of 3.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for \"Jerry\" because \"Jerry\" has 4 distinct characters, not 3.\n<|/\
    \ c |>\n<| c |>\nOh yeah, I see that now. Sorry.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for \"Jerry\" because it returns 4 instead of 3.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work for \"Jerry\" because \"Jerry\" has 4 distinct characters, not\
    \ 3.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = \"Jerry\";\n$chars = str_split($string);\n\
    $count = count($chars);\n$unique = array_count_values($chars);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_map(function($v){return $v+1;}, $unique);\n$unique = implode('', $unique);\n\
    echo $unique;", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n</code>\n<|/ a\
    \ tags=php,string |>\n<| c |>\nThis doesn't work for \"Jerry\" because \"Jerry\"\
    \ has 4 characters, not 3.\n<|/ c |>\n<| c |>\n: I missed that one. Thanks for\
    \ pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n: I updated my\
    \ answer to include a function that will count distinct characters in a string.\n\
    <|/ c |>\n<| c |>\n: Thanks for your comment. I updated my answer again to include\
    \ a function that will count distinct characters in a string.\n<|/ c |>\n<| a\
    \ tags=php,string |>\n<code>\n$string = \"Jerry\";\n$array = str_split($string);\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_filter($unique);\n$unique =\
    \ array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_", "    return count(array_unique(str_split($string)));\n}\n</code>\n\
    <|/ a tags=php,string,arrays,count |>\n<| a |>\n<code>\n$string = \"Hello World\"\
    ;\n$array = explode(\" \", $string);\n$count = count($array);\n</code>\n<|/ a\
    \ dscore=2 tags=php,string,arrays,count |>\n<| a tags=php,string,arrays,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string,arrays,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string,arrays,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    $string = \"Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    </code>\n<|/ a tags=php,string,arrays,count |>\n<| a tags=php,string,arrays,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string,arrays,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    $string = \"Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    </code>\n<|/ a tags=php,string,arrays,count |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = \"Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    </code>\n<|/ a tags=php,string,arrays,count |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = \"Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    </code>\n<|/ a tags=php,string,array", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count =\
    \ count($chars);\n    $distinct_chars = array();\n    foreach ($chars as $char)\
    \ {\n        $distinct_chars[$char] = 1;\n    }\n    return $count - count($distinct_chars);\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!isset($characters[$character]))\
    \ {\n            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return array_sum($characters);\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Hello World\";\n$string = strtolower($string);\n\
    $string = preg_replace('/[^a-z]/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars = array();\n    $char_count\
    \ = 0;\n    foreach (str_split($string) as $char) {\n        $chars[$char] = $chars[$char]\
    \ + 1;\n        $char_count += 1;\n    }\n    return $char_count;\n}\n", "   \
    \ $chars = preg_split('//', $string);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n</code>\n<|/ a\
    \ tags=php,string,arrays |>\n<| c |>\nThis doesn't work if the string contains\
    \ multiple consecutive repeated characters, e.g. `'abbccc'` returns `4` instead\
    \ of `3`.\n<|/ c |>\n<| c |>\nYes, I agree. I've added a solution that doesn't\
    \ require the string to be sorted.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = \"abbccc\";\n$array = str_split($string);\n$count = count($array);\n$unique\
    \ = array_count_values($array);\n$unique = array_filter($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_values(array_count_values($unique));\n$unique = array_keys(array_count_values($unique));\n\
    $unique = array_values(array_keys(array_count_values($unique)));\n$unique = array_count_values(array_keys(array_count_values($unique)));\n\
    $unique = array_count_values(array_values(array_keys(array_count_values($unique))));\n\
    $unique = array_count_values(array_values(array_keys(array_count_values($unique))));\n\
    $unique = array_count_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_count_values(array_values(array_values(array_values(array_values(array_keys(array_count_values($unique)))));\n\
    $unique = array_", "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//u',\
    \ $string);\n    $chars = array_map('strtolower', $chars);\n    $chars = array_count_values($chars);\n\
    \    return count(array_filter($chars, function($count) {\n        return $count\
    \ > 1;\n    }));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't\
    \ work if the string contains unicode characters. For example: count_distinct_characters('\xC9\
    ') returns 1 instead of 2\n<|/ c |>\n<| c |>\n: I updated my answer to include\
    \ a function that will handle unicode characters.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the string contains unicode characters. For example: count_distinct_characters('\xC9\
    ') returns 1 instead of 2\n<|/ c |>\n<| c |>\n: I updated my answer to include\
    \ a function that will handle unicode characters.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the string contains unicode characters. For example: count_distinct_characters('\xC9\
    ') returns 1 instead of 2\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string\
    \ = 'abc def ghi jkl mno pqr stu vwx yz';\n$chars = preg_split('//u', $string);\n\
    $chars = array_map('strtolower', $chars);\n$chars = array_count_values($chars);\n\
    $chars = array_filter($chars, function($count) {\n    return $count > 1;\n});\n\
    $count = count($chars);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work\
    \ if the string contains unicode characters. For example: count_distinct_characters('\xC9\
    ') returns 1 instead of 2\n<|/ c |>\n<| c |>\nThis doesn't work if the string\
    \ contains unicode characters. For example: count_distinct_characters('\xC9')\
    \ returns 1 instead of 2\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n$string\
    \ = 'abc def ghi jkl mno pqr stu vwx yz';\n$chars = preg_split('//u', $string);\n\
    $chars = array_map('strtolower', $chars);\n$chars = array_count_values($chars);\n\
    $chars = array_filter($chars, function($count) {\n    return $count > 1;\n});\n\
    $count = count($chars);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work\
    \ if the string contains unicode characters. For example: ", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = array();\n    foreach (str_split($string) as $char) {\n  \
    \      $chars[$char] = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n    }\n\
    \    return count($chars);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$string = \"abcde\";\n$chars = str_split($string);\n$chars\
    \ = array_count_values($chars);\n$chars = array_filter($chars);\n$chars = array_keys($chars);\n\
    $chars = array_values($chars);\n$chars = array_unique($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $chars = array_keys($chars);\n$chars = array_values($chars);\n$chars = array_flip($chars);\n\
    $char", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!isset($characters[$character]))\
    \ {\n            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return count($characters);\n}\n", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| c |>\nI like your solution, but I believe\
    \ it would be better to use a regex to count the distinct characters, rather than\
    \ a loop. `preg_match_all('/./u', $string, $chars);` would return an array of\
    \ all distinct characters, while `count($chars[0])` would return the number of\
    \ distinct characters. I believe this would be faster, and more efficient.\n<|/\
    \ c |>\n<| c |>\nI agree, that would be better. I've edited my answer to include\
    \ your suggestion.\n<|/ c |>\n<| c |>\nI like your solution, but I believe it\
    \ would be better to use a regex to count the distinct characters, rather than\
    \ a loop. `preg_match_all('/./u', $string, $chars);` would return an array of\
    \ all distinct characters, while `count($chars[0])` would return the number of\
    \ distinct characters. I believe this would be faster, and more efficient.\n<|/\
    \ c |>\n<| c |>\nI agree, that would be better. I've edited my answer to include\
    \ your suggestion.\n<|/ c |>\n<| c |>\nI like your solution, but I believe it\
    \ would be better to use a regex to count the distinct characters, rather than\
    \ a loop. `preg_match_all('/./u', $string, $chars);` would return an array of\
    \ all distinct characters, while `count($chars[0])` would return the number of\
    \ distinct characters. I believe this would be faster, and more efficient.\n<|/\
    \ c |>\n<| a tags=php,string |>\n<code>\n<?php", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>", " \
    \   $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string |>\n<code>\n$string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n$string = str_split($string);\n$string = array_unique($string);\n$string =\
    \ implode($string);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string |>\n<code>\n\
    $string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n$string = str_split($string);\n$string\
    \ = array_unique($string);\n$string = implode($string);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n$string\
    \ = str_split($string);\n$string = array_unique($string);\n$string = implode($string);\n\
    </code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string =\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n$string = str_split($string);\n$string = array_unique($string);\n\
    $string = implode($string);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n$string = str_split($string);\n\
    $string = array_unique($string);\n$string = implode($string);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n$string = str_split($string);\n$string = array_unique($string);\n$string =\
    \ implode($string);\n</code>\n<|/ a tags=php,string |>\n<| a dscore=1 |>\n<code>\n\
    $string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n$string = str_split($string);\n$string\
    \ = array_unique($string);\n$string = implode($string);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = \"ABCDEFGHIJKLMNOPQRSTUVW", "    $chars\
    \ = preg_split('//', $string);\n    $counts = array_count_values($chars);\n  \
    \  return count($counts);\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string,algorithm |>\n\
    <code>", "    return count(array_count_values(str_split($string)));\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,string |>\n<code>\n$string = \"Jerry\";\n$array\
    \ = str_split($string);\n$count = count($array);\n$unique = array_count_values($array);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = array_map(function($v){return\
    \ $v[0];}, $unique);\n$unique = array_unique($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_map(function($v){return $v[0];}, $unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_map(function($v){return $v[0];}, $unique);\n$unique = array_unique($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = array_map(function($v){return\
    \ $v[0];}, $unique);\n$unique = array_unique($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_map(function($v){return $v[0];}, $unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_map(function($v){return $v[0];}, $unique);\n$unique = array_unique($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = array_map(function($v){return\
    \ $v[0];}, $unique);\n$unique = array_unique($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_map(function($v){return $v[0];}, $unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_map(function($v){return $v[0];}, $unique);\n$unique = array_unique($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = array_map(function($v){return\
    \ $v[0];}, $unique);\n$unique = array_unique($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_map(function($v){return $v[0];}, $unique);\n$unique\
    \ = array_unique($unique);\n$", "    $chars = preg_split('//u', $string);\n  \
    \  $count = count($chars);\n    $distinct_chars = array();\n    foreach ($chars\
    \ as $char) {\n        $distinct_chars[strtolower($char)] = 1;\n    }\n    return\
    \ $count - count($distinct_chars);\n}\n</code>\n<|/ a tags=php,string |>\n<| c\
    \ |>\nThis doesn't work if the string contains unicode characters. For example,\
    \ it fails on \"\xC3\xA9\".\n<|/ c |>\n<| c |>\n: It fails on \"\xC3\xA9\" because\
    \ it's not an ASCII character. ASCII only has 128 characters. Unicode has more\
    \ than that. Unicode has more than 256 characters. Unicode has more than 65536\
    \ characters. Unicode has more than 16777216 characters. Unicode has more than\
    \ 4294967296 characters. Unicode has more than 536870912 characters. Unicode has\
    \ more than 1073741824 characters. Unicode has more than 2147483648 characters.\
    \ Unicode has more than 4294967296 characters. Unicode has more than more than\
    \ 4294967296 characters. Unicode has more than more than 4294967296 characters.\
    \ Unicode has more than more than 4294967296 characters. Unicode has more than\
    \ more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 characters. Unicode has more than more than 4294967296\
    \ characters. Unicode has more than more than 4294967296 characters. Unicode has\
    \ more than more than 4294967296 ", "    $chars = preg_split('//', $string);\n\
    \    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string,algorithm |>\n<| c |>\nThis doesn't work if\
    \ there are multiple spaces between words. For example, `count_distinct_characters(\"\
    a b\")` returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, it does. Try it out\
    \ yourself. It works.\n<|/ c |>\n<| c |>\nOh sorry, I missed that case. My bad.\n\
    <|/ c |>\n<| a tags=php,string,algorithm |>\n<code>", "    $chars = preg_split('//',\
    \ $string);\n    $counts = array_count_values($chars);\n    return count($counts);\n\
    }\n", "    $chars = array();\n    $char_count = array();\n    foreach (str_split($string)\
    \ as $char) {\n        $chars[$char] = true;\n        $char_count[$char] = isset($char_count[$char])\
    \ ? $char_count[$char] + 1 : 1;\n    }\n    return count(array_keys($chars));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are duplicate characters\
    \ in the string. For example, \"abcabc\" returns 3, when it should be 4.\n<|/\
    \ c |>\n<| c |>\nI added a version that does handle duplicate characters.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if there are duplicate characters in the string.\
    \ For example, \"abcabc\" returns 3, when it should be 4.\n<|/ c |>\n<| c |>\n\
    I added a version that does handle duplicate characters.\n<|/ c |>\n<| c |>\n\
    This doesn't work if there are duplicate characters in the string. For example,\
    \ \"abcabc\" returns 3, when it should be 4.\n<|/ c |>\n<| a dscore=4 |>\n<code>",
  "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    return count(array_unique(str_split(strtolower($string))));\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThis doesn't work if you have a string like\
    \ \"abcABC\" which should return 3 distinct characters, it returns 4 distinct\
    \ characters.\n<|/ c |>\n<| c |>\nI agree with you, my answer was more of a \"\
    quick and dirty\" solution. I'll update my answer with something more robust.\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>", "    $chars = preg_split('//', $string);\n\
    \    return count(array_unique($chars));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return array_sum(array_slice($characters, 0, 1));\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks so much! I appreciate your help!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Glad I could help!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = \"Hello World!\"\
    ;\n$chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = array_slice($unique, 0, 1);\n\
    $unique = array_slice($unique, 0, 1);", "    $chars = preg_split('//', $string);\n\
    \    $count = count($chars);\n    $distinct_chars = array();\n    foreach ($chars\
    \ as $char) {\n        $distinct_chars[$char] = 1;\n    }\n    return $count -\
    \ count($distinct_chars);\n}\n", "    $chars = preg_split('//', $string);\n  \
    \  $count = count($chars);\n    $distinct_chars = array();\n    foreach ($chars\
    \ as $char) {\n        $distinct_chars[] = strtolower($char);\n    }\n    return\
    \ $count;\n}\n", "    $characters = array();\n    foreach (str_split($string)\
    \ as $character) {\n        $characters[$character] = isset($characters[$character])\
    \ ? $characters[$character] + 1 : 1;\n    }\n    return count($characters);\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count\
    \ = count($chars);\n    $distinct_chars = array_count_values($chars);\n    return\
    \ $distinct_chars[$string];\n}\n", "    $chars = preg_split('//', $string);\n\
    \    $count = count($chars);\n    $distinct_chars = array();\n    foreach ($chars\
    \ as $char) {\n        $distinct_chars[strtolower($char)] = 1;\n    }\n    return\
    \ $count - count($distinct_chars);\n}\n</code>\n<|/ a tags=php,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"Hello World!\";\n$array = str_split($string);\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_values($unique);\n$unique =\
    \ array_count_values($unique);\n$unique = array_filter($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_values($unique);\n$unique = array_count_values($unique);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_values($unique);\n$unique =\
    \ array_count_values($unique);\n$unique = array_filter($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_values($unique);\n$unique = array_count_values($unique);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_filter($unique);", "    $chars = preg_split('//u', $string);\n    $chars\
    \ = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work if there\
    \ are non-ASCII characters in the string.\n<|/ c |>\n<| c |>\n: It works fine\
    \ for me. Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\n\
    : It doesn't work because `preg_split` doesn't support multibyte characters. Use\
    \ `preg_match_all` instead.\n<|/ c |>\n<| c |>\n: I added a solution that should\
    \ work for multibyte characters.\n<|/ c |>\n<| c |>\n: Thanks, I didn't know about\
    \ that limitation.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string = 'Hello World';\n\
    $chars = preg_split('//u', $string);\n$chars = array_map('strtolower', $chars);\n\
    $chars = array_unique($chars);\n$count = count($chars);\n</code>\n<|/ a tags=php,string,regex\
    \ |>\n<| c |>\nThis doesn't work if there are non-ASCII characters in the string.\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Can you give an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\n: It doesn't work because `preg_split` doesn't support\
    \ multibyte characters. Use `preg_match_all` instead.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = 'Hello World';\n$chars = preg_split('//u', $string);\n\
    $chars = array_map('strtolower', $chars);\n$chars = array_unique($chars);\n$count\
    \ = count($chars);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if\
    \ there are non-ASCII characters in the string.\n<|/ c |>\n<| c |>\n: It works\
    \ fine for me. Can you give an example where it doesn't work?\n<|/ c |>\n<| c\
    \ |>\n: It doesn't work because `preg_split` doesn't support multibyte characters.\
    \ Use `preg_match_all` instead.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string =\
    \ 'Hello World';\n$chars = preg_split('//u', $string);\n$chars = array_map('strto",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array();\n    foreach (str_split($string) as $character)\
    \ {\n        $characters[$character] = isset($characters[$character]) ? $characters[$character]\
    \ + 1 : 1;\n    }\n    return count($characters);\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $count = count($chars);\n    $distinct_chars = array();\n   \
    \ foreach ($chars as $char) {\n        $distinct_chars[$char] = 1;\n    }\n  \
    \  return $count;\n}\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($chars));\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| a dscore=1 |>\n<code>\n$string = \"abc\";\n$chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n$count = count($chars);\n$unique = array_unique($chars);\n\
    $uniqueCount = count($unique);\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"abc\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $count = count($chars);\n$unique = array_unique($chars);\n$uniqueCount = count($unique);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>\n$string = \"abc\"\
    ;\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n$count = count($chars);\n\
    $unique = array_unique($chars);\n$uniqueCount = count($unique);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,string |>\n<code>\n$string = \"abc\";\n$chars =\
    \ preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n$count = count($chars);\n\
    $unique = array_unique($chars);\n$uniqueCount = count($unique);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = \"abc\";\n$chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n$count = count($chars);\n$unique = array_unique($chars);\n\
    $uniqueCount = count($unique);\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"abc\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $count = count($chars);\n$unique = array_unique($chars);\n$uniqueCount = count($unique);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>\n$string = \"abc\"\
    ;\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n$count = count($chars);\n\
    $unique = array_unique($chars);\n", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($v) { return $v > 1; }));\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution. One thing I noticed\
    \ is that it counts duplicate characters as one. For example, `count_distinct_characters(\"\
    abba\")` returns `3` instead of `4`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks\
    \ for pointing it out. :)\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string\
    \ = 'abba';\n$chars = str_split($string);\n$count = count($chars);\n$unique =\
    \ array_count_values($chars);\n$unique = array_filter($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_combine($unique, $unique);\n\
    $unique = array_merge($unique, array_fill(0, $count, $unique));\n$unique = array_flip($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_combine($unique,\
    \ $unique);\n$unique = array_merge($unique, array_fill(0, $count, $unique));\n\
    $unique = array_flip($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_combine($unique, $unique);\n$unique = array_merge($unique, array_fill(0,\
    \ $count, $unique));\n$unique = array_flip($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_combine($unique, $unique);\n\
    $unique = array_merge($unique, array_fill(0, $count, $unique));\n$unique = array_flip($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_combine($unique,\
    \ $unique);\n$unique = array_merge($unique, array_fill(0, $count, $unique));\n\
    $unique = array_flip($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_combine($unique, $unique);\n$unique = array_merge($unique, array_fill(0,\
    \ $count, $unique));\n$unique = array_flip($unique);\n$unique = array_keys($unique);\n\
    $unique = ", "    return preg_match_all('/[[:upper:]]/', $string) + preg_match_all('/[[:lower:]]/',\
    \ $string);\n}\n", "    $chars = preg_split('//', $string);\n    $count = count($chars);\n\
    \    $chars = array_map('strtolower', $chars);\n    $chars = array_unique($chars);\n\
    \    return $count;\n}\n", "    $characters = array();\n    $length = strlen($string);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $character = $string[$i];\n \
    \       if (!isset($characters[$character])) {\n            $characters[$character]\
    \ = 1;\n        } else {\n            $characters[$character]++;\n        }\n\
    \    }\n    return count($characters);\n}\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate characters in the string.\n\
    <|/ c |>\n<| c |>\nIt does work, if you read the question carefully. The OP wants\
    \ to count the number of distinct characters, regardless of case.\n<|/ c |>\n\
    <| c |>\nI read it carefully, and I see that your answer doesn't work if there\
    \ are duplicate characters in the string. Your code counts how many times each\
    \ character appears in the string. That's not what the OP wants.\n<|/ c |>\n<|\
    \ c |>\nI see what you mean. I've updated my answer to account for that.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if there are duplicate characters in the string.\
    \ Try it with `count_distinct_characters(\"abBc\")`.\n<|/ c |>\n<| a tags=php,string,arrays\
    \ |>\n<code>\n$string = \"abBc\";\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $count = count($chars);\n    $distinct_chars = array();\n    foreach ($chars\
    \ as $char) {\n        $distinct_chars[strtolower($char)] = 1;\n    }\n    return\
    \ $count - count($distinct_chars);\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars\
    \ = array_count_values($chars);\n    return $distinct_chars[$string];\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>", "    $chars = preg_split('//', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars = array_count_values($chars);\n\
    \    return $count + array_sum($distinct_chars);\n}\n", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($value) { return $value > 1; }));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work if the string contains multiple repeating characters.\
    \ For example, `count_distinct_characters('abcabc')` returns `3` instead of `2`.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `2` for `abcabc`.\n\
    <|/ c |>\n<| c |>\n: I tested it myself and it returns `2` for `abcabc`.\n<|/\
    \ c |>\n<| c |>\n: It returns `2` for `abcabc` because `abcabc` contains two `c`s.\
    \ If you want it to return `3` for `abcabc`, then you need to change `return $count\
    \ > 1;` to `return $count > 2 && $count < 3;`.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer to include a solution that will work for strings with multiple repeating\
    \ characters.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n", "    $characters = array();\n\
    \    foreach (str_split($string) as $char) {\n        $characters[strtolower($char)]\
    \ = 1;\n    }\n    return count($characters);\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars = preg_split('//', $string);\n\
    \    $distinct_chars = array();\n    foreach ($chars as $char) {\n        $distinct_chars[$char]\
    \ = 1;\n    }\n    return count($distinct_chars);\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n", "    return preg_match_all('/[a-z]+/', $string, $matches) ? count($matches[0])\
    \ : 0;\n}\n", "    $chars = preg_split('//u', $string);\n    $count = count($chars);\n\
    \    $distinct_chars = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string,algorithm |>\n<code>\n<?php\n\
    $string = \"Jerry\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $chars = array_unique($chars);\n$chars = array_count_values($chars);\n$chars =\
    \ array_keys($chars);\n$chars = array_slice($chars, 0, 1);\n$chars = array_slice($chars,\
    \ 1);\n$chars = array_map(function($v){return $v[0];}, $chars);\n$chars = implode('',\
    \ $chars);\necho $chars;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"Jerry\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $chars = array_unique($chars);\n$chars = array_count_values($chars);\n$chars =\
    \ array_keys($chars);\n$chars = array_slice($chars, 0, 1);\n$chars = array_slice($chars,\
    \ 1);\n$chars = array_map(function($v){return $v[0];}, $chars);\n$chars = implode('',\
    \ $chars);\necho $chars;\n</code>\n<|/ a tags=php,string,algorithm |>\n<| a tags=php,string,algorithm\
    \ |>\n<code>\n<?php\n$string = \"Jerry\";\n$chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n$chars = array_unique($chars);\n$chars = array_count_values($chars);\n\
    $chars = array_keys($chars);\n$chars = array_slice($chars, 0, 1);\n$chars = array_slice($chars,\
    \ 1);\n$chars = array_map(function($v){return $v[0];}, $chars);\n$chars = implode('',\
    \ $chars);\necho $chars;\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string,algorithm\
    \ |>\n<code>\n<?php\n$string = \"Jerry\";\n$chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n$chars = array_unique($chars);\n$chars = array_count_values($chars);\n\
    $chars = array_keys($chars);\n$chars = array_slice($chars, 0, ", "    $chars =\
    \ preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using regex?\n<|/ c |>\n<| c |>\nI added a non-regex solution\n<|/ c |>\n<|\
    \ c |>\nI added a non-regex solution\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'abcABC';\n$string = strtolower($string);\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\n$string = preg_replace('/[^A-Z]/', '', $string);\n$string = preg_replace('/[^0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\-]/', '', $string);\n\
    $string = preg_replace('/[^a-zA-Z0-9_\\-\\.]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\\
    -\\.\\s]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/', '', $string);\n\
    $string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\\
    -\\.\\s]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/', '', $string);\n\
    $string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\\
    -\\.\\s]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/', '', $string);\n\
    $string = preg_replace('/[^a-zA-Z0-9_\\-\\.\\s]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9_\\\
    -\\.", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n   \
    \ return count(array_unique($chars));\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if there are multiple spaces between words. For example, `count_distinct_characters(\"\
    abc def\")` returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with multiple spaces.\n<|/ c |>\n<| c |>\nThis doesn't work if there\
    \ are multiple spaces between words. For example, `count_distinct_characters(\"\
    abc def\")` returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with multiple spaces.\n<|/ c |>\n<| c |>\nThis doesn't work if there\
    \ are multiple spaces between words. For example, `count_distinct_characters(\"\
    abc def\")` returns `2` instead of `3`.\n<|/ c |>\n<| a dscore=5 |>\n<code>",
  "    $characters = array();\n    foreach (str_split($string) as $char) {\n     \
    \   $characters[$char] = isset($characters[$char]) ? $characters[$char] + 1 :\
    \ 1;\n    }\n    return count($characters);\n}\n", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n", "    $chars\
    \ = preg_split('//', $string);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n\
    \    $distinct_chars = array();\n    foreach ($chars as $char) {\n        $distinct_chars[$char]\
    \ = isset($distinct_chars[$char]) ? $distinct_chars[$char] + 1 : 1;\n    }\n \
    \   return $count;\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return array_sum(array_slice($characters, 0, 1));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\n<?php\n$string = \"Jerry\";\n$array = str_split($string);\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $unique);\n$unique = array_values($unique);\n$unique\
    \ = array_unique($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_combine($unique, $", "    $chars = preg_split('//u', $string);\n   \
    \ $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work correctly for\
    \ multi-byte characters. For example, `count_distinct_characters('\xC0\xC1\xC2\
    \xC3\xC4\xC5\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD2\xD3\xD4\xD5\xD6\xD9\xDA\xDB\
    \xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\
    \xF2\xF3\xF4\xF5\xF6\xF9\xFA\xFB\xFC\xFD\xFE\xFF')` returns `8` instead of `12`.\n\
    <|/ c |>\n<| c |>\nI added a solution that works with multi-byte characters. I\
    \ tested it on PHP 7.1.\n<|/ c |>\n<| c |>\nI tested it on PHP 7.1.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 7.1.\n<|/ c |>\n<| c |>\nI tested it on PHP 7.1.\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n", "    $characters\
    \ = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n", "    $chars\
    \ = array();\n    foreach (str_split($string) as $char) {\n        $chars[$char]\
    \ = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n    }\n    return count($chars);\n\
    }\n", "    return count(array_unique(str_split(strtolower($string))));\n}\n</code>\n\
    <|/ a tags=php,string,algorithm |>\n<| c |>\nThis doesn't work. `count_distinct_characters(\"\
    Jerry\")` returns `4` instead of `3`.\n<|/ c |>\n<| c |>\n: I tested it and it\
    \ works fine for me. `count_distinct_characters(\"Jerry\")` returns `3`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine for me. `count_distinct_characters(\"\
    Jerry\")` returns `3`.\n<|/ c |>\n<| c |>\n: I tested it and it works fine for\
    \ me. `count_distinct_characters(\"Jerry\")` returns `3`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. `count_distinct_characters(\"Jerry\")` returns\
    \ `3`.\n<|/ c |>\n<| a tags=php,string,algorithm |>\n<code>\n<?php", "    $chars\
    \ = array();\n    foreach (str_split($string) as $char) {\n        $chars[$char]\
    \ = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n    }\n    return count(array_keys($chars));\n\
    }\n", "    $characters = array();\n    foreach (str_split($string) as $char) {\n\
    \        $characters[$char] = isset($characters[$char]) ? $characters[$char] +\
    \ 1 : 1;\n    }\n    return count($characters);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>", "    $chars = array_count_values(str_split($string));\n\
    \    return array_sum(array_slice($chars, 0, 1));\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $count = count($chars);\n    $distinct_chars = array();\n   \
    \ foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)] = 1;\n\
    \    }\n    return $count - count($distinct_chars);\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $count = count($chars);\n    $distinct_chars = array();\n   \
    \ foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)] = 1;\n\
    \    }\n    return $count - count($distinct_chars);\n}\n", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!isset($characters[$character]))\
    \ {\n            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return count(array_keys($characters));\n}\n", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $characters[$string[$i]] = $characters[$string[$i]]\
    \ ?? 0;\n        $characters[$string[$i]] += 1;\n    }\n    return count($characters);\n\
    }\n", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have a string like `'a'` - it returns `2` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\nI believe this would return `1` for `'a'` because\
    \ `'a'` is only 1 character long.\n<|/ c |>\n<| c |>\nNo, `'a'` is 2 characters\
    \ long. `'a'` and `'A'` are 2 different characters. `'a'` and `'A'` have different\
    \ counts of distinct characters.\n<|/ c |>\n<| c |>\nI see, I misunderstood your\
    \ question. I've updated my answer to reflect your comments.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'abc';\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop($unique);\n$unique = array_pop($unique);\n$unique = array_pop($unique);\n\
    $unique = array_pop", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
