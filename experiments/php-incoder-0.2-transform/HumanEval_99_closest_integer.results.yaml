language: php
name: HumanEval_99_closest_integer
results:
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyxdbuic4.php on line 46

    '
  timestamp: 1659731100
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value/abs($value));\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqye2mmbq.php:23\n\
    Stack trace:\n#0 /tmp/tmpqye2mmbq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqye2mmbq.php\
    \ on line 23\n"
  timestamp: 1659731100
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpej3_p7eg.php on line 59

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = round($value);\n    if ($closest == $value)\
    \ {\n        return $closest;\n    }\n    $difference = abs($value - $closest);\n\
    \    if ($difference < 0.5) {\n        return $closest;\n    }\n    return $closest;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1lj0yhx.php:32\n\
    Stack trace:\n#0 /tmp/tmps1lj0yhx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps1lj0yhx.php\
    \ on line 32\n"
  timestamp: 1659731100
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value -\
    \ 1) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value\
    \ + 1) ? 0 : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw244z4f.php:28\n\
    Stack trace:\n#0 /tmp/tmpdw244z4f.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdw244z4f.php\
    \ on line 28\n"
  timestamp: 1659731100
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nxf9sls.php:29\n\
    Stack trace:\n#0 /tmp/tmp8nxf9sls.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8nxf9sls.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc1pi43fk.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxffnirxn.php:32\n\
    Stack trace:\n#0 /tmp/tmpxffnirxn.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxffnirxn.php\
    \ on line 32\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxffnirxn.php:32\n\
    Stack trace:\n#0 /tmp/tmpxffnirxn.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxffnirxn.php\
    \ on line 32\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value && $closest_integer\
    \ > 0) {\n    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2v3kq9m.php:30\n\
    Stack trace:\n#0 /tmp/tmpp2v3kq9m.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpp2v3kq9m.php\
    \ on line 30\n"
  timestamp: 1659731100
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_hov73k.php:30\n\
    Stack trace:\n#0 /tmp/tmpk_hov73k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpk_hov73k.php\
    \ on line 30\n"
  timestamp: 1659731100
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1coeheni.php:23\n\
    Stack trace:\n#0 /tmp/tmp1coeheni.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1coeheni.php\
    \ on line 23\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy5s7g_wy.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8pfw6l.php:30\n\
    Stack trace:\n#0 /tmp/tmp0o8pfw6l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0o8pfw6l.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fttxx35.php:29\n\
    Stack trace:\n#0 /tmp/tmp3fttxx35.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3fttxx35.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpght6o_ba.php:29\n\
    Stack trace:\n#0 /tmp/tmpght6o_ba.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpght6o_ba.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it down\n  $value = floatval($value);\n  $value\
    \ = round($value, 0);\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  if ($value == $value + 1) {\n    $value = $value - 1;\n\
    \  }\n  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjrshiij.php:31\n\
    Stack trace:\n#0 /tmp/tmpgjrshiij.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgjrshiij.php\
    \ on line 31\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp738eqo8g.php:30\n\
    Stack trace:\n#0 /tmp/tmp738eqo8g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp738eqo8g.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value, 2)) {\n    return round($value, 2);\n  }\n\n  // If\
    \ the given number is equidistant from two integers, round it away\n  // from\
    \ zero.\n  if ($value == round($value, 3)) {\n    return round($value, 3);\n \
    \ }\n\n  // If the given number is equidistant from two integers, round it away\n\
    \  // from zero.\n  if ($value == round($value, 4)) {\n    return round($value,\
    \ 4);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 5)) {\n    return round($value,\
    \ 5);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 6)) {\n    return round($value,\
    \ 6);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 7)) {\n    return round($value,\
    \ 7);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 8)) {\n    return round($value,\
    \ 8);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 9)) {\n    return round($value,\
    \ 9);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 10)) {\n    return round($value,\
    \ 10);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 11)) {\n    return round($value,\
    \ 11);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 12)) {\n    return round($value,\
    \ 12);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 13)) {\n    return round($value,\
    \ 13);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmpgmolx2_q.php on line 108

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value\
    \ ? $closest_integer : $value);\n  $closest_integer = ($closest_integer < $value\
    \ ? $value : $closest_integer);\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0n0o8rsg.php:28\n\
    Stack trace:\n#0 /tmp/tmp0n0o8rsg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0n0o8rsg.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float.\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero.\n  if ($value % 1 == 0) {\n    return\
    \ round($value);\n  }\n  // If the value is equidistant from three integers, round\
    \ it away from zero.\n  if ($value % 2 == 0) {\n    return round($value, -2);\n\
    \  }\n  // If the value is equidistant from four integers, round it away from\
    \ zero.\n  if ($value % 3 == 0) {\n    return round($value, -3);\n  }\n  // If\
    \ the value is equidistant from five integers, round it away from zero.\n  if\
    \ ($value % 4 == 0) {\n    return round($value, -4);\n  }\n  // If the value is\
    \ equidistant from six integers, round it away from zero.\n  if ($value % 5 ==\
    \ 0) {\n    return round($value, -5);\n  }\n  // If the value is equidistant from\
    \ seven integers, round it away from zero.\n  if ($value % 6 == 0) {\n    return\
    \ round($value, -6);\n  }\n  // If the value is equidistant from eight integers,\
    \ round it away from zero.\n  if ($value % 7 == 0) {\n    return round($value,\
    \ -7);\n  }\n  // If the value is equidistant from nine integers, round it away\
    \ from zero.\n  if ($value % 8 == 0) {\n    return round($value, -8);\n  }\n \
    \ // If the value is equidistant from ten integers, round it away from zero.\n\
    \  if ($value % 9 == 0) {\n    return round($value, -9);\n  }\n  // If the value\
    \ is equidistant from eleven integers, round it away from zero.\n  if ($value\
    \ % 10 == 0) {\n    return round($value, -10);\n  }\n  // If the value is equidistant\
    \ from twelve integers, round it away from zero.\n  if ($value % 11 == 0) {\n\
    \    return round($value, -11);\n  }\n  // If the value is equidistant from thirteen\
    \ integers, round it away from zero.\n  if ($value % 12 == 0) {\n    return round($value,\
    \ -12);\n  }\n  // If the value is equidistant from fourteen integers, round it\
    \ away from zero.\n  if ($value % 13 == 0) {\n    return round($value, -13);\n\
    \  }\n  // If the value is equidistant from fifteen integers, round it away from\
    \ zero.\n  if ($value % 14 == 0) {\n    return round($value, -14);\n  }\n  //\
    \ If the value is equidistant from sixteen integers, round it away from zero.\n\
    \  if ($value % \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkvd6vga7.php on line 76

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  $closest_integer = ($closest_integer == $value\
    \ ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpycgfsq90.php
    on line 46

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fttxx35.php:29\n\
    Stack trace:\n#0 /tmp/tmp3fttxx35.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3fttxx35.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / $value, 0) * $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bam2wrb.php:23\n\
    Stack trace:\n#0 /tmp/tmp4bam2wrb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4bam2wrb.php\
    \ on line 23\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n\
    \  }\n\n  // If the given value is a float, convert it to a string and strip the\n\
    \  // decimal part. Then use that string to create a float and return\n  // the\
    \ closest integer.\n  $value = floatval($value);\n  $value = str_replace(',',\
    \ '', $value);\n  $value = round($value, 0);\n  return intval($value);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,rounding |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpu1jkv2x0.php
    on line 29

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value % 1 == 0) {\n    $value\
    \ = round($value);\n  }\n  // Return the value\n  return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltgzijzb.php:31\n\
    Stack trace:\n#0 /tmp/tmpltgzijzb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpltgzijzb.php\
    \ on line 31\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ < $value ? $closest_integer : $value);\n    return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgizw4e3.php:28\n\
    Stack trace:\n#0 /tmp/tmptgizw4e3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptgizw4e3.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ > $value ? $value : $closest_integer;\n    return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1forq7b3.php:28\n\
    Stack trace:\n#0 /tmp/tmp1forq7b3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1forq7b3.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = abs($value - $closest);\n  foreach ($this\
    \ as $value) {\n    $diff = $value - $closest;\n    if ($diff < $closestDiff)\
    \ {\n      $closestDiff = $diff;\n      $closest = $value;\n    }\n  }\n  return\
    \ $closest;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Using $this when not in object context in\
    \ /tmp/tmpda00b0ai.php:19\nStack trace:\n#0 /tmp/tmpda00b0ai.php(29): closest_integer(10)\n\
    #1 /tmp/tmpda00b0ai.php(33): candidate('10')\n#2 /tmp/tmpda00b0ai.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpda00b0ai.php on line 19\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyna5nri.php:28\n\
    Stack trace:\n#0 /tmp/tmplyna5nri.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplyna5nri.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3oll7xu.php:27\n\
    Stack trace:\n#0 /tmp/tmpm3oll7xu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm3oll7xu.php\
    \ on line 27\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / $value, 0) * $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5z8zhuyk.php:24\n\
    Stack trace:\n#0 /tmp/tmp5z8zhuyk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5z8zhuyk.php\
    \ on line 24\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceSqr = null;\n\
    \  $closestDistanceSqr_prev = null;\n  $closestDistanceSqr_next = null;\n  $closestDistanceSqr_next2\
    \ = null;\n  $closestDistanceSqr_next3 = null;\n  $closestDistanceSqr_next4 =\
    \ null;\n  $closestDistanceSqr_next5 = null;\n  $closestDistanceSqr_next6 = null;\n\
    \  $closestDistanceSqr_next7 = null;\n  $closestDistanceSqr_next8 = null;\n  $closestDistanceSqr_next9\
    \ = null;\n  $closestDistanceSqr_next10 = null;\n  $closestDistanceSqr_next11\
    \ = null;\n  $closestDistanceSqr_next12 = null;\n  $closestDistanceSqr_next13\
    \ = null;\n  $closestDistanceSqr_next14 = null;\n  $closestDistanceSqr_next15\
    \ = null;\n  $closestDistanceSqr_next16 = null;\n  $closestDistanceSqr_next17\
    \ = null;\n  $closestDistanceSqr_next18 = null;\n  $closestDistanceSqr_next19\
    \ = null;\n  $closestDistanceSqr_next20 = null;\n  $closestDistanceSqr_next21\
    \ = null;\n  $closestDistanceSqr_next22 = null;\n  $closestDistanceSqr_next23\
    \ = null;\n  $closestDistanceSqr_next24 = null;\n  $closestDistanceSqr_next25\
    \ = null;\n  $closestDistanceSqr_next26 = null;\n  $closestDistanceSqr_next27\
    \ = null;\n  $closestDistanceSqr_next28 = null;\n  $closestDistanceSqr_next29\
    \ = null;\n  $closestDistanceSqr_next30 = null;\n  $closestDistanceSqr_next31\
    \ = null;\n  $closestDistanceSqr_next32 = null;\n  $closestDistanceSqr_next33\
    \ = null;\n  $closestDistanceSqr_next34 = null;\n  $closestDistanceSqr_next35\
    \ = null;\n  $closestDistanceSqr_next36 = null;\n  $closestDistanceSqr_next37\
    \ = null;\n  $closestDistanceSqr_next38 = null;\n  $closestDistanceSqr_next39\
    \ = null;\n  $closestDistanceSqr_next40 = null;\n  $closestDistanceSqr_next41\
    \ = null;\n  $closestDistanceSqr_next42 = null;\n  $closestDistanceSqr_next43\
    \ = null;\n  $closestDistanceSqr_next44 = null;\n  $closestDistanceSqr_next45\
    \ = null;\n  $closestDistanceSqr_next46 = null;\n  $closestDistanceSqr_next47\
    \ = null;\n  $closestDistanceSqr_next48 = null;\n  $closestDistanceSqr_next49\
    \ = null;\n  $closestDistanceSqr_next50 = null;\n  $closestDistanceSqr_next51\
    \ = null;\n  $closestDistanceSqr_next52 = null;\n  $closestDistanceSqr_next5\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpxirgb4ek.php
    on line 74

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value * 2) ?\
    \ $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value\
    \ * 3) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value * 4) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 5) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 6) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 7) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 8) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 9) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 10) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 11) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 12) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 13) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 14) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 15) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 16) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 17) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 18) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 19) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 20) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 21) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 22) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 23) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 24) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 25) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value * 26) ? \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp85thaavl.php on line 45

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy5s7g_wy.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy5s7g_wy.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy5s7g_wy.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  while ($closest_integer - $value >= 1) {\n \
    \   $closest_integer = $closest_integer - 1;\n    $value = $value - 1;\n  }\n\
    \  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbqe4tqs.php:31\n\
    Stack trace:\n#0 /tmp/tmpvbqe4tqs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvbqe4tqs.php\
    \ on line 31\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the value\
    \ is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  $value = floatval($value);\n\
    \  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value is a string,\
    \ parse it to a float.\n  $value = strval($value);\n  if (is_numeric($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the value is a string, parse\
    \ it to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n\
    \  }\n\n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n  }\n\
    \n  // If the value is a float, convert it to an integer.\n  if (is_float($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is a string, parse it\
    \ to a float.\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmphbfzyhq0.php on line 127

    '
  timestamp: 1659824630
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer > $value)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbc_8d7x.php:29\n\
    Stack trace:\n#0 /tmp/tmpkbc_8d7x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkbc_8d7x.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8pfw6l.php:30\n\
    Stack trace:\n#0 /tmp/tmp0o8pfw6l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0o8pfw6l.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff > 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc_9aedo.php:29\n\
    Stack trace:\n#0 /tmp/tmpuc_9aedo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuc_9aedo.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ? $value\
    \ : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20j83a6x.php:29\n\
    Stack trace:\n#0 /tmp/tmp20j83a6x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp20j83a6x.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = abs($value - $closest);\n  while ($closestDiff\
    \ > 0) {\n    $closest = $value + $closest;\n    $closestDiff = abs($value - $closest);\n\
    \  }\n  return $closest;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33mwc1a9.php:31\n\
    Stack trace:\n#0 /tmp/tmp33mwc1a9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp33mwc1a9.php\
    \ on line 31\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n\
    \  }\n\n  // If the given value is a float, return it.\n  if (is_float($value))\
    \ {\n    return floor($value);\n  }\n\n  // If the given value is a string, try\
    \ to convert it to an integer.\n  if (is_string($value)) {\n    $value = intval($value);\n\
    \  }\n\n  // If the given value is a boolean, return it.\n  if (is_bool($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is a resource, return\
    \ it.\n  if (is_resource($value)) {\n    return $value;\n  }\n\n  // If the given\
    \ value is a number, return it.\n  if (is_numeric($value)) {\n    return $value;\n\
    \  }\n\n  // If the given value is a resource, return it.\n  if (is_object($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is an array, return the\
    \ first element in the array.\n  if (is_array($value)) {\n    return $value[0];\n\
    \  }\n\n  // If the given value is a string, return the first character in the\
    \ string.\n  if (is_string($value)) {\n    return $value[0];\n  }\n\n  // If the\
    \ given value is null, return null.\n  if (is_null($value)) {\n    return null;\n\
    \  }\n\n  // If the given value is an invalid type, return null.\n  if (is_object($value))\
    \ {\n    return null;\n  }\n\n  // If the given value is an invalid type, return\
    \ null.\n  if (is_array($value)) {\n    return null;\n  }\n\n  // If the given\
    \ value is an invalid type, return null.\n  if (is_string($value)) {\n    return\
    \ null;\n  }\n\n  // If the given value is an invalid type, return null.\n  if\
    \ (is_bool($value)) {\n    return null;\n  }\n\n  // If the given value is an\
    \ invalid type, return null.\n  if (is_resource($value)) {\n    return null;\n\
    \  }\n\n  // If the given value is an invalid type, return null.\n  if (is_numeric($value))\
    \ {\n    return null;\n  }\n\n  // If the given value is an invalid type, return\
    \ null.\n  if (is_object($value)) {\n    return null;\n  }\n\n  // If the given\
    \ value is an invalid type, return null.\n  if (is_array($value)) {\n    return\
    \ null;\n  }\n\n  // If the given value is an invalid type, return null.\n  if\
    \ (is_string($value)) {\n    return null;\n  }\n\n  // If the given value is an\
    \ invalid type, return null.\n  if (is_null($value)) {\n    return null;\n  }\n\
    \n  // If the given value is an invalid type, return null.\n  if (is_object($value))\
    \ {\n    return null;\n  }\n\n  // If the given value is an invalid type, return\
    \ null.\n  if (is_array($value)) {\n    return null;\n  }\n\n  // \nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmpd1q5_p8t.php on line 139

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd86541f.php:28\n\
    Stack trace:\n#0 /tmp/tmpzd86541f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzd86541f.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd86541f.php:28\n\
    Stack trace:\n#0 /tmp/tmpzd86541f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzd86541f.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nxf9sls.php:29\n\
    Stack trace:\n#0 /tmp/tmp8nxf9sls.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8nxf9sls.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpb1uqef1q.php
    on line 46

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol4muz0q.php:28\n\
    Stack trace:\n#0 /tmp/tmpol4muz0q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpol4muz0q.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $closest_integer : $closest_integer + 1;\n    return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpde0ulqlw.php:27\n\
    Stack trace:\n#0 /tmp/tmpde0ulqlw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpde0ulqlw.php\
    \ on line 27\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd86541f.php:28\n\
    Stack trace:\n#0 /tmp/tmpzd86541f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzd86541f.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs = abs($closestDistance);\n\
    \  foreach ($values as $v) {\n    $distance = $v - $value;\n    if ($closestDistance\
    \ === null || $distance < $closestDistanceAbs) {\n      $closest = $v;\n     \
    \ $closestDistance = $distance;\n    }\n  }\n  return $closest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: abs(): Passing null to parameter #1 ($num) of type int|float\
    \ is deprecated in /tmp/tmpc23wfgsp.php on line 19\n\nWarning: Undefined variable\
    \ $values in /tmp/tmpc23wfgsp.php on line 20\n\nWarning: foreach() argument must\
    \ be of type array|object, null given in /tmp/tmpc23wfgsp.php on line 20\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpc23wfgsp.php:35\nStack trace:\n\
    #0 /tmp/tmpc23wfgsp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpc23wfgsp.php\
    \ on line 35\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceSqr = null;\n\
    \  foreach ($values as $v) {\n    $distanceSqr = ($v - $value) * ($v - $value);\n\
    \    if ($closestDistance === null || $distanceSqr < $closestDistanceSqr) {\n\
    \      $closest = $v;\n      $closestDistance = $distanceSqr;\n      $closestDistanceSqr\
    \ = $distanceSqr;\n    }\n  }\n  return $closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $values in /tmp/tmpdtvy7t6b.php on line 20\n\
    \nWarning: foreach() argument must be of type array|object, null given in /tmp/tmpdtvy7t6b.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtvy7t6b.php:36\n\
    Stack trace:\n#0 /tmp/tmpdtvy7t6b.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdtvy7t6b.php\
    \ on line 36\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpght6o_ba.php:29\n\
    Stack trace:\n#0 /tmp/tmpght6o_ba.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpght6o_ba.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy5s7g_wy.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ floor($value)) {\n    return $value;\n  }\n  // If the number is equidistant\
    \ from two integers, round it away from zero.\n  if ($value == ceil($value)) {\n\
    \    return $value;\n  }\n  // If the number is equidistant from two integers,\
    \ round it away from zero.\n  if ($value == round($value)) {\n    return $value;\n\
    \  }\n  // If the number is equidistant from two integers, round it away from\
    \ zero.\n  if ($value == round($value, 2)) {\n    return $value;\n  }\n  // If\
    \ the number is equidistant from two integers, round it away from zero.\n  if\
    \ ($value == round($value, 3)) {\n    return $value;\n  }\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ round($value, 4)) {\n    return $value;\n  }\n  // If the number is equidistant\
    \ from two integers, round it away from zero.\n  if ($value == round($value, 5))\
    \ {\n    return $value;\n  }\n  // If the number is equidistant from two integers,\
    \ round it away from zero.\n  if ($value == round($value, 6)) {\n    return $value;\n\
    \  }\n  // If the number is equidistant from two integers, round it away from\
    \ zero.\n  if ($value == round($value, 7)) {\n    return $value;\n  }\n  // If\
    \ the number is equidistant from two integers, round it away from zero.\n  if\
    \ ($value == round($value, 8)) {\n    return $value;\n  }\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ round($value, 9)) {\n    return $value;\n  }\n  // If the number is equidistant\
    \ from two integers, round it away from zero.\n  if ($value == round($value, 10))\
    \ {\n    return $value;\n  }\n  // If the number is equidistant from two integers,\
    \ round it away from zero.\n  if ($value == round($value, 11)) {\n    return $value;\n\
    \  }\n  // If the number is equidistant from two integers, round it away from\
    \ zero.\n  if ($value == round($value, 12)) {\n    return $value;\n  }\n  // If\
    \ the number is equidistant from two integers, round it away from zero.\n  if\
    \ ($value == round($value, 13)) {\n    return $value;\n  }\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ round($value, 14)) {\n    return $value;\n  }\n  // If the number is \nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmp07_65bpg.php on line 93

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyamrzagr.php:29\n\
    Stack trace:\n#0 /tmp/tmpyamrzagr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyamrzagr.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpch2habh9.php:30\n\
    Stack trace:\n#0 /tmp/tmpch2habh9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpch2habh9.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpb1uqef1q.php
    on line 46

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value\
    \ - 1) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value + 1) ? $value : $closest_integer;\n  return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uvw_qm0.php:30\n\
    Stack trace:\n#0 /tmp/tmp7uvw_qm0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7uvw_qm0.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach (range(1, $value) as $i) {\n    if ($closest_integer\
    \ - $i < $value) {\n      $closest_integer = $i;\n    }\n  }\n  return $closest_integer;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp7fgibz1x.php
    on line 25

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1coeheni.php:23\n\
    Stack trace:\n#0 /tmp/tmp1coeheni.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1coeheni.php\
    \ on line 23\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpb1uqef1q.php
    on line 46

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8pfw6l.php:30\n\
    Stack trace:\n#0 /tmp/tmp0o8pfw6l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0o8pfw6l.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ? $value\
    \ : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20j83a6x.php:29\n\
    Stack trace:\n#0 /tmp/tmp20j83a6x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp20j83a6x.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach (range(1, $value) as $i) {\n    if (abs($value\
    \ - $i) < abs($value - $closest_integer)) {\n      $closest_integer = $i;\n  \
    \  }\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwurdku7i.php:32\n\
    Stack trace:\n#0 /tmp/tmpwurdku7i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwurdku7i.php\
    \ on line 32\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  while ($closest_integer % 2 == 0) {\n    $closest_integer\
    \ = ($closest_integer + 1) / 2;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44dcfwb_.php:30\n\
    Stack trace:\n#0 /tmp/tmp44dcfwb_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp44dcfwb_.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ + 1 : $closest_integer;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 14.5 to int loses precision\
    \ in /tmp/tmpi3j8lcz_.php on line 18\n\nDeprecated: Implicit conversion from float\
    \ 14.5 to int loses precision in /tmp/tmpi3j8lcz_.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpi3j8lcz_.php:29\nStack trace:\n\
    #0 /tmp/tmpi3j8lcz_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpi3j8lcz_.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fttxx35.php:29\n\
    Stack trace:\n#0 /tmp/tmp3fttxx35.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3fttxx35.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach ($GLOBALS['db']->field_types as $field_type\
    \ => $field_type_meta) {\n    if ($field_type_meta->is_numeric) {\n      $field_type_meta->is_numeric\
    \ = true;\n      $field_type_meta->is_integer = false;\n    }\n  }\n  $field_types\
    \ = $GLOBALS['db']->field_types;\n  foreach ($field_types as $field_type => $field_type_meta)\
    \ {\n    if ($field_type_meta->is_numeric) {\n      $field_type_meta->is_numeric\
    \ = true;\n      $field_type_meta->is_integer = true;\n      if ($field_type_meta->is_integer)\
    \ {\n        $field_type_meta->is_integer = false;\n      }\n      if ($field_type_meta->is_float\
    \ && $field_type_meta->is_integer) {\n        $field_type_meta->is_integer = false;\n\
    \      }\n      if ($field_type_meta->is_float && $field_type_meta->is_numeric)\
    \ {\n        $field_type_meta->is_numeric = false;\n      }\n    }\n  }\n  $field_types\
    \ = $GLOBALS['db']->field_types;\n  foreach ($field_types as $field_type => $field_type_meta)\
    \ {\n    if ($field_type_meta->is_numeric) {\n      $field_type_meta->is_numeric\
    \ = true;\n      $field_type_meta->is_integer = true;\n      if ($field_type_meta->is_integer)\
    \ {\n        $field_type_meta->is_integer = false;\n      }\n      if ($field_type_meta->is_float\
    \ && $field_type_meta->is_integer) {\n        $field_type_meta->is_integer = false;\n\
    \      }\n      if ($field_type_meta->is_float && $field_type_meta->is_numeric)\
    \ {\n        $field_type_meta->is_numeric = false;\n      }\n    }\n  }\n  $field_types\
    \ = $GLOBALS['db']->field_types;\n  foreach ($field_types as $field_type => $field_type_meta)\
    \ {\n    if ($field_type_meta->is_numeric) {\n      $field_type_meta->is_numeric\
    \ = true;\n      $field_type_meta->is_integer = true;\n      if ($field_type_meta->is_integer)\
    \ {\n        $field_type_meta->is_integer = false;\n      }\n      if ($field_type_meta->is_float\
    \ && $field_type_meta->is_integer) {\n        $field_type_meta->is_integer = false;\n\
    \      }\n      if ($field_type_meta->is_float && $field_type_meta->is_numeric)\
    \ {\n        $field_type_meta->is_numeric = false;\n      }\n    }\n  }\n  $field_types\
    \ = $GLOBALS['db\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "db", expecting "]" in /tmp/tmpv3ahqod1.php
    on line 72

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value\
    \ ? $closest_integer : $value);\n  $closest_integer = ($closest_integer < $value\
    \ ? $value : $closest_integer);\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwm_8v5r.php:29\n\
    Stack trace:\n#0 /tmp/tmppwm_8v5r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppwm_8v5r.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsfif__s8.php:28\n\
    Stack trace:\n#0 /tmp/tmpsfif__s8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsfif__s8.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1coeheni.php:23\n\
    Stack trace:\n#0 /tmp/tmp1coeheni.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1coeheni.php\
    \ on line 23\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd86541f.php:28\n\
    Stack trace:\n#0 /tmp/tmpzd86541f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzd86541f.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ - 1 ? $value - 1 : $closest_integer;\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqqf6nd_.php:27\n\
    Stack trace:\n#0 /tmp/tmplqqf6nd_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplqqf6nd_.php\
    \ on line 27\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8pfw6l.php:30\n\
    Stack trace:\n#0 /tmp/tmp0o8pfw6l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0o8pfw6l.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fttxx35.php:29\n\
    Stack trace:\n#0 /tmp/tmp3fttxx35.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3fttxx35.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpght6o_ba.php:29\n\
    Stack trace:\n#0 /tmp/tmpght6o_ba.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpght6o_ba.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero.\n  if ($value == intval($value))\
    \ {\n    return intval($value);\n  }\n\n  // If the value is equidistant from\
    \ two integers, round it away from zero.\n  if ($value == round($value)) {\n \
    \   return round($value);\n  }\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero.\n  if ($value == ceil($value)) {\n    return ceil($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it away from\
    \ zero.\n  if ($value == floor($value)) {\n    return floor($value);\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == round($value, 2)) {\n    return round($value, 2);\n  }\n\n  //\
    \ If the value is equidistant from two integers, round it away from zero.\n  if\
    \ ($value == ceil($value, 2)) {\n    return ceil($value, 2);\n  }\n\n  // If the\
    \ value is equidistant from two integers, round it away from zero.\n  if ($value\
    \ == floor($value, 2)) {\n    return floor($value, 2);\n  }\n\n  // If the value\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ round($value, 3)) {\n    return round($value, 3);\n  }\n\n  // If the value\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ ceil($value, 3)) {\n    return ceil($value, 3);\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == floor($value,\
    \ 3)) {\n    return floor($value, 3);\n  }\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero.\n  if ($value == round($value, 4))\
    \ {\n    return round($value, 4);\n  }\n\n  // If the value is equidistant from\
    \ two integers, round it away from zero.\n  if ($value == ceil($value, 4)) {\n\
    \    return ceil($value, 4);\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == floor($value, 4)) {\n  \
    \  return floor($value, 4);\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == round($value, 5)) {\n  \
    \  return round($value, 5);\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == ceil($value, 5)) {\n   \
    \ return ceil\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmpx8ipgz_6.php
    on line 92

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = abs($value - $closest);\n  foreach (range(1,\
    \ $closestDiff) as $i) {\n    $closestDiff = abs($value - $closest);\n    $closest\
    \ = $value - $closestDiff + $i;\n  }\n  return $closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6nltm6t.php:31\n\
    Stack trace:\n#0 /tmp/tmpe6nltm6t.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe6nltm6t.php\
    \ on line 31\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value && $closest_integer\
    \ > 0) {\n    $closest_integer = ($closest_integer + $value) / 2;\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigrsn18h.php:29\n\
    Stack trace:\n#0 /tmp/tmpigrsn18h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpigrsn18h.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  while ($closest_integer % 2 == 0) {\n    $closest_integer\
    \ = ($closest_integer + 1);\n  }\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc4yvjz1.php:29\n\
    Stack trace:\n#0 /tmp/tmpuc4yvjz1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuc4yvjz1.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwlwhbxm.php:30\n\
    Stack trace:\n#0 /tmp/tmpzwlwhbxm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzwlwhbxm.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $closest_integer : $closest_integer - 1;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepvjbjty.php:28\n\
    Stack trace:\n#0 /tmp/tmpepvjbjty.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpepvjbjty.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ?\
    \ $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9t9wkdw.php:28\n\
    Stack trace:\n#0 /tmp/tmpc9t9wkdw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc9t9wkdw.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value -\
    \ 1) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value\
    \ + 1) ? 0 : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8fbkn2j.php:29\n\
    Stack trace:\n#0 /tmp/tmpf8fbkn2j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpf8fbkn2j.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm26635nn.php:28\n\
    Stack trace:\n#0 /tmp/tmpm26635nn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm26635nn.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the value\
    \ is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \n  // If the value is negative, make it positive.\n  if ($value < 0) {\n    $value\
    \ = abs($value);\n  }\n\n  // If the value is zero, return zero.\n  if ($value\
    \ == 0) {\n    return 0;\n  }\n\n  // If the value is positive, return the next\
    \ integer that is greater\n  // than the given value.\n  if ($value > 0) {\n \
    \   return $value + 1;\n  }\n\n  // If the value is negative, return the previous\
    \ integer that is less\n  // than the given value.\n  return $value - 1;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6ohmt1j.php:47\n\
    Stack trace:\n#0 /tmp/tmph6ohmt1j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmph6ohmt1j.php\
    \ on line 47\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpght6o_ba.php:29\n\
    Stack trace:\n#0 /tmp/tmpght6o_ba.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpght6o_ba.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd86541f.php:28\n\
    Stack trace:\n#0 /tmp/tmpzd86541f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzd86541f.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6pk_vh75.php:29\n\
    Stack trace:\n#0 /tmp/tmp6pk_vh75.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6pk_vh75.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol4muz0q.php:28\n\
    Stack trace:\n#0 /tmp/tmpol4muz0q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpol4muz0q.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach ($values as $v) {\n   \
    \ if ($v == $value) {\n      return $v;\n    }\n    $diff = $v - $value;\n   \
    \ if ($closestDiff === null || abs($diff) < abs($closestDiff)) {\n      $closestDiff\
    \ = $diff;\n      $closest = $v;\n    }\n  }\n  return $closest;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $values in /tmp/tmphskwra86.php on line 19\n\
    \nWarning: foreach() argument must be of type array|object, null given in /tmp/tmphskwra86.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphskwra86.php:36\n\
    Stack trace:\n#0 /tmp/tmphskwra86.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphskwra86.php\
    \ on line 36\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMax = null;\n\
    \  foreach (array_keys($GLOBALS['integers']) as $key) {\n    $diffAbs = abs($value\
    \ - $GLOBALS['integers'][$key]);\n    if ($diffAbs < $closestDiffAbs) {\n    \
    \  $closestDiffAbs = $diffAbs;\n      $closest = $key;\n    }\n  }\n  if ($closestDiffAbs\
    \ === null) {\n    return $value;\n  }\n  if ($closestDiffAbsMax === null) {\n\
    \    $closestDiffAbsMax = $closestDiffAbs;\n    $closestDiffAbsMaxAbs = $closestDiffAbs;\n\
    \    $closestDiffAbsMaxAbsMax = $closestDiffAbs;\n  } else {\n    if ($closestDiffAbsMax\
    \ > $closestDiffAbsMaxAbs) {\n      $closestDiffAbsMax = $closestDiffAbs;\n  \
    \    $closestDiffAbsMaxAbs = $closestDiffAbs;\n      $closestDiffAbsMaxAbsMax\
    \ = $closestDiffAbsMax;\n    } else {\n      $closestDiffAbsMaxAbs = $closestDiffAbs;\n\
    \      $closestDiffAbsMaxAbsMax = $closestDiffAbsMax;\n    }\n  }\n  $closestDiffAbsMaxAbsMax\
    \ = $closestDiffAbsMaxAbsMax;\n  $closestDiffAbsMaxAbsMaxAbs = $closestDiffAbsMaxAbsMax;\n\
    \  foreach (array_keys($GLOBALS['integers']) as $key) {\n    $diffAbs = abs($value\
    \ - $GLOBALS['integers'][$key]);\n    if ($diffAbs < $closestDiffAbsMaxAbs) {\n\
    \      $closestDiffAbsMaxAbs = $diffAbs;\n      $closestDiffAbsMaxAbsMax = $diffAbs;\n\
    \      $closest = $key;\n    }\n  }\n  if ($closestDiffAbsMaxAbs === null) {\n\
    \    return $value;\n  }\n  if ($closestDiffAbsMaxAbsMax === null) {\n    $closestDiffAbsMaxAbsMax\
    \ = $closestDiffAbsMaxAbs;\n    $closestDiffAbsMaxAbsMaxAbs = $closestDiffAbsMaxAbs;\n\
    \    $closestDiffAbsMaxAbsMaxAbsMax = $closestDiffAbsMaxAbsMax;\n  } else {\n\
    \    if ($closestDiffAbsMaxAbsMax > $closestDiffAbsMaxAbsMaxAbs) {\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 65 in /tmp/tmp5n_1unfz.php on line 79

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it down\n  $value = floatval($value);\n  $value\
    \ = round($value, 0);\n\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  if ($value == $value + 1) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from three integers, round it away from zero\n\
    \  if ($value == $value + 2) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from four integers, round it away from zero\n  if ($value == $value\
    \ + 3) {\n    return $value;\n  }\n\n  // If the value is equidistant from five\
    \ integers, round it away from zero\n  if ($value == $value + 4) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from six integers, round it\
    \ away from zero\n  if ($value == $value + 5) {\n    return $value;\n  }\n\n \
    \ // If the value is equidistant from seven integers, round it away from zero\n\
    \  if ($value == $value + 6) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from eight integers, round it away from zero\n  if ($value == $value\
    \ + 7) {\n    return $value;\n  }\n\n  // If the value is equidistant from nine\
    \ integers, round it away from zero\n  if ($value == $value + 8) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from ten integers, round it\
    \ away from zero\n  if ($value == $value + 9) {\n    return $value;\n  }\n\n \
    \ // If the value is equidistant from eleven integers, round it away from zero\n\
    \  if ($value == $value + 10) {\n    return $value;\n  }\n\n  // If the value\
    \ is equidistant from twelve integers, round it away from zero\n  if ($value ==\
    \ $value + 11) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from thirteen integers, round it away from zero\n  if ($value == $value + 12)\
    \ {\n    return $value;\n  }\n\n  // If the value is equidistant from fourteen\
    \ integers, round it away from zero\n  if ($value == $value + 13) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from fifteen integers, round\
    \ it away from zero\n  if ($value == $value + 14) {\n    return $value;\n  }\n\
    \n  // If the value is equidistant from sixteen integers, round it away from zero\n\
    \  if ($value == $value + 15) {\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 91 in /tmp/tmpzbmam0vd.php on line 105

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1coeheni.php:23\n\
    Stack trace:\n#0 /tmp/tmp1coeheni.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1coeheni.php\
    \ on line 23\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ + 1 : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 14.5 to int loses precision\
    \ in /tmp/tmpwl5o0mkd.php on line 18\n\nDeprecated: Implicit conversion from float\
    \ 14.5 to int loses precision in /tmp/tmpwl5o0mkd.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpwl5o0mkd.php:28\nStack trace:\n\
    #0 /tmp/tmpwl5o0mkd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwl5o0mkd.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value\
    \ ? $closest_integer : $value);\n  $closest_integer = ($closest_integer < $value\
    \ ? $value : $closest_integer);\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwm_8v5r.php:29\n\
    Stack trace:\n#0 /tmp/tmppwm_8v5r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppwm_8v5r.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value % 1 == 0) {\n    $value\
    \ = round($value);\n  }\n\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxtnzib7.php:32\n\
    Stack trace:\n#0 /tmp/tmpbxtnzib7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbxtnzib7.php\
    \ on line 32\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpoqgrfa.php:29\n\
    Stack trace:\n#0 /tmp/tmpzpoqgrfa.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzpoqgrfa.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouat0vj7.php:29\n\
    Stack trace:\n#0 /tmp/tmpouat0vj7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpouat0vj7.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd86541f.php:28\n\
    Stack trace:\n#0 /tmp/tmpzd86541f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzd86541f.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmplxpjlqf9.php on line 58

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is zero,\
    \ return zero\n  if ($value == 0) {\n    return 0;\n  }\n  // If the value is\
    \ negative, return the negative of the closest integer\n  if ($value < 0) {\n\
    \    return -closest_integer(abs($value));\n  }\n  // If the value is positive,\
    \ return the closest integer\n  return round($value);\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvip8o3cu.php:35\n\
    Stack trace:\n#0 /tmp/tmpvip8o3cu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvip8o3cu.php\
    \ on line 35\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs = abs($closestDistance);\n\
    \  foreach ($values as $v) {\n    $distance = $v - $value;\n    if ($closestDistance\
    \ === null || $distance < $closestDistanceAbs) {\n      $closestDistance = $distance;\n\
    \      $closest = $v;\n    }\n  }\n  return $closest;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like your answer, but I think it would be better to use a binary search\
    \ to find the closest integer. Binary search is O(logn) instead of O(n).\n<|/\
    \ c |>\n<| c |>\nYes, binary search is better. My answer was just an alternative\
    \ to OP's code. Binary search is also O(logn), but it's more complicated and less\
    \ efficient.\n<|/ c |>\n<| c |>\nI agree, binary search is better. My answer was\
    \ just an alternative to OP's code. Binary search is also O(logn), but it's more\
    \ complicated and less efficient.\n<|/ c |>\n<| c |>\nI agree that binary search\
    \ is better, but I disagree that it's more complicated and less efficient. Binary\
    \ search is O(logn), but it's more complicated and less efficient.\n<|/ c |>\n\
    <| c |>\nBinary search is O(logn), but it's more complicated and less efficient.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$numbers = array(\n    0 => 0,\n    1 => 1,\n\
    \    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n\
    \    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13\
    \ => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 =>\
    \ 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n\
    \    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n \
    \   29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n  \
    \  34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnq3t_lwc.php
    on line 29

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd86541f.php:28\n\
    Stack trace:\n#0 /tmp/tmpzd86541f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzd86541f.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $closest_integer : $closest_integer + 1;\n    return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpde0ulqlw.php:27\n\
    Stack trace:\n#0 /tmp/tmpde0ulqlw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpde0ulqlw.php\
    \ on line 27\n"
  timestamp: 1659824630
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ - floor($value));\n    if ($closest_integer < 0) {\n        $closest_integer\
    \ = $closest_integer * -1;\n    }\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyb623fh.php:30\n\
    Stack trace:\n#0 /tmp/tmplyb623fh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplyb623fh.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff > 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1szq2nw.php:28\n\
    Stack trace:\n#0 /tmp/tmph1szq2nw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmph1szq2nw.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / $value * $value, 0);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiv5ko_n.php:24\n\
    Stack trace:\n#0 /tmp/tmpxiv5ko_n.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxiv5ko_n.php\
    \ on line 24\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc1pi43fk.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8pfw6l.php:30\n\
    Stack trace:\n#0 /tmp/tmp0o8pfw6l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0o8pfw6l.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / $value, 0);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazzvnszr.php:24\n\
    Stack trace:\n#0 /tmp/tmpazzvnszr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpazzvnszr.php\
    \ on line 24\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fttxx35.php:29\n\
    Stack trace:\n#0 /tmp/tmp3fttxx35.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3fttxx35.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == $value + 0.5) {\n\
    \    $value = $value - 0.5;\n  }\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpud7awwg9.php:30\n\
    Stack trace:\n#0 /tmp/tmpud7awwg9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpud7awwg9.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.000001 ? $value : floor($value);\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_n6b8855.php:27\n\
    Stack trace:\n#0 /tmp/tmp_n6b8855.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_n6b8855.php\
    \ on line 27\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy5s7g_wy.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = abs($value - $closest);\n  foreach ($values\
    \ as $value) {\n    $diff = $value - $closest;\n    if ($diff < $closestDiff)\
    \ {\n      $closestDiff = $diff;\n      $closest = $value;\n    }\n  }\n  return\
    \ $closest;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $values in /tmp/tmp4et32ttr.php on line 19\n\
    \nWarning: foreach() argument must be of type array|object, null given in /tmp/tmp4et32ttr.php\
    \ on line 19\n\nWarning: Undefined variable $values in /tmp/tmp4et32ttr.php on\
    \ line 19\n\nWarning: foreach() argument must be of type array|object, null given\
    \ in /tmp/tmp4et32ttr.php on line 19\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4et32ttr.php:34\nStack trace:\n#0 /tmp/tmp4et32ttr.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4et32ttr.php on line 34\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == round($value)) {\n\
    \    return round($value);\n  }\n  // Find the difference between the value and\
    \ the next integer\n  $difference = $value - floor($value);\n  // If the difference\
    \ is equidistant from two integers, round it away from zero\n  if ($difference\
    \ == round($difference)) {\n    return round($difference);\n  }\n  // If the difference\
    \ is equidistant from three integers, round it away from zero\n  if ($difference\
    \ == round($difference, 2)) {\n    return round($difference, 2);\n  }\n  // If\
    \ the difference is equidistant from four integers, round it away from zero\n\
    \  if ($difference == round($difference, 3)) {\n    return round($difference,\
    \ 3);\n  }\n  // If the difference is equidistant from five integers, round it\
    \ away from zero\n  if ($difference == round($difference, 4)) {\n    return round($difference,\
    \ 4);\n  }\n  // If the difference is equidistant from six integers, round it\
    \ away from zero\n  if ($difference == round($difference, 5)) {\n    return round($difference,\
    \ 5);\n  }\n  // If the difference is equidistant from seven integers, round it\
    \ away from zero\n  if ($difference == round($difference, 6)) {\n    return round($difference,\
    \ 6);\n  }\n  // If the difference is equidistant from eight integers, round it\
    \ away from zero\n  if ($difference == round($difference, 7)) {\n    return round($difference,\
    \ 7);\n  }\n  // If the difference is equidistant from nine integers, round it\
    \ away from zero\n  if ($difference == round($difference, 8)) {\n    return round($difference,\
    \ 8);\n  }\n  // If the difference is equidistant from ten integers, round it\
    \ away from zero\n  if ($difference == round($difference, 9)) {\n    return round($difference,\
    \ 9);\n  }\n  // If the difference is equidistant from eleven integers, round\
    \ it away from zero\n  if ($difference == round($difference, 10)) {\n    return\
    \ round($difference, 10);\n  }\n  // If the difference is equidistant from twelve\
    \ integers, round it away from zero\n  if ($difference == round($difference, 11))\
    \ {\n    return round($difference, 11);\n  }\n  // If the difference is equidistant\
    \ from thirteen integers, round it away from zero\n  if ($difference == round\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp59xx0zg2.php
    on line 70

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpouat0vj7.php:29\n\
    Stack trace:\n#0 /tmp/tmpouat0vj7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpouat0vj7.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n\n  // If the value is negative,\
    \ return 0\n  if ($value < 0) {\n    return 0;\n  }\n\n  // If the value is zero,\
    \ return it\n  if ($value == 0) {\n    return $value;\n  }\n\n  // If the value\
    \ is positive, return the next integer after it\n  if ($value > 0 && $value %\
    \ 1 == 0) {\n    return $value + 1;\n  }\n\n  // If the value is odd, return the\
    \ next integer after it\n  if ($value % 2 == 1) {\n    return $value + 1;\n  }\n\
    \n  // If the value is even, return the next integer after it\n  return $value\
    \ + 2;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI came up with this solution:\n\
    <code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpbim89wou.php
    on line 42

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = abs($value - $closest);\n  foreach (range(1,\
    \ $closestDiff) as $i) {\n    $closestDiff = abs($value - $closest);\n    $closest\
    \ = $value - ($closestDiff / $i);\n  }\n  return $closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Division by zero in /tmp/tmp9t8l8xpw.php:21\n\
    Stack trace:\n#0 /tmp/tmp9t8l8xpw.php(27): closest_integer(10)\n#1 /tmp/tmp9t8l8xpw.php(31):\
    \ candidate('10')\n#2 /tmp/tmp9t8l8xpw.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp9t8l8xpw.php on line 21\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach ($values as $v) {\n   \
    \ $diff = $v - $value;\n    if ($diff < $closestDiff) {\n      $closestDiff =\
    \ $diff;\n      $closest = $v;\n    }\n  }\n  return $closest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $values in /tmp/tmpabirhbz8.php on line 19\n\
    \nWarning: foreach() argument must be of type array|object, null given in /tmp/tmpabirhbz8.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabirhbz8.php:34\n\
    Stack trace:\n#0 /tmp/tmpabirhbz8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpabirhbz8.php\
    \ on line 34\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3oll7xu.php:27\n\
    Stack trace:\n#0 /tmp/tmpm3oll7xu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm3oll7xu.php\
    \ on line 27\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value % 2\
    \ == 0) {\n    return round($value / 2);\n  }\n  return round($value);\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1hqv1fp.php:28\n\
    Stack trace:\n#0 /tmp/tmpr1hqv1fp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr1hqv1fp.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy5s7g_wy.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer > 0 && $closest_integer <\
    \ $value) {\n    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm79o2mro.php:30\n\
    Stack trace:\n#0 /tmp/tmpm79o2mro.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpm79o2mro.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = null;\n    $closestDiff = null;\n    $diff\
    \ = null;\n    $diffAbs = null;\n    $diffAbsMax = null;\n    $diffAbsMaxAbs =\
    \ null;\n    $diffAbsMaxAbsMin = null;\n    $diffAbsMaxAbsMinAbs = null;\n   \
    \ $diffAbsMaxAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbs = null;\n  \
    \  $diffAbsMaxAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMin =\
    \ null;\n    $diffAbsMaxAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAb\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp3v4r_npp.php
    on line 49

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptu5q50he.php:29\n\
    Stack trace:\n#0 /tmp/tmptu5q50he.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptu5q50he.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer++;\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq41neec2.php:32\n\
    Stack trace:\n#0 /tmp/tmpq41neec2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq41neec2.php\
    \ on line 32\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1coeheni.php:23\n\
    Stack trace:\n#0 /tmp/tmp1coeheni.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1coeheni.php\
    \ on line 23\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc1pi43fk.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc1pi43fk.php on line 48

    '
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol4muz0q.php:28\n\
    Stack trace:\n#0 /tmp/tmpol4muz0q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpol4muz0q.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ < $value ? $closest_integer : $value);\n    $closest_integer = ($closest_integer\
    \ < $value ? $value : $closest_integer);\n    return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_frd3bp.php:29\n\
    Stack trace:\n#0 /tmp/tmpf_frd3bp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf_frd3bp.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp738eqo8g.php:30\n\
    Stack trace:\n#0 /tmp/tmp738eqo8g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp738eqo8g.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value < $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value < $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4z1_s4m.php:28\n\
    Stack trace:\n#0 /tmp/tmpq4z1_s4m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq4z1_s4m.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $closest_integer : $closest_integer + 1;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58ufddyg.php:28\n\
    Stack trace:\n#0 /tmp/tmp58ufddyg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp58ufddyg.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o8pfw6l.php:30\n\
    Stack trace:\n#0 /tmp/tmp0o8pfw6l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0o8pfw6l.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach ($values as $v) {\n   \
    \ $diff = $v - $value;\n    if ($closestDiff === null || $diff < $closestDiff)\
    \ {\n      $closestDiff = $diff;\n      $closest = $v;\n    }\n  }\n  return $closest;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $values in /tmp/tmpw0brk2fq.php on line 19\n\
    \nWarning: foreach() argument must be of type array|object, null given in /tmp/tmpw0brk2fq.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0brk2fq.php:34\n\
    Stack trace:\n#0 /tmp/tmpw0brk2fq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpw0brk2fq.php\
    \ on line 34\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer > $value)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbc_8d7x.php:29\n\
    Stack trace:\n#0 /tmp/tmpkbc_8d7x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkbc_8d7x.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is negative,\
    \ return 0\n  if ($value < 0) {\n    return 0;\n  }\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == round($value)) {\n\
    \    return round($value);\n  }\n  // If the value is equidistant from two integers,\
    \ return the smaller one\n  if ($value == round($value, 2)) {\n    return round($value,\
    \ 2);\n  }\n  // If the value is equidistant from two integers, return the smaller\
    \ one\n  if ($value == round($value, 3)) {\n    return round($value, 3);\n  }\n\
    \  // If the value is equidistant from two integers, return the smaller one\n\
    \  if ($value == round($value, 4)) {\n    return round($value, 4);\n  }\n  //\
    \ If the value is equidistant from two integers, return the smaller one\n  if\
    \ ($value == round($value, 5)) {\n    return round($value, 5);\n  }\n  // If the\
    \ value is equidistant from two integers, return the smaller one\n  if ($value\
    \ == round($value, 6)) {\n    return round($value, 6);\n  }\n  // If the value\
    \ is equidistant from two integers, return the smaller one\n  if ($value == round($value,\
    \ 7)) {\n    return round($value, 7);\n  }\n  // If the value is equidistant from\
    \ two integers, return the smaller one\n  if ($value == round($value, 8)) {\n\
    \    return round($value, 8);\n  }\n  // If the value is equidistant from two\
    \ integers, return the smaller one\n  if ($value == round($value, 9)) {\n    return\
    \ round($value, 9);\n  }\n  // If the value is equidistant from two integers,\
    \ return the smaller one\n  if ($value == round($value, 10)) {\n    return round($value,\
    \ 10);\n  }\n  // If the value is equidistant from two integers, return the smaller\
    \ one\n  if ($value == round($value, 11)) {\n    return round($value, 11);\n \
    \ }\n  // If the value is equidistant from two integers, return the smaller one\n\
    \  if ($value == round($value, 12)) {\n    return round($value, 12);\n  }\n  //\
    \ If the value is equidistant from two integers, return the smaller one\n  if\
    \ ($value == round($value, 13)) {\n    return round($value, 13);\n  }\n  // If\
    \ the value is equidistant from two integers, return the smaller one\n  if ($value\
    \ == round($value, 14)) {\n    return round($value, 14);\n  }\n  // If the value\
    \ is equidistant from two integers, return the smaller one\n  if ($value == round($value,\
    \ 15)) {\n    return round($value, 15);\n  }\n  // \nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmpxrqnt3ft.php on line 95

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp738eqo8g.php:30\n\
    Stack trace:\n#0 /tmp/tmp738eqo8g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp738eqo8g.php\
    \ on line 30\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ $closest_integer : $closest_integer + 1;\n  return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzoai93gg.php:28\n\
    Stack trace:\n#0 /tmp/tmpzoai93gg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzoai93gg.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5gimj27.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5gimj27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5gimj27.php\
    \ on line 24\n"
  timestamp: 1659730932
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value < $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer < $value)\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3m5giw4.php:29\n\
    Stack trace:\n#0 /tmp/tmpv3m5giw4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpv3m5giw4.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ floor($value)) {\n    return floor($value);\n  }\n  // If the number is equidistant\
    \ from three integers, round it away from zero.\n  if ($value == floor($value\
    \ / 3)) {\n    return floor($value / 3);\n  }\n  // If the number is equidistant\
    \ from four integers, round it away from zero.\n  if ($value == floor($value /\
    \ 4)) {\n    return floor($value / 4);\n  }\n  // If the number is equidistant\
    \ from five integers, round it away from zero.\n  if ($value == floor($value /\
    \ 5)) {\n    return floor($value / 5);\n  }\n  // If the number is equidistant\
    \ from six integers, round it away from zero.\n  if ($value == floor($value /\
    \ 6)) {\n    return floor($value / 6);\n  }\n  // If the number is equidistant\
    \ from seven integers, round it away from zero.\n  if ($value == floor($value\
    \ / 7)) {\n    return floor($value / 7);\n  }\n  // If the number is equidistant\
    \ from eight integers, round it away from zero.\n  if ($value == floor($value\
    \ / 8)) {\n    return floor($value / 8);\n  }\n  // If the number is equidistant\
    \ from nine integers, round it away from zero.\n  if ($value == floor($value /\
    \ 9)) {\n    return floor($value / 9);\n  }\n  // If the number is equidistant\
    \ from ten integers, round it away from zero.\n  if ($value == floor($value /\
    \ 10)) {\n    return floor($value / 10);\n  }\n  // If the number is equidistant\
    \ from eleven integers, round it away from zero.\n  if ($value == floor($value\
    \ / 11)) {\n    return floor($value / 11);\n  }\n  // If the number is equidistant\
    \ from twelve integers, round it away from zero.\n  if ($value == floor($value\
    \ / 12)) {\n    return floor($value / 12);\n  }\n  // If the number is equidistant\
    \ from thirteen integers, round it away from zero.\n  if ($value == floor($value\
    \ / 13)) {\n    return floor($value / 13);\n  }\n  // If the number is equidistant\
    \ from fourteen integers, round it away from zero.\n  if ($value == floor($value\
    \ / 14)) {\n    return floor($value / 14);\n  }\n  // If the number is equidistant\
    \ from fifteen integers, round it away from zero.\n  if ($value == floor($value\
    \ / 15)) {\n    return floor($value / 15);\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 69 in /tmp/tmp80t1y9c5.php on line 83

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float.\n  $value = floatval($value);\n\n  // If the value is\
    \ an integer, return it.\n  if ($value == $value) {\n    return $value;\n  }\n\
    \n  // If the value is negative, return the negative of the closest integer.\n\
    \  if ($value < 0) {\n    return -closest_integer(abs($value));\n  }\n\n  // If\
    \ the value is zero, return zero.\n  if ($value == 0) {\n    return 0;\n  }\n\n\
    \  // If the value is positive, return the closest integer.\n  if ($value > 0)\
    \ {\n    return round($value);\n  }\n\n  // If the value is negative, return the\
    \ negative of the closest integer.\n  return -closest_integer(-$value);\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblirl4nc.php:48\n\
    Stack trace:\n#0 /tmp/tmpblirl4nc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpblirl4nc.php\
    \ on line 48\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : round($closest_integer));\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21t0244w.php:28\n\
    Stack trace:\n#0 /tmp/tmp21t0244w.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp21t0244w.php\
    \ on line 28\n"
  timestamp: 1659824630
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyamrzagr.php:29\n\
    Stack trace:\n#0 /tmp/tmpyamrzagr.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyamrzagr.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is a string, convert it to an integer using the\n  // built-in PHP function\
    \ intval().\n  // If the given value is not a string, return it unchanged.\n \
    \ if (!is_string($value)) {\n    return $value;\n  }\n\n  // If the given value\
    \ is a valid integer, return it.\n  if (!is_numeric($value)) {\n    return $value;\n\
    \  }\n\n  // If the given value is negative, return the negative of the closest\n\
    \  // integer.\n  if ($value < 0) {\n    return -closest_integer(abs($value));\n\
    \  }\n\n  // If the given value is zero, return zero.\n  if ($value == 0) {\n\
    \    return 0;\n  }\n\n  // If the given value is positive, return the closest\
    \ integer.\n  if ($value > 0) {\n    return round($value);\n  }\n\n  // If the\
    \ given value is equidistant from two integers, round it away\n  // from zero.\n\
    \  $diff = $value - round($value);\n  if ($diff < 0.5) {\n    return round($value);\n\
    \  }\n\n  return round($value) + 1;\n}\n</code>\n<|/ a tags=php,rounding,math\
    \ |>\n<| c |>\nI like this solution, but I believe it can be improved. For example\
    \ `closest_integer(\"14.5\")` returns 15, but `closest_integer(\"14.51\")` returns\
    \ 16. `closest_integer(\"14.49\")` returns 15, but `closest_integer(\"14.50\"\
    )` returns 16. `closest_integer(\"14.491\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.492\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.493\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.494\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.495\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.496\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.497\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.498\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.499\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.500\")` returns 15, but `closest_integer(\"\
    14.501\")` returns 16. `closest_integer(\"14.501\")` returns 16. `closest_integer(\"\
    14.501\")` returns 16. `closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpnkwnmnu2.php
    on line 53

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_8txm8h.php:29\n\
    Stack trace:\n#0 /tmp/tmpm_8txm8h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpm_8txm8h.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value < $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value == $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value < $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcb6to3i.php:29\n\
    Stack trace:\n#0 /tmp/tmpzcb6to3i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzcb6to3i.php\
    \ on line 29\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value % 1 == 0) {\n    $value\
    \ = round($value, 0);\n  }\n  // Return the closest integer\n  return $value;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4io6wa18.php:31\n\
    Stack trace:\n#0 /tmp/tmp4io6wa18.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4io6wa18.php\
    \ on line 31\n"
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7xszpp.php:29\n\
    Stack trace:\n#0 /tmp/tmp2i7xszpp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2i7xszpp.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659824635
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nxf9sls.php:29\n\
    Stack trace:\n#0 /tmp/tmp8nxf9sls.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8nxf9sls.php\
    \ on line 29\n"
  timestamp: 1659731040
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsSq\
    \ = null;\n  $closestDiffSq = null;\n  $closestDiffSqAbs = null;\n  $closestDiffSqAbsSq\
    \ = null;\n  $closestDiffAbsSqSq = null;\n  $closestDiffSqSq = null;\n  $closestDiffSqSqAbs\
    \ = null;\n  $closestDiffSqSqAbsSq = null;\n  $closestDiffSqSqSq = null;\n  $closestDiffSqSqSqAbs\
    \ = null;\n  $closestDiffSqSqSqAbsSq = null;\n  $closestDiffSqSqSqSq = null;\n\
    \  $closestDiffSqSqSqSqAbs = null;\n  $closestDiffSqSqSqSqAbsSq = null;\n  $closestDiffSqSqSqSqSq\
    \ = null;\n  $closestDiffSqSqSqSqSqAbs = null;\n  $closestDiffSqSqSqSqSqAbsSq\
    \ = null;\n  $closestDiffSqSqSqSqSqSq = null;\n  $closestDiffSqSqSqSqSqSqAbs =\
    \ null;\n  $closestDiffSqSqSqSqSqSqAbsSq = null;\n  $closestDiffSqSqSqSqSqSqSq\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqAbs = null;\n  $closestDiffSqSqSqSqSqSqSqAbsSq\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqSq = null;\n  $closestDiffSqSqSqSqSqSqSqSqAbs\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqAbsSq = null;\n  $closestDiffSqSqSqSqSqSqSqSq\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqSqAbs = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqAbsSq\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSq = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqAbs\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqAbsSq = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqSq\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqSqAbs = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqAbsSq\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqSq = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqSqAbs\
    \ = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqSqSqAbsSq = null;\n  $closestDiffSqSqSqSqSqSqSqSqSqSqSqSq\
    \ = null;\n  $\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp4cebjjrp.php on line 60

    '
  timestamp: 1659824630
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2_y50_z.php:30\n\
    Stack trace:\n#0 /tmp/tmps2_y50_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2_y50_z.php\
    \ on line 30\n"
  timestamp: 1659731040
