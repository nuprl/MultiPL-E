language: php
name: HumanEval_111_histogram
results:
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm5ds_xy.php:34\n\
    Stack trace:\n#0 /tmp/tmpqm5ds_xy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqm5ds_xy.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 1;\n    } else {\n      $histogram[$letter]++;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo13ds4s_.php:34\n\
    Stack trace:\n#0 /tmp/tmpo13ds4s_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo13ds4s_.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk4vc469.php:34\n\
    Stack trace:\n#0 /tmp/tmpfk4vc469.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfk4vc469.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_4h3pc3.php:30\n\
    Stack trace:\n#0 /tmp/tmpl_4h3pc3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpl_4h3pc3.php\
    \ on line 30\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"\
    a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"\
    b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"\
    b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"\
    a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"\
    b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"\
    b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"\
    a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"\
    b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"\
    b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"\
    a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"\
    b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"\
    b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"\
    a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"\
    b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"\
    b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"\
    a\",\"b\",\"b\",\"a\",\"b\",\"b\",\"a\",\"b\",\"b\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9k3n2ibi.php on line 24

    '
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrrvjgp0.php:31\n\
    Stack trace:\n#0 /tmp/tmpdrrvjgp0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdrrvjgp0.php\
    \ on line 31\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps96fe9b8.php:33\n\
    Stack trace:\n#0 /tmp/tmps96fe9b8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmps96fe9b8.php\
    \ on line 33\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcxoa_ix.php:31\n\
    Stack trace:\n#0 /tmp/tmpjcxoa_ix.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjcxoa_ix.php\
    \ on line 31\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyzs646ef.php:34\n\
    Stack trace:\n#0 /tmp/tmpyzs646ef.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyzs646ef.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays,histogram\
    \ |>\n<| a tags=php,arrays,histogram |>\n<code>\n<?php\n$array = array(\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpne6w_5ki.php on line 28

    '
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm5ds_xy.php:34\n\
    Stack trace:\n#0 /tmp/tmpqm5ds_xy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqm5ds_xy.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm5ds_xy.php:34\n\
    Stack trace:\n#0 /tmp/tmpqm5ds_xy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqm5ds_xy.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpze8a60uo.php:30\n\
    Stack trace:\n#0 /tmp/tmpze8a60uo.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpze8a60uo.php\
    \ on line 30\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 1;\n    } else {\n      $histogram[$letter]++;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo13ds4s_.php:34\n\
    Stack trace:\n#0 /tmp/tmpo13ds4s_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo13ds4s_.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//u', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_d28x2sl.php:34\n\
    Stack trace:\n#0 /tmp/tmp_d28x2sl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_d28x2sl.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm5ds_xy.php:34\n\
    Stack trace:\n#0 /tmp/tmpqm5ds_xy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqm5ds_xy.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcxoa_ix.php:31\n\
    Stack trace:\n#0 /tmp/tmpjcxoa_ix.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjcxoa_ix.php\
    \ on line 31\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk4vc469.php:34\n\
    Stack trace:\n#0 /tmp/tmpfk4vc469.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfk4vc469.php\
    \ on line 34\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcxoa_ix.php:31\n\
    Stack trace:\n#0 /tmp/tmpjcxoa_ix.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjcxoa_ix.php\
    \ on line 31\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk4vc469.php:34\n\
    Stack trace:\n#0 /tmp/tmpfk4vc469.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfk4vc469.php\
    \ on line 34\n"
  timestamp: 1659730933
