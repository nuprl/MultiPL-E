name: HumanEval_44_change_base
language: php
prompt: "<?php\n// Change numerical base of input number x to base.\n// return string\
  \ representation after the conversion.\n// base numbers are less than 10.\n// >>>\
  \ change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
  \ 2)\n// \"111\"\nfunction change_base($x, $base) {\n"
tests: "function candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw\
    \ new \\InvalidArgumentException(\"Invalid base: $base\");\n  }\n  $x = intval($x);\n\
    \  if ($x < 0) {\n    throw new \\InvalidArgumentException(\"Invalid base: $base\"\
    );\n  }\n  $x = $x * $base;\n  $x = intval($x);\n  if ($x < 0) {\n    throw new\
    \ \\InvalidArgumentException(\"Invalid base: $base\");\n  }\n  return $x;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,math,algorithm |>\n<code>\n<?php", " \
    \ $r = \"\";\n  while ($x > 0) {\n    $r = $base[$x % $base] + $r;\n    $x = floor($x\
    \ / $base);\n  }\n  return $r;\n}\n", "  $base = (int) $base;\n  $x = intval($x);\n\
    \  if ($x < 0) {\n    $x = $base ** -$x;\n  }\n  $r = $x; // $r = $x if $x is\
    \ 0\n  $digits = 1;\n  while ($digits < $base) {\n    $r *= $base;\n    $digits++;\n\
    \  }\n  $r = $r / $base;\n  return $r;\n}\n", "  $base = 10 ** $base;\n  if ($x\
    \ < $base) {\n    return $x;\n  }\n  $x_str = (string) $x;\n  $x_len = strlen($x_str);\n\
    \  $x_str_pad = str_pad($x_str, $x_len, $base);\n  return $x_str_pad;\n}\n</code>\n\
    <|/ a tags=php,math,algorithm |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `change_base(-10, 2)`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try `change_base(-10, 2)`.\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ negative numbers. Try `change_base(-10, 2)`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers. Try `change_base(-10, 2)`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work for negative numbers. Try `change_base(-10, 2)`.\n<|/ c |>\n<|\
    \ a dscore=4 |>\n<code>", "  $base = (int) $base;\n  if ($base < 2 || $base >\
    \ 36) {\n    throw new Exception('Base must be between 2 and 36');\n  }\n  $x\
    \ = intval($x);\n  $r = $x;\n  $digits = '';\n  while ($x >= $base) {\n    $r\
    \ = $x % $base;\n    $digits = $base.$digits;\n    $x = floor($x / $base);\n \
    \ }\n  return $digits;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x\
    \ = abs($x);\n  $y = $base;\n  while ($x >= $y) {\n    $x -= $y;\n    $y += $base;\n\
    \  }\n  return $sign + $y;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x\
    \ = abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $newBase\
    \ = array();\n  for ($i = 0; $i < $baseLen; $i++) {\n    $newBase[] = $base[$i];\n\
    \  }\n  for ($i = 0; $i < $digits; $i++) {\n    $newBase[] = $newBase[$i] * $x\
    \ % $baseLen;\n    $x = floor($x / $baseLen);\n  }\n  return $sign == 0 ? '' .\
    \ implode('', $newBase) : strrev($newBase);\n}\n", "  $r = \"\";\n  $sign = $x\
    \ < 0 ? \"-\" : \"\";\n  $x = abs($x);\n  while ($x >= $base) {\n    $r = $base\
    \ * $r + $x;\n    $x -= $base;\n  }\n  return $sign. $r;\n}\n", "  $base = 10\
    \ ** $base;\n  $x = $x * $base;\n  $r = $x;\n  $digits = strlen($r);\n  for ($i\
    \ = 0; $i < $digits; $i++) {\n    $r = $r * $base;\n  }\n  return $r;\n}\n", " \
    \ $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n    return $x;\n  }\n\
    \  $digits = str_split($x);\n  $result = '';\n  foreach ($digits as $digit) {\n\
    \    $result = $digit * $base;\n    $result %= $base;\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x) - 1;\n  $xx = str_repeat('0', $digits);\n  $xx =\
    \ str_pad($xx, $digits, $base);\n  return $xx;\n}", "  $r = \"\";\n  while ($x\
    \ > 0)\n    $r = base_convert($x % $base, $base, $base) . $r;\n  return $r;\n\
    }\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $base ** $r + $x;\n   \
    \ $x -= $base;\n  }\n  return $r;\n}\n", "    $x = intval($x);\n    $base = intval($base);\n\
    \    if ($base > 10) {\n        return $x;\n    }\n    if ($base < 1) {\n    \
    \    return $x;\n    }\n    $r = $x;\n    $digits = strlen($r) - 1;\n    while\
    \ ($digits >= $base) {\n        $r /= $base;\n        $digits--;\n    }\n    return\
    \ $r . str_repeat('0', $digits - $base) . '1';\n}\n", "    $base = (int) $base;\n\
    \    if ($base < 2 || $base > 10) {\n        throw new InvalidArgumentException('Invalid\
    \ base');\n    }\n    $x = intval($x);\n    if ($x < 0) {\n        $x += $base;\n\
    \    }\n    $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n    return $x;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,numbers,base-conversion |>\n<code>\n<?php", " \
    \ $base = (int) $base;\n  if ($base < 1 || $base > 10) {\n    return null;\n \
    \ }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  $r = $x;\n\
    \  while ($x > $base) {\n    $x /= $base;\n    $r *= $base;\n  }\n  return $r;\n\
    }\n", "  $x = $x - ($x % $base);\n  $x = $x + ($base * pow(10, strlen($base) -\
    \ 1));\n  return $x;\n}", "  $x = $x * $base;\n  $x = $x / $base;\n  return $x;\n\
    }", "  $r = \"\";\n  $sign = $x < 0 ? \"-\" : \"\";\n  while ($x >= $base) {\n\
    \    $r = $base ** $r + $sign;\n    $x -= $base;\n  }\n  return $r;\n}", "  $digits\
    \ = str_split($x);\n  $digits_count = count($digits);\n  $base = $base < 10 ?\
    \ $base : 10;\n  $base = $base > $digits_count ? $digits_count : $base;\n  $result\
    \ = '';\n  for ($i = 0; $i < $base; $i++) {\n    $result .= $digits[$digits_count\
    \ - $i - 1];\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n  \
    \  throw new \\InvalidArgumentException(\n      sprintf('Invalid base %d', $base)\n\
    \    );\n  }\n  $x = intval($x);\n  $r = $x;\n  $digits = 1;\n  while ($digits\
    \ < $base) {\n    $r *= $base;\n    $digits++;\n  }\n  $r = str_pad($r, $digits,\
    \ '0', STR_PAD_LEFT);\n  return $r;\n}\n", "  $base = (int) $base;\n  if ($base\
    \ < 0 || $base > 10) {\n    throw new Exception('Base must be between 0 and 10.');\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x,\
    \ 10, $base);\n}\n", "  $x = $x - ($x % $base);\n  return $x * $base;\n}", " \
    \ $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n    throw new Exception('Invalid\
    \ base');\n  }\n  $x = $x - (int) $x;\n  $digits = '';\n  while ($x >= $base)\
    \ {\n    $digits = $base_to_digits[$base] + $digits;\n    $x = $x - ($base * $base_to_digits[$base]);\n\
    \  }\n  return $digits;\n}\n", "  $base = 10 ** $base;\n  $x = $x * $base;\n \
    \ $x = floor($x);\n  $x = $x / $base;\n  return $x;\n}\n", "  $base = 10 ** $base;\n\
    \  $x = $x * $base;\n  $r = $x / $base;\n  $r = floor($r);\n  $r = $r / $base;\n\
    \  $r = $r * $base;\n  return $r;\n}", "  $base = (int) $base;\n  if ($base <\
    \ 1 || $base > 10) {\n    throw new InvalidArgumentException(\n      sprintf('Base\
    \ must be between 1 and 10 (inclusive), %d given.', $base));\n  }\n  $x = intval($x);\n\
    \  if ($x < 0) {\n    throw new InvalidArgumentException(\n      sprintf('Cannot\
    \ convert negative number %d', $x));\n  }\n  $sign = ($x < (-1 * PHP_INT_MAX))\
    \ ? -1 : 1;\n  $x = abs($x);\n  $digits = (int) ($base ** $x);\n  $digits = ($digits\
    \ < 0) ? $digits + 1 : $digits;\n  $result = $sign * str_pad('', $digits, '0',\
    \ STR_PAD_LEFT);\n  return $result;\n}\n", "  $base = 10 ** $base;\n  $x = $x\
    \ * $base;\n  $x = $x / $base;\n  return $x;\n}", "  $digits = strlen($x);\n \
    \ $baseLen = strlen($base);\n  $newBase = str_pad('', $baseLen, '0');\n  for ($i\
    \ = 0; $i < $baseLen; $i++) {\n    $newBase[$i] = $base[$i];\n  }\n  $newBase[$baseLen]\
    \ = $digits;\n  return $newBase;\n}\n", "  $digits = strlen($x);\n  $base10 =\
    \ str_pad('', $digits, '0', STR_PAD_LEFT);\n  $base2 = str_pad('', $digits, '0',\
    \ STR_PAD_LEFT);\n  $base = $base < 10 ? $base : 10;\n  while ($digits > 0) {\n\
    \    $base10[$digits] = $base;\n    $base2[$digits] = $base % 10;\n    $digits\
    \ = $digits - 1;\n    $base = $base / 10;\n  }\n  return $base10 + $base2;\n}\n",
  "  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $newBase = array();\n \
    \ for ($i = 0; $i < $baseLen; $i++) {\n    $newBase[] = str_pad(base_convert($x[$i],\
    \ $base, $baseLen), $digits, '0', STR_PAD_LEFT);\n  }\n  return implode('', $newBase);\n\
    }\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n    throw new\
    \ \\InvalidArgumentException('Base must be between 2 and 10');\n  }\n  $digits\
    \ = str_split(base_convert($x, 10, $base));\n  $digits_length = strlen($digits);\n\
    \  $new_digits = array();\n  for ($i = 0; $i < $digits_length; $i++) {\n    $new_digits[]\
    \ = $digits[$i] * $base;\n  }\n  return implode('', $new_digits);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis works great, thank you! I added a check to make\
    \ sure that the base is between 2 and 10 and it works great!\n<|/ c |>\n<| a tags=php,base-conversion\
    \ |>\n<code>\n<?php", "  $base = (int) $base;\n  if ($base < 1 || $base > 10)\
    \ {\n    die('Invalid base');\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x\
    \ = abs($x);\n    $base = -$base;\n  }\n  $digits = strlen($x);\n  $result = '';\n\
    \  while ($digits > 0) {\n    $mod = $x % $base;\n    $digits = $digits - 1;\n\
    \    $result = $base . $result . str_pad('', $digits, '0', STR_PAD_LEFT);\n  \
    \  $x = $mod;\n  }\n  return $result;\n}\n", "  $base10 = 10 ** $base;\n  return\
    \ ($x / $base10) * $base10;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  if ($base < 2) {\n    return $x;\n\
    \  }\n  $base = $base * 10;\n  $digits = str_split($x);\n  $result = '';\n  foreach\
    \ ($digits as $digit) {\n    $result = $result . str_pad(base_convert($digit,\
    \ $base, 10), $base, '0', STR_PAD_LEFT);\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=php,base-conversion |>\n<| c |>\nThis doesn't work for base 10. Try\
    \ `change_base(100, 10)`.\n<|/ c |>\n<| c |>\nIt works for base 10. Try `change_base(100,\
    \ 2)`.\n<|/ c |>\n<| c |>\nIt works for base 10. Try `change_base(100, 2)`.\n\
    <|/ c |>\n<| c |>\nIt works for base 10. Try `change_base(100, 2)`.\n<|/ c |>\n\
    <| c |>\nIt works for base 10. Try `change_base(100, 2)`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "    $x = intval($x);\n    $base = intval($base);\n    if ($base\
    \ > 10) {\n        return $x;\n    }\n    $digits = strlen($x);\n    $result =\
    \ '';\n    while ($digits > 0) {\n        $result = $base * $result + $x[$digits\
    \ - 1];\n        $digits--;\n    }\n    return $result;\n}\n", "    $x = $x *\
    \ $base;\n    $x = $x / $base;\n    $x = $x + $base;\n    return $x;\n}\n", " \
    \ $base = 10 ** $base;\n  $x = $x * $base;\n  $x = $x / $base;\n  return $x;\n\
    }", "  $base = 10 ** $base;\n  $digits = strlen($x);\n  $newbase = $digits;\n\
    \  $newx = \"\";\n  for ($i = 0; $i < $digits; $i++) {\n    $newx += $x[$i] *\
    \ $base;\n    $newbase /= $base;\n  }\n  return $newx;\n}\n", "    $x = abs($x);\n\
    \    $base = abs($base);\n    if ($base > 10) {\n        return $x;\n    }\n \
    \   $r = $base;\n    $t = 0;\n    while ($x >= $r) {\n        $r = $r * $base;\n\
    \        $t++;\n    }\n    return $r + ($x / $base) * $t;\n}", "  $base = 10 **\
    \ $base;\n  $digits = str_split($x);\n  $result = '';\n  foreach ($digits as $digit)\
    \ {\n    $result = $digit * $base;\n  }\n  return $result;\n}\n</code>\n<|/ a\
    \ tags=php,math,algorithm |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `change_base(-3, 2)` returns `-22` instead of `-1000`.\n<|/ c |>\n<| c |>\n\
    : Yes, I didn't think about negative numbers. I edited my answer to include a\
    \ version that handles negative numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    $x = $x - ($x % $base);\n    $x = $x * $base;\n    return $x;\n}\n", "    $x\
    \ = intval($x);\n    $base = intval($base);\n    if ($base > 10) {\n        die(\"\
    Base must be less than 10.\");\n    }\n    if ($x < 0) {\n        die(\"Negative\
    \ number not allowed.\");\n    }\n    if ($base == 0) {\n        return $x;\n\
    \    }\n    $base = $base < 10 ? 10 : $base;\n    $x = $x * $base;\n    $x = $x\
    \ / $base;\n    $x = $x % $base;\n    return $x;\n}", "  $x = intval($x);\n  $base\
    \ = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n\
    \  $basedigits = strlen($base);\n  $quotient = $x / $base;\n  $remainder = $x\
    \ % $base;\n  $quotient = str_pad($quotient, $basedigits, '0', STR_PAD_LEFT);\n\
    \  $remainder = str_pad($remainder, $basedigits, '0', STR_PAD_LEFT);\n  return\
    \ $quotient . $remainder;\n}", "  $base = 10 ** $base;\n  $digits = str_split($x);\n\
    \  $result = '';\n  foreach ($digits as $digit) {\n    $result = $digit * $base;\n\
    \  }\n  return $result;\n}\n", "  $base10 = 10 ** $base;\n  return $base10 * $x;\n\
    }", "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n    return\
    \ $x;\n  }\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $quotient\
    \ = $x / $base;\n  $remainder = $x % $base;\n  $quotientLen = strlen($quotient);\n\
    \  $quotientBase = substr($quotient, 0, $quotientLen);\n  $quotientDigits = strlen($quotientBase);\n\
    \  $quotientBaseLen = strlen($quotientBase);\n  $remainderLen = strlen($remainder);\n\
    \  $remainderBase = substr($remainder, 0, $remainderLen);\n  $remainderDigits\
    \ = strlen($remainderBase);\n  $result = \"\";\n  for ($i = 0; $i < $quotientLen;\
    \ $i++) {\n    $result .= $quotientBase[$i] * $base;\n  }\n  for ($i = 0; $i <\
    \ $remainderLen; $i++) {\n    $result .= $remainderBase[$i] * $base;\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a tags=php,math,algorithm |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `change_base(-8, 3)` for example\n<|/ c |>\n\
    <| c |>\nI added a version that handles negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `change_base(-8,\
    \ 3)` for example\n<|/ c |>\n<| c |>\nI added a version that handles negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. Try `change_base(-8, 3)` for example\n<|/ c |>\n<| a dscore=4\
    \ |>\nI wrote a PHP function to do this, which I thought I'd share:\n<code>",
  "    $x = $x * $base;\n    $x = $x / $base;\n    return $x;\n}\n", "  $base = (int)\
    \ $base;\n  if ($base < 1 || $base > 10) {\n    throw new \\InvalidArgumentException(\"\
    Base must be between 1 and 10\");\n  }\n  $x = $x * $base;\n  $remainder = $x\
    \ % $base;\n  return $base == 10 ? $x : change_base($remainder, $base);\n}\n",
  "    $digits = strlen($x);\n    $base = $base < 10 ? $base : 10;\n    $res = \"\"\
    ;\n    while ($digits > 0) {\n        $res = $base * $res + $x[$digits-1];\n \
    \       $digits--;\n    }\n    return $res;\n}\n", "  $digits = str_split($x);\n\
    \  $digits_count = count($digits);\n  $base = $base < 10 ? 10 : $base;\n  if ($digits\
    \ === FALSE || $digits_count < $base) {\n    return FALSE;\n  }\n  $digits_count\
    \ = count($digits);\n  $digits = array_pad($digits, $base, '0');\n  $digits[$digits_count\
    \ - 1] = $digits_count - 1;\n  return implode('', $digits);\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis doesn't work for negative numbers. `change_base(-8,\
    \ 2)` returns `8`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted it.\
    \ I added a fix for negative numbers. Thanks!\n<|/ c |>\n<| a tags=php,math,algorithm\
    \ |>\n<code>\n<?php", "    $digits = strlen($x);\n    $base = strlen($base);\n\
    \    $result = '';\n    while ($digits > 0) {\n        $mod = $x % $base;\n  \
    \      $result = $base[$mod] . $result;\n        $x = floor($x / $base);\n   \
    \     $digits--;\n    }\n    return $result;\n}\n", "  $base = (int) $base;\n\
    \  $x = intval($x);\n  if ($base > strlen($x)) {\n    return $x;\n  }\n  $sign\
    \ = ($x<0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $baseLen =\
    \ strlen($base);\n  $res = '';\n  while ($digits > 0) {\n    $res = $base[$digits-1]\
    \ * $x + $res;\n    $digits--;\n  }\n  return $sign + $res;\n}\n</code>\n<|/ a\
    \ tags=php,math |>\n<| c |>\nI like your solution, however it fails for negative\
    \ numbers. I modified it a little to fix that. `function change_base($x, $base)\
    \ {\n  $base = (int) $base;\n  $x = intval($x);\n  if ($base > strlen($x)) {\n\
    \    return $x;\n  }\n  $sign = ($x<0) ? '-' : '';\n  $x = abs($x);\n  $digits\
    \ = strlen($x);\n  $baseLen = strlen($base);\n  $res = '';\n  while ($digits >\
    \ 0) {\n    $res = $base[$digits-1] * $x + $res;\n    $digits--;\n  }\n  return\
    \ $sign + $res;\n}`\n<|/ c |>\n<| c |>\nI added a version that handles negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php",
  "    $x = intval($x);\n    $base = intval($base);\n    if ($base < 2 || $base >\
    \ 10) {\n        throw new Exception('Base must be between 2 and 10');\n    }\n\
    \    if ($x < 0) {\n        $x = $x + $base;\n    }\n    $r = $x;\n    $digits\
    \ = '';\n    while ($x >= $base) {\n        $r = $x % $base;\n        $x = floor($x\
    \ / $base);\n        $digits = $digits[$base-1].$r;\n    }\n    return $digits[$base-1].$r;\n\
    }", "  $base = (int) $base;\n  if ($base < 1 || $base > 10) {\n    return null;\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x,\
    \ 10, $base);\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? 10 : $base;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits_count = pow($base, $digits_count);\n  $digits = array_pad($digits,\
    \ $digits_count, '0');\n  $digits = array_map(function($digit) use ($base) {\n\
    \    return $digit * $base;\n  }, $digits);\n  return implode('', $digits);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for base 10. Try `change_base(8,\
    \ 10)` for example. Also `change_base(8, 2)` returns `\"1000\"` instead of `\"\
    100\"`.\n<|/ c |>\n<| c |>\nI added a solution for base 10. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nI added a solution for base 10. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a |>\nI came up with a solution that is pretty simple\
    \ and doesn't require any loops or recursion. \n<code>", "    $digits = str_split($x);\n\
    \    $digits_count = count($digits);\n    $base = $base < 10 ? $base : 10;\n \
    \   $base = $base > $digits_count ? $digits_count : $base;\n    $digits = array_pad($digits,\
    \ $base, '0');\n    return implode('', $digits);\n}\n</code>\n<|/ a tags=php,math,algorithm\
    \ |>\n<| c |>\nI believe this fails for negative numbers. `change_base(-7, 2)`\
    \ returns `111` instead of `-1000`.\n<|/ c |>\n<| c |>\nYes, it fails for negative\
    \ numbers. I added a fix for negative numbers. I hope this helps.\n<|/ c |>\n\
    <| c |>\nThis fails for bases greater than 10. `change_base(8, 3)` returns `22`\
    \ instead of `1000`.\n<|/ c |>\n<| c |>\nI fixed the base to 3 digits long instead\
    \ of 2.\n<|/ c |>\n<| c |>\nThis fails for bases greater than 10. `change_base(8,\
    \ 3)` returns `22` instead of `1000`.\n<|/ c |>\n<| a tags=php,math,algorithm\
    \ |>\n<code>\n<?php", "  $x = $x * $base;\n  $x = $x - ($x % $base);\n  return\
    \ $x;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n    return\
    \ null;\n  }\n  $x = intval($x);\n  $base = (int) $base;\n  if ($x < 0 || $x !=\
    \ $x * $base) {\n    return null;\n  }\n  return $x * $base;\n}\n", "  $base =\
    \ (int) $base;\n  if ($base < 1 || $base > 10) {\n    die('Base must be between\
    \ 1 and 10');\n  }\n  $x = intval($x);\n  if ($x == 0) {\n    return $x;\n  }\n\
    \  $r = $x;\n  while ($base > 0) {\n    $r = $r * $base;\n    $base--;\n  }\n\
    \  return $r;\n}\n", "    $x = intval($x);\n    $base = intval($base);\n    if\
    \ ($base < 2 || $base > 10) {\n        throw new Exception('Base must be between\
    \ 2 and 10');\n    }\n    if ($x < 0) {\n        $x = abs($x);\n        $base\
    \ = -$base;\n    }\n    if ($base == 10) {\n        return $x;\n    }\n    $sign\
    \ = ($x < 0) ? '-' : '';\n    $x = $x * pow(10, $base - 1);\n    $digits = strlen($x);\n\
    \    $digits_count = floor($digits);\n    $decimals = $digits - $digits_count;\
    \ // decimals\n    $decimals_count = intval($decimals);\n    $decimals_count =\
    \ max($decimals_count, 0);\n    $decimals_count = min($decimals_count, $decimals);\n\
    \    $decimals_count = max($decimals_count, $decimals);\n    $decimals_count =\
    \ min($decimals_count, $decimals);\n    $decimals_count = max($decimals_count,\
    \ $decimals);\n    $decimals_count = min($decimals_count, $decimals);\n    $decimals_count\
    \ = max($decimals_count, $decimals);\n    $decimals_count = min($decimals_count,\
    \ $decimals);\n    $decimals_count = max($decimals_count, $decimals);\n    $decimals_count\
    \ = min($decimals_count, $decimals);\n    $decimals_count = max($decimals_count,\
    \ $decimals);\n    $decimals_count = min($decimals_count, $decimals);\n    $decimals_count\
    \ = max($decimals_count, $decimals);\n    $decimals_count = min($decimals_count,\
    \ $decimals);\n    $decimals_count = max($decimals_count, $decimals);\n    $decimals_count\
    \ = min($decimals_count, $decimals);\n    $decimals_count = max($decimals_count,\
    \ $decimals);\n    $decimals_count = min($decimals_count, $decimals);\n    $decimals_count\
    \ = max($decimals_count, $decimals);\n    $decimals_count = min($decimals_count,\
    \ $decimals);\n    $decimals_count = max($decimals_count, $decimals);\n    $decimals_count\
    \ = min($decimals_count, $decimals);\n    $decimals_count = max($decimals_count,\
    \ $decimals);\n    $decimals_count = min($decimals_count, $decimals);\n    $decimals_count\
    \ = max($decimals_count, $decimals);\n    $decimals_count = min($decimals_count,\
    \ $decimals);\n    $decimals_count = max($decimals_count, $decimals);\n    $decimals_count\
    \ = min($decimals_count, $decimals);\n    $decimals_count = max($decimals_count,\
    \ $decimals);\n    $decimals_count = min($decimals_count, $decimals);\n    $decimals_count\
    \ = max($decimals_count, $decimals);\n    $decimals_count = min($decimal", " \
    \ $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n    return\
    \ $x;\n  }\n  $digits = strlen($x);\n  $basedigits = strlen($base);\n  $quotient\
    \ = $x / $base;\n  $remainder = $x % $base;\n  $quotient = str_pad($quotient,\
    \ $basedigits, '0', STR_PAD_LEFT);\n  $remainder = str_pad($remainder, $basedigits,\
    \ '0', STR_PAD_LEFT);\n  return $quotient . $remainder;\n}\n", "  $base = (int)\
    \ $base;\n  if ($base < 2 || $base > 10) {\n    throw new Exception('Invalid base');\n\
    \  }\n  $x = $x - (int) $x;\n  $r = $x;\n  while ($x >= $base) {\n    $r = $r\
    \ * $base;\n    $x = $x - (int) $x;\n  }\n  return $r;\n}\n", "  $r = \"\";\n\
    \  while ($x > 0) {\n    $r = $base[$x % $base] + $r;\n    $x = floor($x / $base);\n\
    \  }\n  return $r;\n}\n", "  $x = $x * $base;\n  $x = $x - ($x % $base);\n  return\
    \ $x;\n}\n", "    $base = 10 ** $base;\n    $x = $x * $base;\n    $x = $x / $base;\n\
    \    $x = $x % $base;\n    return $x;\n}\n", "  $x = $x - ($x % $base);\n  return\
    \ $x;\n}", "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n\
    \    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits\
    \ = strlen($x);\n  $baseLen = strlen($base);\n  $newBase = array();\n  for ($i\
    \ = 0; $i < $baseLen; $i++) {\n    $newBase[] = $base[$i];\n  }\n  for ($i = 0;\
    \ $i < $digits; $i++) {\n    $newBase[] = $newBase[$i] * $x % $newBase[$i];\n\
    \    $x = floor($x / $newBase[$i]);\n  }\n  $newBase = array_reverse($newBase);\n\
    \  return $sign == ''\n    ? implode('', $newBase)\n    : ($sign == '-' ? '-'\
    \ : '') . implode('', $newBase);\n}\n", "    $x = $x - ($x % $base);\n    return\
    \ $x;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10)\
    \ {\n    return $x;\n  }\n  if ($base < 2) {\n    return $x;\n  }\n  $sign = ($x\
    \ < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n\
    \  $newBase = array();\n  for ($i = $baseLen - 1; $i >= 0; $i--) {\n    $newBase[]\
    \ = intval($x % $base);\n    $x = floor($x / $base);\n  }\n  return $sign . implode('',\
    \ $newBase);\n}", "  $digits = strlen($x) - 1;\n  $result = '';\n  for ($i = 0;\
    \ $i < $digits; $i++) {\n    $result .= $x[$i] * pow(10, $digits - $i - 1);\n\
    \  }\n  return $result * $base;\n}\n", "  $base = 10 ** $base;\n  $x = $x / $base;\n\
    \  $x = floor($x);\n  $x = $x * $base;\n  return $x;\n}\n", "    $x = $x - ($x\
    \ % $base);\n    return $x;\n}\n", "  $base = (int) $base;\n  if ($base < 0 ||\
    \ $base > 10) {\n    throw new InvalidArgumentException(\n        'Base must be\
    \ a number between 0 and 10.');\n  }\n  $x = intval($x);\n  if ($x == 0) {\n \
    \   return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits\
    \ = '';\n  do {\n    $digits = base_convert($x, $base, $base);\n    $x *= $base;\n\
    \  } while ($digits === '');\n  return $sign + $digits;\n}\n", "  $base = $base\
    \ < 10 ? $base : 10;\n  $x = $x < 0 ? -$x : $x;\n  $x = $x * $base;\n  $x = $x\
    \ < 0 ? -$x : $x;\n  return $x;\n}\n", "  $base = $base < 10 ? $base : 10;\n \
    \ $x = $x < 0 ? -$x : $x;\n  $x = $x * $base;\n  $x = $x < 0 ? -$x : $x;\n  return\
    \ $x;\n}\n", "  $base = (int) $base;\n  if ($base < 1 || $base > 10) {\n    throw\
    \ new \\InvalidArgumentException('Base must be between 1 and 10');\n  }\n  $digits\
    \ = strlen($x);\n  $baselen = (int) ($digits / $base);\n  $mod = $digits % $base;\n\
    \  $x = str_pad($x, $baselen, $base, '0', STR_PAD_LEFT);\n  return $x . str_pad('',\
    \ $mod, $base, '0', STR_PAD_LEFT);\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $basedigits\
    \ = strlen($base);\n  $quotient = $x / $base;\n  $remainder = $x % $base;\n  $quotient\
    \ = str_pad($quotient, $basedigits, '0', STR_PAD_LEFT);\n  $remainder = str_pad($remainder,\
    \ $basedigits, '0', STR_PAD_LEFT);\n  return $quotient . $remainder;\n}\n", " \
    \ $x = intval($x);\n  $base = intval($base);\n  if ($base < 2 || $base > 10) {\n\
    \    return null;\n  }\n  if ($x < 0) {\n    return null;\n  }\n  if ($base ==\
    \ 10) {\n    return $x;\n  }\n  $sign = ($x < (0 | $x)) ? '-' : '+';\n  $x = abs($x);\n\
    \  $digits = '';\n  while ($x >= $base) {\n    $digits = $baseToDigits[$base]\
    \ + $digits;\n    $x -= $base;\n  }\n  return $sign + str_pad($digits, $base,\
    \ '0', STR_PAD_LEFT);\n}\n", "  $r = \"\";\n  while ($x > 0) {\n    $r = base_convert($x,\
    \ $base, $base);\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $digits\
    \ = strlen($x);\n    $basebase = $base;\n    $base = $basebase * $base;\n    $base\
    \ = $base + 10;\n    $x = $x / $base;\n    $x = $x % $base;\n    $x = $x * $basebase;\n\
    \    $x = $x / $base;\n    $x = $x % $base;\n    return $x;\n}", "  $base = (int)\
    \ $base;\n  if ($base < 2 || $base > 36) {\n    throw new Exception('Invalid base\
    \ number');\n  }\n  $x = $x * $base;\n  $digits = '';\n  while ($x > 9) {\n  \
    \  $digits = $base * $digits + (int) ($x / $base);\n    $x = $x % $base;\n  }\n\
    \  return $digits . $x;\n}\n", "  $r = \"\";\n  while ($x > 0) {\n    $r = base_convert($x,\
    \ $base, $base);\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $digits\
    \ = strlen($x);\n    if ($digits == 0) {\n        return $x;\n    }\n    $baseLen\
    \ = strlen($base);\n    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen\
    \ = $baseLen > $digits ? $digits : $baseLen;\n    $baseLen = $baseLen < 0 ? 0\
    \ : $baseLen;\n    $baseLen = $baseLen > $digits ? $digits : $baseLen;\n    $baseLen\
    \ = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen > $digits ? $digits\
    \ : $baseLen;\n    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen\
    \ > $digits ? $digits : $baseLen;\n    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \    $baseLen = $baseLen > $digits ? $digits : $baseLen;\n    $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen > $digits\
    \ ? $digits : $baseLen;\n    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen\
    \ = $baseLen > $digits ? $digits : $baseLen;\n    $baseLen = $baseLen < 0 ? 0\
    \ : $baseLen;\n    $baseLen = $baseLen > $digits ? $digits : $baseLen;\n    $baseLen\
    \ = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen > $digits ? $digits\
    \ : $baseLen;\n    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen\
    \ > $digits ? $digits : $baseLen;\n    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \    $baseLen = $baseLen > $digits ? $digits : $baseLen;\n    $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen = $baseLen > $digits\
    \ ? $digits : $baseLen;\n    $baseLen = $baseLen < 0 ? 0 : $baseLen;\n    $baseLen\
    \ = $baseLen > $digits ? $digits : $baseLen;\n    $baseLen = $baseLen < 0 ? 0\
    \ : $baseLen;\n    $baseLen", "    $x = abs($x);\n    $base = abs($base);\n  \
    \  if ($x < $base) {\n        return $x;\n    }\n    $r = $x % $base;\n    if\
    \ ($r == 0) {\n        return $base;\n    }\n    return change_base($r, $base);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math,algorithm |>\n<code>\n<?php",
  "    $digits = str_split($x);\n    $digits_count = count($digits);\n    $base =\
    \ $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base = $base\
    \ < 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base = $base <\
    \ 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base = $base < 10\
    \ ? 10 : $base;\n    $digits_count = count($digits);\n    $base = $base < 10 ?\
    \ 10 : $base;\n    $digits_count = count($digits);\n    $base = $base < 10 ? 10\
    \ : $base;\n    $digits_count = count($digits);\n    $base = $base < 10 ? 10 :\
    \ $base;\n    $digits_count = count($digits);\n    $base = $base < 10 ? 10 : $base;\n\
    \    $digits_count = count($digits);\n    $base = $base < 10 ? 10 : $base;\n \
    \   $digits_count = count($digits);\n    $base = $base < 10 ? 10 : $base;\n  \
    \  $digits_count = count($digits);\n    $base = $base < 10 ? 10 : $base;\n   \
    \ $digits_count = count($digits);\n    $base = $base < 10 ? 10 : $base;\n    $digits_count\
    \ = count($digits);\n    $base = $base < 10 ? 10 : $base;\n    $digits_count =\
    \ count($digits);\n    $base = $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n\
    \    $base = $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n \
    \   $base = $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n  \
    \  $base = $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n   \
    \ $base = $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base\
    \ = $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base =\
    \ $base < 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base = $base\
    \ < 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base = $base <\
    \ 10 ? 10 : $base;\n    $digits_count = count($digits);\n    $base = $base < 10\
    \ ? 10 : $base", "    $x = intval($x);\n    $base = intval($base);\n    if ($base\
    \ < 2 || $base > 10) {\n        throw new \\InvalidArgumentException(\"Base must\
    \ be between 2 and 10\");\n    }\n    if ($x == 0) {\n        return 0;\n    }\n\
    \    $r = $x;\n    $digits = 1;\n    while ($digits < $base) {\n        $r *=\
    \ $base;\n        $digits++;\n    }\n    $r = $r / $base;\n    return $r;\n}\n",
  "  $base = 10 ** $base;\n  $digits = str_split($x);\n  $result = '';\n  foreach\
    \ ($digits as $digit) {\n    $result = $digit * $base;\n  }\n  return $result;\n\
    }\n", "  $base = $base < 10 ? $base : 10;\n  $x = $x < 0 ? -$x : $x;\n  $x = $x\
    \ * $base;\n  $x = $x < 0 ? -$x : $x;\n  return $x;\n}\n", "  $digits = strlen($x);\n\
    \  $base2 = strlen($base);\n  $base10 = 10 ** $base2;\n  $base = $base10 ** $base2;\n\
    \  $y = $base;\n  $z = 0;\n  $r = \"\";\n  for ($i = 0; $i < $digits; $i++) {\n\
    \    $z += $y[$i] * $base;\n    $r = $z % $base2;\n    $z = $z / $base2;\n   \
    \ $y = $y[$r];\n  }\n  return $r;\n}\n", "  $digits = str_split($x);\n  $digits_count\
    \ = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $digits_count = count($digits);\n\
    \  $digits_sum = 0;\n  for ($i = 0; $i < $digits_count; $i++) {\n    $digits_sum\
    \ += $digits[$i] * $base;\n  }\n  return $digits_sum;\n}\n", "  $base = 10 **\
    \ $base;\n  if ($x < $base) {\n    return $x;\n  }\n  $div = $x % $base;\n  return\
    \ $x / $base + $div;\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? 10 : $base;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits_count = strlen($digits);\n  $digits = array_pad($digits,\
    \ $base, '0');\n  $digits = array_map(function($digit) use ($digits_count, $base)\
    \ {\n    return $digit * $digits_count + $digits_count - $base;\n  }, $digits);\n\
    \  return implode('', $digits);\n}\n", "    $digits = str_split($x);\n    $digits_count\
    \ = count($digits);\n    $base = $base < 10 ? 10 : $base;\n    $base = $base >\
    \ $digits_count ? $digits_count : $base;\n    $digits_count = pow($base, $digits_count);\n\
    \    $digits = array_pad($digits, $digits_count, '0');\n    return implode('',\
    \ $digits);\n}\n</code>\n<|/ a tags=php,math,algorithm |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "  $r = \"\";\n  while ($x > 0)\n  {\n    $r = base_convert($x,\
    \ $base, $base);\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $digits\
    \ = str_split($x);\n    $digits_count = count($digits);\n    $digits_sum = 0;\n\
    \    $base = $base < 10 ? 10 : $base;\n    foreach ($digits as $digit) {\n   \
    \     $digits_sum += $digit * $base;\n    }\n    return $digits_sum;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nI like your solution, but I believe it would\
    \ be more efficient to just use division instead of multiplication. `return $digits_sum\
    \ / $base;`\n<|/ c |>\n<| c |>\nI agree, division is more efficient. I'll update\
    \ my answer with your suggestion.\n<|/ c |>\n<| a tags=php,math |>\n<code>", " \
    \ $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n    throw new \\InvalidArgumentException(\n\
    \      sprintf('Base must be between 2 and 10, inclusive: %d', $base));\n  }\n\
    \  $x = abs($x);\n  $digits = '';\n  do {\n    $digits = base_convert($x, 10,\
    \ $base) + $digits;\n    $x = floor($x / $base);\n  } while ($x > 0);\n  return\
    \ $digits;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n\
    \    $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n", "  $digits = str_split($x);\n\
    \  $digits_count = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $base\
    \ = $base > $digits_count ? $digits_count : $base;\n  $digits_count = pow($base,\
    \ $digits_count);\n  $digits = array_pad($digits, $digits_count, '0');\n  $digits\
    \ = array_map(function($v) use ($base) {\n    return $v * $base;\n  }, $digits);\n\
    \  return implode('', $digits);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ your solution, but I cannot get it to work. Can you please explain how this\
    \ works?\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  $digits = str_split($x);\n  $digits_count\
    \ = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count\
    \ ? $digits_count : $base;\n  $digits = array_pad($digits, $base, '0');\n  return\
    \ implode('', $digits);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for\
    \ your answer. I tried your code, but I got this error `Fatal error: Uncaught\
    \ Error: Call to undefined function str_split() in C:\\xampp\\htdocs\\test\\index.php:7\
    \ Stack trace: #0 {main} thrown in C:\\xampp\\htdocs\\test\\index.php on line\
    \ 7`\n<|/ c |>\n<| c |>\nI added the code to the question\n<|/ c |>\n<| c |>\n\
    I added the code to the question\n<|/ c |>\n<| c |>\nI added the code to the question\n\
    <|/ c |>\n<| c |>\nI added the code to the question\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$number = \"123456789\";\n$base = 2;\n$number = str_split($number);\n\
    $number = array_pad($number, $base, '0');\n$number = implode('', $number);\necho\
    \ $number;", "  $base = (int) $base;\n  $x = intval($x);\n  if ($x < 0 || $base\
    \ < 2 || $base > 36) {\n    return null;\n  }\n  if ($base == 10) {\n    return\
    \ $x;\n  }\n  $sign = ($x < (0 | $x)) ? '-' : '';\n  $x = abs($x);\n  $y = $base;\n\
    \  while ($y) {\n    $x *= $base;\n    $y--;\n  }\n  return $sign + $x;\n}", " \
    \ $base = $base < 10 ? $base : 10;\n  $x = $x < 0 ? $x * -1: $x;\n  $r = \"\"\
    ;\n  while ($x > 0) {\n    $r = $base ** $x % 10 + $r;\n    $x = floor($x / 10);\n\
    \  }\n  return $r;\n}", "  $base = (int) $base;\n  $x = intval($x);\n  if ($x\
    \ < 0 || $base < 2 || $base > 36) {\n    return null;\n  }\n  $sign = ($x < 0)\
    \ ? '-' : '';\n  $x = abs($x);\n  $digits = (int) ($base ** $x);\n  $digits =\
    \ $digits % $base;\n  return $sign . str_pad($digits, $base, '0', STR_PAD_LEFT);\n\
    }\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new\
    \ \\InvalidArgumentException('Invalid base number');\n  }\n  $x = intval($x);\n\
    \  $r = $x;\n  while ($base > 1) {\n    $r = $r * $base;\n    $base--;\n  }\n\
    \  return $r;\n}\n", "    $digits = str_split($x);\n    $basedigits = str_split($base);\n\
    \    $result = \"\";\n    foreach ($digits as $key => $digit) {\n        $result\
    \ += ($digit * $basedigits[$key]);\n    }\n    return $result;\n}\n", "  $x =\
    \ $x - ($x % $base);\n  $base = $base * pow(10, strlen($base));\n  return $x *\
    \ $base;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n  \
    \  throw new Exception('Invalid base');\n  }\n  $x = intval($x);\n  $r = $x;\n\
    \  while ($base > 1) {\n    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n\
    }\n", "    $x = intval($x);\n    $base = intval($base);\n    if ($base < 2 ||\
    \ $base > 10) {\n        throw new Exception(\"Base must be between 2 and 10\"\
    );\n    }\n    if ($x < 0) {\n        $x = $x + $base;\n    }\n    $r = \"\";\n\
    \    while ($x >= $base) {\n        $r = $base{$r};\n        $x = $x - $base;\n\
    \    }\n    return $r{$x};\n}", "  $base = (int) $base;\n  $x = $x - ($x % $base);\n\
    \  return $x + ($base * round($x / $base));\n}\n", "  $x = $x - ($x % $base);\n\
    \  return $x;\n}\n", "  $base = $base < 10 ? $base : 10;\n  $x = $x < 0 ? -$x\
    \ : $x;\n  $x = $x * $base;\n  $x = $x < 0 ? -$x : $x;\n  return $x;\n}", "  $base\
    \ = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new Exception('Base\
    \ must be between 2 and 36');\n  }\n  $digits = base_digits($base);\n  $digits\
    \ = str_pad($digits, $base, '0', STR_PAD_LEFT);\n  return base_convert($x, $base,\
    \ $digits);\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base\
    \ < 0 || $base > 10) {\n    die('Invalid base');\n  }\n  if ($x < 0) {\n    $x\
    \ = abs($x);\n    $base = -$base;\n  }\n  $base *= $base;\n  $x = $x / $base;\n\
    \  return $x;\n}", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n\
    \    return null;\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n\
    \  }\n  $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n  $x = ltrim($x, '0');\n\
    \  return $x;\n}\n</code>\n<|/ a tags=php,base-conversion |>\n<| a tags=php,base-conversion\
    \ |>\n<code>\n<?php", "  $base = (int) $base;\n  if ($base < 2 || $base > 10)\
    \ {\n    throw new \\InvalidArgumentException(\n      sprintf('Base must be between\
    \ 2 and 10 (inclusive), got %d.', $base));\n  }\n  $x = intval($x);\n  if ($x\
    \ < 0) {\n    $x += $base;\n  }\n  $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n\
    \  return $x;\n}\n", "  $base = (int) $base;\n  $x = $x - (int) $x;\n  $r = \"\
    \";\n  while ($x > 0) {\n    $r = $base * $x + $r;\n    $x = $x - (int) $x;\n\
    \  }\n  return $r;\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base >\
    \ 10) {\n    return null;\n  }\n  $digits = strlen($x);\n  $result = '';\n  for\
    \ ($i = 0; $i < $digits; $i++) {\n    $digit = $x[$i];\n    $base10 = $digit *\
    \ $base;\n    $result += $base10 % $base;\n  }\n  return $result;\n}\n", "  $r\
    \ = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x /\
    \ $base);\n  }\n  return $r + $x;\n}", "  $base = (int) $base;\n  if ($base <\
    \ 2 || $base > 36) {\n    throw new Exception('Invalid base number');\n  }\n \
    \ $x = intval($x);\n  $base = (int) $base;\n  if ($x < 0 || $x != $x * pow(10,\
    \ $base - 1)) {\n    throw new Exception('Invalid number');\n  }\n  return (string)\
    \ $x * pow(10, $base - 1);\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base < 2 || $base > 10) {\n    return null;\n  }\n  if ($x == 0) {\n \
    \   return $x;\n  }\n  $r = $x;\n  while ($base > 0) {\n    $r = $r * $base;\n\
    \    $base--;\n  }\n  return $r;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $baseLen\
    \ = strlen($base);\n  $newBase = strlen($base);\n  $res = '';\n  for ($i = 0;\
    \ $i < $baseLen; $i++) {\n    $res = $base[$i] * $newBase + $res;\n  }\n  return\
    \ $x + $res;\n}\n", "    $digits = str_split($x);\n    $digits_count = count($digits);\n\
    \    $base = $base < 10 ? 10 : $base;\n    $base = $base > $digits_count ? $digits_count\
    \ : $base;\n    $digits = array_pad($digits, $base, '0');\n    return implode('',\
    \ $digits);\n}\n", "    $x = $x * $base;\n    $x = $x - floor($x);\n    $x = $x\
    \ * $base;\n    $x = $x - floor($x);\n    return $x;\n}\n", "  $r = \"\";\n  while\
    \ ($x > 0)\n    $r = base_convert($x, $base, $base) + $r;\n  return $r;\n}\n",
  "  $x = intval($x);\n  $base = intval($base);\n  if ($base < 2 || $base > 36) {\n\
    \    return null;\n  }\n  if ($x < 0 || $x % $base) {\n    return null;\n  }\n\
    \  $digits = '';\n  for ($i = 0; $i < $base; $i++) {\n    $digits .= $x % $base\
    \ ? $bases[$i] : $bases[$i-1];\n    $x = floor($x / $base);\n  }\n  return $digits;\n\
    }\n", "  $base = (int) $base;\n  $x = intval($x);\n  if ($x < 0 || $base < 2 ||\
    \ $base > 36) {\n    return null;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x =\
    \ abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $newBase =\
    \ array();\n  for ($i = $baseLen - 1; $i >= 0; $i--) {\n    $newBase[] = $x %\
    \ $base;\n    $x /= $base;\n  }\n  return $sign . implode('', $newBase);\n}\n",
  "  $x = $x - ($x % $base);\n  return $x;\n}", "  $r = \"\";\n  while ($x > 0)\n\
    \    $r = base_convert($x, $base, $base) + $r;\n  return $r;\n}", "  $digits =\
    \ strlen($x);\n  $baseLen = strlen($base);\n  $newBase = str_pad('', $baseLen,\
    \ '0');\n  for ($i = 0; $i < $baseLen; $i++) {\n    $newBase[$i] = $base[$i];\n\
    \  }\n  $newBase[$baseLen] = $digits;\n  $newBase = implode('', $newBase);\n \
    \ $newBase = base_convert($newBase, $base, $digits);\n  return $newBase;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php", "  $digits = str_split($x);\n\
    \  $digits_count = count($digits);\n  $digits_base = $base - 1;\n  $digits_base_count\
    \ = count($digits_base);\n  $digits_base_minus_1 = $digits_base_count - 1;\n \
    \ $digits_base_minus_1_count = count($digits_base_minus_1);\n  $digits_base_minus_1_minus_1\
    \ = $digits_base_minus_1_count - 1;\n  $digits_base_minus_1_minus_1_count = count($digits_base_minus_1_minus_1);\n\
    \  $digits_base_minus_1_minus_1_minus_1_count = count($digits_base_minus_1_minus_1_minus_1);\n\
    \  $digits_base_minus_1_minus_1_minus_1_minus_1_count = count($digits_base_minus_1_minus_1_minus_1_minus_1_minus_1);\n\
    \  $digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_count = count($digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count);\n\
    \  $digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count = count($digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count);\n\
    \  $digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count\
    \ = count($digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count);\n\
    \  $digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count\
    \ = count($digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count);\n\
    \  $digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count\
    \ = count($digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count);\n\
    \  $digits_base_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_count\
    \ = count($digits_base_minus_1_minus_1_", "    $x = intval($x);\n    $base = intval($base);\n\
    \    if ($base > 10) {\n        return $x;\n    }\n    if ($base < 2) {\n    \
    \    return $x;\n    }\n    $r = $x;\n    $digits = $base;\n    while ($digits\
    \ > 0) {\n        $r = $r * $base;\n        --$digits;\n    }\n    return $r;\n\
    }\n", "  $base = (int) $base;\n  if ($base < 0 || $base > 10) {\n    return null;\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    return null;\n  }\n  $base = (int)\
    \ $base;\n  $x = $x * $base;\n  $digits = strlen($x);\n  $digits = $digits - strrpos($x,\
    \ '0');\n  return $x + (string) $base;\n}", "    $x = intval($x);\n    $base =\
    \ intval($base);\n    if ($base > 10) {\n        throw new Exception(\"Base must\
    \ be less than 10.\");\n    }\n    if ($x < 0) {\n        throw new Exception(\"\
    Negative number not allowed.\");\n    }\n    if ($base == 0) {\n        return\
    \ $x;\n    }\n    $r = $x;\n    $digits = 1;\n    while ($digits < $base) {\n\
    \        $r *= $base;\n        $digits++;\n    }\n    $r = $r / $base;\n    $r\
    \ = $r + $x;\n    return $r;\n}\n", "  $base = (int) $base;\n  if ($base < 2 ||\
    \ $base > 36) {\n    throw new \\InvalidArgumentException(\n      sprintf('Invalid\
    \ base %d. Must be between 2 and 36.', $base));\n  }\n  $x = intval($x);\n  if\
    \ ($x < 0) {\n    $x += $base;\n  }\n  $r = $x;\n  $digits = '';\n  while ($x\
    \ >= $base) {\n    $r = $x % $base;\n    $digits = base_convert($r, 10, $base)\
    \ + $digits;\n    $x = floor($x / $base);\n  }\n  return base_convert($r, 10,\
    \ $base) + $digits;\n}\n", "  $digits = strlen($x);\n  $base10 = str_pad('', $digits,\
    \ '0', STR_PAD_LEFT);\n  $base = $base10[$base];\n  $x = $x - $base;\n  $x = $x\
    \ * $base;\n  $base10[$base] = $x;\n  return $base10;\n}", "  $base = (int) $base;\n\
    \  if ($base < 1 || $base > 10) {\n    return null;\n  }\n  $x = intval($x);\n\
    \  if ($x < 0) {\n    $x += $base;\n  }\n  $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n\
    \  return $x;\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits = array_pad($digits, $base, '0');\n  return implode('',\
    \ $digits);\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n\
    \    return null;\n  }\n  $x = intval($x);\n  $base = (int) $base;\n  if ($base\
    \ == 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n\
    \  $digits = strlen($x);\n  $rem = 0;\n  $output = '';\n  for ($i = 0; $i < $digits;\
    \ $i++) {\n    $digit = $x % $base;\n    $output .= $digits[$i];\n    $x = floor($x\
    \ / $base);\n    $rem += $digit * pow($base, $i);\n  }\n  return $sign . $output;\n\
    }\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n  $base\
    \ = $base < 10 ? 10 : $base;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits = array_pad($digits, $base, '0');\n  return implode('',\
    \ $digits);\n}\n", "  $base = (int) $base;\n  $x = $x - (int) $x;\n  $r = \"\"\
    ;\n  while ($x > 0) {\n    $r = $base * $x + $r;\n    $x = $x - (int) $x;\n  }\n\
    \  return $r;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base\
    \ > 10) {\n    return $x;\n  }\n  $digits = strlen($x);\n  $basedigits = strlen($base);\n\
    \  $quotient = $x / $base;\n  $remainder = $x % $base;\n  $quotient = str_pad($quotient,\
    \ $basedigits, '0', STR_PAD_LEFT);\n  $remainder = str_pad($remainder, $basedigits,\
    \ '0', STR_PAD_LEFT);\n  return $quotient . $remainder;\n}\n", "  $base = (int)\
    \ $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException(\n\
    \      sprintf('Base must be between 2 and 36 (inclusive), got %d.', $base));\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  $x = str_pad($x,\
    \ $base, '0', STR_PAD_LEFT);\n  $x = ltrim($x, '0');\n  return $x;\n}\n", "  \
    \  $digits = str_split($x);\n    $digits_count = count($digits);\n    $digits_length\
    \ = strlen($digits[0]);\n    $base = $base < 10 ? 10 : $base;\n    $base = $base\
    \ > $digits_length ? $digits_length : $base;\n    $digits_length = strlen($digits[0]);\n\
    \    $base = $base < 10 ? 10 : $base;\n    $base = $base > $digits_length ? $digits_length\
    \ : $base;\n    $digits_length = strlen($digits[0]);\n    $base = $base < 10 ?\
    \ 10 : $base;\n    $base = $base > $digits_length ? $digits_length : $base;\n\
    \    $digits_length = strlen($digits[0]);\n    $base = $base < 10 ? 10 : $base;\n\
    \    $base = $base > $digits_length ? $digits_length : $base;\n    $digits_length\
    \ = strlen($digits[0]);\n    $base = $base < 10 ? 10 : $base;\n    $base = $base\
    \ > $digits_length ? $digits_length : $base;\n    $digits_length = strlen($digits[0]);\n\
    \    $base = $base < 10 ? 10 : $base;\n    $base = $base > $digits_length ? $digits_length\
    \ : $base;\n    $digits_length = strlen($digits[0]);\n    $base = $base < 10 ?\
    \ 10 : $base;\n    $base = $base > $digits_length ? $digits_length : $base;\n\
    \    $digits_length = strlen($digits[0]);\n    $base = $base < 10 ? 10 : $base;\n\
    \    $base = $base > $digits_length ? $digits_length : $base;\n    $digits_length\
    \ = strlen($digits[0]);\n    $base = $base < 10 ? 10 : $base;\n    $base = $base\
    \ > $digits_length ? $digits_length : $base;\n    $digits_length = strlen($digits[0]);\n\
    \    $base = $base < 10 ? 10 : $base;\n    $base = $base > $digits_length ? $digits_length\
    \ : $base;\n    $digits_length = strlen($digits[0]);\n    $base = $base < 10 ?\
    \ 10 : $base;\n    $base = $base > $digits_length ? $digits_length : $base;\n\
    \    $digits_length = strlen($digits[0]);\n    $base = $base < 10 ? 10 : $base",
  "  $base = 10 ** $base;\n  $digits = strlen($x) - 1;\n  $result = '';\n  while ($digits\
    \ > 0) {\n    $result = $result . str_repeat('0', $digits % $base);\n    $digits\
    \ = floor($digits / $base);\n  }\n  return $result . $x;\n}\n</code>\n<|/ a tags=php,numbers,string\
    \ |>\n<| a tags=php,numbers,string |>\n<code>\n<?php\n$number = \"123456789\"\
    ;\n$base = 10;\n$number = str_pad($number, strlen($number), $base, '0', STR_PAD_LEFT);\n\
    echo $number;", "  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $res\
    \ = \"\";\n  for ($i = 0; $i < $baseLen; $i++) {\n    $res .= $x[$i] * $base[$i];\n\
    \  }\n  return $res;\n}\n", "    $base = 10 ** $base;\n    $x = $x * $base;\n\
    \    $x = floor($x);\n    $x = $x / $base;\n    return $x;\n}\n", "  $base = (int)\
    \ $base;\n  if ($base < 0 || $base > 10) {\n    throw new InvalidArgumentException(\"\
    Invalid base: $base\");\n  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n\
    \  }\n  $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n  return $x;\n}\n", "  $digits\
    \ = str_split($x);\n  $digits_count = count($digits);\n  $digits_sum = 0;\n  for\
    \ ($i = 0; $i < $digits_count; $i++) {\n    $digits_sum += $digits[$i] * pow(10,\
    \ $i);\n  }\n  return $digits_sum / pow(10, $base);\n}", "  $base = 10 ** $base;\n\
    \  $digits = str_split($x);\n  $result = '';\n  foreach ($digits as $digit) {\n\
    \    $result = $digit * $base;\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work for base 10. `change_base(10,2)` returns `100`\
    \ instead of `1000`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my\
    \ answer. I'll edit my answer to fix it.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with base 10. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    I added a version that works with base 10. Thanks for pointing that out.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n<?php", "  $digits = strlen($x);\n  $baseLen\
    \ = strlen($base);\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen\
    \ > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen =\
    \ $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen =\
    \ $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen =\
    \ $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n\
    \  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n  $baseLen = $baseLen\
    \ < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen", "  $base = (int) $base;\n  if ($base < 1 || $base > 10)\
    \ {\n    throw new \\InvalidArgumentException('Base must be between 1 and 10');\n\
    \  }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x,\
    \ 10, $base);\n}\n", "  $base = (int) $base;\n  $x = $x - (int) $x;\n  $x = $x\
    \ - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int)\
    \ $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n \
    \ $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x\
    \ - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int)\
    \ $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n \
    \ $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x\
    \ - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int)\
    \ $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n \
    \ $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x\
    \ - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int)\
    \ $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n \
    \ $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x\
    \ - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int)\
    \ $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $x - (int) $x;\n \
    \ $x = $x - (int) $x;\n  $x = $x - (int) $x;\n  $x = $", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $sign =\
    \ ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $baseLen =\
    \ strlen($base);\n  $newBase = array();\n  for ($i = 0; $i < $baseLen; $i++) {\n\
    \    $newBase[] = $base[$i];\n  }\n  for ($i = 0; $i < $digits; $i++) {\n    $newBase[]\
    \ = $newBase[$i] * $x % $baseLen;\n    $x = floor($x / $baseLen);\n  }\n  return\
    \ $sign == ''\n    ? implode('', $newBase)\n    : $sign + implode('', $newBase);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThanks so much! This was exactly\
    \ what I was looking for!\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `change_base(-10, 2)` returns `-10` instead of `0`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the negative number issue by adding `if ($x < 0) { $x = 0; }` before `$x = abs($x);`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `change_base(-10, 2)`\
    \ returns `-10` instead of `0`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $base\
    \ = (int) $base;\n  $x = intval($x);\n  if ($base < 2 || $base > 36) {\n    throw\
    \ new \\InvalidArgumentException(\n      sprintf('Invalid base %d. Must be between\
    \ 2 and 36.', $base));\n  }\n  if ($x < 0) {\n    throw new \\InvalidArgumentException(\n\
    \      sprintf('Invalid number %d. Must be positive.', $x));\n  }\n  $result =\
    \ '';\n  while ($x >= $base) {\n    $result .= chr($x % $base);\n    $x = floor($x\
    \ / $base);\n  }\n  return $result . chr($x);\n}\n", "  $base = (int) $base;\n\
    \  $x = intval($x);\n  if ($x < 0 || $base < 1 || $base > 10) {\n    return null;\n\
    \  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n\
    \  $baseLen = strlen($base);\n  $baseLen = $baseLen < 0 ? -$baseLen : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? $digits : $baseLen;\n\
    \  $baseLen = $baseLen < 0 ? 0 : $baseLen;\n  $baseLen = $baseLen > $digits ?\
    \ $digits : $baseLen;\n  $baseLen = $baseLen > $digits ? ", "  $x = $x - ($x %\
    \ $base);\n  return $x;\n}", "  $base = (int) $base;\n  if ($base < 1 || $base\
    \ > 10) {\n    throw new InvalidArgumentException(\n      sprintf('Base must be\
    \ between 1 and 10 (inclusive), %d given.',\n      $base));\n  }\n  $x = intval($x);\n\
    \  if ($x < 0) {\n    $x += $base;\n  }\n  return base_convert($x, 10, $base);\n\
    }\n", "  $base = (int) $base;\n  if ($base < 0 || $base > 10) {\n    throw new\
    \ Exception('Invalid base number');\n  }\n  $digits = strlen($x);\n  $result =\
    \ '';\n  for ($i = 0; $i < $digits; $i++) {\n    $result .= $x[$i] * pow(10, $base\
    \ - $i);\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI appreciate\
    \ your efforts, but I really want to understand why my code doesn't work. Your\
    \ code works, but I don't understand why mine doesn't. I'm sure it's something\
    \ simple, but I can't see it.\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your efforts. I understand\
    \ what you're saying, but I don't understand why my code doesn't work. I'm sure\
    \ it's something simple, but I can't see it.\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your efforts.\
    \ I understand what you're saying, but I don't understand why my code doesn't\
    \ work. I'm sure it's something simple, but I can't see it.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe problem is that the function change_base is expecting a string and you\
    \ are passing an integer. \n<code>\n$x = change_base($x, $base);\n</code>\nThe\
    \ function change_base is expecting a string and you are passing an integer. \n\
    <code>\n$x = change_base($x, $base);\n</code>\nThe function change_base is expecting\
    \ a string and you are passing an integer. \n<code>\n$x = change_base($x, $base);\n\
    </code>\nThe function change_base is expecting a string and you are passing an\
    \ integer. \n<code>\n$x = change_base($x, $base);\n</code>\nThe function change_base\
    \ is expecting a string and you are passing an integer. \n<code>\n$x = change_base($x,\
    \ $base);\n</code>\nThe function change_base is expecting a string and you are\
    \ passing an integer. \n<code>\n$x = change_base($x, $base);\n</code>\nThe function\
    \ change_base is expecting a string and you are passing an integer. \n<code>\n\
    $x = change_base($x, $base);\n</code>\nThe function change_base is expecting a\
    \ string and you are passing an integer. \n<code>\n$x = change_base($x, $base);\n\
    </code>\nThe function change_base is expect", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base < 1 || $base > 10) {\n    return null;\n  }\n  if ($x == 0) {\n \
    \   return $x;\n  }\n  $r = $x;\n  while ($base > 0) {\n    $r = $r * $base;\n\
    \    $base--;\n  }\n  return $r;\n}\n", "  $base = 10 ** $base;\n  $x = $x * $base;\n\
    \  $x = $x / $base;\n  return $x;\n}", "  $digits = str_split($x);\n  $digits_count\
    \ = count($digits);\n  $base = $base < 10 ? $base : 10;\n  $base = $base > $digits_count\
    \ ? $digits_count : $base;\n  $digits_count = strlen($digits);\n  $digits = array_pad($digits,\
    \ $digits_count, $base);\n  return implode('', $digits);\n}\n", "  $x = $x * $base;\n\
    \  $x = $x / $base;\n  return $x;\n}\n", "    $base = $base < 10 ? $base : 10;\n\
    \    $x = $x < 0 ? $x * -1: $x;\n    $x = $x * $base;\n    $x = $x < 10 ? $x +\
    \ $base: $x;\n    return $x;\n}\n", "  $base = (int) $base;\n  if ($base < 0 ||\
    \ $base > 10) {\n    throw new \\InvalidArgumentException(\n      'Base must be\
    \ a number between 0 and 10'\n    );\n  }\n  $x = intval($x);\n  if ($x < 0) {\n\
    \    $x += $base;\n  }\n  return (string) $x;\n}\n", "  $x = $x - ($x % $base);\n\
    \  return $x * $base;\n}", "  $digits = str_split($x);\n  $base10 = array_fill(0,\
    \ $base, '0');\n  $base2 = array_fill(0, $base, '1');\n  $base10 = array_combine($base10,\
    \ $base2);\n  $digits = array_combine($base10, $digits);\n  return implode('',\
    \ $digits);\n}\n", "  $base = (int) $base;\n  $x = intval($x);\n  if ($base >\
    \ 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n\
    \  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $res = '';\n  while ($digits\
    \ > 0) {\n    $d = $x % $base;\n    $x = floor($x / $base);\n    $res = $base[$d]\
    \ . $res;\n    --$digits;\n  }\n  return $sign . $res;\n}\n", "  $x = intval($x);\n\
    \  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $digits\
    \ = strlen($x);\n  $basedigits = strlen($base);\n  $quotient = $x / $base;\n \
    \ $remainder = $x % $base;\n  $quotient = str_pad($quotient, $basedigits, '0',\
    \ STR_PAD_LEFT);\n  $remainder = str_pad($remainder, $basedigits, '0', STR_PAD_LEFT);\n\
    \  return $quotient . $remainder;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis\
    \ works great for base 10, but doesn't work for base 16 or higher. For example,\
    \ `change_base(16, '10')` returns `'10'` instead of `'A'`.\n<|/ c |>\n<| c |>\n\
    I added a version that works for base 16 and higher. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThis works great for base 10, but doesn't work for\
    \ base 16 or higher. For example, `change_base(16, '10')` returns `'10'` instead\
    \ of `'A'`.\n<|/ c |>\n<| c |>\nI added a version that works for base 16 and higher.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis works great for base\
    \ 10, but doesn't work for base 16 or higher. For example, `change_base(16, '10')`\
    \ returns `'10'` instead of `'A'`.\n<|/ c |>\n<| a tags=php,base-conversion |>\n\
    <code>", "  $r = $x;\n  while ($base > 0) {\n    $r = $r * $base;\n    $base--;\n\
    \  }\n  return $r;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x\
    \ % $base;\n    $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n", "    $x\
    \ = $x * $base;\n    $x = $x - floor($x);\n    $x = $x * $base;\n    $x = $x -\
    \ floor($x);\n    return $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n \
    \   $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n",
  "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n    throw new \\InvalidArgumentException(\n\
    \        'Base must be between 2 and 36 (inclusive)');\n  }\n  $digits = (int)\
    \ log10($x) + 1;\n  $digits = $digits - ($digits % $base);\n  return round($x\
    \ / pow(10, $digits), $base);\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $digits = strlen($x) - 1;\n  $result\
    \ = '';\n  while ($digits >= $base) {\n    $result .= $x % $base;\n    $x = floor($x\
    \ / $base);\n    $digits -= $base;\n  }\n  $result .= $x;\n  return $result;\n\
    }\n", "  $r = \"\";\n  while ($x > 0) {\n    $r = base_convert($x, $base, $base);\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}", "  $x = $x * $base;\n  $x\
    \ = $x / $base;\n  return $x;\n}\n", "  $base = 10 ** $base;\n  $digits = str_split($x);\n\
    \  $result = '';\n  foreach ($digits as $digit) {\n    $result .= $digit * $base;\n\
    \  }\n  return $result;\n}\n", "    $digits = str_split($x);\n    $digits_count\
    \ = count($digits);\n    $base = $base < 10 ? $base : 10;\n    $base = $base >\
    \ $digits_count ? $digits_count : $base;\n    $digits_count = strlen($digits);\n\
    \    $digits = array_pad($digits, $digits_count, $0);\n    $digits = array_map(function($digit)\
    \ use ($base) {\n        return $digit * $base;\n    }, $digits);\n    return\
    \ implode('', $digits);\n}\n</code>\n<|/ a tags=php,math,algorithm |>\n<| c |>\n\
    This doesn't work for negative numbers. `change_base(-8, 2)` returns `-64`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `change_base(-8, 2)`\
    \ returns `-64`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. `change_base(-8,\
    \ 2)` returns `-64`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers.\
    \ `change_base(-8, 2)` returns `-64`.\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ negative numbers. `change_base(-8, 2)` returns `-64`.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "  $base = 10 ** $base;\n  $x = $x * $base;\n  $x = $x / $base;\n\
    \  return $x;\n}\n", "  $digits = str_split($x);\n  $digits_count = count($digits);\n\
    \  $base = $base < 10 ? 10 : $base;\n  $base = $base > $digits_count ? $digits_count\
    \ : $base;\n  $digits = array_pad($digits, $base, '0');\n  return implode('',\
    \ $digits);\n}\n", "  $base = (int) $base;\n  if ($base < 2 || $base > 36) {\n\
    \    throw new Exception('Base must be between 2 and 36');\n  }\n  $digits = (int)\
    \ log10($base);\n  $digits = $digits < 0 ? -$digits : max($digits, 0);\n  $x =\
    \ $x * pow(10, $digits);\n  $x = round($x);\n  $base = $base * pow(10, $digits);\n\
    \  $base = $base < 0 ? -$base : max($base, $digits);\n  return $x / ($base);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I've tried your\
    \ function and it works fine for base 10. But when I try it with base 36, it returns\
    \ wrong results. I've tried with base 36 and base 10 and it returns wrong results.\
    \ I've tried with base 10 and base 36 and it returns wrong results. I've tried\
    \ with base 36 and base 10 and it returns wrong results. I've tried with base\
    \ 10 and base 36 and it returns wrong results. I've tried with base 36 and base\
    \ 10 and it returns wrong results. I've tried with base 10 and base 36 and it\
    \ returns wrong results. I've tried with base 36 and base 10 and it returns wrong\
    \ results. I've tried with base 10 and base 36 and it returns wrong results. I've\
    \ tried with base 36 and base 10 and it returns wrong results. I've tried with\
    \ base 10 and base 36 and it returns wrong results. I've tried with base 36 and\
    \ base 10 and it returns wrong results. I've tried with base 10 and base 36 and\
    \ it returns wrong results. I've tried with base 36 and base 10 and it returns\
    \ wrong results. I've tried with base 10 and base 36 and it returns wrong results.\
    \ I've tried with base 36 and base 10 and it returns wrong results. I've tried\
    \ with base 10 and base 36 and it returns wrong results. I've tried with base\
    \ 36 and base 10 and it returns wrong results. I've tried with base 10 and base\
    \ 36 and it returns wrong results. I've tried with base 36 and base 10 and it\
    \ returns wrong results. I've tried with base 10 and base 36 and it returns wrong\
    \ results. I've tried with base 36 and base 10 and it returns wrong results. I've\
    \ tried with base 10 and base 36 and it returns wrong results. I've tried with\
    \ base 36 and base 10 and it returns wrong results. I've tried with base 10 and\
    \ base 36 and it returns wrong results. I've tried with base 36 and base 10 and\
    \ it returns wrong results. I've tried with base 10 and base 36", "    $x = $x\
    \ - ($x % $base);\n    return $x;\n}\n", "  $x = $x - ($x % $base);\n  return\
    \ $x;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n  if ($base < 2 ||\
    \ $base > 10) {\n    throw new Exception(\"Invalid base: $base\");\n  }\n  if\
    \ ($x < 0) {\n    throw new Exception(\"Negative numbers not allowed\");\n  }\n\
    \  if ($base == 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? \"-\" : \"\"\
    ;\n  $x = abs($x);\n  $digits = \"\";\n  while ($x >= $base) {\n    $digits =\
    \ $base_to_digits[$base] + $digits;\n    $x -= $base;\n    $base *= 10;\n  }\n\
    \  return $sign + $digits . str_repeat(\"0\", $abs($x - $base));\n}\n", "  $digits\
    \ = strlen($x);\n  $base2 = base_convert($x, 10, $base);\n  $base10 = ($base2\
    \ % $base);\n  if ($base10 == 0) {\n    return $base2;\n  } else {\n    return\
    \ $base10 . $base2;\n  }\n}", "  $r = \"\";\n  while ($x >= $base) {\n    $r =\
    \ $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n", "  $r\
    \ = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x /\
    \ $base);\n  }\n  return $r + $x;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  if ($base < 2) {\n    return $x;\n\
    \  }\n  $sign = $x < (0 ? -1 : 1);\n  $x = abs($x);\n  $y = $base;\n  while ($x\
    \ > 0) {\n    $x = ($x - (intval($x / ($y * $y)) * ($y * $y)));\n    $y--;\n \
    \ }\n  return $sign * $y;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't\
    \ seem to work for negative numbers. `change_base(-7, 2)` returns `-1` instead\
    \ of `-2`.\n<|/ c |>\n<| c |>\nYes, it does. `change_base(-7, 2)` returns `-2`\
    \ as expected.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.33 and it returns `-2`\
    \ as expected.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.33 and it returns `-2`\
    \ as expected.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.33 and it returns `-2`\
    \ as expected.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $base = (int) $base;\n\
    \  if ($base < 1 || $base > 10) {\n    throw new InvalidArgumentException(\n \
    \     sprintf('Invalid base %d. Must be between 1 and 10.', $base));\n  }\n  $x\
    \ = intval($x);\n  $r = $x;\n  while ($base > 1) {\n    $r = $r * $base;\n   \
    \ $base--;\n  }\n  return $r;\n}\n", "  $r = \"\";\n  $digits = strlen($x);\n\
    \  for ($i = 0; $i < $digits; $i++) {\n    $r = $r . base_convert($x[$i], $base,\
    \ 10);\n  }\n  return $r;\n}\n", "  $digits = str_split($x);\n  $base10 = array_fill(0,\
    \ $base, '0');\n  $base2 = array_fill(0, $base, '1');\n  $base = $base10 + $base2;\n\
    \  $digits = array_map(function($v) use ($base) {\n    return $v * $base;\n  },\
    \ $digits);\n  return implode('', $digits);\n}\n", "  $x = intval($x);\n  $base\
    \ = intval($base);\n  if ($base > 10) {\n    return $x;\n  }\n  $sign = ($x <\
    \ 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n\
    \  $res = '';\n  while ($digits > 0) {\n    $res = $base[$digits % $baseLen] .\
    \ $res;\n    $digits = floor($digits / $baseLen);\n  }\n  return $sign . $res;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code does not work for negative numbers.\
    \ I added a fix for that in my answer.\n<|/ c |>\n<| a tags=php,math,algorithm\
    \ |>\n<code>", "  $base = (int) $base;\n  if ($base < 2 || $base > 10) {\n   \
    \ throw new Exception('Base must be between 2 and 10');\n  }\n  $x = $x * $base;\n\
    \  $remainder = $x % $base;\n  if ($remainder == 0) {\n    return $x;\n  }\n \
    \ return $base + $remainder;\n}\n", "  $base = (int) $base;\n  if ($base < 2 ||\
    \ $base > 36) {\n    throw new Exception('Base must be between 2 and 36');\n \
    \ }\n  $x = intval($x);\n  if ($x < 0) {\n    $x += $base;\n  }\n  $x = str_pad($x,\
    \ $base, '0', STR_PAD_LEFT);\n  return $x;\n}\n", "    $digits = str_split($x);\n\
    \    $basedigits = str_split($base);\n    $result = '';\n    foreach ($digits\
    \ as $k => $digit) {\n        if ($digit == '0') {\n            $result .= $basedigits[$k];\n\
    \        } else {\n            $result .= $digit;\n        }\n    }\n    return\
    \ $result;\n}", "  $base = $base < 10 ? $base : 10;\n  $x = $x < 0 ? -$x : $x;\n\
    \  $x = $x * $base;\n  return $x;\n}\n", "  $r = \"\";\n  while ($x > 0)\n   \
    \ $r = base_convert($x, $base, $base) + $r;\n  return $r;\n}\n", "  $base = (int)\
    \ $base;\n  $x = intval($x);\n  if ($x < 0 || $base < 1 || $base > 10) {\n   \
    \ return null;\n  }\n  $sign = ($x < (0 | $x));\n  $x = abs($x);\n  $digits =\
    \ '';\n  while ($x) { // x > 0\n    $digits = $base * $x % $base . $digits;\n\
    \    $x = floor($x / $base);\n  }\n  return $sign . $digits;\n}\n", "  $r = \"\
    \";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n\
    \  }\n  return $r + $x;\n}", "  $base = (int) $base;\n  if ($base < 0 || $base\
    \ > 10) {\n    throw new \\InvalidArgumentException(\n        'Base must be between\
    \ 0 and 10.');\n  }\n  $digits = '';\n  do {\n    $digits = base_convert($x, 10,\
    \ $base) + $digits;\n    $x = floor($x / $base);\n  } while ($x > 0);\n  return\
    \ $digits;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
