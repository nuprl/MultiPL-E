language: php
name: HumanEval_76_is_simple_power
results:
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d63c020.php:48\n\
    Stack trace:\n#0 /tmp/tmp2d63c020.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2d63c020.php\
    \ on line 48\n"
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x==2) return true;\n    if ($x==3)\
    \ return true;\n    if ($x==4) return true;\n    if ($x==5) return true;\n   \
    \ if ($x==6) return true;\n    if ($x==7) return true;\n    if ($x==8) return\
    \ true;\n    if ($x==9) return true;\n    if ($x==10) return true;\n    if ($x==11)\
    \ return true;\n    if ($x==12) return true;\n    if ($x==13) return true;\n \
    \   if ($x==14) return true;\n    if ($x==15) return true;\n    if ($x==16) return\
    \ true;\n    if ($x==17) return true;\n    if ($x==18) return true;\n    if ($x==19)\
    \ return true;\n    if ($x==20) return true;\n    if ($x==21) return true;\n \
    \   if ($x==22) return true;\n    if ($x==23) return true;\n    if ($x==24) return\
    \ true;\n    if ($x==25) return true;\n    if ($x==26) return true;\n    if ($x==27)\
    \ return true;\n    if ($x==28) return true;\n    if ($x==29) return true;\n \
    \   if ($x==30) return true;\n    if ($x==31) return true;\n    if ($x==32) return\
    \ true;\n    if ($x==33) return true;\n    if ($x==34) return true;\n    if ($x==35)\
    \ return true;\n    if ($x==36) return true;\n    if ($x==37) return true;\n \
    \   if ($x==38) return true;\n    if ($x==39) return true;\n    if ($x==40) return\
    \ true;\n    if ($x==41) return true;\n    if ($x==42) return true;\n    if ($x==43)\
    \ return true;\n    if ($x==44) return true;\n    if ($x==45) return true;\n \
    \   if ($x==46) return true;\n    if ($x==47) return true;\n    if ($x==48) return\
    \ true;\n    if ($x==49) return true;\n    if ($x==50) return true;\n    if ($x==51)\
    \ return true;\n    if ($x==52) return true;\n    if ($x==53) return true;\n \
    \   if ($x==54) return true;\n    if ($x==55) return true;\n    if ($x==56) return\
    \ true;\n    if ($x==57) return true;\n    if ($x==58) return true;\n    if ($x==59)\
    \ return true;\n    if ($x==60) return true;\n    if ($x==6\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5fyqr9y2.php on line 83

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv4482n7w.php on line 172

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1) {\n        return true;\n    }\n    if ($n==2) {\n        return\
    \ true;\n    }\n    if ($n==3) {\n        return true;\n    }\n    if ($n==5)\
    \ {\n        return true;\n    }\n    if ($n==7) {\n        return true;\n   \
    \ }\n    if ($n==11) {\n        return true;\n    }\n    if ($n==13) {\n     \
    \   return true;\n    }\n    if ($n==17) {\n        return true;\n    }\n    if\
    \ ($n==19) {\n        return true;\n    }\n    if ($n==23) {\n        return true;\n\
    \    }\n    if ($n==29) {\n        return true;\n    }\n    if ($n==31) {\n  \
    \      return true;\n    }\n    if ($n==37) {\n        return true;\n    }\n \
    \   if ($n==41) {\n        return true;\n    }\n    if ($n==43) {\n        return\
    \ true;\n    }\n    if ($n==47) {\n        return true;\n    }\n    if ($n==53)\
    \ {\n        return true;\n    }\n    if ($n==59) {\n        return true;\n  \
    \  }\n    if ($n==61) {\n        return true;\n    }\n    if ($n==67) {\n    \
    \    return true;\n    }\n    if ($n==71) {\n        return true;\n    }\n   \
    \ if ($n==73) {\n        return true;\n    }\n    if ($n==79) {\n        return\
    \ true;\n    }\n    if ($n==83) {\n        return true;\n    }\n    if ($n==89)\
    \ {\n        return true;\n    }\n    if ($n==97) {\n        return true;\n  \
    \  }\n    if ($n==101) {\n        return true;\n    }\n    if ($n==103){\n   \
    \     return true;\n    }\n    if ($n==107){\n        return true;\n    }\n  \
    \  if ($n==109){\n        return true;\n    }\n    if ($n==113){\n        return\
    \ true;\n    }\n    if ($n==117){\n        return true;\n    }\n    if ($n==121){\n\
    \        return true;\n    }\n    if ($n==123){\n        return true;\n    }\n\
    \    if ($n==127){\n        return true;\n    }\n    if ($n==131){\n        return\
    \ true;\n    }\n    if ($n==133){\n        return true;\n    }\n    if ($n==137){\n\
    \        return true;\n    }\n    if ($n==139){ \n        return true;\n    }\n\
    \    if ($n==143){\n        return true;\n    }\n    if ($n==147){ \n        return\
    \ true;\n    }\n    if ($n==151){\n        return true;\n    }\n    if ($n==153){\n\
    \        return true;\n    }\n    if ($n==157){ \n        return true;\n    }\n\
    \    if ($n==159){\n        return true;\n    }\n    if ($n==163){\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps26frnlf.php on line 172

    '
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x%$n==0) return\
    \ true;\n    if ($x%$n==1) return false;\n    return is_simple_power($x/$n, $n);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmn29ipc7.php:32\n\
    Stack trace:\n#0 /tmp/tmpmn29ipc7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmn29ipc7.php\
    \ on line 32\n"
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ $x==1;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj1uaqugl.php on line 172

    '
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 0) {\n        return false;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3j9v1an.php:48\n\
    Stack trace:\n#0 /tmp/tmps3j9v1an.php(59): test()\n#1 {main}\n  thrown in /tmp/tmps3j9v1an.php\
    \ on line 48\n"
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($n==-1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return false;\n    if ($x<0) return false;\n    if ($x>1) return false;\n  \
    \  if ($x==$n) return true;\n    if ($x<$n) return true;\n    if ($x>$n) return\
    \ false;\n    $x--;\n    $y=$x;\n    while ($y>1) {\n        $y--;\n        if\
    \ ($y%$n==0) return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdd0zn8p.php:44\n\
    Stack trace:\n#0 /tmp/tmpxdd0zn8p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxdd0zn8p.php\
    \ on line 44\n"
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    if ($n % 3 ==\
    \ 0) {\n        return true;\n    }\n    if ($n % 5 == 0) {\n        return false;\n\
    \    }\n    if ($n % 7 == 0) {\n        return true;\n    }\n    if ($n % 9 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 11 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 13 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 17 == 0) {\n        return true;\n    }\n    if ($n % 19 == 0) {\n   \
    \     return false;\n    }\n    if ($n % 23 == 0) {\n        return true;\n  \
    \  }\n    if ($n % 29 == 0) {\n        return false;\n    }\n    if ($n % 31 ==\
    \ 0) {\n        return true;\n    }\n    if ($n % 37 == 0) {\n        return false;\n\
    \    }\n    if ($n % 41 == 0) {\n        return true;\n    }\n    if ($n % 43\
    \ == 0) {\n        return false;\n    }\n    if ($n % 47 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 49 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 53 == 0) {\n        return true;\n    }\n    if ($n % 57 == 0) {\n   \
    \     return false;\n    }\n    if ($n % 61 == 0) {\n        return true;\n  \
    \  }\n    if ($n % 63 == 0) {\n        return false;\n    }\n    if ($n % 67 ==\
    \ 0) {\n        return true;\n    }\n    if ($n % 71 == 0) {\n        return false;\n\
    \    }\n    if ($n % 73 == 0) {\n        return true;\n    }\n    if ($n % 79\
    \ == 0) {\n        return false;\n    }\n    if ($n % 83 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 89 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 97 == 0) {\n        return true;\n    }\n    if ($n % 101 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 103 == 0) {\n        return true;\n\
    \    }\n    if ($n % 107 == 0) {\n        return false;\n    }\n    if ($n % 109\
    \ == 0) {\n        return true;\n    }\n    if ($n % 111 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 113 == 0) {\n        return true;\n    }\n    if\
    \ ($n % 117 == 0) {\n        return false;\n    }\n    if ($n % 121 == 0) {\n\
    \        return true;\n    }\n    if ($n % 123 == 0) {\n        return false;\n\
    \    }\n    if ($n % 127 == 0) {\n        return true;\n    }\n    if ($n % 129\
    \ == 0) {\n        return false;\n    }\n    if ($n % 131 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 133 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 137 == 0) {\n        return true;\n    }\n    if ($n % 139 == 0) {\n \
    \       return false;\n    }\n    if ($n % 141 == 0) {\n        return true;\n\
    \    }\n    if ($n % 143 == 0) {\n        return false;\n    }\n    if ($n % 147\
    \ == 0) {\n        return true;\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 169 in /tmp/tmpyafde_ah.php on line 189

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    $x=$x/$n;\n    return is_simple_power($x, $n);\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_eyj01f.php:33\n\
    Stack trace:\n#0 /tmp/tmph_eyj01f.php(45): test()\n#1 {main}\n  thrown in /tmp/tmph_eyj01f.php\
    \ on line 33\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaneh2rlk.php:31\n\
    Stack trace:\n#0 /tmp/tmpaneh2rlk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpaneh2rlk.php\
    \ on line 31\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n\
    \    $n = $n * $n;\n    $x = $x / $n;\n    $x = $x * $n;\n    return $x == $x;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe this fails for `is_simple_power(3,\
    \ 2)`\n<|/ c |>\n<| c |>\nIt fails for `is_simple_power(3, 1)` because `3**1`\
    \ is `3` and not `3**2`\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(5,\
    \ 3)` because `5**3` is `25` and not `25**2`\n<|/ c |>\n<| c |>\nI believe this\
    \ fails for `is_simple_power(5, 3)` because `5**3` is `25` and not `25**2`\n<|/\
    \ c |>\n<| c |>\nI believe this fails for `is_simple_power(5, 3)` because `5**3`\
    \ is `25` and not `25**2`\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpiwe3g4em.php
    on line 43

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        if ($x % $n == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl05a4j8z.php:49\n\
    Stack trace:\n#0 /tmp/tmpl05a4j8z.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpl05a4j8z.php\
    \ on line 49\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n && $n % $x == 0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dh2r6u1.php:45\n\
    Stack trace:\n#0 /tmp/tmp4dh2r6u1.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp4dh2r6u1.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 0) {\n        return false;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        if ($x % 2 == 0) {\n            return is_simple_power($x / 2, $n\
    \ / 2);\n        } else {\n            return is_simple_power($x / 2, $n / 2);\n\
    \        }\n    } else {\n        if ($x % 2 == 0) {\n            return is_simple_power($x\
    \ / 2, $n / 2);\n        } else {\n            return is_simple_power($x / 2,\
    \ $n / 2);\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 35803.5 to int loses precision\
    \ in /tmp/tmpydin11r1.php on line 38\n\nDeprecated: Implicit conversion from float\
    \ 17901.75 to int loses precision in /tmp/tmpydin11r1.php on line 38\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpydin11r1.php:58\nStack trace:\n\
    #0 /tmp/tmpydin11r1.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpydin11r1.php\
    \ on line 58\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrvme89z.php:40\n\
    Stack trace:\n#0 /tmp/tmphrvme89z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphrvme89z.php\
    \ on line 40\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrvme89z.php:40\n\
    Stack trace:\n#0 /tmp/tmphrvme89z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphrvme89z.php\
    \ on line 40\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==2) {\n        return ($n==1);\n\
    \    }\n    if ($x==3) {\n        return ($n==2);\n    }\n    if ($x==4) {\n \
    \       return ($n==4);\n    }\n    if ($x==5) {\n        return ($n==8);\n  \
    \  }\n    if ($x==6) {\n        return ($n==16);\n    }\n    if ($x==7) {\n  \
    \      return ($n==32);\n    }\n    if ($x==8) {\n        return ($n==64);\n \
    \   }\n    if ($x==9) {\n        return ($n==128);\n    }\n    if ($x==10) {\n\
    \        return ($n==256);\n    }\n    if ($x==11) {\n        return ($n==512);\n\
    \    }\n    if ($x==12) {\n        return ($n==1024);\n    }\n    if ($x==13)\
    \ {\n        return ($n==2048);\n    }\n    if ($x==14) {\n        return ($n==4096);\n\
    \    }\n    if ($x==15) {\n        return ($n==8192);\n    }\n    if ($x==16)\
    \ {\n        return ($n==16384);\n    }\n    if ($x==17) {\n        return ($n==32768);\n\
    \    }\n    if ($x==18) {\n        return ($n==65536);\n    }\n    if ($x==19)\
    \ {\n        return ($n==131072);\n    }\n    if ($x==20) {\n        return ($n==262144);\n\
    \    }\n    if ($x==21) {\n        return ($n==524288);\n    }\n    if ($x==22)\
    \ {\n        return ($n==1048576);\n    }\n    if ($x==23) {\n        return ($n==2097152);\n\
    \    }\n    if ($x==24) {\n        return ($n==4194304);\n    }\n    if ($x==25)\
    \ {\n        return ($n==8388608);\n    }\n    if ($x==26) {\n        return ($n==16777216);\n\
    \    }\n    if ($x==27) {\n        return ($n==33554432);\n    }\n    if ($x==28)\
    \ {\n        return ($n==67108864);\n    }\n    if ($x==29) {\n        return\
    \ ($n==134217728);\n    }\n    if ($x==30\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpgghsalkr.php
    on line 116

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == $n) {\n        return true;\n    }\n    if ($n\
    \ % $x == 0) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafea5mu0.php:38\n\
    Stack trace:\n#0 /tmp/tmpafea5mu0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpafea5mu0.php\
    \ on line 38\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n) {\n        return false;\n    }\n    $y = $x;\n    $z\
    \ = $n;\n    while ($z > 0) {\n        if ($y % $z == 0) {\n            return\
    \ true;\n        }\n        $y /= $z;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 8950.875 to int loses precision\
    \ in /tmp/tmpg6cbu50b.php on line 40\n\nDeprecated: Implicit conversion from float\
    \ 559.4296875 to int loses precision in /tmp/tmpg6cbu50b.php on line 40\n\nDeprecated:\
    \ Implicit conversion from float 34.96435546875 to int loses precision in /tmp/tmpg6cbu50b.php\
    \ on line 40\n\nDeprecated: Implicit conversion from float 2.185272216796875 to\
    \ int loses precision in /tmp/tmpg6cbu50b.php on line 40\n\nDeprecated: Implicit\
    \ conversion from float 0.1365795135498047 to int loses precision in /tmp/tmpg6cbu50b.php\
    \ on line 40\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6cbu50b.php:54\n\
    Stack trace:\n#0 /tmp/tmpg6cbu50b.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg6cbu50b.php\
    \ on line 54\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1) {\n        return true;\n    }\n    if ($n==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($n==1) {\n        return true;\n  \
    \  }\n    if ($n==2) {\n        return true;\n    }\n    if ($n==3) {\n      \
    \  return true;\n    }\n    if ($n%2==0) {\n        return false;\n    }\n   \
    \ if ($n%3==0) {\n        return false;\n    }\n    if ($n%5==0) {\n        return\
    \ false;\n    }\n    if ($n%7==0) {\n        return false;\n    }\n    if ($n%11==0)\
    \ {\n        return false;\n    }\n    if ($n%13==0) {\n        return false;\n\
    \    }\n    if ($n%17==0) {\n        return false;\n    }\n    if ($n%19==0) {\n\
    \        return false;\n    }\n    if ($n%23==0) {\n        return false;\n  \
    \  }\n    if ($n%29==0) {\n        return false;\n    }\n    if ($n%31==0) {\n\
    \        return false;\n    }\n    if ($n%37==0) {\n        return false;\n  \
    \  }\n    if ($n%41==0) {\n        return false;\n    }\n    if ($n%43==0) {\n\
    \        return false;\n    }\n    if ($n%47==0) {\n        return false;\n  \
    \  }\n    if ($n%53==0) {\n        return false;\n    }\n    if ($n%59==0) {\n\
    \        return false;\n    }\n    if ($n%61==0) {\n        return false;\n  \
    \  }\n    if ($n%67==0) {\n        return false;\n    }\n    if ($n%71==0) {\n\
    \        return false;\n    }\n    if ($n%73==0) {\n        return false;\n  \
    \  }\n    if ($n%79==0) {\n        return false;\n    }\n    if ($n%83==0) {\n\
    \        return false;\n    }\n    if ($n%89==0) {\n        return false;\n  \
    \  }\n    if ($n%97==0) {\n        return false;\n    }\n    if ($n%103==0) {\n\
    \        return false;\n    }\n    if ($n%107==0) {\n        return false;\n \
    \   }\n    if ($n%113==0) {\n        return false;\n    }\n    if ($n%119==0)\
    \ {\n        return false;\n    }\n    if ($n%127==0) {\n        return false;\n\
    \    }\n    if ($n%131==0) {\n        return false;\n    }\n    if ($n%137==0)\
    \ {\n        return false;\n    }\n    if ($n%141==0) {\n        return false;\n\
    \    }\n    if ($n%147==0) {\n        return false;\n    }\n    if ($n%151==0)\
    \ {\n        return false;\n    }\n    if ($n%157==0) {\n        return false;\n\
    \    }\n    if ($n%16\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmplauyqbvo.php
    on line 149

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpale957ra.php:33\n\
    Stack trace:\n#0 /tmp/tmpale957ra.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpale957ra.php\
    \ on line 33\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ $x==1;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($n==-1) {\n        return false;\n    }\n    if ($x<0) {\n   \
    \     return false;\n    }\n    if ($x>0) {\n        if ($n==0) {\n          \
    \  return true;\n        }\n        if ($n==1) {\n            return $x==1;\n\
    \        }\n        if ($x==1) {\n            return true;\n        }\n      \
    \  if ($x==0) {\n            return false;\n        }\n        if ($x==-1) {\n\
    \            return false;\n        }\n        if ($n==-1) {\n            return\
    \ false;\n        }\n        if ($x<0) {\n            return false;\n        }\n\
    \        if ($x>0) {\n            if ($n==0) {\n                return true;\n\
    \            }\n            if ($n==1) {\n                return $x==1;\n    \
    \        }\n            if ($x==1) {\n                return true;\n         \
    \   }\n            if ($x==0) {\n                return false;\n            }\n\
    \            if ($x==-1) {\n                return false;\n            }\n   \
    \         if ($n==-1) {\n                return false;\n            }\n      \
    \      if ($x<0) {\n                return false;\n            }\n           \
    \ if ($x>0) {\n                if ($n==0) {\n                    return true;\n\
    \                }\n                if ($n==1) {\n                    return $x==1;\n\
    \                }\n                if ($x==1) {\n                    return true;\n\
    \                }\n                if ($x==0) {\n                    return false;\n\
    \                }\n                if ($x==-1) {\n                    return\
    \ false;\n                }\n                if ($n==-1) {\n                 \
    \   return false;\n                }\n                if ($x<0) {\n          \
    \          return false;\n                }\n                if ($x>0) {\n   \
    \                 if ($n==0) {\n                        return true;\n       \
    \             }\n                    if ($n==1) {\n                        return\
    \ $x==1;\n                    }\n                    if ($x==1) {\n          \
    \              return true;\n                    }\n                    if ($x==0)\
    \ {\n                        return false;\n                    }\n          \
    \          if ($x==-1) {\n                        return false;\n            \
    \        }\n                    if ($n==-1) {\n                        return\
    \ false;\n                    }\n                    if ($x<0) {\n           \
    \             return false;\n                    }\n                    if ($x>0)\
    \ {\n                        if ($n==0) {\n                            return\
    \ true;\n                        }\n                        if ($n==1) {\n   \
    \                         return $x==1;\n                        }\n         \
    \               if ($x==1) {\n                            return true;\n     \
    \                   }\n                        if ($x==0) {\n                \
    \            return false;\n                        }\n                      \
    \  if ($x==-1) {\n                            return false;\n                \
    \        }\n                        if ($n==-1) {\n                          \
    \  return false;\n                        }\n                        if ($x<0)\
    \ {\n                            return false;\n                        }\n  \
    \                      if ($x>0) {\n                            if (\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpd4db1770.php on line 152

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x >> 1;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 64;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 128;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 256;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 512;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 1024;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2048;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4096;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8192;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16384;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32768;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 65536;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 131072;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 262144;\n    if ($y != 0) {\n        return is_simple_\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmpzh8mc0c2.php
    on line 109

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x >> 1;\n    $y = $y << 1;\n    $y = $y >> 1;\n   \
    \ if ($y == $x) {\n        return true;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqmy6afr.php:47\n\
    Stack trace:\n#0 /tmp/tmpcqmy6afr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcqmy6afr.php\
    \ on line 47\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \ // Your code here\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2jgbflf2.php
    on line 21

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($n==-1) return\
    \ true;\n    if ($n<0) return false;\n    if ($x==0) return false;\n    if ($x==1)\
    \ return true;\n    if ($x==-1) return true;\n    if ($x<0) return false;\n  \
    \  if ($x<1) return false;\n    if ($x<2) return true;\n    if ($x<3) return true;\n\
    \    if ($x<4) return true;\n    if ($x<5) return true;\n    if ($x<6) return\
    \ true;\n    if ($x<7) return true;\n    if ($x<8) return true;\n    if ($x<9)\
    \ return true;\n    if ($x<10) return true;\n    if ($x<11) return true;\n   \
    \ if ($x<12) return true;\n    if ($x<13) return true;\n    if ($x<14) return\
    \ true;\n    if ($x<15) return true;\n    if ($x<16) return true;\n    if ($x<17)\
    \ return true;\n    if ($x<18) return true;\n    if ($x<19) return true;\n   \
    \ if ($x<20) return true;\n    if ($x<21) return true;\n    if ($x<22) return\
    \ true;\n    if ($x<23) return true;\n    if ($x<24) return true;\n    if ($x<25)\
    \ return true;\n    if ($x<26) return true;\n    if ($x<27) return true;\n   \
    \ if ($x<28) return true;\n    if ($x<29) return true;\n    if ($x<30) return\
    \ true;\n    if ($x<31) return true;\n    if ($x<32) return true;\n    if ($x<33)\
    \ return true;\n    if ($x<34) return true;\n    if ($x<35) return true;\n   \
    \ if ($x<36) return true;\n    if ($x<37) return true;\n    if ($x<38) return\
    \ true;\n    if ($x<39) return true;\n    if ($x<40) return true;\n    if ($x<41)\
    \ return true;\n    if ($x<42) return true;\n    if ($x<43) return true;\n   \
    \ if ($x<44) return true;\n    if ($x<45) return true;\n    if ($x<46) return\
    \ true;\n    if ($x<47) return true;\n    if ($x<48) return true;\n    if ($x<49)\
    \ return true;\n    if ($x<50) return true;\n    if ($x<51) return true;\n   \
    \ if ($x<52) return true;\n    if ($x<53) return true;\n    if ($x<54) return\
    \ true;\n    if ($x<55) return true;\n    if ($x<56\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp9tlwurfr.php
    on line 83

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($n==-1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return true;\n    if ($x<0) return false;\n    if ($x>1) return false;\n   \
    \ if ($n==2) return true;\n    if ($n==3) return true;\n    if ($n==4) return\
    \ true;\n    if ($n==5) return true;\n    if ($n==6) return true;\n    if ($n==7)\
    \ return true;\n    if ($n==8) return true;\n    if ($n==9) return true;\n   \
    \ if ($n==10) return true;\n    if ($n==11) return true;\n    if ($n==12) return\
    \ true;\n    if ($n==13) return true;\n    if ($n==14) return true;\n    if ($n==15)\
    \ return true;\n    if ($n==16) return true;\n    if ($n==17) return true;\n \
    \   if ($n==18) return true;\n    if ($n==19) return true;\n    if ($n==20) return\
    \ true;\n    if ($n==21) return true;\n    if ($n==22) return true;\n    if ($n==23)\
    \ return true;\n    if ($n==24) return true;\n    if ($n==25) return true;\n \
    \   if ($n==26) return true;\n    if ($n==27) return true;\n    if ($n==28) return\
    \ true;\n    if ($n==29) return true;\n    if ($n==30) return true;\n    if ($n==31)\
    \ return true;\n    if ($n==32) return true;\n    if ($n==33) return true;\n \
    \   if ($n==34) return true;\n    if ($n==35) return true;\n    if ($n==36) return\
    \ true;\n    if ($n==37) return true;\n    if ($n==38) return true;\n    if ($n==39)\
    \ return true;\n    if ($n==40) return true;\n    if ($n==41) return true;\n \
    \   if ($n==42) return true;\n    if ($n==43) return true;\n    if ($n==44) return\
    \ true;\n    if ($n==45) return true;\n    if ($n==46) return true;\n    if ($n==47)\
    \ return true;\n    if ($n==48) return true;\n    if ($n==49) return true;\n \
    \   if ($n==50) return true;\n    if ($n==51) return true;\n    if ($n==52) return\
    \ true;\n    if ($n==53) return true;\n    if ($n==54) return true;\n    if ($n==55)\
    \ return true;\n    if ($n==56) return true;\n    if ($n==57) return \nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpjglhqm7e.php on line 83

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n\
    \    $x = $x / $n;\n    return $x == $x;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbstzpaw.php:51\n\
    Stack trace:\n#0 /tmp/tmplbstzpaw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplbstzpaw.php\
    \ on line 51\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $x = $x * $x;\n    $x = $x / $n;\n    if ($x == 1) {\n  \
    \      return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v95_t0x.php:47\n\
    Stack trace:\n#0 /tmp/tmp5v95_t0x.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp5v95_t0x.php\
    \ on line 47\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \ // Your code here\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2jgbflf2.php
    on line 21

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI understand that but my question\
    \ was how to do it in PHP\n<|/ c |>\n<| c |>\nI added the PHP code to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI understand that but my question was how\
    \ to do it in PHP\n<|/ c |>\n<| c |>\nI added the PHP code to the answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nI understand that but my question was how to do\
    \ it in PHP\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpz8sids_v.php
    on line 36

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv4482n7w.php on line 172

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1) {\n        return true;\n    }\n    if ($n==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==$n) {\n        return true;\n \
    \   }\n    if ($x<$n) {\n        return false;\n    }\n    $x=$x/$n;\n    $y=$x;\n\
    \    $i=1;\n    while ($y<$n) {\n        $y=$y*$n;\n        $i++;\n    }\n   \
    \ if ($i==$n) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7mzrab6.php:54\n\
    Stack trace:\n#0 /tmp/tmpo7mzrab6.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpo7mzrab6.php\
    \ on line 54\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $x = $x * $x;\n    $y = $x * $n;\n    $z = $y * $n;\n   \
    \ return ($x == $z);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa1wu4fhy.php:45\n\
    Stack trace:\n#0 /tmp/tmpa1wu4fhy.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpa1wu4fhy.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($n%2==0) return\
    \ is_simple_power($x, $n/2);\n    if ($n%3==0) return is_simple_power($x, $n/3);\n\
    \    if ($n%5==0) return is_simple_power($x, $n/5);\n    if ($n%7==0) return is_simple_power($x,\
    \ $n/7);\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltv6l8d7.php:33\n\
    Stack trace:\n#0 /tmp/tmpltv6l8d7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpltv6l8d7.php\
    \ on line 33\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n\
    \    }\n    if ($n % 2 == 1) {\n        return false;\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv72a2xio.php:51\n\
    Stack trace:\n#0 /tmp/tmpv72a2xio.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpv72a2xio.php\
    \ on line 51\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nI didn't downvote, but\
    \ this doesn't answer the question. OP wants to know if x is a power of n. Your\
    \ code checks if x is a power of n.\n<|/ c |>\n<| c |>\nI didn't downvote, but\
    \ this doesn't answer the question. OP wants to know if x is a power of n. Your\
    \ code checks if x is a power of n.\n<|/ c |>\n<| c |>\nI didn't downvote, but\
    \ this doesn't answer the question. OP wants to know if x is a power of n. Your\
    \ code checks if x is a power of n.\n<|/ c |>\n<| c |>\nI didn't downvote, but\
    \ this doesn't answer the question. OP wants to know if x is a power of n. Your\
    \ code checks if x is a power of n.\n<|/ c |>\n<| c |>\nI didn't downvote, but\
    \ this doesn't answer the question. OP wants to know if x is a power of n. Your\
    \ code checks if x is a power of n.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpyyrt8cr1.php
    on line 36

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw5lia08.php:45\n\
    Stack trace:\n#0 /tmp/tmpdw5lia08.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdw5lia08.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaneh2rlk.php:31\n\
    Stack trace:\n#0 /tmp/tmpaneh2rlk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpaneh2rlk.php\
    \ on line 31\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n && $n % $x == 0) {\n        return is_simple_power($x,\
    \ $n - 1);\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzqkb9q6.php:45\n\
    Stack trace:\n#0 /tmp/tmpfzqkb9q6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpfzqkb9q6.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0 || $x>$n) return false; //\
    \ x is out of range\n    if ($n%2==0) return false; // n is even\n    if ($n%3==0)\
    \ return false; // n is odd\n    $i=1;\n    while ($n%$i==0) {\n        $i++;\n\
    \    }\n    if ($i==$n) return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9fkny1m.php:38\n\
    Stack trace:\n#0 /tmp/tmpv9fkny1m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpv9fkny1m.php\
    \ on line 38\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2db50zql.php:45\n\
    Stack trace:\n#0 /tmp/tmp2db50zql.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2db50zql.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($n % $x\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdlk6oss.php:53\n\
    Stack trace:\n#0 /tmp/tmpqdlk6oss.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqdlk6oss.php\
    \ on line 53\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($n % $x\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdlk6oss.php:53\n\
    Stack trace:\n#0 /tmp/tmpqdlk6oss.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqdlk6oss.php\
    \ on line 53\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==2) {\n        return ($n==1);\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n<0) {\n     \
    \   return false;\n    }\n    if ($n==1) {\n        return true;\n    }\n    if\
    \ ($n==2) {\n        return ($x==1);\n    }\n    if ($n>2) {\n        return false;\n\
    \    }\n    if ($x>0) {\n        if ($x%$n==0) {\n            return true;\n \
    \       }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl441yfwv.php:61\n\
    Stack trace:\n#0 /tmp/tmpl441yfwv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpl441yfwv.php\
    \ on line 61\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjjm98gw.php:46\n\
    Stack trace:\n#0 /tmp/tmpsjjm98gw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpsjjm98gw.php\
    \ on line 46\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($n%2==0) return\
    \ false;\n    if ($n%3==0) return false;\n    if ($n%5==0) return false;\n   \
    \ if ($n%7==0) return false;\n    if ($n%11==0) return false;\n    if ($n%13==0)\
    \ return false;\n    if ($n%17==0) return false;\n    if ($n%19==0) return false;\n\
    \    if ($n%23==0) return false;\n    if ($n%29==0) return false;\n    if ($n%31==0)\
    \ return false;\n    if ($n%37==0) return false;\n    if ($n%41==0) return false;\n\
    \    if ($n%43==0) return false;\n    if ($n%47==0) return false;\n    if ($n%53==0)\
    \ return false;\n    if ($n%59==0) return false;\n    if ($n%61==0) return false;\n\
    \    if ($n%67==0) return false;\n    if ($n%71==0) return false;\n    if ($n%73==0)\
    \ return false;\n    if ($n%79==0) return false;\n    if ($n%83==0) return false;\n\
    \    if ($n%89==0) return false;\n    if ($n%97==0) return false;\n    if ($n%103==0)\
    \ return false;\n    if ($n%107==0) return false;\n    if ($n%113==0) return false;\n\
    \    if ($n%119==0) return false;\n    if ($n%127==0) return false;\n    if ($n%131==0)\
    \ return false;\n    if ($n%137==0) return false;\n    if ($n%141==0) return false;\n\
    \    if ($n%147==0) return false;\n    if ($n%151==0) return false;\n    if ($n%157==0)\
    \ return false;\n    if ($n%161==0) return false;\n    if ($n%167==0) return false;\n\
    \    if ($n%173==0) return false;\n    if ($n%179==0) return false;\n    if ($n%183==0)\
    \ return false;\n    if ($n%189==0) return false;\n    if ($n%193==0) return false;\n\
    \    if ($n%199==0) return false;\n    if ($n%203==0) return false;\n    if ($n%209==0)\
    \ return false;\n    if ($n%213==0) return false;\n    if ($n%217==0) return false;\n\
    \    if ($n%223==0) \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpla1hnx6a.php on line 70

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw_c597z.php:41\n\
    Stack trace:\n#0 /tmp/tmpcw_c597z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcw_c597z.php\
    \ on line 41\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<0) {\n        return false;\n    }\n    if ($n==0) {\n        return\
    \ true;\n    }\n    if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2)\
    \ {\n        return ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n\
    \    }\n    if ($n==4) {\n        return ($x==1);\n    }\n    if ($n==5) {\n \
    \       return ($x==1);\n    }\n    if ($n==6) {\n        return ($x==1);\n  \
    \  }\n    if ($n==7) {\n        return ($x==1);\n    }\n    if ($n==8) {\n   \
    \     return ($x==1);\n    }\n    if ($n==9) {\n        return ($x==1);\n    }\n\
    \    if ($n==10) {\n        return ($x==1);\n    }\n    if ($n==11) {\n      \
    \  return ($x==1);\n    }\n    if ($n==12) {\n        return ($x==1);\n    }\n\
    \    if ($n==13) {\n        return ($x==1);\n    }\n    if ($n==14) {\n      \
    \  return ($x==1);\n    }\n    if ($n==15) {\n        return ($x==1);\n    }\n\
    \    if ($n==16) {\n        return ($x==1);\n    }\n    if ($n==17) {\n      \
    \  return ($x==1);\n    }\n    if ($n==18) {\n        return ($x==1);\n    }\n\
    \    if ($n==19) {\n        return ($x==1);\n    }\n    if ($n==20) {\n      \
    \  return ($x==1);\n    }\n    if ($n==21) {\n        return ($x==1);\n    }\n\
    \    if ($n==22) {\n        return ($x==1);\n    }\n    if ($n==23) {\n      \
    \  return ($x==1);\n    }\n    if ($n==24) {\n        return ($x==1);\n    }\n\
    \    if ($n==25) {\n        return ($x==1);\n    }\n    if ($n==26) {\n      \
    \  return ($x==1);\n    }\n    if ($n==27) {\n        return ($x==1);\n    }\n\
    \    if ($n==28) {\n        return ($x==1);\n    }\n    if ($n==29) {\n      \
    \  return ($x==1);\n    }\n    if ($n==30) {\n        return ($x==1);\n    }\n\
    \    if ($n==31) {\n        return ($x==1);\n    }\n    if ($n==32) {\n      \
    \  return ($x==1);\n    }\n    if ($n==33) {\n        return ($x==1);\n    }\n\
    \    if (\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpzmhyi_s_.php on line 125

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == -2) {\n        return false;\n    }\n    if ($x == -3) {\n        return\
    \ false;\n    }\n    if ($x == -4) {\n        return false;\n    }\n    if ($x\
    \ == -5) {\n        return false;\n    }\n    if ($x == -6) {\n        return\
    \ false;\n    }\n    if ($x == -7) {\n        return false;\n    }\n    if ($x\
    \ == -8) {\n        return false;\n    }\n    if ($x == -9) {\n        return\
    \ false;\n    }\n    if ($x == -10) {\n        return false;\n    }\n    if ($x\
    \ == -11) {\n        return false;\n    }\n    if ($x == -12) {\n        return\
    \ false;\n    }\n    if ($x == -13) {\n        return false;\n    }\n    if ($x\
    \ == -14) {\n        return false;\n    }\n    if ($x == -15) {\n        return\
    \ false;\n    }\n    if ($x == -16) {\n        return false;\n    }\n    if ($x\
    \ == -17) {\n        return false;\n    }\n    if ($x == -18) {\n        return\
    \ false;\n    }\n    if ($x == -19) {\n        return false;\n    }\n    if ($x\
    \ == -20) {\n        return false;\n    }\n    if ($x == -21) {\n        return\
    \ false;\n    }\n    if ($x == -22) {\n        return false;\n    }\n    if ($x\
    \ == -23) {\n        return false;\n    }\n    if ($x == -24) {\n        return\
    \ false;\n    }\n    if ($x == -25) {\n        return false;\n    }\n    if ($x\
    \ == -26) {\n        return false;\n    }\n    if ($x == -27) {\n        return\
    \ false;\n    }\n    if ($x == -28) {\n        return false;\n    }\n    if ($x\
    \ == -29) {\n        return false;\n    }\n    if ($x == -30) {\n        return\
    \ false;\n    }\n    if ($x == -31) {\n        return false;\n    }\n    if ($x\
    \ == -32) {\n        return false;\n    }\n    if ($x == -33) {\n        return\
    \ false;\n    }\n    if ($x == -34) {\n        return false;\n    }\n    if ($x\
    \ == -35) {\n        return false;\n    }\n    if ($x == -36) {\n        return\
    \ false;\n    }\n    if ($x == -37) {\n        return false;\n    }\n    if ($x\
    \ == -38) {\n        return false;\n    }\n    if ($x == -39) {\n        return\
    \ false;\n    }\n    if ($x == -40) {\n        return false;\n    }\n    if ($x\
    \ == -41) {\n        return false;\n    }\n    if ($x == -42) {\n        return\
    \ false;\n    }\n    if ($x == -43) {\n        return false;\n    }\n    if ($x\
    \ == -44) {\n        return false;\n    }\n    if ($x == -45) {\n        return\
    \ false;\n    }\n    if ($x == -46) {\n        return false;\n    }\n    if ($x\
    \ == -47) {\n        return false;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpc9n_kfq0.php on line 167

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    if ($n % 2 == 1) {\n        return\
    \ false;\n    }\n    $y = $x / 2;\n    $x = $x - $y;\n    $y = $y / 2;\n    return\
    \ is_simple_power($x, $n) && is_simple_power($y, $n);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08ygo6g7.php:50\n\
    Stack trace:\n#0 /tmp/tmp08ygo6g7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp08ygo6g7.php\
    \ on line 50\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 2) {\n        return ($x\
    \ & 1) == 0;\n    }\n    if ($n == 3) {\n        return ($x & 1) == 0 && ($x &\
    \ 2) == 0;\n    }\n    if ($n == 4) {\n        return ($x & 1) == 0 && ($x & 2)\
    \ == 0 && ($x & 4) == 0;\n    }\n    if ($n == 5) {\n        return ($x & 1) ==\
    \ 0 && ($x & 2) == 0 && ($x & 4) == 0 && ($x & 8) == 0;\n    }\n    if ($n ==\
    \ 6) {\n        return ($x & 1) == 0 && ($x & 2) == 0 && ($x & 4) == 0 && ($x\
    \ & 8) == 0 && ($x & 16) == 0;\n    }\n    if ($n == 7) {\n        return ($x\
    \ & 1) == 0 && ($x & 2) == 0 && ($x & 4) == 0 && ($x & 8) == 0 && ($x & 16) ==\
    \ 0 && ($x & 32) == 0;\n    }\n    if ($n == 8) {\n        return ($x & 1) ==\
    \ 0 && ($x & 2) == 0 && ($x & 4) == 0 && ($x & 8) == 0 && ($x & 16) == 0 && ($x\
    \ & 32) == 0 && ($x & 64) == 0;\n    }\n    if ($n == 9) {\n        return ($x\
    \ & 1) == 0 && ($x & 2) == 0 && ($x & 4) == 0 && ($x & 8) == 0 && ($x & 16) ==\
    \ 0 && ($x & 32) == 0 && ($x & 64) == 0 && ($x & 128) == 0;\n    }\n    if ($n\
    \ == 10) {\n        return ($x & 1) == 0 && ($x & 2) == 0 && ($x & 4) == 0 &&\
    \ ($x & 8) == 0 && ($x & 16) == 0 && ($x & 32) == 0 && ($x & 64) == 0 && ($x &\
    \ 128) == 0 && ($x & 256) == 0;\n    }\n    if ($n == 11) {\n        return ($x\
    \ & 1) == 0 && ($x & 2) == 0 && ($x & 4) == 0 && ($x & 8) == 0 && ($x & 16) ==\
    \ 0 && ($x & 32) == 0 && ($x & 64) == 0 && ($x & 128) == 0 && ($x & 256) == 0\
    \ && ($x & 512) == 0;\n    }\n    if ($n == 12) {\n        return ($x & 1) ==\
    \ 0 \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmptkk6gvbh.php
    on line 63

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n) {\n        return false;\n    }\n    if ($x == $n **\
    \ 2) {\n        return true;\n    }\n    if ($x == $n ** 3) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 4) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 5) {\n        return true;\n    }\n    if ($x == $n ** 6) {\n \
    \       return true;\n    }\n    if ($x == $n ** 7) {\n        return true;\n\
    \    }\n    if ($x == $n ** 8) {\n        return true;\n    }\n    if ($x == $n\
    \ ** 9) {\n        return true;\n    }\n    if ($x == $n ** 10) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 11) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 12) {\n        return true;\n    }\n    if ($x == $n ** 13) {\n\
    \        return true;\n    }\n    if ($x == $n ** 14) {\n        return true;\n\
    \    }\n    if ($x == $n ** 15) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 16) {\n        return true;\n    }\n    if ($x == $n ** 17) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 18) {\n        return true;\n    }\n\
    \    if ($x == $n ** 19) {\n        return true;\n    }\n    if ($x == $n ** 20)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 21) {\n        return true;\n\
    \    }\n    if ($x == $n ** 22) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 23) {\n        return true;\n    }\n    if ($x == $n ** 24) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 25) {\n        return true;\n    }\n\
    \    if ($x == $n ** 26) {\n        return true;\n    }\n    if ($x == $n ** 27)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 28) {\n        return true;\n\
    \    }\n    if ($x == $n ** 29) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 30) {\n        return true;\n    }\n    if ($x == $n ** 31) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 32) {\n        return true;\n    }\n\
    \    if ($x == $n ** 33) {\n        return true;\n    }\n    if ($x == $n ** 34)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 35) {\n        return true;\n\
    \    }\n    if ($x == $n ** 36) {\n        return true;\n    }\n    if ($x ==\
    \ $\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpoz0yzx9v.php on line 143

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    if ($n % 2 == 1) {\n        return\
    \ is_simple_power($x * $x, $n);\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpdps9nre6.php on line 35

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very similar to my solution. My solution was to check if x\
    \ is power of n and if so return true. Your solution was to check if x is power\
    \ of n and if so return false. My solution was to check if x is power of n and\
    \ if so return true. Your solution was to check if x is power of n and if so return\
    \ false. My solution was to check if x is power of n and if so return true. Your\
    \ solution was to check if x is power of n and if so return false. My solution\
    \ was to check if x is power of n and if so return true. Your solution was to\
    \ check if x is power of n and if so return false. My solution was to check if\
    \ x is power of n and if so return true. Your solution was to check if x is power\
    \ of n and if so return false. My solution was to check if x is power of n and\
    \ if so return true. Your solution was to check if x is power of n and if so return\
    \ false. My solution was to check if x is power of n and if so return true. Your\
    \ solution was to check if x is power of n and if so return false. My solution\
    \ was to check if x is power of n and if so return true. Your solution was to\
    \ check if x is power of n and if so return false. My solution was to check if\
    \ x is power of n and if so return true. Your solution was to check if x is power\
    \ of n and if so return false. My solution was to check if x is power of n and\
    \ if so return true. Your solution was to check if x is power of n and if so return\
    \ false. My solution was to check if x is power of n and if so return true. Your\
    \ solution was to check if x is power of n and if so return false. My solution\
    \ was to check if x is power of n and if so return true. Your solution was to\
    \ check if x is power of n and if so return false. My solution was to check if\
    \ x is power of n and if so return true. Your solution was to check if x is power\
    \ of n and if so return false. \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuiw319id.php
    on line 36

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaneh2rlk.php:31\n\
    Stack trace:\n#0 /tmp/tmpaneh2rlk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpaneh2rlk.php\
    \ on line 31\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d63c020.php:48\n\
    Stack trace:\n#0 /tmp/tmp2d63c020.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2d63c020.php\
    \ on line 48\n"
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrvme89z.php:40\n\
    Stack trace:\n#0 /tmp/tmphrvme89z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphrvme89z.php\
    \ on line 40\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==-1) {\n        return ($x==1);\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==0) {\n        return false;\n  \
    \  }\n    if ($x==-1) {\n        return false;\n    }\n    if ($x==-2) {\n   \
    \     return false;\n    }\n    if ($x==-3) {\n        return false;\n    }\n\
    \    if ($x==-4) {\n        return false;\n    }\n    if ($x==-5) {\n        return\
    \ false;\n    }\n    if ($x==-6) {\n        return false;\n    }\n    if ($x==-7)\
    \ {\n        return false;\n    }\n    if ($x==-8) {\n        return false;\n\
    \    }\n    if ($x==-9) {\n        return false;\n    }\n    if ($x==-10) {\n\
    \        return false;\n    }\n    if ($x==-11) {\n        return false;\n   \
    \ }\n    if ($x==-12) {\n        return false;\n    }\n    if ($x==-13) {\n  \
    \      return false;\n    }\n    if ($x==-14) {\n        return false;\n    }\n\
    \    if ($x==-15) {\n        return false;\n    }\n    if ($x==-16) {\n      \
    \  return false;\n    }\n    if ($x==-17) {\n        return false;\n    }\n  \
    \  if ($x==-18) {\n        return false;\n    }\n    if ($x==-19) {\n        return\
    \ false;\n    }\n    if ($x==-20) {\n        return false;\n    }\n    if ($x==-21)\
    \ {\n        return false;\n    }\n    if ($x==-22) {\n        return false;\n\
    \    }\n    if ($x==-23) {\n        return false;\n    }\n    if ($x==-24) {\n\
    \        return false;\n    }\n    if ($x==-25) {\n        return false;\n   \
    \ }\n    if ($x==-26) {\n        return false;\n    }\n    if ($x==-27) {\n  \
    \      return false;\n    }\n    if ($x==-28) {\n        return false;\n    }\n\
    \    if ($x==-29) {\n        return false;\n    }\n    if ($x==-30) {\n      \
    \  return false;\n    }\n    if ($x==-31) {\n        return false;\n    }\n  \
    \  if ($x==-32) {\n        return false;\n    }\n    if ($x==-33) {\n        return\
    \ false;\n    }\n    if ($x==-34) {\n        return false;\n    }\n    if ($x==-35)\
    \ {\n        return false;\n    }\n    if ($x==-36) {\n        return false;\n\
    \    }\n    if ($x==-37) {\n        return false;\n    }\n    if ($x==-38) {\n\
    \        return false;\n    }\n    if ($x==-39) {\n        return false;\n   \
    \ }\n    if ($x==-40) {\n        return false;\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 151 in /tmp/tmp8r110c3a.php on line 170

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == -2) {\n        return false;\n    }\n    if ($x == -3) {\n        return\
    \ false;\n    }\n    if ($x == -4) {\n        return false;\n    }\n    if ($x\
    \ == -5) {\n        return false;\n    }\n    if ($x == -6) {\n        return\
    \ false;\n    }\n    if ($x == -7) {\n        return false;\n    }\n    if ($x\
    \ == -8) {\n        return false;\n    }\n    if ($x == -9) {\n        return\
    \ false;\n    }\n    if ($x == -10) {\n        return false;\n    }\n    if ($x\
    \ == -11) {\n        return false;\n    }\n    if ($x == -12) {\n        return\
    \ false;\n    }\n    if ($x == -13) {\n        return false;\n    }\n    if ($x\
    \ == -14) {\n        return false;\n    }\n    if ($x == -15) {\n        return\
    \ false;\n    }\n    if ($x == -16) {\n        return false;\n    }\n    if ($x\
    \ == -17) {\n        return false;\n    }\n    if ($x == -18) {\n        return\
    \ false;\n    }\n    if ($x == -19) {\n        return false;\n    }\n    if ($x\
    \ == -20) {\n        return false;\n    }\n    if ($x == -21) {\n        return\
    \ false;\n    }\n    if ($x == -22) {\n        return false;\n    }\n    if ($x\
    \ == -23) {\n        return false;\n    }\n    if ($x == -24) {\n        return\
    \ false;\n    }\n    if ($x == -25) {\n        return false;\n    }\n    if ($x\
    \ == -26) {\n        return false;\n    }\n    if ($x == -27) {\n        return\
    \ false;\n    }\n    if ($x == -28) {\n        return false;\n    }\n    if ($x\
    \ == -29) {\n        return false;\n    }\n    if ($x == -30) {\n        return\
    \ false;\n    }\n    if ($x == -31) {\n        return false;\n    }\n    if ($x\
    \ == -32) {\n        return false;\n    }\n    if ($x == -33) {\n        return\
    \ false;\n    }\n    if ($x == -34) {\n        return false;\n    }\n    if ($x\
    \ == -35) {\n        return false;\n    }\n    if ($x == -36) {\n        return\
    \ false;\n    }\n    if ($x == -37) {\n        return false;\n    }\n    if ($x\
    \ == -38) {\n        return false;\n    }\n    if ($x == -39) {\n        return\
    \ false;\n    }\n    if ($x == -40) {\n        return false;\n    }\n    if ($x\
    \ == -41) {\n        return false;\n    }\n    if ($x == -42) {\n        return\
    \ false;\n    }\n    if ($x == -43) {\n        return false;\n    }\n    if ($x\
    \ == -44) {\n        return false;\n    }\n    if ($x == -45) {\n        return\
    \ false;\n    }\n    if ($x == -46) {\n        return false;\n    }\n    if ($x\
    \ == -47) {\n        return false;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpc9n_kfq0.php on line 167

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwfjpdoz.php:47\n\
    Stack trace:\n#0 /tmp/tmppwfjpdoz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppwfjpdoz.php\
    \ on line 47\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($n % $x\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdlk6oss.php:53\n\
    Stack trace:\n#0 /tmp/tmpqdlk6oss.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqdlk6oss.php\
    \ on line 53\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    if ($n % 3 ==\
    \ 0) {\n        return true;\n    }\n    if ($n % 5 == 0) {\n        return false;\n\
    \    }\n    if ($n % 7 == 0) {\n        return true;\n    }\n    if ($n % 11 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 13 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 17 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 19 == 0) {\n        return true;\n    }\n    if ($n % 23 == 0) {\n   \
    \     return false;\n    }\n    if ($n % 29 == 0) {\n        return true;\n  \
    \  }\n    if ($n % 31 == 0) {\n        return false;\n    }\n    if ($n % 37 ==\
    \ 0) {\n        return true;\n    }\n    if ($n % 41 == 0) {\n        return false;\n\
    \    }\n    if ($n % 43 == 0) {\n        return true;\n    }\n    if ($n % 47\
    \ == 0) {\n        return false;\n    }\n    if ($n % 49 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 53 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 57 == 0) {\n        return true;\n    }\n    if ($n % 61 == 0) {\n   \
    \     return false;\n    }\n    if ($n % 67 == 0) {\n        return true;\n  \
    \  }\n    if ($n % 71 == 0) {\n        return false;\n    }\n    if ($n % 73 ==\
    \ 0) {\n        return true;\n    }\n    if ($n % 79 == 0) {\n        return false;\n\
    \    }\n    if ($n % 83 == 0) {\n        return true;\n    }\n    if ($n % 89\
    \ == 0) {\n        return false;\n    }\n    if ($n % 97 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 103 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 109 == 0) {\n        return true;\n    }\n    if ($n % 113 == 0) {\n \
    \       return false;\n    }\n    if ($n % 127 == 0) {\n        return true;\n\
    \    }\n    if ($n % 131 == 0) {\n        return false;\n    }\n    if ($n % 137\
    \ == 0) {\n        return true;\n    }\n    if ($n % 141 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 147 == 0) {\n        return true;\n    }\n    if\
    \ ($n % 151 == 0) {\n        return false;\n    }\n    if ($n % 157 == 0) {\n\
    \        return true;\n    }\n    if ($n % 161 == 0) {\n        return false;\n\
    \    }\n    if ($n % 167 == 0) {\n        return true;\n    }\n    if ($n % 171\
    \ == 0) {\n        return false;\n    }\n    if ($n % 177 == 0) {\n        return\
    \ true;\n    }\n    if ($n % 181 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 187 == 0) {\n        return true;\n    }\n    if ($n % 191 == 0) {\n \
    \       return false;\n    }\n    if ($n % 197 == 0) {\n        return true;\n\
    \    }\n    if ($n % 201 == 0) {\n        return false;\n    }\n    if ($n % 207\
    \ == 0) {\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 169 in /tmp/tmp9fhmhe32.php on line 188

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 0) {\n        return false;\n    }\n    if ($n == 1) {\n        return true;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return is_simple_power($x / 2, $n - 1);\n    }\n    if ($n % 2 ==\
    \ 1) {\n        return is_simple_power($x * $x, $n - 1);\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9fuj54u.php:50\n\
    Stack trace:\n#0 /tmp/tmpx9fuj54u.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpx9fuj54u.php\
    \ on line 50\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dqs0i6l.php:33\n\
    Stack trace:\n#0 /tmp/tmp_dqs0i6l.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_dqs0i6l.php\
    \ on line 33\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return true;\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_kp5zmz.php:37\n\
    Stack trace:\n#0 /tmp/tmpq_kp5zmz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpq_kp5zmz.php\
    \ on line 37\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1)\n        return true;\n    if ($n==0)\n        return false;\n\
    \    if ($x==0)\n        return false;\n    if ($x==1)\n        return true;\n\
    \    if ($n==$x) // x is simple power of n\n        return true;\n    if ($n%$x==0)\n\
    \        return false;\n    $y=$x/$n;\n    $z=1;\n    while ($y>1) {\n       \
    \ if ($y%2==0)\n            return false;\n        $y=$y/2;\n        $z*=$y;\n\
    \    }\n    return ($x%$z==0);\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3db86d2.php:46\n\
    Stack trace:\n#0 /tmp/tmpf3db86d2.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpf3db86d2.php\
    \ on line 46\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw_c597z.php:41\n\
    Stack trace:\n#0 /tmp/tmpcw_c597z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcw_c597z.php\
    \ on line 41\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv4482n7w.php on line 172

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 3 == 0) {\n        return true;\n    }\n    if ($n\
    \ % 5 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n    $n = $n *\
    \ $n;\n    $x = $x / $n;\n    $x = $x * $n;\n    if ($x == $n) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5k5qy6_z.php:54\n\
    Stack trace:\n#0 /tmp/tmp5k5qy6_z.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp5k5qy6_z.php\
    \ on line 54\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0) return false;\n    if ($x>1)\
    \ return false;\n    if ($n<0) return false;\n    if ($n>100) return true;\n \
    \   if ($n==100) return true;\n    if ($n==101) return true;\n    if ($n==102)\
    \ return true;\n    if ($n==103) return true;\n    if ($n==104) return true;\n\
    \    if ($n==105) return true;\n    if ($n==106) return true;\n    if ($n==107)\
    \ return true;\n    if ($n==108) return true;\n    if ($n==109) return true;\n\
    \    if ($n==110) return true;\n    if ($n==111) return true;\n    if ($n==112)\
    \ return true;\n    if ($n==113) return true;\n    if ($n==114) return true;\n\
    \    if ($n==115) return true;\n    if ($n==116) return true;\n    if ($n==117)\
    \ return true;\n    if ($n==118) return true;\n    if ($n==119) return true;\n\
    \    if ($n==120) return true;\n    if ($n==121) return true;\n    if ($n==122)\
    \ return true;\n    if ($n==123) return true;\n    if ($n==124) return true;\n\
    \    if ($n==125) return true;\n    if ($n==126) return true;\n    if ($n==127)\
    \ return true;\n    if ($n==128) return true;\n    if ($n==129) return true;\n\
    \    if ($n==130) return true;\n    if ($n==131) return true;\n    if ($n==132)\
    \ return true;\n    if ($n==133) return true;\n    if ($n==134) return true;\n\
    \    if ($n==135) return true;\n    if ($n==136) return true;\n    if ($n==137)\
    \ return true;\n    if ($n==138) return true;\n    if ($n==139) return true;\n\
    \    if ($n==140) return true;\n    if ($n==141) return true;\n    if ($n==142)\
    \ return true;\n    if ($n==143) return true;\n    if ($n==144) return true;\n\
    \    if ($n==145) return true;\n    if ($n==146) return true;\n    if ($n==147)\
    \ return true;\n    if ($n==148) return true;\n    if ($n==149) return true;\n\
    \    if ($n==150) return true;\n    if ($n==151) return true;\n    if ($n==152)\
    \ return true;\n    if ($n==153) return true;\n    if (\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpzs8uy6wz.php on line 82

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == $n) {\n        return true;\n    }\n    if ($n\
    \ % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n    }\n    return\
    \ is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimbet0ps.php:42\n\
    Stack trace:\n#0 /tmp/tmpimbet0ps.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpimbet0ps.php\
    \ on line 42\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return true;\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zcav1k_.php:37\n\
    Stack trace:\n#0 /tmp/tmp0zcav1k_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0zcav1k_.php\
    \ on line 37\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5hnesj7x.php:31\n\
    Stack trace:\n#0 /tmp/tmp5hnesj7x.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5hnesj7x.php\
    \ on line 31\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1) {\n        return true;\n    }\n    if ($n%$x==0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvztiq3vg.php:33\n\
    Stack trace:\n#0 /tmp/tmpvztiq3vg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvztiq3vg.php\
    \ on line 33\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpwy2_eb.php:32\n\
    Stack trace:\n#0 /tmp/tmpdpwy2_eb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdpwy2_eb.php\
    \ on line 32\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrvme89z.php:40\n\
    Stack trace:\n#0 /tmp/tmphrvme89z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphrvme89z.php\
    \ on line 40\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpwy2_eb.php:32\n\
    Stack trace:\n#0 /tmp/tmpdpwy2_eb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdpwy2_eb.php\
    \ on line 32\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vjm6wqg.php:47\n\
    Stack trace:\n#0 /tmp/tmp2vjm6wqg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2vjm6wqg.php\
    \ on line 47\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for negative numbers. Try is_simple_power(-4, 2)\n<|/ c |>\n\
    <| c |>\nIt does work for negative numbers. Try `is_simple_power(-4, 2)`\n<|/\
    \ c |>\n<| c |>\nIt does work for negative numbers. Try `is_simple_power(-4, 2)`\n\
    <|/ c |>\n<| c |>\nIt does work for negative numbers. Try `is_simple_power(-4,\
    \ 2)`\n<|/ c |>\n<| c |>\nIt does work for negative numbers. Try `is_simple_power(-4,\
    \ 2)`\n<|/ c |>\n<| a tags=php,math |>\n<code>\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp829j73ig.php
    on line 39

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrvme89z.php:40\n\
    Stack trace:\n#0 /tmp/tmphrvme89z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphrvme89z.php\
    \ on line 40\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 3 == 0) {\n        return false;\n    }\n    $x\
    \ = $x * $x;\n    $n = $n * $n;\n    $x = $x * $n;\n    if ($x == $n) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9wc7_pt.php:51\n\
    Stack trace:\n#0 /tmp/tmp_9wc7_pt.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp_9wc7_pt.php\
    \ on line 51\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==-1) {\n        return ($x==1);\n    }\n    if ($n==2)\
    \ {\n        return ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n\
    \    }\n    if ($n==4) {\n        return ($x==1);\n    }\n    if ($n==5) {\n \
    \       return ($x==1);\n    }\n    if ($n==6) {\n        return ($x==1);\n  \
    \  }\n    if ($n==7) {\n        return ($x==1);\n    }\n    if ($n==8) {\n   \
    \     return ($x==1);\n    }\n    if ($n==9) {\n        return ($x==1);\n    }\n\
    \    if ($n==10) {\n        return ($x==1);\n    }\n    if ($n==11) {\n      \
    \  return ($x==1);\n    }\n    if ($n==12) {\n        return ($x==1);\n    }\n\
    \    if ($n==13) {\n        return ($x==1);\n    }\n    if ($n==14) {\n      \
    \  return ($x==1);\n    }\n    if ($n==15) {\n        return ($x==1);\n    }\n\
    \    if ($n==16) {\n        return ($x==1);\n    }\n    if ($n==17) {\n      \
    \  return ($x==1);\n    }\n    if ($n==18) {\n        return ($x==1);\n    }\n\
    \    if ($n==19) {\n        return ($x==1);\n    }\n    if ($n==20) {\n      \
    \  return ($x==1);\n    }\n    if ($n==21) {\n        return ($x==1);\n    }\n\
    \    if ($n==22) {\n        return ($x==1);\n    }\n    if ($n==23) {\n      \
    \  return ($x==1);\n    }\n    if ($n==24) {\n        return ($x==1);\n    }\n\
    \    if ($n==25) {\n        return ($x==1);\n    }\n    if ($n==26) {\n      \
    \  return ($x==1);\n    }\n    if ($n==27) {\n        return ($x==1);\n    }\n\
    \    if ($n==28) {\n        return ($x==1);\n    }\n    if ($n==29) {\n      \
    \  return ($x==1);\n    }\n    if ($n==30) {\n        return ($x==1);\n    }\n\
    \    if ($n==31) {\n        return ($x==1);\n    }\n    if ($n==32) {\n      \
    \  return ($x==1);\n    }\n    if ($n==33) {\n        return ($x==1);\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 121 in /tmp/tmpu_7g27xd.php on line 140

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1x0um06m.php:48\n\
    Stack trace:\n#0 /tmp/tmp1x0um06m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp1x0um06m.php\
    \ on line 48\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == -2) {\n        return false;\n    }\n    if ($x == -3) {\n        return\
    \ false;\n    }\n    if ($x == -4) {\n        return false;\n    }\n    if ($x\
    \ == -5) {\n        return false;\n    }\n    if ($x == -6) {\n        return\
    \ false;\n    }\n    if ($x == -7) {\n        return false;\n    }\n    if ($x\
    \ == -8) {\n        return false;\n    }\n    if ($x == -9) {\n        return\
    \ false;\n    }\n    if ($x == -10) {\n        return false;\n    }\n    if ($x\
    \ == -11) {\n        return false;\n    }\n    if ($x == -12) {\n        return\
    \ false;\n    }\n    if ($x == -13) {\n        return false;\n    }\n    if ($x\
    \ == -14) {\n        return false;\n    }\n    if ($x == -15) {\n        return\
    \ false;\n    }\n    if ($x == -16) {\n        return false;\n    }\n    if ($x\
    \ == -17) {\n        return false;\n    }\n    if ($x == -18) {\n        return\
    \ false;\n    }\n    if ($x == -19) {\n        return false;\n    }\n    if ($x\
    \ == -20) {\n        return false;\n    }\n    if ($x == -21) {\n        return\
    \ false;\n    }\n    if ($x == -22) {\n        return false;\n    }\n    if ($x\
    \ == -23) {\n        return false;\n    }\n    if ($x == -24) {\n        return\
    \ false;\n    }\n    if ($x == -25) {\n        return false;\n    }\n    if ($x\
    \ == -26) {\n        return false;\n    }\n    if ($x == -27) {\n        return\
    \ false;\n    }\n    if ($x == -28) {\n        return false;\n    }\n    if ($x\
    \ == -29) {\n        return false;\n    }\n    if ($x == -30) {\n        return\
    \ false;\n    }\n    if ($x == -31) {\n        return false;\n    }\n    if ($x\
    \ == -32) {\n        return false;\n    }\n    if ($x == -33) {\n        return\
    \ false;\n    }\n    if ($x == -34) {\n        return false;\n    }\n    if ($x\
    \ == -35) {\n        return false;\n    }\n    if ($x == -36) {\n        return\
    \ false;\n    }\n    if ($x == -37) {\n        return false;\n    }\n    if ($x\
    \ == -38) {\n        return false;\n    }\n    if ($x == -39) {\n        return\
    \ false;\n    }\n    if ($x == -40) {\n        return false;\n    }\n    if ($x\
    \ == -41) {\n        return false;\n    }\n    if ($x == -42) {\n        return\
    \ false;\n    }\n    if ($x == -43) {\n        return false;\n    }\n    if ($x\
    \ == -44) {\n        return false;\n    }\n    if ($x == -45) {\n        return\
    \ false;\n    }\n    if ($x == -46) {\n        return false;\n    }\n    if ($x\
    \ == -47) {\n        return false;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpc9n_kfq0.php on line 167

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return true;\n\
    \    }\n    if ($y % 2 == 0) {\n        return false;\n    }\n    $y = $x % $n;\n\
    \    if ($y == 0) {\n        return true;\n    }\n    if ($y % 2 == 0) {\n   \
    \     return false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return\
    \ true;\n    }\n    if ($y % 2 == 0) {\n        return false;\n    }\n    $y =\
    \ $x % $n;\n    if ($y == 0) {\n        return true;\n    }\n    if ($y % 2 ==\
    \ 0) {\n        return false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n\
    \        return true;\n    }\n    if ($y % 2 == 0) {\n        return false;\n\
    \    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return true;\n    }\n \
    \   if ($y % 2 == 0) {\n        return false;\n    }\n    $y = $x % $n;\n    if\
    \ ($y == 0) {\n        return true;\n    }\n    if ($y % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return true;\n\
    \    }\n    if ($y % 2 == 0) {\n        return false;\n    }\n    $y = $x % $n;\n\
    \    if ($y == 0) {\n        return true;\n    }\n    if ($y % 2 == 0) {\n   \
    \     return false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return\
    \ true;\n    }\n    if ($y % 2 == 0) {\n        return false;\n    }\n    $y =\
    \ $x % $n;\n    if ($y == 0) {\n        return true;\n    }\n    if ($y % 2 ==\
    \ 0) {\n        return false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n\
    \        return true;\n    }\n    if ($y % 2 == 0) {\n        return false;\n\
    \    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return true;\n    }\n \
    \   if ($y % 2 == 0) {\n        return false;\n    }\n    $y = $x % $n;\n    if\
    \ ($y == 0) {\n        return true;\n    }\n    if ($y % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return true;\n\
    \    }\n    if ($y % 2 == 0) {\n        return false;\n    }\n    $y = $x % $n;\n\
    \    if ($y == 0) {\n        return true;\n    }\n    if ($y % 2 == 0) {\n   \
    \     return false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return\
    \ true;\n    }\n    if (\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp_8sjvs_3.php on line 151

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $y = $x >> 1;\n\
    \    if ($y != 0) {\n        return is_simple_power($y, $n);\n    }\n    $y =\
    \ $x >> 2;\n    if ($y != 0) {\n        return is_simple_power($y, $n);\n    }\n\
    \    $y = $x >> 4;\n    if ($y != 0) {\n        return is_simple_power($y, $n);\n\
    \    }\n    $y = $x >> 8;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 64;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 128;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 256;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 512;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 1024;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2048;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4096;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8192;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16384;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32768;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 65536;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 131072;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 262144;\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 18 in /tmp/tmpmu_o6_3m.php on line 127

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \ // Your code here\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2jgbflf2.php
    on line 21

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($n % $x\
    \ == 0) {\n        return true;\n    }\n    if ($n % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yw5cbu1.php:51\n\
    Stack trace:\n#0 /tmp/tmp_yw5cbu1.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp_yw5cbu1.php\
    \ on line 51\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9i4ysmbb.php:47\n\
    Stack trace:\n#0 /tmp/tmp9i4ysmbb.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9i4ysmbb.php\
    \ on line 47\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv4482n7w.php on line 172

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw_c597z.php:41\n\
    Stack trace:\n#0 /tmp/tmpcw_c597z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcw_c597z.php\
    \ on line 41\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($n==-1) return\
    \ $x==1;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return $x==0;\n    if ($x==2) return true;\n    if ($x==-2) return $x==1;\n\
    \    if ($x==3) return true;\n    if ($x==-3) return $x==0;\n    if ($x==4) return\
    \ true;\n    if ($x==-4) return $x==1;\n    if ($x==5) return true;\n    if ($x==-5)\
    \ return $x==0;\n    if ($x==6) return true;\n    if ($x==-6) return $x==1;\n\
    \    if ($x==7) return true;\n    if ($x==-7) return $x==0;\n    if ($x==8) return\
    \ true;\n    if ($x==-8) return $x==1;\n    if ($x==9) return true;\n    if ($x==-9)\
    \ return $x==0;\n    if ($x==10) return true;\n    if ($x==-10) return $x==1;\n\
    \    if ($x==11) return true;\n    if ($x==-11) return $x==0;\n    if ($x==12)\
    \ return true;\n    if ($x==-12) return $x==1;\n    if ($x==13) return true;\n\
    \    if ($x==-13) return $x==0;\n    if ($x==14) return true;\n    if ($x==-14)\
    \ return $x==1;\n    if ($x==15) return true;\n    if ($x==-15) return $x==0;\n\
    \    if ($x==16) return true;\n    if ($x==-16) return $x==1;\n    if ($x==17)\
    \ return true;\n    if ($x==-17) return $x==0;\n    if ($x==18) return true;\n\
    \    if ($x==-18) return $x==1;\n    if ($x==19) return true;\n    if ($x==-19)\
    \ return $x==0;\n    if ($x==20) return true;\n    if ($x==-20) return $x==1;\n\
    \    if ($x==21) return true;\n    if ($x==-21) return $x==0;\n    if ($x==22)\
    \ return true;\n    if ($x==-22) return $x==1;\n    if ($x==23) return true;\n\
    \    if ($x==-23) return $x==0;\n    if ($x==24) return true;\n    if ($x==-24)\
    \ return $x==1;\n    if ($x==25) return true;\n    if ($x==-25) return $\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpciw7x060.php on line 73

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2db50zql.php:45\n\
    Stack trace:\n#0 /tmp/tmp2db50zql.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2db50zql.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrvme89z.php:40\n\
    Stack trace:\n#0 /tmp/tmphrvme89z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphrvme89z.php\
    \ on line 40\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv4482n7w.php on line 172

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppp56mv28.php:30\n\
    Stack trace:\n#0 /tmp/tmppp56mv28.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppp56mv28.php\
    \ on line 30\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ $x==1;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj1uaqugl.php on line 172

    '
  timestamp: 1659730496
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        if ($n<0) {\n            return false;\n    \
    \    }\n        if ($n==1) {\n            return true;\n        }\n    }\n   \
    \ if ($n<0) {\n        if ($x<0) {\n            return false;\n        }\n   \
    \     if ($x==1) {\n            return true;\n        }\n    }\n    if ($n==1)\
    \ {\n        return true;\n    }\n    if ($x==1) {\n        return true;\n   \
    \ }\n    if ($x==0) {\n        return false;\n    }\n    if ($x<0) {\n       \
    \ if ($n<0) {\n            return false;\n        }\n        if ($n==1) {\n  \
    \          return true;\n        }\n    }\n    if ($n<0) {\n        if ($x<0)\
    \ {\n            return false;\n        }\n        if ($x==1) {\n            return\
    \ true;\n        }\n    }\n    if ($n==1) {\n        return true;\n    }\n   \
    \ if ($x==1) {\n        return true;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x<0) {\n        if ($n<0) {\n            return false;\n\
    \        }\n        if ($n==1) {\n            return true;\n        }\n    }\n\
    \    if ($n<0) {\n        if ($x<0) {\n            return false;\n        }\n\
    \        if ($x==1) {\n            return true;\n        }\n    }\n    if ($n==1)\
    \ {\n        return true;\n    }\n    if ($x==1) {\n        return true;\n   \
    \ }\n    if ($x==0) {\n        return false;\n    }\n    if ($x<0) {\n       \
    \ if ($n<0) {\n            return false;\n        }\n        if ($n==1) {\n  \
    \          return true;\n        }\n    }\n    if ($n<0) {\n        if ($x<0)\
    \ {\n            return false;\n        }\n        if ($x==1) {\n            return\
    \ true;\n        }\n    }\n    if ($n==1) {\n        return true;\n    }\n   \
    \ if ($x==1) {\n        return true;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x<0) {\n        if ($n<0) {\n            return false;\n\
    \        }\n        if ($n==1) {\n            return true;\n        }\n    }\n\
    \    if ($n<0) {\n        if ($x<0) {\n            return false;\n        }\n\
    \        if ($x==1) {\n            return true;\n        }\n    }\n    if ($n==1)\
    \ {\n        return true;\n    }\n    if ($x==1) {\n        return true;\n   \
    \ }\n    if ($x==0) {\n        return false;\n    }\n    if ($x<0) {\n       \
    \ if ($\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmppglri5k4.php on line 161

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw5lia08.php:45\n\
    Stack trace:\n#0 /tmp/tmpdw5lia08.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdw5lia08.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9owu0_f.php:51\n\
    Stack trace:\n#0 /tmp/tmpv9owu0_f.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpv9owu0_f.php\
    \ on line 51\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwfjpdoz.php:47\n\
    Stack trace:\n#0 /tmp/tmppwfjpdoz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppwfjpdoz.php\
    \ on line 47\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaneh2rlk.php:31\n\
    Stack trace:\n#0 /tmp/tmpaneh2rlk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpaneh2rlk.php\
    \ on line 31\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpai7st1ux.php:50\n\
    Stack trace:\n#0 /tmp/tmpai7st1ux.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpai7st1ux.php\
    \ on line 50\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n && $n % $x == 0) {\n        return is_simple_power($x,\
    \ $n - 1);\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzqkb9q6.php:45\n\
    Stack trace:\n#0 /tmp/tmpfzqkb9q6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpfzqkb9q6.php\
    \ on line 45\n"
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x==2) return true;\n    if ($x==3)\
    \ return true;\n    if ($x==4) return true;\n    if ($x==5) return true;\n   \
    \ if ($x==6) return true;\n    if ($x==7) return true;\n    if ($x==8) return\
    \ true;\n    if ($x==9) return true;\n    if ($x==10) return true;\n    if ($x==11)\
    \ return true;\n    if ($x==12) return true;\n    if ($x==13) return true;\n \
    \   if ($x==14) return true;\n    if ($x==15) return true;\n    if ($x==16) return\
    \ true;\n    if ($x==17) return true;\n    if ($x==18) return true;\n    if ($x==19)\
    \ return true;\n    if ($x==20) return true;\n    if ($x==21) return true;\n \
    \   if ($x==22) return true;\n    if ($x==23) return true;\n    if ($x==24) return\
    \ true;\n    if ($x==25) return true;\n    if ($x==26) return true;\n    if ($x==27)\
    \ return true;\n    if ($x==28) return true;\n    if ($x==29) return true;\n \
    \   if ($x==30) return true;\n    if ($x==31) return true;\n    if ($x==32) return\
    \ true;\n    if ($x==33) return true;\n    if ($x==34) return true;\n    if ($x==35)\
    \ return true;\n    if ($x==36) return true;\n    if ($x==37) return true;\n \
    \   if ($x==38) return true;\n    if ($x==39) return true;\n    if ($x==40) return\
    \ true;\n    if ($x==41) return true;\n    if ($x==42) return true;\n    if ($x==43)\
    \ return true;\n    if ($x==44) return true;\n    if ($x==45) return true;\n \
    \   if ($x==46) return true;\n    if ($x==47) return true;\n    if ($x==48) return\
    \ true;\n    if ($x==49) return true;\n    if ($x==50) return true;\n    if ($x==51)\
    \ return true;\n    if ($x==52) return true;\n    if ($x==53) return true;\n \
    \   if ($x==54) return true;\n    if ($x==55) return true;\n    if ($x==56) return\
    \ true;\n    if ($x==57) return true;\n    if ($x==58) return true;\n    if ($x==59)\
    \ return true;\n    if ($x==60) return true;\n    if ($x==6\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5fyqr9y2.php on line 83

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpil1szxtj.php on line 123

    '
  timestamp: 1659823425
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
