language: php
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($num) use ($scale) {\n    return $num *\
    \ $scale;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_xigrd4.php:20\n\
    Stack trace:\n#0 /tmp/tmpc_xigrd4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc_xigrd4.php\
    \ on line 20\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function($number) { return $number * $scale; }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowr8mvg5.php:18\n\
    Stack trace:\n#0 /tmp/tmpowr8mvg5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpowr8mvg5.php\
    \ on line 18\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo82tb_6.php:20\n\
    Stack trace:\n#0 /tmp/tmpvo82tb_6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvo82tb_6.php\
    \ on line 20\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  return array_map(function ($number)\
    \ {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in the\
    \ array. e.g. `array(1.2, -1.2, 2.3, -3.4, 4.5)` returns `array(0.2, 0.4, 0.6,\
    \ -0.8, 1.0)` instead of `array(0.2, 0.4, 0.6, -0.8, 1.0)`\n<|/ c |>\n<| c |>\n\
    : It does work. Try it out yourself. It returns `array(0.2, 0.4, 0.6, -0.8, 1.0)`\
    \ as expected.\n<|/ c |>\n<| c |>\n: It does work. Try it out yourself. It returns\
    \ `array(0.2, 0.4, 0.6, -0.8, 1.0)` as expected.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it out yourself. It returns `array(0.2, 0.4, 0.6, -0.8, 1.0)` as expected.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it out yourself. It returns `array(0.2,\
    \ 0.4, 0.6, -0.8, 1.0)` as expected.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcaldzz92.php on line 21

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range[] = 1;\n  $range = array_map('sqrt', $range);\n\
    \  $range = array_map('round', $range);\n  return array_map(function ($number)\
    \ {\n    return $number / $range[0];\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp9ll_0ddq.php on line 18\n\nWarning:\
    \ Division by zero in /tmp/tmp9ll_0ddq.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9ll_0ddq.php:27\nStack trace:\n#0 /tmp/tmp9ll_0ddq.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9ll_0ddq.php on line 27\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) use ($min, $max) {\n        return $number - $min;\n    }, array_values($numbers));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers in the array. For example, `array(1.0, -2.0, 3.0, 4.0, -5.0)` returns\
    \ `array(0.0, -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it out here: https://3v4l.org/0Pq3T\n<|/ c |>\n<| c |>\nOh I see, I didn't realize\
    \ that `array_map` would return negative numbers. I thought it would just return\
    \ the negative numbers. Thanks for pointing that out!\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\n    array(\n        'id' => 1,\n        'name'\
    \ => 'test',\n        'price' => 1,\n    ),\n    array(\n        'id' => 2,\n\
    \        'name' => 'test2',\n        'price' => 2,\n    ),\n    array(\n     \
    \   'id' => 3,\n        'name' => 'test3',\n        'price' => 3,\n    ),\n  \
    \  array(\n        'id' => 4,\n        'name' => 'test4',\n        'price' =>\
    \ 4,\n    ),\n    array(\n        'id' => 5,\n        'name' => 'test5',\n   \
    \     'price' => 5,\n    ),\n);\n\n$array = array_map(function ($item) {\n   \
    \ return $item['price'];\n}, $array);\n\n$min = min($array);\n$max = max($array);\n\
    \n$array = array_map(function ($item) {\n    return $item / $max;\n}, $array);\n\
    \n$array = array_map(function ($item) {\n    return $item - $min;\n}, $array);\n\
    \nvar_dump($array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to\
    \ work when there are negative numbers in the array. For example, `array(1.0,\
    \ -2.0, 3.0, 4.0, -5.0)` returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`.\n<|/\
    \ c |>\n<| c |>\nI edited my answer, now it works with negative numbers too.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in\
    \ the array. For example, `array(1.0, -2.0, 3.0, 4.0, -5.0)` returns `array(0.0,\
    \ -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n<| c |>\nI edited my \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcdnafvdi.php on line 13

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmpp3y8376p.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmpp3y8376p.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpp3y8376p.php:19\nStack trace:\n#0 /tmp/tmpp3y8376p.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp3y8376p.php on line 19\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('sqrt', $range);\n  $range = array_map('round', $range);\n  return\
    \ array_map(function($number) { return $number / $range; }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmpvprnwnch.php on line 15\n\nWarning:\
    \ Division by zero in /tmp/tmpvprnwnch.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvprnwnch.php:23\nStack trace:\n#0 /tmp/tmpvprnwnch.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvprnwnch.php on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays,math |>\n<| c |>\nThis doesn't seem to work. `array_map`\
    \ doesn't seem to take a `$numbers` parameter. `array_map` seems to only take\
    \ a `$callback` parameter.\n<|/ c |>\n<| c |>\nIt does take a `$callback` parameter.\
    \ `array_map` takes a `callable` as its first parameter. `array_map` calls the\
    \ `callable` on each element of the array and returns the result. `array_map`\
    \ doesn't take a `$numbers` parameter. `array_map` calls the `callable` on each\
    \ element of the array and returns the result. `array_map` doesn't take a `$numbers`\
    \ parameter. `array_map` calls the `callable` on each element of the array and\
    \ returns the result. `array_map` doesn't take a `$numbers` parameter. `array_map`\
    \ calls the `callable` on each element of the array and returns the result. `array_map`\
    \ doesn't take a `$numbers` parameter. `array_map` calls the `callable` on each\
    \ element of the array and returns the result. `array_map` doesn't take a `$numbers`\
    \ parameter. `array_map` calls the `callable` on each element of the array and\
    \ returns the result. `array_map` doesn't take a `$numbers` parameter. `array_map`\
    \ calls the `callable` on each element of the array and returns the result. `array_map`\
    \ doesn't take a `$numbers` parameter. `array_map` calls the `callable` on each\
    \ element of the array and returns the result. `array_map` doesn't take a `$numbers`\
    \ parameter. `array_map` calls the `callable` on each element of the array and\
    \ returns the result.\n<|/ c |>\n<| c |>\nI see what you mean. `array_map` doesn't\
    \ take a `$numbers` parameter. `array_map` calls the `callable` on each element\
    \ of the array and returns the result. `array_map` doesn't take a `$numbers` parameter.\
    \ `array_map` calls the `callable` on each element of the array and returns the\
    \ result. `array_map` doesn't take a `$numbers` parameter. `array_map` calls the\
    \ `callable` on each element of the array and returns the result. `array_map`\
    \ doesn't take a `$numbers` parameter. `array_map` calls the `callable` on each\
    \ element of the array and returns the result. `array_map` doesn't take a `$numbers`\
    \ parameter. \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm1yolyc6.php on line 13

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max - $min;\n\
    \  return array_map(function ($number) {\n    return $number * $scale;\n  }, $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work when the numbers are\
    \ negative.\n<|/ c |>\n<| c |>\nIt works fine for me with negative numbers. Can\
    \ you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me with negative numbers. Try `array(1.0, -2.0, 3.0, 4.0, -5.0)`\n<|/ c\
    \ |>\n<| c |>\nI see. I've updated my answer with a version that works for negative\
    \ numbers as well.\n<|/ c |>\n<| a tags=php,math |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwi7cpwd6.php on line 14

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array($min / $max,\
    \ $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpctl00hg1.php:17\n\
    Stack trace:\n#0 /tmp/tmpctl00hg1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpctl00hg1.php\
    \ on line 17\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbom7v8td.php:22\n\
    Stack trace:\n#0 /tmp/tmpbom7v8td.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbom7v8td.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr7utwlo.php:19\n\
    Stack trace:\n#0 /tmp/tmpjr7utwlo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjr7utwlo.php\
    \ on line 19\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = $range[0];\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\nI came up with something that seems to work\
    \ pretty well:\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf2ycssn3.php on line 19

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic_so7du.php:22\n\
    Stack trace:\n#0 /tmp/tmpic_so7du.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpic_so7du.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array($min\
    \ / $max, $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhicg625.php:17\n\
    Stack trace:\n#0 /tmp/tmpqhicg625.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqhicg625.php\
    \ on line 17\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) { return $number / $range; }, $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,math |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps17eii9r.php on line 16

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $scale = array_sum($range) / count($range);\n\
    \  foreach ($range as $i => $value) {\n    $range[$i] /= $scale;\n  }\n  return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8azd74m5.php:26\n\
    Stack trace:\n#0 /tmp/tmp8azd74m5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8azd74m5.php\
    \ on line 26\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) { return $number * $scale; },\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = [\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n\
    ];\n\n$min = min($array);\n$max = max($array);\n\n$scale = ($max - $min) / (count($array)\
    \ - 1);\n\n$array = array_map(function ($number) {\n    return $number * $scale;\n\
    }, $array);\n\nvar_dump($array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n\
    \    4 => 5,\n];\n\n$min = min($array);\n$max = max($array);\n\n$scale = ($max\
    \ - $min) / (count($array) - 1);\n\n$array = array_map(function ($number) {\n\
    \    return $number * $scale;\n}, $array);\n\nvar_dump($array);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = [\n    0 => 1,\n  \
    \  1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n];\n\n$min = min($array);\n\
    $max = max($array);\n\n$scale = ($max - $min) / (count($array) - 1);\n\n$array\
    \ = array_map(function ($number) {\n    return $number * $scale;\n}, $array);\n\
    \nvar_dump($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = [\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n];\n\n\
    $min = min($array);\n$max = max($array);\n\n$scale = ($max - $min) / (count($array)\
    \ - 1);\n\n$array = array_map(function ($number) {\n    return $number * $scale;\n\
    }, $array);\n\nvar_dump($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [\n    0 => 1,\n    1 => 2,\n    \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1zwp13ju.php on line 12

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function ($number) {\n    return $number / $range[$number];\n  },\
    \ $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmppg68al4q.php on line 14\n\nWarning:\
    \ Division by zero in /tmp/tmppg68al4q.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppg68al4q.php:23\nStack trace:\n#0 /tmp/tmppg68al4q.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppg68al4q.php on line 23\n"
  timestamp: 1659730887
