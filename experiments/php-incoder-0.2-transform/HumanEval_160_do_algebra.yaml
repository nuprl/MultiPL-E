name: HumanEval_160_do_algebra
language: php
prompt: "<?php\n// Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n// the second list is a list of integers. Use the two\
  \ given lists to build the algebric \n// expression and return the evaluation of\
  \ this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ list is equal to the length of operand list minus one.\n// Operand is a list of\
  \ of non-negative integers.\n// Operator list has at least one operator, and operand\
  \ list has at least two operands.\nfunction do_algebra($operator, $operand) {\n"
tests: "function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
  \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = 0;\n    foreach ($operator as $key => $value) {\n   \
    \     if ($key == '+') {\n            $result = $result + $operand[$key];\n  \
    \      } elseif ($key == '-') {\n            $result = $result - $operand[$key];\n\
    \        } elseif ($key == '*') {\n            $result = $result * $operand[$key];\n\
    \        } elseif ($key == '/') {\n            $result = $result / $operand[$key];\n\
    \        } elseif ($key == '**') {\n            $result = $result ** $operand[$key];\n\
    \        }\n    }\n    return $result;\n}", "    // Your code here\n    $result\
    \ = 0;\n    foreach ($operator as $key => $value) {\n        $result = $result\
    \ + $operand[$key] * $value;\n    }\n    return $result;\n}", "    // Your code\
    \ here\n    $result = 0;\n    foreach ($operand as $key => $value) {\n       \
    \ $result += (isset($operator[$key]) ? $operator[$key]($operand[$key]) : 0);\n\
    \    }\n    return $result;\n}\n", "    // Your code here\n}", "    // Your code\
    \ goes here\n}", "    $result = array();\n    foreach ($operator as $key => $value)\
    \ {\n        $result[] = $operand[$key] + $operand[$key+1];\n    }\n    return\
    \ $result;\n}", "    // Your code here\n}", "    $result = 0;\n    foreach ($operator\
    \ as $key => $value) {\n        $result = $result + ($operand[$key] * $value);\n\
    \    }\n    return $result;\n}\n", "    // Your code here\n}", "    $operators\
    \ = array();\n    $operands = array();\n    $operators_length = count($operator);\n\
    \    $operands_length = count($operand) - 1;\n    for ($i = 0; $i < $operators_length;\
    \ $i++) {\n        $operators[] = $operator[$i];\n    }\n    for ($i = 0; $i <\
    \ $operands_length; $i++) {\n        $operands[] = $operand[$i];\n    }\n    $result\
    \ = array();\n    for ($i = 0; $i < $operands_length; $i++) {\n        $result[$i]\
    \ = $operands[$i];\n        for ($j = 0; $j < $operators_length; $j++) {\n   \
    \         $result[$i] -= $operands[$i] * $operators[$j];\n        }\n    }\n \
    \   return $result;\n}", "    $result = 0;\n    foreach ($operator as $op) {\n\
    \        $result = $result + $operand[$op - 1];\n    }\n    return $result;\n}",
  "    // Your code here\n}", "    $result = $operand[0];\n    for($i = 1; $i < count($operand);\
    \ $i++) {\n        $result = $operator[$i - 1]($result, $operand[$i]);\n    }\n\
    \    return $result;\n}", "    // Your code goes here\n    $result = 0;\n    foreach\
    \ ($operand as $key => $value) {\n        $result += (isset($operator[$key]) ?\
    \ $operator[$key]($operand[$key]) : 0);\n    }\n    return $result;\n}\n", " \
    \   $operators = array('+', '-', '*', '/', '//', '**');\n    $result = array();\n\
    \    foreach ($operator as $key => $value) {\n        if ($value === '/') {\n\
    \            $result[$key] = $operand[$key] % $operand[$key + 1];\n        } else\
    \ {\n            $result[$key] = $operand[$key] . $operand[$key + 1];\n      \
    \  }\n    }\n    return $result;\n}\n", "    // Your code here\n}", "    // Your\
    \ code here\n}", "    $result = array();\n    $operators = array();\n    $operands\
    \ = array();\n    $operator = explode(',', $operator);\n    $operand = explode(',',\
    \ $operand);\n    $operators = array_merge($operators, $operator);\n    $operands\
    \ = array_merge($operands, $operand);\n    foreach ($operators as $key => $value)\
    \ {\n        $result[$key] = $operands[$key];\n    }\n    return $result;\n}\n",
  "    // Your code here\n    $result = 0;\n    foreach ($operator as $key => $value)\
    \ {\n        $result = $result + $operand[$key] * $value;\n    }\n    return $result;\n\
    }\n", "    // Your code here\n    $result = 0;\n    foreach ($operator as $key\
    \ => $value) {\n        $result = $result + ($operand[$key] * $value);\n    }\n\
    \    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
