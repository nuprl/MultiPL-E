name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given list of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original list.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11,\
  \ -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\n\
  function order_by_points($nums) {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $sums = array_sum($nums);\n  return array_map(function($num) use\
    \ ($sums) {\n    return $nums[$num];\n  }, array_keys($nums, $sums));\n}\n", " \
    \ $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "  $sums = array_map(function($num)\
    \ { return $num % 10; }, $nums);\n  sort($sums);\n  return array_map(function($sum)\
    \ { return $nums[$sum]; }, $sums);\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n\
    \    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n\
    \    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n \
    \   15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n  \
    \  20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 => 24,\n   \
    \ 25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n    30\
    \ => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n    35 =>\
    \ 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n\
    \    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n \
    \   46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n    50 => 50,\n  \
    \  51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n    55 => 55,\n   \
    \ 56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n    60 => 60,\n    61\
    \ => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n    65 => 65,\n    66 =>\
    \ 66,\n    67 => 67,\n    68 => 68,\n    69 => 69,\n    70 => 70,\n    71 => 71,\n\
    \    72 => 72,\n    73 => 73,\n    74 => 74,\n    75 => 75,\n    76", "  $sums\
    \ = array_map(function($num) {\n    return $num * log10($num);\n  }, $nums);\n\
    \  asort($sums);\n  return array_map(function($num) {\n    return $num / log10($num);\n\
    \  }, $sums);\n}\n", "    $sums = array_sum($nums);\n    $sorted = array();\n\
    \    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n   \
    \ asort($sorted);\n    foreach ($sorted as $i => $num) {\n        $sorted[$i]\
    \ = $sums[$i];\n    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function ($num) use ($sums) {\n    return\
    \ $sums - $num;\n  }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nThis doesn't seem to work. `order_by_points(array(1, 11, -1, -11, -12))`\
    \ returns `array(-1, -11, 1, -12, 11)` instead of `array(-1, -11, -12, 1, 11)`.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works as expected. `order_by_points(array(1,\
    \ 11, -1, -11, -12))` returns `array(-1, -11, -12, 1, 11)`.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and it works as expected. `order_by_points(array(1,\
    \ 11, -1, -11, -12))` returns `array(-1, -11, -12, 1, 11)`.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and it works as expected. `order_by_points(array(1,\
    \ 11, -1, -11, -12))` returns `array(-1, -11, -12, 1, 11)`.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and it works as expected. `order_by_points(array(1,\
    \ 11, -1, -11, -12))` returns `array(-1, -11, -12, 1, 11)`.\n<|/ c |>\n<| a |>\n\
    <code>", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums[$n];\n  }, $nums);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work for negative numbers. `order_by_points([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,",
  "    $sorted = array();\n    foreach ($nums as $num) {\n        $digits = str_split($num);\n\
    \        $sum = 0;\n        foreach ($digits as $digit) {\n            $sum +=\
    \ intval($digit);\n        }\n        $sorted[] = $sum;\n    }\n    array_multisort($sorted,\
    \ $nums);\n    return $nums;\n}\n", "    $sorted = array();\n    $sums = array();\n\
    \    foreach ($nums as $num) {\n        $sums[$num] = 0;\n    }\n    foreach ($sums\
    \ as $num => $sum) {\n        $sorted[] = $num;\n    }\n    foreach ($sums as\
    \ $num => $sum) {\n        $sorted[] = $num;\n    }\n    return $sorted;\n}\n",
  "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "  $sums\
    \ = array_map(function($num) {\n    return $num * log10($num);\n  }, $nums);\n\
    \  asort($sums);\n  $nums = array_map(function($sum) use ($nums) {\n    return\
    \ $nums[$sum];\n  }, $sums);\n  return $nums;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for negative numbers, it sorts them in descending\
    \ order. `order_by_points(array(-2, -1, -10, -20, -100, -200))` returns `array(-100,\
    \ -200, -20, -10, -1, -2)`\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n: I added a version that works with negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\n: I added a version that works with negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\n: I added a version that works with negative numbers\
    \ as well.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums, array_flip($order));\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work for me.\
    \ `order_by_points([1,11,-1,-11, -12])` returns `array(-12, -11, 1, 11, -1)`\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. `order_by_points([1,11,-1,-11,\
    \ -12])` returns `array(-1, -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works fine. `order_by_points([1,11,-1,-11, -12])` returns `array(-1,\
    \ -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\nI tested it again and it works fine. `order_by_points([1,11,-1,-11,\
    \ -12])` returns `array(-1, -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works fine. `order_by_points([1,11,-1,-11, -12])` returns `array(-1,\
    \ -11, 1, -12, 11)`\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array\
    \ = array(1,11,-1,-11, -12);\n$sums = array_sum($array);\n$order = array_keys($array,\
    \ $sums);\n$result = array_intersect_key($array, array_flip($order));\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work for me. `order_by_points([1,11,-1,-11,\
    \ -12])` returns `array(-12, -11, 1, 11, -1)`\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine. `order_by_points([1,11,-1,-11, -12])` returns `array(-1,\
    \ -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\nI tested it again and it works fine. `order_by_points([1,11,-1,-11,\
    \ -12])` returns `array(-1, -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it works fine. `order_by_points([1,11,-1,-11, -12])` returns `array(-1,\
    \ -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\nI tested it again and it works fine. `order_by_points([1,11,-1,-11,\
    \ -12", "    $sums = array_map(function($num) { return $num % 10; }, $nums);\n\
    \    asort($sums);\n    return array_map(function($num) { return $num % 10; },\
    \ $nums);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like your\
    \ answer but I think it can be simplified a bit. Instead of using array_map to\
    \ sum each digit, just use array_sum. Also, instead of using array_map to sort\
    \ the sums, just use array_multisort. Also, instead of using array_map to sort\
    \ the original numbers, just use array_multisort. Also, instead of using array_map\
    \ to sort the sums, just use array_multisort. Also, instead of using array_map\
    \ to sort the original numbers, just use array_multisort. Also, instead of using\
    \ array_map to sort the sums, just use array_multisort. Also, instead of using\
    \ array_map to sort the original numbers, just use array_multisort. Also, instead\
    \ of using array_map to sort the sums, just use array_multisort. Also, instead\
    \ of using array_map to sort the original numbers, just use array_multisort. Also,\
    \ instead of using array_map to sort the sums, just use array_multisort. Also,\
    \ instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the original numbers, just use array_multisort.\
    \ Also, instead of using array_map to sort the sums, just use array_multisort.\
    \ Also, instead of using array_map to sort the ", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  return $nums;\n}\n", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_intersect_key($nums, $order);\n\
    }\n", "    $sorted = array();\n    $sums = array();\n    foreach ($nums as $num)\
    \ {\n        $sums[$num] = 0;\n    }\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ += $num;\n    }\n    foreach ($sums as $num => $sum) {\n        $sorted[] =\
    \ $nums[$sum];\n    }\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_values($nums, $order);\n\
    }\n", "  $sums = array_sum($nums);\n  return array_map(function($num) use ($sums)\
    \ {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [\n    1 => [\n \
    \       'name' => 'a',\n        'points' => 1,\n    ],\n    2 => [\n        'name'\
    \ => 'b',\n        'points' => 2,\n    ],\n    3 => [\n        'name' => 'c',\n\
    \        'points' => 3,\n    ],\n    4 => [\n        'name' => 'd',\n        'points'\
    \ => 4,\n    ],\n    5 => [\n        'name' => 'e',\n        'points' => 5,\n\
    \    ],\n    6 => [\n        'name' => 'f',\n        'points' => 6,\n    ],\n\
    \    7 => [\n        'name' => 'g',\n        'points' => 7,\n    ],\n    8 =>\
    \ [\n        'name' => 'h',\n        'points' => 8,\n    ],\n    9 => [\n    \
    \    'name' => 'i',\n        'points' => 9,\n    ],\n    10 => [\n        'name'\
    \ => 'j',\n        'points' => 10,\n    ],\n    11 => [\n        'name' => 'k',\n\
    \        'points' => 11,\n    ],\n    12 => [\n        'name' => 'l',\n      \
    \  'points' => 12,\n    ],\n    13 => [\n        'name' => 'm',\n        'points'\
    \ => 13,\n    ],\n    14 => [\n        'name' => 'n',\n        'points' => 14,\n\
    \    ],\n    15 => [\n        'name' => 'o',\n        'points' => 15,\n    ],\n\
    \    16 => [\n        'name' => 'p',\n        'points' => 16,\n    ],\n    17\
    \ => [\n        'name' => 'q',\n        'points' => 17,\n    ],\n    18 => [\n\
    \        'name' => 'r',\n        'points' => 18,\n    ],\n    19 => [\n      \
    \  'name' => 's',\n        'points' => 19,\n    ],\n    20 => [\n        'name'\
    \ => 't',\n        'points' => 20,\n    ],\n    21 => [\n        'name' => 'u',\n\
    \        'points' => 21,\n    ],\n    22 => [\n        'name' => 'v',\n      \
    \  'points' => 22,\n    ],\n    23 => [\n        'name' => 'w',\n        'points'\
    \ => 23,\n    ],\n    24 => [\n        'name' => 'x',\n        'points' => 24,\n\
    \    ],\n    25 => ", "  $sums = array_sum($nums);\n  arsort($sums);\n  return\
    \ array_map(function($num) use ($sums) {\n    return $nums[$sums - $num];\n  },\
    \ $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n\
    }", "  $sums = array_map(function($num) {\n    return $num * log10($num);\n  },\
    \ $nums);\n  asort($sums);\n  return array_map(function($num) use ($nums) {\n\
    \    return $nums[$num];\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n \
    \ $order = array_keys($nums, $sums);\n  return array_intersect_key($nums, $order);\n\
    }\n", "  $sums = array_map(function($num) {\n    return $num * log10($num);\n\
    \  }, $nums);\n  asort($sums);\n  return array_map(function($num) use ($nums)\
    \ {\n    return $nums[$num];\n  }, $sums);\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($n) use\
    \ ($sums, $order) {\n        return $order[$n];\n    }, $nums);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for negative numbers. Try it with `order_by_points(array(-2,\
    \ -4, -6, -10, -12, -14, -16, -18, -22, -24, -26, -28, -30))`\n<|/ c |>\n<| c\
    \ |>\n: I added a note about negative numbers. Thanks.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $sorted = array();\n    $sums = array();\n    foreach ($nums\
    \ as $num) {\n        $sums[$num] = array_sum(str_split($num));\n        $sorted[$num]\
    \ = $num;\n    }\n    asort($sums);\n    foreach ($sums as $num => $sum) {\n \
    \       $sorted[$num] = $sorted[$num];\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\n\
    \    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 =>\
    \ 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n\
    \    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n \
    \   23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n  \
    \  28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n   \
    \ 33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38\
    \ => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 =>\
    \ 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n\
    \    49 => 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n \
    \   54 => 54,\n    55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n  \
    \  59 => 59,\n    60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n   \
    \ 64 => 64,\n    65 => 65,\n    66 => 66,\n    67 => 67,\n    68 => 68,\n    69\
    \ => 69,\n    70 => 70,", "    $sums = array_sum($nums);\n    $sorted = array_map(function($num)\
    \ use ($sums) {\n        return $sums - $num;\n    }, $nums);\n    return array_values($sorted);\n\
    }\n", "    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sum\
    \ = 0;\n        for ($j = 0; $j < strlen($num); $j++) {\n            $sum += $num[$j];\n\
    \        }\n        $sorted[$i] = $sum;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n", "    $sums = array_sum($nums);\n    $sorted = array();\n   \
    \ foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n        if ($sums[$i]\
    \ == $sum) {\n            $sorted[$i] = $i;\n        }\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n\
    $arr = [\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n  \
    \  5 => 6,\n    6 => 7,\n    7 => 8,\n    8 => 9,\n    9 => 10,\n    10 => 11,\n\
    \    11 => 12,\n    12 => 13,\n    13 => 14,\n    14 => 15,\n    15 => 16,\n \
    \   16 => 17,\n    17 => 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n  \
    \  21 => 22,\n    22 => 23,\n    23 => 24,\n    24 => 25,\n    25 => 26,\n   \
    \ 26 => 27,\n    27 => 28,\n    28 => 29,\n    29 => 30,\n    30 => 31,\n    31\
    \ => 32,\n    32 => 33,\n    33 => 34,\n    34 => 35,\n    35 => 36,\n    36 =>\
    \ 37,\n    37 => 38,\n    38 => 39,\n    39 => 40,\n    40 => 41,\n    41 => 42,\n\
    \    42 => 43,\n    43 => 44,\n    44 => 45,\n    45 => 46,\n    46 => 47,\n \
    \   47 => 48,\n    48 => 49,\n    49 => 50,\n    50 => 51,\n    51 => 52,\n  \
    \  52 => 53,\n    53 => 54,\n    54 => 55,\n    55 => 56,\n    56 => 57,\n   \
    \ 57 => 58,\n    58 => 59,\n    59 => 60,\n    60 => 61,\n    61 => 62,\n    62\
    \ => 63,\n    63 => 64,\n    64 => 65,\n    65 => 66,\n    66 => 67,\n    67 =>\
    \ 68,\n    68 => 69,\n    69 => 70,\n    70 => 71,\n    71 => 72,\n    72 => 73,",
  "    $sorted = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        foreach (str_split($num) as $digit) {\n            $sum += $digit;\n\
    \        }\n        $sorted[$key] = $nums[$key];\n        $sorted[$key]->sum =\
    \ $sum;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    asort($nums);\n    return array_map(function($num) use ($sums) {\n      \
    \  return $sums - $num;\n    }, $nums);\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($n) use\
    \ ($sums, $order) {\n        return $order[$n];\n    }, $nums);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $sorted = array_map(function ($num) use ($sums) {\n\
    \        return $nums[$num] - $sums;\n    }, $nums);\n    asort($sorted);\n  \
    \  return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return\
    \ $nums;\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n$arr = array();\n$arr[]\
    \ = array('name' => 'A', 'points' => 10);\n$arr[] = array('name' => 'B', 'points'\
    \ => 20);\n$arr[] = array('name' => 'C', 'points' => 30);\n$arr[] = array('name'\
    \ => 'D', 'points' => 40);\n$arr[] = array('name' => 'E', 'points' => 50);\n$arr[]\
    \ = array('name' => 'F', 'points' => 60);\n$arr[] = array('name' => 'G', 'points'\
    \ => 70);\n$arr[] = array('name' => 'H', 'points' => 80);\n$arr[] = array('name'\
    \ => 'I', 'points' => 90);\n$arr[] = array('name' => 'J', 'points' => 100);\n\
    $arr[] = array('name' => 'K', 'points' => 110);\n$arr[] = array('name' => 'L',\
    \ 'points' => 120);\n$arr[] = array('name' => 'M', 'points' => 130);\n$arr[] =\
    \ array('name' => 'N', 'points' => 140);\n$arr[] = array('name' => 'O', 'points'\
    \ => 150);\n$arr[] = array('name' => 'P', 'points' => 160);\n$arr[] = array('name'\
    \ => 'Q', 'points' => 170);\n$arr[] = array('name' => 'R', 'points' => 180);\n\
    $arr[] = array('name' => 'S', 'points' => 190);\n$arr[] = array('name' => 'T',\
    \ 'points' => 200);\n$arr[] = array('name' => 'U', 'points' => 210);\n$arr[] =\
    \ array('name' => 'V', 'points' => 220);\n$arr[] = array('name' => 'W', 'points'\
    \ => 230);\n$arr[] = array('name' => 'X', 'points' => 240);\n$arr[] = array('name'\
    \ => 'Y', 'points' => 250);\n$arr[] = array('name' => 'Z', 'points' => 260);\n\
    $arr[] = array('name' => 'AA', 'points' => 270);\n$arr[] = array('name' => 'AB',\
    \ 'points' => 280);\n$arr[] = ", "    $sorted = array();\n    foreach ($nums as\
    \ $i => $num) {\n        $sum = 0;\n        for ($j = 0; $j < strlen($num); $j++)\
    \ {\n            $sum += $num[$j];\n        }\n        $sorted[$i] = $sum;\n \
    \   }\n    asort($sorted);\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  asort($order);\n  return $order;\n}\n",
  "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    $sorted\
    \ = array_values($sorted);\n    foreach ($sorted as $i => $num) {\n        $sorted[$i]\
    \ = $sums[$i] - $num;\n    }\n    return $sorted;\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / log10($num);\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums, $order);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\n   \
    \ array(1, 5, 9, 2),\n    array(2, 8, 2, 1),\n    array(3, 7, 2, 5),\n    array(4,\
    \ 6, 2, 8),\n    array(5, 7, 2, 9),\n    array(6, 6, 2, 8),\n    array(7, 7, 2,\
    \ 8),\n    array(8, 7, 2, 8),\n    array(9, 7, 2, 8),\n    array(10, 7, 2, 8),\n\
    \    array(11, 7, 2, 8),\n    array(12, 7, 2, 8),\n    array(13, 7, 2, 8),\n \
    \   array(14, 7, 2, 8),\n    array(15, 7, 2, 8),\n    array(16, 7, 2, 8),\n  \
    \  array(17, 7, 2, 8),\n    array(18, 7, 2, 8),\n    array(19, 7, 2, 8),\n   \
    \ array(20, 7, 2, 8),\n    array(21, 7, 2, 8),\n    array(22, 7, 2, 8),\n    array(23,\
    \ 7, 2, 8),\n    array(24, 7, 2, 8),\n    array(25, 7, 2, 8),\n    array(26, 7,\
    \ 2, 8),\n    array(27, 7, 2, 8),\n    array(28, 7, 2, 8),\n    array(29, 7, 2,\
    \ 8),\n    array(30, 7, 2, 8),\n    array(31, 7, 2, 8),\n    array(32, 7, 2, 8),\n\
    \    array(33, 7, 2, 8),\n    array(34, 7, 2, 8),\n    array(35, 7, 2, 8),\n \
    \   array(36, 7, 2, 8),\n    array(37, 7, 2, 8),\n    array(38, 7, 2, 8),\n  \
    \  array(39, 7, 2, 8),\n    array(40, 7, 2, 8),\n    array(41, 7, 2, 8),\n   \
    \ array(42, 7, 2, 8),\n    array(43, 7, 2, 8),\n    array(44, 7, 2, 8),\n    array(45,\
    \ 7, 2, 8),\n    array(46, 7, 2, 8),\n    array(47, 7, 2, 8),\n    array(48, 7,\
    \ 2, 8),\n    array(49, 7, 2, 8),\n    array(50, 7, 2, 8),\n    array(51, 7, 2,\
    \ 8),\n    array(52, 7, 2, 8),\n    array(53, 7, 2, 8),\n    array(54, 7, 2, 8),\n\
    \    array(55, 7, 2, 8),\n    array(56, 7, 2, 8),\n    array(57, 7, 2, 8),\n \
    \   array(58, 7, 2, 8),\n    array(59, 7, 2, 8),\n    array(60, 7, 2, 8),\n  \
    \  array(61, 7, 2, 8),\n    array(62, 7, 2, 8),\n    array(63, 7, 2, 8),\n   \
    \ array(64, 7, ", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  sort($order);\n  return $order;\n}\n", "    $sums = array_sum($nums);\n   \
    \ $order = array_keys($nums, $sums);\n    return array_map(function($n) use ($sums,\
    \ $order) {\n        return $order[$n];\n    }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  foreach ($nums as $i => $num) {\n    $nums[$i] = $nums[$i]\
    \ - $sums[$i];\n  }\n  return $nums;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $sums - $num;\n \
    \ }, $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  $nums = array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n  return $nums;\n}\n",
  "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "  $sums\
    \ = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums,\
    \ $order);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n\
    $arr = [\n    1 => [\n        'name' => 'John',\n        'age' => 25,\n    ],\n\
    \    2 => [\n        'name' => 'Jane',\n        'age' => 30,\n    ],\n    3 =>\
    \ [\n        'name' => 'Jack',\n        'age' => 25,\n    ],\n    4 => [\n   \
    \     'name' => 'Jill',\n        'age' => 25,\n    ],\n    5 => [\n        'name'\
    \ => 'Jack',\n        'age' => 25,\n    ],\n];\n\n$newArr = array();\nforeach\
    \ ($arr as $key => $value) {\n    $newArr[$value['age']][$key] = $value;\n}\n\n\
    $newArr = array_values($newArr);\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| a dscore=0 |>\n<code>\n$arr = [\n    1 => [\n        'name' => 'John',\n  \
    \      'age' => 25,\n    ],\n    2 => [\n        'name' => 'Jane',\n        'age'\
    \ => 30,\n    ],\n    3 => [\n        'name' => 'Jack',\n        'age' => 25,\n\
    \    ],\n    4 => [\n        'name' => 'Jill',\n        'age' => 25,\n    ],\n\
    \    5 => [\n        'name' => 'Jack',\n        'age' => 25,\n    ],\n];\n\n$newArr\
    \ = array();\nforeach ($arr as $key => $value) {\n    $newArr[$value['age']][$key]\
    \ = $value;\n}\n\n$newArr = array_values($newArr);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$arr = [\n    1 => [\n        'name' => 'John',\n\
    \        'age' => 25,\n    ],\n    2 => [\n        'name' => 'Jane',\n       \
    \ 'age' => 30,\n    ],\n    3 => [\n        'name' => 'Jack',\n        'age' =>\
    \ 25,\n    ],\n    4 => [\n        'name' => 'Jill',\n        'age' => 25,\n \
    \   ],\n    5 => [\n        'name' => 'Jack',\n        'age' => 25,\n    ],\n\
    ];\n\n$newArr = array();\nforeach ($arr as $key => $value) {\n    $new", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $sums = array_map(function($num)\
    \ {\n        return $num * $num;\n    }, $nums);\n    asort($sums);\n    return\
    \ array_map(function($num) {\n        return $num / $sums[$num];\n    }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}", " \
    \   $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach\
    \ ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n    }\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  foreach\
    \ ($nums as $i => $num) {\n    $nums[$i] = $sums - $num;\n  }\n  return $nums;\n\
    }\n", "    $sorted = array();\n    foreach ($nums as $num) {\n        $digits\
    \ = str_split($num);\n        $sum = 0;\n        foreach ($digits as $digit) {\n\
    \            $sum += intval($digit);\n        }\n        $sorted[] = $sum;\n \
    \   }\n    asort($sorted);\n    return $sorted;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work for negative numbers. `order_by_points(array(-12, -11,\
    \ -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0))` returns `array(-10, -9, -8, -7,\
    \ -6, -5, -4, -3, -2, -1, 0, -12, -11)`\n<|/ c |>\n<| c |>\nI added a note to\
    \ the answer. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\nI wrote\
    \ a solution that uses array_multisort and array_sum to sort the array in descending\
    \ order according to the sum of their digits. \n<code>\n<?php\n$nums = array(\n\
    \    1,\n    11,\n    -1,\n    -11,\n    -12\n);\n\n$sorted = array_multisort(array_sum(array_map(function($num)\
    \ {\n    return str_split($num);\n}, $nums)), SORT_DESC, $nums);\n\nprint_r($sorted);\n\
    </code>\nOutput:\n<code>\nArray\n(\n    [0] => -11\n    [1] => -11\n    [2] =>\
    \ -1\n    [3] => -1\n    [4] => -1\n    [5] => -1\n    [6] => -1\n    [7] => -1\n\
    \    [8] => -1\n    [9] => -1\n    [10] => -1\n    [11] => -1\n    [12] => -1\n\
    \    [13] => -1\n    [14] => -1\n    [15] => -1\n    [16] => -1\n    [17] => -1\n\
    \    [18] => -1\n    [19] => -1\n    [20] => -1\n    [21] => -1\n    [22] => -1\n\
    \    [23] => -1\n    [24] => -1\n    [25] => -1\n    [26] => -1\n    [27] => -1\n\
    \    [28] => -1\n    [29] => -1\n    [30] => -1\n    [31] => -1\n    [32] => -1\n\
    \    [33] => -1\n    [34] => -1\n    [35] => -1\n    [36] => -1\n    [37] => -1\n\
    \    [38] => -1\n    [39] => -1\n    [40] => -1\n    [41] => -1\n    [42] => -1\n\
    \    [43] => -1\n    [44] => ", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sums);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    array('name' => 'John',\
    \ 'age' => 25, 'score' => 80),\n    array('name' => 'Jane', 'age' => 22, 'score'\
    \ => 70),\n    array('name' => 'Jack', 'age' => 25, 'score' => 90),\n    array('name'\
    \ => 'Jill', 'age' => 25, 'score' => 60),\n    array('name' => 'Jack', 'age' =>\
    \ 25, 'score' => 80),\n    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n\
    \    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n    array('name' =>\
    \ 'Jill', 'age' => 25, 'score' => 60),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'score' => 60),\n    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n\
    \    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n    array('name' =>\
    \ 'Jill', 'age' => 25, 'score' => 60),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'score' => 60),\n    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n\
    \    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n    array('name' =>\
    \ 'Jill', 'age' => 25, 'score' => 60),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'score' => 60),\n    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n\
    \    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n    array('name' =>\
    \ 'Jill', 'age' => 25, 'score' => 60),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'score' => 60),\n    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n\
    \    array('name' => 'Jill', 'age' => 25, 'score' => 60),\n    array('name' =>\
    \ 'Jill', 'age' => 25, 'score' => 60),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'score' => 60),\n    array('name", "  $sums = array_sum($nums);\n  arsort($sums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$sums - $num];\n\
    \  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  return $nums;\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n\
    \    }\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_intersect_key($nums, array_flip($order));\n\
    }\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_map(function($v) use ($order) {\n        return $order[$v];\n\
    \    }, $nums);\n}\n", "  $sums = array_sum($nums);\n  $sorted = array();\n  foreach\
    \ ($nums as $i => $num) {\n    $sorted[$i] = $num;\n    $sorted[$i] = $sums[$i];\n\
    \  }\n  asort($sorted);\n  return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    asort($nums);\n    return array_map(function($num) use ($sums) {\n      \
    \  return $nums[$sums - $num];\n    }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  $sorted = array();\n  foreach ($nums as $i => $num) {\n    $sorted[$i] = $num;\n\
    \    $sorted[$i] = $sums[$i];\n  }\n  asort($sorted);\n  return $sorted;\n}\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n<code>", "    $sums\
    \ = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach ($sorted\
    \ as $i => $num) {\n        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n\
    }\n", "  $sums = array_sum($nums);\n  $sorted = array();\n  foreach ($nums as\
    \ $i => $num) {\n    $sorted[$i] = $num;\n    $sorted[$i] = $sums[$i];\n  }\n\
    \  asort($sorted);\n  return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ array_flip($order));\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_intersect_key($nums, $order);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work if there are multiple items with the same sum.\n<|/\
    \ c |>\n<| c |>\n: Yes, it does. I've added a note to the answer.\n<|/ c |>\n\
    <| c |>\n: I've added a note to the answer.\n<|/ c |>\n<| c |>\n: I've added a\
    \ note to the answer.\n<|/ c |>\n<| c |>\n: I've added a note to the answer.\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\n    array('name'\
    \ => 'John', 'score' => 5),\n    array('name' => 'Jane', 'score' => 3),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name' => 'Jill', 'score' => 2),\n    array('name'\
    \ => 'Jack', 'score' => 1),\n    array('name", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n}\n", "    $sums\
    \ = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    return array_values($sorted);\n\
    }\n", "    $sums = array_map(function($num) {\n        return $num * log10($num);\n\
    \    }, $nums);\n    asort($sums);\n    return array_map(function($num) use ($nums)\
    \ {\n        return $nums[$num];\n    }, $sums);\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n}\n",
  "  $sums = array_sum($nums);\n  asort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$num] - $sums;\n  }, $nums);\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum. Try it with `order_by_points(array(1, 11, -1, -11, -12))`.\n\
    <|/ c |>\n<| c |>\nYes, I forgot about that case. I've updated my answer.\n<|/\
    \ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = array(1, 11, -1,\
    \ -11, -12);\n$sums = array_sum($arr);\nasort($arr);\n$result = array_map(function($num)\
    \ use ($sums) {\n    return $num - $sums;\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two numbers with the\
    \ same sum. Try it with `order_by_points(array(1, 11, -1, -11, -12))`.\n<|/ c\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array(1, 11, -1, -11, -12);\n\
    $sums = array_sum($arr);\nasort($arr);\n$result = array_map(function($num) use\
    \ ($sums) {\n    return $num - $sums;\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two numbers with the\
    \ same sum. Try it with `order_by_points(array(1, 11, -1, -11, -12))`.\n<|/ c\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = array(1, 11, -1,\
    \ -11, -12);\n$sums = array_sum($arr);\nasort($arr);\n$result = array_map(function($num)\
    \ use ($sums) {\n    return $num - $sums;\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(1, 11, -1, -11,\
    \ -12);\n$sums = array_sum($arr);\nasort($arr);\n$result = array_map(function($num)\
    \ use ($sums) {\n    return $num - $sums;\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a tag", "  $sums = array_sum($nums);\n  arsort($nums);\n  $nums = array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n  return $nums;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\n\
    \    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 =>\
    \ 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n\
    \    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n \
    \   23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n  \
    \  28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n   \
    \ 33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38\
    \ => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 =>\
    \ 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n\
    \    49 => 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n \
    \   54 => 54,\n    55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n  \
    \  59 => 59,\n    60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n   \
    \ 64 => 64,\n    65 => 65,\n    66 => 66,\n    67 => 67,\n    68 => 68,\n    69\
    \ => 69,\n    70 => 70,\n    71 => 71,\n    72 => 72,\n    73 => 73,\n    74 =>\
    \ 74,\n    75 => 75,\n    ", "    $sums = array_sum($nums);\n    $sorted = array();\n\
    \    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n   \
    \ asort($sorted);\n    $sorted = array_values($sorted);\n    $sorted = array_merge($sorted,\
    \ array_fill(0, count($sorted), $sums));\n    return $sorted;\n}\n", "  $sums\
    \ = array_map(function($num) {\n    return $num * 10 + $num;\n  }, $nums);\n \
    \ asort($sums);\n  return array_map(function($num) {\n    return $num / 10;\n\
    \  }, $sums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  foreach\
    \ ($nums as $i => $num) {\n    $nums[$i] = $nums[$i] - $sums[$i];\n  }\n  return\
    \ $nums;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $numbers = array(\n    array(\n        'number' => 1,\n        'sum' => 1\n  \
    \  ),\n    array(\n        'number' => 2,\n        'sum' => 3\n    ),\n    array(\n\
    \        'number' => 3,\n        'sum' => 6\n    ),\n    array(\n        'number'\
    \ => 4,\n        'sum' => 10\n    ),\n    array(\n        'number' => 5,\n   \
    \     'sum' => 15\n    ),\n    array(\n        'number' => 6,\n        'sum' =>\
    \ 21\n    ),\n    array(\n        'number' => 7,\n        'sum' => 28\n    ),\n\
    \    array(\n        'number' => 8,\n        'sum' => 36\n    ),\n    array(\n\
    \        'number' => 9,\n        'sum' => 45\n    ),\n    array(\n        'number'\
    \ => 10,\n        'sum' => 54\n    ),\n    array(\n        'number' => 11,\n \
    \       'sum' => 63\n    ),\n    array(\n        'number' => 12,\n        'sum'\
    \ => 72\n    ),\n    array(\n        'number' => 13,\n        'sum' => 81\n  \
    \  ),\n    array(\n        'number' => 14,\n        'sum' => 90\n    ),\n    array(\n\
    \        'number' => 15,\n        'sum' => 99\n    ),\n    array(\n        'number'\
    \ => 16,\n        'sum' => 108\n    ),\n    array(\n        'number' => 17,\n\
    \        'sum' => 117\n    ),\n    array(\n        'number' => 18,\n        'sum'\
    \ => 126\n    ),\n    array(\n        'number' => 19,\n        'sum' => 135\n\
    \    ),\n    array(\n        'number' => 20,\n        'sum' => 144\n    ),\n \
    \   array(\n        'number' => 21,\n        'sum' => 153\n    ),\n    array(\n\
    \        'number' => 22,\n        'sum' => 162\n    ),\n    array(\n        'number'\
    \ => 23,\n        'sum' => 171\n    ),\n    array(\n        'number' => 24,\n\
    \        'sum' => 180\n    ),\n    array(\n        'number' => 25,\n        'sum'\
    \ => 189\n    ),\n    array(\n        'number' => 26,\n        'sum' => 198\n\
    \    ),\n    array(\n        'number' => 27,\n        'sum' => 207\n    ),\n \
    \   array(\n        'number' => 28,\n        'sum' => 216\n    ),\n    array(\n\
    \        'number' => ", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  asort($order);\n  return $order;\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n}\n",
  "    $sorted = array();\n    $sums = array();\n    foreach ($nums as $num) {\n \
    \       $sums[$num] = 0;\n    }\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ += $num;\n    }\n    foreach ($sums as $num => $sum) {\n        $sorted[] =\
    \ $nums[$sum];\n    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  return $nums;\n}\n", "  $sums = array_map(function($num) {\
    \ return $num % 10; }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ { return $num % 10; }, $nums);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach\
    \ ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    $sorted = array_values($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $nums[$i];\n    }\n    return $sorted;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work if there are negative numbers in the\
    \ array. `order_by_points([-1, -10, -20, -30])` returns `[-10, -20, -30, -1]`\
    \ instead of `[-1, -10, -20, -30]`.\n<|/ c |>\n<| c |>\nI thought that negative\
    \ numbers were not allowed. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed the negative\
    \ numbers. I hope it works now.\n<|/ c |>\n<| c |>\nI fixed the negative numbers.\
    \ I hope it works now.\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative\
    \ numbers in the array. `order_by_points([-1, -10, -20, -30])` returns `[-10,\
    \ -20, -30, -1]` instead of `[-1, -10, -20, -30]`.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $sums = array_map(function($num) { return $num * 10; }, $nums);\n\
    \    asort($sums);\n    return array_map(function($num) { return $num / 10; },\
    \ $sums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", " \
    \ $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "    $sums\
    \ = array_map(function($num) { return $num % 10; }, $nums);\n    asort($sums);\n\
    \    return array_map(function($num) { return $num % 10; }, $nums);\n}\n", " \
    \ $sums = array_sum($nums);\n  asort($nums);\n  foreach ($nums as $i => $num)\
    \ {\n    $nums[$i] = $sums - $num;\n  }\n  return $nums;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to make it\
    \ work for negative numbers as well.\n<|/ c |>\n<| c |>\nI added a solution for\
    \ negative numbers, too.\n<|/ c |>\n<| c |>\nI added a solution for negative numbers,\
    \ too.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$nums = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,",
  "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums\
    \ = array_sum($nums);\n  arsort($sums);\n  return array_map(function ($n) use\
    \ ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i] - $num;\n    }\n    return $sorted;\n}\n", " \
    \ $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  sort($order);\n\
    \  return $order;\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($v) use ($sums) {\n        return $sums\
    \ - $v;\n    }, $order);\n}\n", "    $sums = array_sum($nums);\n    $sorted =\
    \ array_map(function($num) use ($sums) {\n        return $num * ($sums / 10) +\
    \ $sums % 10;\n    }, $nums);\n    asort($sorted);\n    return $sorted;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/14709397)\n<|/ c |>\n<| c |>\n\
    I added a comment to the question asking for a clarification.\n<|/ c |>\n<| c\
    \ |>\nI added a comment to the question asking for a clarification.\n<|/ c |>\n\
    <| c |>\nI added a comment to the question asking for a clarification.\n<|/ c\
    \ |>\n<| c |>\nI added a comment to the question asking for a clarification.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($v) use ($sums, $order) {\n        return\
    \ $order[$v];\n    }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_map(function($v) use ($order)\
    \ {\n        return $v[$order[0]];\n    }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  return\
    \ array_map(function($num) use ($sums) {\n    return $nums[$num];\n  }, array_keys($nums,\
    \ $sums));\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n", "  $sums = array_sum($nums);\n\
    \  $sorted = array();\n  foreach ($nums as $i => $num) {\n    $sorted[$i] = $num;\n\
    \    if ($sums[$i] == $sum) {\n      $sorted[$i] = $i;\n    }\n  }\n  return $sorted;\n\
    }", "  $sums = array_map(function($num) { return $num % 10; }, $nums);\n  asort($sums);\n\
    \  return array_map(function($num) { return $num % 10; }, $nums);\n}\n", "   \
    \ $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    return\
    \ array_merge(array_slice($sorted, 0, $sums), array_slice($sorted, $sums));\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i];\n   \
    \ }\n    return $sorted;\n}\n", "  $sums = array_map(function($num) {\n    return\
    \ $num * log10($num);\n  }, $nums);\n  asort($sums);\n  $nums = array_map(function($sum)\
    \ {\n    return $sum / log10($sum);\n  }, $sums);\n  return $nums;\n}\n", "  \
    \  $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sum = 0;\n\
    \        for ($j = 0; $j < strlen($num); $j++) {\n            $sum += $num[$j];\n\
    \        }\n        $sorted[$i] = $sum;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($v) use\
    \ ($order) {\n        return $v[$order[0]];\n    }, $nums);\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$array = [\n  \
    \  1 => [\n        'name' => 'a',\n        'value' => 1,\n    ],\n    2 => [\n\
    \        'name' => 'b',\n        'value' => 2,\n    ],\n    3 => [\n        'name'\
    \ => 'c',\n        'value' => 3,\n    ],\n    4 => [\n        'name' => 'd',\n\
    \        'value' => 4,\n    ],\n    5 => [\n        'name' => 'e',\n        'value'\
    \ => 5,\n    ],\n    6 => [\n        'name' => 'f',\n        'value' => 6,\n \
    \   ],\n    7 => [\n        'name' => 'g',\n        'value' => 7,\n    ],\n  \
    \  8 => [\n        'name' => 'h',\n        'value' => 8,\n    ],\n    9 => [\n\
    \        'name' => 'i',\n        'value' => 9,\n    ],\n    10 => [\n        'name'\
    \ => 'j',\n        'value' => 10,\n    ],\n    11 => [\n        'name' => 'k',\n\
    \        'value' => 11,\n    ],\n    12 => [\n        'name' => 'l',\n       \
    \ 'value' => 12,\n    ],\n    13 => [\n        'name' => 'm',\n        'value'\
    \ => 13,\n    ],\n    14 => [\n        'name' => 'n',\n        'value' => 14,\n\
    \    ],\n    15 => [\n        'name' => 'o',\n        'value' => 15,\n    ],\n\
    \    16 => [\n        'name' => 'p',\n        'value' => 16,\n    ],\n    17 =>\
    \ [\n        'name' => 'q',\n        'value' => 17,\n    ],\n    18 => [\n   \
    \     'name' => 'r',\n        'value' => 18,\n    ],\n    19 => [\n        'name'\
    \ => 's',\n        'value' => 19,\n    ],\n    20 => [\n        'name' => 't',\n\
    \        'value' => 20,\n    ],\n    21 => [\n        'name' => 'u',\n       \
    \ 'value' => 21,\n    ],\n    22 => [\n        'name' => 'v',\n        'value'\
    \ => 22,\n    ],\n    23 => [\n        'name' => 'w',\n        'value' => 23,\n\
    \    ],\n    24 => [\n        'name' => 'x',\n        'value' => 24,\n    ],\n\
    \    25 => [\n        'name' => 'y',\n        'value' => 25,\n    ],\n    26 ",
  "  $sums = array_map(function($num) {\n    return $num * 10 + $num;\n  }, $nums);\n\
    \  asort($sums);\n  return array_map(function($num) {\n    return $num / 10;\n\
    \  }, $sums);\n}\n", "    $sums = array_map(function($num) { return $num * 10;\
    \ }, $nums);\n    asort($sums);\n    return array_map(function($num) { return\
    \ $num / 10; }, $sums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "  $sums = array_sum($nums);\n  return array_map(function\
    \ ($num) use ($sums) {\n    return $nums[$num];\n  }, array_keys($nums), $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  asort($nums);\n  foreach ($nums as $i =>\
    \ $num) {\n    $nums[$i] = $sums - $num;\n  }\n  return $nums;\n}\n", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are multiple items with the same sum.\n\
    <|/ c |>\n<| c |>\nI added a note to my answer about that case.\n<|/ c |>\n<|\
    \ c |>\nI added a note about that case to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ a note about that case to my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array\
    \ = array(\n    array('name' => 'John', 'age' => 20, 'score' => 5),\n    array('name'\
    \ => 'Jane', 'age' => 21, 'score' => 4),\n    array('name' => 'Jack', 'age' =>\
    \ 22, 'score' => 3),\n    array('name' => 'Jill', 'age' => 23, 'score' => 2),\n\
    \    array('name' => 'Jack', 'age' => 22, 'score' => 3),\n    array('name' =>\
    \ 'Jill', 'age' => 23, 'score' => 2),\n    array('name' => 'Jack', 'age' => 22,\
    \ 'score' => 3),\n    array('name' => 'Jill', 'age' => 23, 'score' => 2),\n  \
    \  array('name' => 'Jack', 'age' => 22, 'score' => 3),\n    array('name' => 'Jill',\
    \ 'age' => 23, 'score' => 2),\n    array('name' => 'Jack', 'age' => 22, 'score'\
    \ => 3),\n    array('name' => 'Jill', 'age' => 23, 'score' => 2),\n    array('name'\
    \ => 'Jack', 'age' => 22, 'score' => 3),\n    array('name' => 'Jill', 'age' =>\
    \ 23, 'score' => 2),\n    array('name' => 'Jack', 'age' => 22, 'score' => 3),\n\
    \    array('name' => 'Jill', 'age' => 23, 'score' => 2),\n    array('name' =>\
    \ 'Jack', 'age' => 22, 'score' => 3),\n    array('name' => 'Jill', 'age' => 23,\
    \ 'score' => 2),\n    array('name' => 'Jack', 'age' => 22, 'score' => 3),\n  \
    \  array('name' => 'Jill', 'age' => 23, 'score' => 2),\n    array('name' => 'Jack',\
    \ 'age' => 22, 'score' => 3),\n    array('name' => 'Jill', 'age' => 23, 'score'\
    \ => 2),\n    array('name' => 'Jack', 'age' => 22, 'score' => 3),\n    array('name'\
    \ => 'Jill', 'age", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$a = array(1,11,-1,-11,-12);\n\
    $b = array();\n$sum = 0;\nforeach($a as $v){\n    $sum += $v;\n    $b[] = $v;\n\
    }\narray_multisort($b, SORT_DESC, $a);\nprint_r($a);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$a = array(1,11,-1,-11,-12);\n$b =\
    \ array();\n$sum = 0;\nforeach($a as $v){\n    $sum += $v;\n    $b[] = $v;\n}\n\
    array_multisort($b, SORT_DESC, $a);\nprint_r($a);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| c |>\nIt works. I ", "    $sums = array_sum($nums);\n    $order =\
    \ array_keys($nums, $sums);\n    return array_intersect_key($nums, $order);\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n\
    \    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  return array_map(function($v) use ($order) {\n    return $order[$v];\n\
    \  }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $sorted = array();\n\
    \    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n   \
    \ asort($sorted);\n    $sorted = array_flip($sorted);\n    foreach ($sorted as\
    \ $i => $num) {\n        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return $num * 10 + $num;\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ {\n    return $num / 10;\n  }, $sums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return\
    \ $nums;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `order_by_points([-3, -2, -1, 0, 1, 2, 3])`\n<|/ c |>\n<| c |>\n: I added\
    \ a note about negative numbers. Thanks.\n<|/ c |>\n<| c |>\nI added a note about\
    \ negative numbers. Thanks.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "  \
    \  $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n        if ($sums[$i] == $sum) {\n\
    \            $sorted[$i] = $i;\n        }\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on `array(1, 11, -1, -11,\
    \ -12)`.\n<|/ c |>\n<| c |>\nIt does work. Try it on `array(1, 11, -1, -11, -12)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it on `array(1, 11, -1, -11, -12)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it on `array(1, 11, -1, -11, -12)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it on `array(1, 11, -1, -11, -12)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $sorted = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $sum = 0;\n        foreach (str_split($num)\
    \ as $digit) {\n            $sum += $digit;\n        }\n        $sorted[$key]\
    \ = $nums[$key];\n        $sorted[$key]->sum = $sum;\n    }\n    array_multisort($sorted);\n\
    \    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $sorted = array_map(function($num)\
    \ use ($sums) {\n        return $sums - $num;\n    }, $nums);\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  sort($order);\n  return $order;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, however it only works with integers. I need a solution\
    \ that works with floats as well. Thanks anyway!\n<|/ c |>\n<| c |>\n: I added\
    \ a solution for floats as well.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n\
    <code>", "  $sums = array_sum($nums);\n  return array_map(function ($num) use\
    \ ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "    $sums =\
    \ array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $sorted[$i] = $num;\n        $sorted[$i] = $sums[$i];\n    }\n  \
    \  return $sorted;\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  foreach\
    \ ($nums as $i => $num) {\n    $nums[$i] = $sums - $num;\n  }\n  return $nums;\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n        $sorted[$i] = $sums -\
    \ $sums[$i];\n    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  $sorted = array_map(function ($num) use ($sums) {\n    return $nums[$num] -\
    \ $sums;\n  }, array_keys($nums));\n  return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n        if ($sums[$i] == $sum) {\n            $sorted[$i] = $i;\n \
    \       }\n    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't seem to work. `order_by_points(array(1, 11, -1, -11, -12))` returns\
    \ `array(-1, -11, 1, -12, 11)` instead of `array(-1, -12, -11, 11, 1)`.\n<|/ c\
    \ |>\n<| c |>\nYes, it does. I tested it before posting it. I just added a comment\
    \ to the code explaining why it works.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. I just added a comment to the code explaining why it works.\n\
    <|/ c |>\n<| c |>\nI added a comment to the code explaining why it works.\n<|/\
    \ c |>\n<| c |>\nI added a comment to the code explaining why it works.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "  $sums = array_map(function($num) {\
    \ return $num * 10; }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ { return $num / 10; }, $sums);\n}\n", "  $sums = array_sum($nums);\n  $sorted\
    \ = array();\n  foreach ($nums as $i => $num) {\n    $sorted[$i] = $num;\n   \
    \ $sorted[$i] = $sums[$i];\n  }\n  asort($sorted);\n  return $sorted;\n}\n", " \
    \   $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return\
    \ array_map(function($v) use ($order) {\n        return $order[$v];\n    }, $nums);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array\
    \ = array();\n$array[] = array('name' => 'John', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jane', 'age' => 30);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  return array_map(function($v) use ($order) {\n    return $order[$v];\n\
    \  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return\
    \ array_map(function($n) use ($sums) {\n    return $sums[$n];\n  }, $nums);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = [\n \
    \   0 => [\n        'name' => 'John',\n        'age' => 30,\n        'country'\
    \ => 'USA',\n    ],\n    1 => [\n        'name' => 'Jane',\n        'age' => 28,\n\
    \        'country' => 'USA',\n    ],\n    2 => [\n        'name' => 'Jack',\n\
    \        'age' => 31,\n        'country' => 'USA',\n    ],\n    3 => [\n     \
    \   'name' => 'Jill',\n        'age' => 32,\n        'country' => 'USA',\n   \
    \ ],\n    4 => [\n        'name' => 'Jack',\n        'age' => 31,\n        'country'\
    \ => 'USA',\n    ],\n    5 => [\n        'name' => 'Jill',\n        'age' => 32,\n\
    \        'country' => 'USA',\n    ],\n    6 => [\n        'name' => 'Jane',\n\
    \        'age' => 28,\n        'country' => 'USA',\n    ],\n    7 => [\n     \
    \   'name' => 'Jack',\n        'age' => 31,\n        'country' => 'USA',\n   \
    \ ],\n    8 => [\n        'name' => 'Jill',\n        'age' => 32,\n        'country'\
    \ => 'USA',\n    ],\n    9 => [\n        'name' => 'Jack',\n        'age' => 31,\n\
    \        'country' => 'USA',\n    ],\n    10 => [\n        'name' => 'Jill',\n\
    \        'age' => 32,\n        'country' => 'USA',\n    ],\n    11 => [\n    \
    \    'name' => 'Jane',\n        'age' => 28,\n        'country' => 'USA',\n  \
    \  ],\n    12 => [\n        'name' => 'Jack',\n        'age' => 31,\n        'country'\
    \ => 'USA',\n    ],\n    13 => [\n        'name' => 'Jill',\n        'age' =>\
    \ 32,\n        'country' => 'USA',\n    ],\n    14 => [\n        'name' => 'Jack',\n\
    \        'age' => 31,\n        'country' => 'USA',\n    ],\n    15 => [\n    \
    \    'name' => 'Jill',\n        'age' => 32,\n        'country' => 'USA',\n  \
    \  ],\n    16 => [\n        'name' => 'Jane',\n        'age' => 28,\n        'country'\
    \ => 'USA',\n    ],\n    17 => [\n        'name' => 'Jack',\n        'age' =>\
    \ 31,\n        'country' => '", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  sort($order);\n  return $order;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do it without using any\
    \ loops?\n<|/ c |>\n<| c |>\nI added a solution without loops.\n<|/ c |>\n<| c\
    \ |>\nI added a solution without loops.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$numbers\
    \ = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n\
    \    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 =>\
    \ 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n\
    \    17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n \
    \   22 => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n  \
    \  27 => 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n   \
    \ 32 => 32,\n    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37\
    \ => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 =>\
    \ 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n\
    \    48 => 48,\n    49 => 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n \
    \   53 => 53,\n    54 => 54,\n    55 => 55,\n    56 => 56,\n    57 => 57,\n  \
    \  58 => 58,\n    59 => 59,\n    60 => 60,\n    61 => 61,\n    62 => 62,\n   \
    \ 63 => 63,\n    64 => 64,\n    65 => 65,\n    66 => 66,\n    67 => 67,\n    68\
    \ => 68,\n    69 => 69,\n    70 ", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  array_multisort($order, $nums);\n  return $nums;\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_map(function($v)\
    \ use ($sums) {\n        return $sums - $v;\n    }, $order);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ array_flip($order));\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$arr = array(\n    array('id' => 1, 'name' => 'a'),\n    array('id'\
    \ => 2, 'name' => 'b'),\n    array('id' => 3, 'name' => 'c'),\n    array('id'\
    \ => 4, 'name' => 'd'),\n    array('id' => 5, 'name' => 'e'),\n    array('id'\
    \ => 6, 'name' => 'f'),\n    array('id' => 7, 'name' => 'g'),\n    array('id'\
    \ => 8, 'name' => 'h'),\n    array('id' => 9, 'name' => 'i'),\n    array('id'\
    \ => 10, 'name' => 'j'),\n    array('id' => 11, 'name' => 'k'),\n    array('id'\
    \ => 12, 'name' => 'l'),\n    array('id' => 13, 'name' => 'm'),\n    array('id'\
    \ => 14, 'name' => 'n'),\n    array('id' => 15, 'name' => 'o'),\n    array('id'\
    \ => 16, 'name' => 'p'),\n    array('id' => 17, 'name' => 'q'),\n    array('id'\
    \ => 18, 'name' => 'r'),\n    array('id' => 19, 'name' => 's'),\n    array('id'\
    \ => 20, 'name' => 't'),\n    array('id' => 21, 'name' => 'u'),\n    array('id'\
    \ => 22, 'name' => 'v'),\n    array('id' => 23, 'name' => 'w'),\n    array('id'\
    \ => 24, 'name' => 'x'),\n    array('id' => 25, 'name' => 'y'),\n    array('id'\
    \ => 26, 'name' => 'z'),\n    array('id' => 27, 'name' => 'aa'),\n    array('id'\
    \ => 28, 'name' => 'bb'),\n    array('id' => 29, 'name' => 'cc'),\n    array('id'\
    \ => 30, 'name' => 'dd'),\n    array('id' => 31, 'name' => 'ee'),\n    array('id'\
    \ => 32, 'name' => 'ff'),\n    array('id' => 33, 'name' => 'gg'),\n    array('id'\
    \ => 34, 'name' => 'hh'),\n    array('id' => 35, 'name' => 'ii'),\n    array('id'\
    \ => 36, 'name' => 'jj'),\n    array('id' => 37, 'name' => 'kk'),\n    array('id'\
    \ => 38, 'name' => 'll'),\n    ", "    $sums = array_sum($nums);\n    $sorted\
    \ = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n\
    \        if ($sums == $num) {\n            $sorted[$i] = $i;\n        }\n    }\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n \
    \ return $nums;\n}\n", "    $sums = array_sum($nums);\n    $sorted = array();\n\
    \    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n   \
    \ asort($sorted);\n    return array_values($sorted);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(\n    array(\"name\" => \"\
    Bill\", \"age\" => 25),\n    array(\"name\" => \"Jack\", \"age\" => 22),\n   \
    \ array(\"name\" => \"John\", \"age\" => 23),\n    array(\"name\" => \"Jill\"\
    , \"age\" => 24),\n    array(\"name\" => \"Jane\", \"age\" => 22),\n    array(\"\
    name\" => \"Jim\", \"age\" => 25),\n    array(\"name\" => \"Jack\", \"age\" =>\
    \ 22),\n    array(\"name\" => \"Jill\", \"age\" => 24),\n    array(\"name\" =>\
    \ \"Jane\", \"age\" => 22),\n    array(\"name\" => \"Jim\", \"age\" => 25),\n\
    \    array(\"name\" => \"Jack\", \"age\" => 22),\n    array(\"name\" => \"Jill\"\
    , \"age\" => 24),\n    array(\"name\" => \"Jane\", \"age\" => 22),\n    array(\"\
    name\" => \"Jim\", \"age\" => 25),\n    array(\"name\" => \"Jack\", \"age\" =>\
    \ 22),\n    array(\"name\" => \"Jill\", \"age\" => 24),\n    array(\"name\" =>\
    \ \"Jane\", \"age\" => 22),\n    array(\"name\" => \"Jim\", \"age\" => 25),\n\
    \    array(\"name\" => \"Jack\", \"age\" => 22),\n    array(\"name\" => \"Jill\"\
    , \"age\" => 24),\n    array(\"name\" => \"Jane\", \"age\" => 22),\n    array(\"\
    name\" => \"Jim\", \"age\" => 25),\n    array(\"name\" => \"Jack\", \"age\" =>\
    \ 22),\n    array(\"name\" => \"Jill\", \"age\" => 24),\n    array(\"name\" =>\
    \ \"Jane\", \"age\" => 22),\n    array(\"name\" => \"Jim\", \"age\" => 25),\n\
    \    array(\"name\" => \"Jack\", \"age\" => 22),\n    array(\"name\" => \"Jill\"\
    , \"age\" => 24),\n    array(\"name\" => \"Jane\", \"age", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "    $sums = array_map(function($num)\
    \ { return $num->sum(); }, $nums);\n    asort($sums);\n    return array_map(function($num)\
    \ { return $num->index(); }, $nums);\n}\n", "    $sums = array_sum($nums);\n \
    \   $result = array();\n    foreach ($nums as $i => $num) {\n        $result[$i]\
    \ = $num;\n    }\n    asort($result);\n    foreach ($result as $i => $num) {\n\
    \        $result[$i] = $sums[$i];\n    }\n    return $result;\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_map(function($v)\
    \ use ($order) {\n        return $order[$v];\n    }, $nums);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ array_flip($order));\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, array_flip($order));\n}\n", " \
    \ $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums - $n;\n  }, $nums);\n}\n", "    $sorted = array();\n\
    \    $sums = array();\n    foreach ($nums as $num) {\n        $sums[$num] = 0;\n\
    \    }\n    foreach ($nums as $num) {\n        $sums[$num] += $num;\n    }\n \
    \   foreach ($sums as $num => $sum) {\n        $sorted[] = $nums[$sum];\n    }\n\
    \    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($v) use ($order) {\n        return $order[$v];\n\
    \    }, $nums);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `order_by_points([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for negative numbers, because they have no\
    \ digits. I added a note to my answer.\n<|/ c |>\n<| c |>\nI added a note to my\
    \ answer.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `order_by_points([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for negative numbers, because they have no\
    \ digits. I added a note to my answer.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  return array_intersect_key($nums, $order);\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if the array has negative numbers. Try `order_by_points([-2,\
    \ -1, -10, -20, -30])`\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I\
    \ also added a note about how to fix that case.\n<|/ c |>\n<| c |>\nI fixed the\
    \ negative numbers case. Now it works.\n<|/ c |>\n<| a |>\n<code>\n<?php", " \
    \ $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_map(function($v)\
    \ use ($order) {\n        return $order[$v];\n    }, $nums);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ $order);\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  return array_intersect_key($nums, $order);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  return array_map(function($v) use ($sums,\
    \ $order) {\n    return $order[$v];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $sums - $num;\n  }, $nums);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_map(function($v)\
    \ use ($sums, $order) {\n        return $order[$v];\n    }, $nums);\n}\n", " \
    \   $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach\
    \ ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n    }\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  foreach\
    \ ($nums as $i => $num) {\n    $nums[$i] = $nums[$i] - $sums[$i];\n  }\n  return\
    \ $nums;\n}\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach\
    \ ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    $sorted = array_values($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i] - $num;\n    }\n    return $sorted;\n}\n", " \
    \   $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    $sorted\
    \ = array_merge(array_fill(0, count($sorted), 0), $sorted);\n    $sorted = array_flip($sorted);\n\
    \    return array_intersect_key($nums, $sorted);\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array_map(function ($num) use ($sums) {\n        return $num *\
    \ ($sums / 10);\n    }, $nums);\n    asort($sorted);\n    return $sorted;\n}\n",
  "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return\
    \ array_intersect_key($nums, $order);\n}\n", "  $sums = array_map(function($num)\
    \ { return $num->sum(); }, $nums);\n  asort($sums);\n  return array_map(function($sum)\
    \ { return $nums[$sum]; }, $sums);\n}\n", "  $sums = array_sum($nums);\n  $order\
    \ = array_keys($nums, $sums);\n  asort($order);\n  return $order;\n}\n", "  $sums\
    \ = array_sum($nums);\n  asort($nums);\n  foreach ($nums as $i => $num) {\n  \
    \  $nums[$i] = $nums[$i] - $sums[$i];\n  }\n  return $nums;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\n    array(1, 3, 5),\n\
    \    array(2, 4, 6),\n    array(3, 6, 8),\n    array(4, 8, 10),\n    array(5,\
    \ 10, 12),\n    array(6, 12, 14),\n    array(7, 14, 16),\n    array(8, 16, 20),\n\
    \    array(9, 20, 24),\n    array(10, 24, 28),\n    array(11, 28, 32),\n    array(12,\
    \ 32, 36),\n    array(13, 36, 40),\n    array(14, 40, 44),\n    array(15, 44,\
    \ 48),\n    array(16, 48, 52),\n    array(17, 52, 56),\n    array(18, 56, 60),\n\
    \    array(19, 60, 64),\n    array(20, 64, 68),\n    array(21, 68, 72),\n    array(22,\
    \ 72, 76),\n    array(23, 76, 80),\n    array(24, 80, 84),\n    array(25, 84,\
    \ 88),\n    array(26, 88, 92),\n    array(27, 92, 96),\n    array(28, 96, 100),\n\
    \    array(29, 100, 104),\n    array(30, 104, 108),\n    array(31, 108, 112),\n\
    \    array(32, 112, 116),\n    array(33, 116, 120),\n    array(34, 120, 124),\n\
    \    array(35, 124, 128),\n    array(36, 128, 132),\n    array(37, 132, 136),\n\
    \    array(38, 136, 140),\n    array(39, 140, 144),\n    array(40, 144, 148),\n\
    \    array(41, 148, 152),\n    array(42, 152, 156),\n    array(43, 156, 160),\n\
    \    array(44, 160, 164),\n    array(45, 164, 168),\n    array(46, 168, 172),\n\
    \    array(47, 172, 176),\n    array(48, 176, 180),\n    array(49, 180, 184),\n\
    \    array(50, 184, 188),\n    array(51, 188, 192),\n    array(52, 192, 196),\n\
    \    array(53, 196, 200),\n    array(54, 200, 204),\n    array(55, 204, 208),\n\
    \    array(56, 208, 212),\n    array(57, 212, 216),\n    array(58, 216, 220",
  "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums,\
    \ $order);\n}\n", "    $sorted = array();\n    $sums = array();\n    foreach ($nums\
    \ as $num) {\n        $sums[$num] = 0;\n    }\n    foreach ($nums as $num) {\n\
    \        $sums[$num] += $num;\n    }\n    foreach ($sums as $num => $sum) {\n\
    \        $sorted[] = $num;\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Try it with `order_by_points(array(1,11,-1,-11,-12))`\n\
    <|/ c |>\n<| c |>\n: I added a comment to the question to explain why this doesn't\
    \ work.\n<|/ c |>\n<| c |>\n: I added a comment to the question to explain why\
    \ this doesn't work.\n<|/ c |>\n<| c |>\n: I added a comment to the question to\
    \ explain why this doesn't work.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $sums\
    \ = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  sort($order);\n\
    \  return array_values($nums);\n}\n", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_intersect_key($nums, array_flip($order));\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n        if ($sums[$i] == $sum)\
    \ {\n            $sorted[$i] = $i;\n        }\n    }\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\n\
    \    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 =>\
    \ 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n\
    \    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n \
    \   23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n  \
    \  28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n   \
    \ 33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38\
    \ => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 =>\
    \ 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n\
    \    49 => 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n \
    \   54 => 54,\n    55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n  \
    \  59 => 59,\n    60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n   \
    \ 64 => 64,\n    65 => 65,\n    66 => 66,\n    67 => 67,\n    68 => 68,\n    69\
    \ => 69,\n    70 => 70,\n    71 => 71,\n    72 => 72,\n    73 => 73,\n", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return array_map(function($n) use ($sums)\
    \ {\n    return $sums - $n;\n  }, $nums);\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, but I cannot get it to work. Could you please explain how you\
    \ got it to work?\n<|/ c |>\n<| c |>\nI added a comment to the code explaining\
    \ how it works.\n<|/ c |>\n<| c |>\nI see it now. Thanks!\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "    $sums = array_sum($nums);\n    $order = array();\n    foreach\
    \ ($nums as $i => $num) {\n        $order[$i] = $sums - $num;\n    }\n    return\
    \ $order;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  return array_map(function($v) use ($order) {\n    return $order[$v];\n  },\
    \ $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_values($nums, $order);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(array(10, -10,\
    \ 20, -20, 30, -30))`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(10,\
    \ -10, 20, -20, 30, -30))`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(10,\
    \ -10, 20, -20, 30, -30))`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(10,\
    \ -10, 20, -20, 30, -30))`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(10,\
    \ -10, 20, -20, 30, -30))`\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $array = array(10, -10, 20, -20, 30, -30);\n$sums = array_sum($array);\n$order\
    \ = array_keys($array, $sums);\n$result = array_values($array, $order);\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(array(10,\
    \ -10, 20, -20, 30, -30))`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(array(10,\
    \ -10, 20, -20, 30, -30))`\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $array = array(10, -10, 20, -20, 30, -30);\n$sums = array_sum($array);\n$order\
    \ = array_keys($array, $sums);\n$result = array_values($array, $order);\nprint_r($result);",
  "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return\
    \ array_map(function($v) use ($sums) {\n        return $sums - $v;\n    }, $order);\n\
    }\n", "    $sums = array_map(function($num) { return $num * 10; }, $nums);\n \
    \   asort($sums);\n    return array_map(function($num) { return $num / 10; },\
    \ $sums);\n}\n", "    $sorted = array();\n    $sums = array();\n    foreach ($nums\
    \ as $num) {\n        $sums[$num] = array_sum(str_split($num));\n        $sorted[]\
    \ = $num;\n    }\n    asort($sums);\n    foreach ($sums as $num => $sum) {\n \
    \       $sorted[$num] = $nums[$sum];\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if there is a way\
    \ to do it without using any loops.\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ loops.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$arr = array(\n    array('id' =>\
    \ 1, 'name' => 'John'),\n    array('id' => 2, 'name' => 'Jane'),\n    array('id'\
    \ => 3, 'name' => 'Jack'),\n    array('id' => 4, 'name' => 'Jill'),\n    array('id'\
    \ => 5, 'name' => 'Jack'),\n    array('id' => 6, 'name' => 'Jill'),\n    array('id'\
    \ => 7, 'name' => 'Jack'),\n    array('id' => 8, 'name' => 'Jill'),\n    array('id'\
    \ => 9, 'name' => 'Jack'),\n    array('id' => 10, 'name' => 'Jill'),\n    array('id'\
    \ => 11, 'name' => 'Jack'),\n    array('id' => 12, 'name' => 'Jill'),\n    array('id'\
    \ => 13, 'name' => 'Jack'),\n    array('id' => 14, 'name' => 'Jill'),\n    array('id'\
    \ => 15, 'name' => 'Jack'),\n    array('id' => 16, 'name' => 'Jill'),\n    array('id'\
    \ => 17, 'name' => 'Jack'),\n    array('id' => 18, 'name' => 'Jill'),\n    array('id'\
    \ => 19, 'name' => 'Jack'),\n    array('id' => 20, 'name' => 'Jill'),\n    array('id'\
    \ => 21, 'name' => 'Jack'),\n    array('id' => 22, 'name' => 'Jill'),\n    array('id'\
    \ => 23, 'name' => 'Jack'),\n    array('id' => 24, 'name' => 'Jill'),\n    array('id'\
    \ => 25, 'name' => 'Jack'),\n    array('id' => 26, 'name' => 'Jill'),\n    array('id'\
    \ => 27, 'name' => 'Jack'),\n    array('id' => 28, 'name' => 'Jill'),\n    ",
  "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return\
    \ array_map(function($n) use ($sums, $order) {\n        return $order[$n];\n \
    \   }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array();\n\
    \    foreach ($nums as $i => $num) {\n        $order[$i] = $sums - $num;\n   \
    \ }\n    return $order;\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n\
    \  foreach ($nums as $i => $num) {\n    $nums[$i] = $nums[$i] - $sums[$i];\n \
    \ }\n  return $nums;\n}\n", "    $sorted = array();\n    $sums = array();\n  \
    \  foreach ($nums as $num) {\n        $digits = str_split($num);\n        $sum\
    \ = 0;\n        foreach ($digits as $digit) {\n            $sum += $digit;\n \
    \       }\n        $sorted[] = $num;\n        $sums[$num] = $sum;\n    }\n   \
    \ asort($sums);\n    foreach ($sums as $num => $sum) {\n        $sorted[] = $num;\n\
    \    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ the answer. Unfortunately, the code does not work as expected. `order_by_points`\
    \ returns `array()`, not `array(-1, -11, 1, -12, 11)`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case to the answer.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I added the test case to the answer.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added the test case to the answer.\n<|/ c |>\n\
    <| a tags=sorting,php,arrays |>\n<code>", "    $sums = array_sum($nums);\n   \
    \ $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i] - $num;\n    }\n    return $sorted;\n}\n", " \
    \   $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return\
    \ array_intersect_key($nums, $order);\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$sums - $num];\n\
    \  }, $nums);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks so much for this. It works\
    \ perfectly and I understand it a lot better now. Thanks again!\n<|/ c |>\n<|\
    \ c |>\nI added a more efficient solution that doesn't require sorting the entire\
    \ array each time.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array\
    \ = array(\n    array('id' => 1, 'name' => 'John'),\n    array('id' => 2, 'name'\
    \ => 'Jane'),\n    array('id' => 3, 'name' => 'Jack'),\n    array('id' => 4, 'name'\
    \ => 'Jill'),\n    array('id' => 5, 'name' => 'Jack'),\n    array('id' => 6, 'name'\
    \ => 'Jill'),\n    array('id' => 7, 'name' => 'Jane'),\n    array('id' => 8, 'name'\
    \ => 'Jack'),\n    array('id' => 9, 'name' => 'Jill'),\n    array('id' => 10,\
    \ 'name' => 'Jack'),\n    array('id' => 11, 'name' => 'Jill'),\n    array('id'\
    \ => 12, 'name' => 'Jack'),\n    array('id' => 13, 'name' => 'Jill'),\n    array('id'\
    \ => 14, 'name' => 'Jack'),\n    array('id' => 15, 'name' => 'Jill'),\n    array('id'\
    \ => 16, 'name' => 'Jack'),\n    array('id' => 17, 'name' => 'Jill'),\n    array('id'\
    \ => 18, 'name' => 'Jack'),\n    array('id' => 19, 'name' => 'Jill'),\n    array('id'\
    \ => 20, 'name' => 'Jack'),\n    array('id' => 21, 'name' => 'Jill'),\n    array('id'\
    \ => 22, 'name' => 'Jack'),\n    array('id' => 23, 'name' => 'Jill'),\n    array('id'\
    \ => 24, 'name' => 'Jack'),\n    array('id' => 25, 'name' => 'Jill'),\n    array('id'\
    \ => 26, 'name' => 'Jack'),\n    array('id' => 27, 'name' => 'Jill'),\n    array('id'\
    \ => 28, 'name' => 'Jack'),\n    array('id' => 29, 'name' => 'Jill'),\n    array('id'\
    \ => 30, 'name' => 'Jack'),\n    ", "    $sums = array_sum($nums);\n    $sorted\
    \ = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n\
    \    }\n    asort($sorted);\n    return array_values($sorted);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach ($sorted\
    \ as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n    }\n    return\
    \ $sorted;\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  foreach ($nums\
    \ as $i => $num) {\n    $nums[$i] = $nums[$i] - $sums[$i];\n  }\n  return $nums;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't seem to work.\
    \ Try it with `order_by_points(array(1,11,-1,-11,-12))`\n<|/ c |>\n<| c |>\n:\
    \ It works fine for me. `order_by_points(array(1,11,-1,-11,-12))` returns `array(-1,\
    \ -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does\
    \ it work for you?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does\
    \ it work for you?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does\
    \ it work for you?\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ $order);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
