name: HumanEval_40_triples_sum_to_zero
language: php
prompt: "<?php\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
  \ returns True if there are three distinct elements in the list that\n// sum to\
  \ zero, and False otherwise.\n// >>> triples_sum_to_zero(array(1, 3, 5, 0))\n//\
  \ false\n// >>> triples_sum_to_zero(array(1, 3, -2, 1))\n// true\n// >>> triples_sum_to_zero(array(1,\
  \ 2, 3, 7))\n// false\n// >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))\n//\
  \ true\n// >>> triples_sum_to_zero(array(1))\n// false\nfunction triples_sum_to_zero($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return triples_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, -1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 3, -2, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 5, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 9, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(1, 3, 5, -100)) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(100, 3, 5, -100)) !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $sum = 0;\n  foreach ($l as $e) {\n    $sum += $e;\n  }\n  return\
    \ $sum == 0;\n}\n", "  $sum = 0;\n  foreach ($l as $n) {\n    $sum += $n;\n  }\n\
    \  return $sum == 0;\n}\n", "  $sum = 0;\n  $n = count($l);\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $sum += $l[$i];\n  }\n  for ($i = 0; $i < $n; $i++) {\n \
    \   for ($j = $i + 1; $j < $n; $j++) {\n      $sum -= $l[$i] * $l[$j];\n    }\n\
    \  }\n  return $sum == 0;\n}\n", "  $sum = 0;\n  foreach ($l as $n) {\n    $sum\
    \ += $n;\n  }\n  return $sum == 0;\n}\n", "  $sum = 0;\n  foreach ($l as $n) {\n\
    \    $sum += $n;\n  }\n  return $sum == 0;\n}\n", "    $sum = 0;\n    foreach\
    \ ($l as $n) {\n        $sum += $n;\n    }\n    return $sum == 0;\n}\n", "   \
    \ $sum = 0;\n    foreach ($l as $n) {\n        $sum += $n;\n    }\n    if ($sum\
    \ == 0) {\n        return true;\n    }\n    $sum -= $l[0];\n    $sum -= $l[1];\n\
    \    $sum -= $l[2];\n    if ($sum == 0) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "    $sum = 0;\n    foreach ($l as $n) {\n        $sum += $n;\n\
    \    }\n    return $sum == 0;\n}\n", "    $sum = 0;\n    foreach ($l as $n) {\n\
    \        $sum += $n;\n    }\n    return $sum == 0;\n}\n", "  $sum = 0;\n  foreach\
    \ ($l as $e) {\n    $sum += $e;\n  }\n  return $sum == 0;\n}\n", "  $sum = 0;\n\
    \  foreach ($l as $n) {\n    $sum += $n;\n  }\n  return $sum == 0;\n}\n", "  \
    \  $sum = 0;\n    foreach ($l as $e) {\n        $sum += $e;\n    }\n    if ($sum\
    \ == 0) {\n        return true;\n    }\n    $sum -= $l[0];\n    $sum -= $l[1];\n\
    \    $sum -= $l[2];\n    if ($sum == 0) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "    $sum = 0;\n    foreach ($l as $e) {\n        $sum += $e;\n\
    \    }\n    if ($sum < 0) return false;\n    $count = 0;\n    foreach ($l as $e)\
    \ {\n        if ($e == 0) $count++;\n        if ($e == $sum) $count++;\n    }\n\
    \    return $count == 3;\n}\n", "    $sum = 0;\n    $n = count($l);\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $sum += $l[$i];\n    }\n    if ($sum < 0) {\n\
    \        return false;\n    }\n    $n = count($l);\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $j = $i + 1;\n        $k = $n - 1;\n        while ($j < $k)\
    \ {\n            if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                return\
    \ true;\n            }\n            $j++;\n            $k--;\n        }\n    }\n\
    \    return false;\n}\n", "  $sum = 0;\n  foreach ($l as $n) {\n    $sum += $n;\n\
    \  }\n  return ($sum % 3 == 0);\n}\n", "    $sum = 0;\n    foreach ($l as $e)\
    \ {\n        $sum += $e;\n    }\n    return ($sum == 0);\n}\n", "  $sum = 0;\n\
    \  foreach ($l as $n) {\n    $sum += $n;\n  }\n  return $sum == 0;\n}\n", "  $sum\
    \ = 0;\n  foreach ($l as $n) {\n    $sum += $n;\n  }\n  return ($sum % 3 == 0);\n\
    }\n", "  $sum = 0;\n  foreach ($l as $e) {\n    $sum += $e;\n  }\n  return $sum\
    \ == 0;\n}\n", "    $sum = 0;\n    foreach ($l as $e) {\n        $sum += $e;\n\
    \    }\n    return $sum == 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
