name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the list l.\n// >>> median(array(3,\
  \ 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction\
  \ median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $l = sort($l);\n    return $l[floor(count($l) / 2)];\n}\n", " \
    \   $l = sort($l);\n    return $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}\n", "  $l = array_filter($l);\n  if (count($l) == 0) {\n\
    \    return 0;\n  }\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ - 1) / 2] + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  $n = count($l);\n  if ($n % 2)\
    \ {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    $m = $n / 2;\n    $left\
    \ = $l[($n - 1) / 2];\n    $right = $l[$m];\n    return ($left + $right) / 2;\n\
    \  }\n}\n", "    $l = array_values($l);\n    $n = count($l);\n    if ($n % 2 ===\
    \ 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n %\
    \ 2 === 0) {\n    return $l[$n / 2];\n  }\n  else {\n    return ($l[$n / 2] +\
    \ $l[($n - 1) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  $l = array_reverse($l);\n\
    \  sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n\
    \ - 1) / 2]) / 2;\n  }\n  return $l[($n - 1) / 2];\n}\n", "  sort($l);\n  $n =\
    \ count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n \
    \   return ($l[($n - 1) / 2] + $l[($n - 2) / 2) / 2];\n  }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n + 1) / 2];\n  \
    \  }\n    return ($l[($n - 1) / 2 + 1] + $l[($n - 1) / 2];\n}", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, -1);\n    $l = array_filter($l);\n    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, -1);\n    return $l[0];\n}\n", "    sort($l);\n \
    \   return $l[count($l)/2];\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "    $l = array_filter($l);\n    if\
    \ (count($l) % 2 == 0) {\n        return $l[count($l) / 2 - 1];\n    }\n    else\
    \ {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n\
    }\n", "  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2]; // median\
    \ = (left + right)/2\n  }\n  else {\n    $m = $n / 2;\n    return ($l[$m] + $l[$n\
    \ - 1]) / 2;\n  }\n}\n", "    if (count($l) % 2 === 0) {\n        return $l[count($l)\
    \ / 2 - 1];\n    }\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2])\
    \ / 2;\n  }\n}\n", "    $l = array_reverse($l);\n    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  $l = array_filter($l);\n\
    \  if (count($l) % 2 == 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  else {\n\
    \    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}", "    $l\
    \ = array_values($l);\n    $n = count($l);\n    if ($n % 2) {\n        return\
    \ $l[($n - 1) / 2]; // median = (left + right)/2\n    } else {\n        return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}\n", "  sort($l);\n  return\
    \ $l[count($l) / 2 - 1];\n}\n", "    $l = array_filter($l);\n    if (count($l)\
    \ == 0) return null;\n    $sorted = array_values($l);\n    sort($sorted);\n  \
    \  return $sorted[count($sorted)/2];\n}", "  $l = array_filter($l);\n  if (count($l)\
    \ == 0) return null;\n  sort($l);\n  return $l[count($l) / 2 - 1];\n}\n", "  \
    \  $l = array_reverse($l);\n    $l = array_slice($l, 0, count($l) / 2);\n    return\
    \ $l[count($l) / 2 - 1];\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n    }\n\
    \    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n -\
    \ 2) / 2] + $l[($n - 1) / 2]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n\
    \  }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2) {\n        return\
    \ $l[(count($l) / 2) - 1];\n    }\n    return ($l[($n - 1) / 2 + 1] + $l[($n -\
    \ 1) / 2];\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2)\
    \ / 2]) / 2;\n  }\n}\n", "  $l = array_filter($l);\n  return count($l) == 0 ?\
    \ 0 : ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n  else {\n    return $l[($n - 1) / 2];\n  }\n}", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "    $l = array_values($l);\n\
    \    sort($l);\n    return $l[count($l)/2];\n}\n", "  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2]; // median\
    \ = (left + right)/2\n    } else {\n        return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2]) / 2;\n    }\n}\n", "  sort($l);\n  return $l[count($l) / 2 - 1];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  if (count($l) % 2 ===\
    \ 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", "    $n = count($l);\n    if\
    \ ($n % 2 === 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[(count($l) / 2)];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $l = sort($l);\n    return\
    \ $l[count($l)/2];\n}\n", "    $l = array_values($l);\n    $n = count($l);\n \
    \   if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  $n =\
    \ count($l);\n  if ($n % 2 == 0) {\n    return ($l[$n-1] + $l[$n/2]) / 2.0;\n\
    \  } else {\n    return $l[$n/2];\n  }\n}\n", "    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        $m = $l[($n - 1) / 2];\n    } else {\n        $m = $l[($n\
    \ - 1) / 2];\n        for ($i = 1; $i < $n; $i++) {\n            if ($l[$i] <=\
    \ $m) {\n                $m = $l[$i];\n            }\n        }\n    }\n    return\
    \ $m;\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2)\
    \ {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2]) / 2;\n}\n", "    $l = array_values($l);\n    $n = count($l);\n  \
    \  if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n\
    \ - 1) / 2]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}\n", "    $l\
    \ = array_filter($l);\n    if (count($l) == 0) return null;\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n    else {\n\
    \        return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}\n", "  $n\
    \ = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    $m = $n / 2;\n    return ($l[$m] + $l[$n - 1]) / 2;\n  }\n}\n", "   \
    \ $l = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n  \
    \  }\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1)\
    \ / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n",
  "    $l = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n \
    \   }\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1)\
    \ / 2];\n    }\n    $m = $n / 2;\n    $l[$m] = $l[$m] + $l[$n - 1];\n    return\
    \ $l[$m];\n}\n", "    $l = array_values($l);\n    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2])\
    \ / 2;\n  }\n}\n", "    $l = array_values($l);\n    $n = count($l);\n    if ($n\
    \ % 2) {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 - 1]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  $l = array_filter($l);\n  if\
    \ (count($l) % 2 == 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", "    if (count($l) % 2 === 0) {\n\
    \        // even\n        return $l[count($l) / 2 - 1];\n    }\n    else {\n \
    \       // odd\n        return (count($l) / 2) - floor((count($l) / 2));\n   \
    \ }\n}\n</code>\n<|/ a tags=median,php,arrays |>\n<| c |>\nThis doesn't work for\
    \ me. `median(array(3, 1, 2, 4, 5))` returns `3` instead of `1.5`.\n<|/ c |>\n\
    <| c |>\nIt works for me. Are you sure you copied the code correctly? It returns\
    \ 1.5 for me.\n<|/ c |>\n<| c |>\nYes, I copied the code correctly. I'm using\
    \ PHP 7.0.10. Maybe it's because I'm using PHP 5.3.10?\n<|/ c |>\n<| c |>\nNo,\
    \ it's because you're using PHP 5.3.10. PHP 5.3.10 is no longer supported. Upgrade\
    \ to PHP 7.\n<|/ c |>\n<| c |>\nI upgraded to PHP 7 and it still doesn't work.\
    \ I'm running PHP 7.0.10.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php", "  $l =\
    \ array_values($l);\n  return $l[count($l) / 2 - 1];\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n  }\n\
    \  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "    $l = array_filter($l);\n\
    \    if (count($l) == 0) return null;\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return $l[($n - 1) / 2];\n    }\n    else {\n        return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n}\n", "  $l = array_filter($l);\n\
    \  if (count($l) == 0) return null;\n  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n - 1) / 2];\n  } else {\n    return ($l[($n -\
    \ 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[$n/2];\n    } else\
    \ {\n        return ($l[$n/2] + $l[$n/2 - 1]) / 2;\n    }\n}\n", "  sort($l);\n\
    \  return $l[count($l)/2];\n}\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n \
    \   return $l[($n - 1) / 2] + $l[($n - 1) / 2 + 1];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[($n - 1) / 2]; // median(array(3, 1, 2, 4, 5))\n\
    \  }\n  else {\n    $m = $n / 2;\n    $left = $l[$m];\n    $right = $l[$n - 1];\n\
    \    return ($left + $right) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  if (count($l) % 2\
    \ === 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return ($l[count($l)\
    \ / 2] + $l[(count($l) / 2) - 1]) / 2;\n  }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[(count($l) / 2)];\n    } else {\n      \
    \  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n\
    \  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", " \
    \ $l = array_filter($l);\n  if (count($l) % 2 == 0) {\n    return $l[count($l)\
    \ / 2 - 1];\n  }\n  else {\n    return ($l[count($l) / 2] + $l[count($l) / 2 -\
    \ 1]) / 2;\n  }\n}\n", "    $l = array_values($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[($n + 1) / 2 - 1] + $l[($n - 1) / 2] - $l[($n\
    \ - 1) / 2]) / 2;\n    }\n    return $l[($n - 1) / 2];\n}\n", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2];\n    }\n    return $l[($n - 1) / 2];\n}", "  $n = count($l);\n  if\
    \ ($n % 2 == 0) {\n    $m = $l[$n / 2];\n    for ($i = $n / 2; $i > 0; $i /= 2)\
    \ {\n      if ($l[$i] > $m) {\n        $m = $l[$i];\n      }\n    }\n    return\
    \ $m;\n  }\n  else {\n    $m = $l[$n / 2 - 1];\n    for ($i = 1; $i < $n / 2;\
    \ $i++) {\n      if ($l[$i] > $m) {\n        $m = $l[$i];\n      }\n    }\n  \
    \  return $m;\n  }\n}", "    sort($l);\n    $n = count($l);\n    if ($n % 2) {\n\
    \        return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2) / 2];\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n\
    \    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 - 1]) / 2;\n  }\n}\n", "    $l = array_filter($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n + 1) / 2];\n    } else {\n        return\
    \ ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n}\n", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 - 1];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 === 0) {\n    return\
    \ $l[$n / 2];\n  }\n  else {\n    return ($l[$n / 2] + $l[($n - 1) / 2]) / 2;\n\
    \  }\n}", "    $l = array_filter($l);\n    if (count($l) == 0) {\n        throw\
    \ new Exception('Cannot calculate median of an empty list');\n    }\n    return\
    \ $l[count($l) / 2 - 1];\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n}", "    $l = array_values($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  if (count($l) == 0) return null;\n\
    \  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1)\
    \ / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}", "    $l = array_reverse($l);\n    $l = array_slice($l, 0, -1);\n   \
    \ $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n\
    \    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n \
    \ $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n \
    \ else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}",
  "  if (count($l) == 0) return null;\n  $sorted = $l;\n  sort($sorted);\n  $mid =\
    \ count($sorted) / 2;\n  if ($mid % 2 == 0) {\n    return $sorted[$mid];\n  }\
    \ else {\n    return ($sorted[$mid - 1] + $sorted[$mid]) / 2;\n  }\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n\
    \  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}", "  if (count($l) % 2\
    \ === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  return ($l[count($l) / 2]\
    \ + $l[count($l) / 2 - 1]) / 2;\n}\n", "    sort($l);\n    $n = count($l);\n \
    \   if ($n % 2 == 0) {\n        return $l[($n + 1) / 2];\n    } else {\n     \
    \   return ($l[($n - 1) / 2] - $l[($n - 2) / 2 + 1]) / 2;\n    }\n}", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n\
    \    } else {\n        return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n   \
    \ }\n}\n", "    $l = array_values($l);\n    sort($l);\n    $n = count($l);\n \
    \   if ($n % 2) {\n        return $l[$n / 2];\n    }\n    return ($l[$n / 2] +\
    \ $l[($n - 1) / 2]) / 2;\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return $l[($n - 1) / 2] + ($l[($n - 1) / 2 + 1] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n",
  "  $l = array_reverse($l);\n  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n  \
    \  return $l[$n / 2];\n  }\n  else {\n    return ($l[$n / 2] + $l[($n - 1) / 2])\
    \ / 2;\n  }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n    }\n    return\
    \ $l[($n - 1) / 2];\n}\n", "  if (count($l) % 2 == 0) {\n    return $l[count($l)\
    \ / 2 - 1];\n  }\n  return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n}",
  "    sort($l);\n    return $l[count($l)/2];\n}\n", "    if (count($l) % 2 == 0)\
    \ {\n        $l = array_reverse($l);\n    }\n    $n = count($l);\n    $m = $n\
    \ / 2;\n    if ($n % 2 == 0) {\n        return $l[$m];\n    }\n    return ($l[$m]\
    \ + $l[$m-1]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0)\
    \ {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 2) / 2]) / 2;\n  }\n}", "    sort($l);\n    $n = count($l);\n   \
    \ if ($n % 2 == 0) {\n        return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \    }\n    return $l[($n - 1) / 2];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2) {\n \
    \       return $l[($n - 1) / 2]; // median = (left + right) / 2.0\n    } else\
    \ {\n        return $l[($n - 1) / 2];\n    }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] - $l[($n - 2) / 2 + 1]) / 2;\n  }\n}", "  $l = array_values($l);\n\
    \  return $l[count($l) / 2 - 1];\n}", "    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "  $l = array_filter($l);\n  if (count($l) == 0) return null;\n  sort($l);\n\
    \  return $l[count($l)/2];\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n   \
    \ $m = $l[($n - 1) / 2];\n  } else {\n    $m = ($l[($n - 1) / 2] + $l[($n - 2)\
    \ / 2]) / 2;\n  }\n  return $m;\n}\n", "  $n = count($l);\n  if ($n % 2 == 0)\
    \ {\n    return $l[($n - 1) / 2] + ($l[($n - 1) / 2 + 1] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n  }\n  else {\n    return $l[($n - 1) / 2] + $l[($n - 1) / 2 - 1];\n \
    \ }\n}", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n    } else {\n  \
    \      return $l[($n - 1) / 2] + $l[($n - 2) / 2] + ($l[($n - 3) / 2] + $l[($n\
    \ - 4) / 2]) / 2;\n    }\n}\n", "  $l = array_filter($l);\n  if (count($l) ==\
    \ 0) return null;\n  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ $l[($n - 1) / 2];\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) /\
    \ 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n\
    \    return $l[(count($l) / 2)];\n  }\n  else {\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return ($l[$n / 2] + $l[($n - 1) / 2]) / 2;\n  } else {\n \
    \   return $l[($n - 1) / 2];\n  }\n}\n", "    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1)\
    \ / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}", "  $l = array_reverse($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n\
    \    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] - $l[($n\
    \ - 2) / 2 + 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n %\
    \ 2 == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n -\
    \ 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    sort($l);\n    return $l[count($l)/2];\n\
    }", "  if (count($l) % 2 == 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  else\
    \ {\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", " \
    \ $l = array_reverse($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n\
    \ - 1) / 2]; // median = (left + right) / 2;\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        $m = $l[($n - 1) / 2];\n    } else {\n        $m = $l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2];\n    }\n    return $m;\n}\n", "    $l = sort($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n  \
    \  }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  $n = count($l);\n\
    \  if ($n < 1) {\n    return NULL;\n  }\n  sort($l);\n  $half = floor($n/2);\n\
    \  return ($l[$half-1] + $l[$half]) / 2.0;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  if (count($l) % 2 ===\
    \ 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $l = array_values($l);\n    sort($l);\n    return $l[count($l) / 2\
    \ - 1];\n}\n", "  $l = array_reverse($l);\n  $n = count($l);\n  if ($n % 2) {\n\
    \    return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n  }\n  return ($l[($n - 1) /\
    \ 2] + $l[($n - 2) / 2] + $l[($n - 3) / 2]) / 3;\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] - $l[($n - 2) / 2];\n  }\n}\n", "  $l = array_reverse($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2]; // median =\
    \ (left + right)/2\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2)\
    \ / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return\
    \ $l[(count($l) / 2) - 1];\n  }\n  return ($l[($n - 1) / 2] - $l[($n - 2) / 2\
    \ + 1]) / 2;\n}", "  $l = array_reverse($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n  }\n  return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2) {\n \
    \       return $l[($n - 1) / 2]; // median = (left + right)/2\n    } else {\n\
    \        return $l[($n - 1) / 2];\n    }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n  \
    \  return ($l[($n - 1) / 2] - $l[($n - 2) / 2];\n  }\n}\n", "    sort($l);\n \
    \   return $l[count($l) / 2 - 1];\n}\n", "    if (count($l) % 2 === 0) {\n   \
    \     return $l[count($l) / 2 - 1];\n    }\n    $sorted = array_sort($l);\n  \
    \  return $sorted[count($sorted) / 2 - 1];\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array1 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array2 = array(1,2,3,4,5,6,7,8,9,10);\n$array3 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array4 = array(1,2,3,4,5,6,7,8,9,10);\n$array5 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array6 = array(1,2,3,4,5,6,7,8,9,10);\n$array7 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array8 = array(1,2,3,4,5,6,7,8,9,10);\n$array9 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array10 = array(1,2,3,4,5,6,7,8,9,10);\n\n$array11 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array12 = array(1,2,3,4,5,6,7,8,9,10);\n$array13 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array14 = array(1,2,3,4,5,6,7,8,9,10);\n$array15 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array16 = array(1,2,3,4,5,6,7,8,9,10);\n$array17 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array18 = array(1,2,3,4,5,6,7,8,9,10);\n$array19 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array20 = array(1,2,3,4,5,6,7,8,9,10);\n\n$array21 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array22 = array(1,2,3,4,5,6,7,8,9,10);\n$array23 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array24 = array(1,2,3,4,5,6,7,8,9,10);\n$array25 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array26 = array(1,2,3,4,5,6,7,8,9,10);\n$array27 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array28 = array(1,2,3,4,5,6,7,8,9,10);\n$array29 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array30 = array(1,2,3,4,5,6,7,8,9,10);\n\n$array31 = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array32 = array(1,2,3,4,5,6,7,8,9,10);\n$array33 = array(1,2,3,4,5,6,7,", " \
    \   $n = count($l);\n    if ($n % 2 === 0) {\n        return $l[($n - 1) / 2];\
    \ // median = (left + right)/2\n    }\n    else {\n        return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}", "    $l = array_reverse($l);\n   \
    \ $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2];\n    } else {\n        return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n\
    \    }\n}\n", "  $l = array_values($l);\n  sort($l);\n  return $l[count($l) /\
    \ 2 - 1];\n}\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n    $m = $l[($n - 1)\
    \ / 2];\n  } else {\n    $m = $l[($n - 1) / 2];\n  }\n  for ($i = 0; $i < $n;\
    \ $i++) {\n    if ($l[$i] < $m) {\n      $m = $l[$i];\n    }\n  }\n  return $m;\n\
    }", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n\
    \  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", " \
    \ sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[$n-1] + $l[$n/2])\
    \ / 2.0;\n  } else {\n    return $l[$n/2];\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n < 1) {\n        throw new Exception('Cannot calculate median of an\
    \ empty list');\n    }\n    $sorted = array_reverse($l);\n    $middle = $n >>\
    \ 1;\n    if ($n % 2) {\n        return $sorted[$middle - 1] + $sorted[$middle];\n\
    \    }\n    return $sorted[$middle];\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n\
    \ - 1) / 2]) / 2;\n  }\n  return $l[($n - 1) / 2];\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}", "  $l = array_values($l);\n  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2) {\n \
    \       return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}\n", "    sort($l);\n    return $l[count($l)/2];\n}\n", " \
    \   $l = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n\
    \    }\n    $l = array_reverse($l);\n    $l = array_slice($l, count($l) / 2);\n\
    \    return $l[0];\n}\n", "    $l = array_reverse($l);\n    sort($l);\n    return\
    \ $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "    if (count($l) % 2 == 0) {\n \
    \       $median = ($l[count($l) / 2] + $l[(count($l) / 2) - 1]) / 2;\n    } else\
    \ {\n        $median = $l[count($l) / 2];\n    }\n    return $median;\n}\n", " \
    \   $l = array_filter($l);\n    if (count($l) == 0) return null;\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  $n = count($l);\n  if ($n <= 1)\
    \ {\n    return $l[0];\n  }\n  $half = floor($n / 2);\n  $l1 = $l[$half];\n  $l2\
    \ = $l[$n - 1];\n  if ($l1 > $l2) {\n    return $l1;\n  }\n  return $l2;\n}\n",
  "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2) {\n        return\
    \ $l[($n - 1) / 2] + $l[($n - 2) / 2];\n    } else {\n        return $l[($n -\
    \ 1) / 2];\n    }\n}\n", "  $l = array_reverse($l);\n  sort($l);\n  return $l[count($l)\
    \ / 2 - 1];\n}", "  if (count($l) % 2 == 0) {\n    return $l[(count($l) / 2) -\
    \ 1];\n  }\n  else {\n    return ($l[count($l) / 2] + $l[(count($l) / 2) - 1])\
    \ / 2;\n  }\n}\n", "  if (count($l) % 2 === 0) {\n    return $l[count($l) / 2\
    \ - 1];\n  }\n  else {\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1])\
    \ / 2;\n  }\n}\n", "  if (count($l) % 2 == 0) {\n    return $l[count($l) / 2 -\
    \ 1];\n  }\n  else {\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) /\
    \ 2;\n  }\n}\n", "  $l = array_reverse($l);\n  $n = count($l);\n  if ($n % 2 ==\
    \ 0) {\n    return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n  } else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2] + $l[($n - 3) / 2]) / 3;\n  }\n}\n", " \
    \   $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$n/2] + $l[$n/2 - 1]) / 2.0;\n    }\n    else {\n        return\
    \ $l[$n/2];\n    }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0)\
    \ {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  $l = array_values($l);\n \
    \ sort($l);\n  return $l[count($l)/2];\n}\n", "  $l = array_filter($l);\n  if\
    \ (count($l) == 0) return null;\n  sort($l);\n  return $l[count($l) / 2 - 1];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  $l = array_values($l);\n\
    \  sort($l);\n  return $l[count($l) / 2 - 1];\n}\n", "  $l = sort($l);\n  return\
    \ $l[count($l) / 2 - 1];\n}\n", "    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "    $l = array_filter($l);\n    $l = array_values($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  if (count($l) % 2 == 0) {\n   \
    \ return $l[(count($l) / 2) - 1];\n  }\n  return ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2;\n}\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return\
    \ $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  else {\n\
    \    return $l[($n - 1) / 2];\n  }\n}", "  if (count($l) % 2 == 0) {\n    return\
    \ $l[count($l) / 2 - 1];\n  }\n  else {\n    return ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2;\n  }\n}\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n  else {\n    return $l[($n\
    \ - 1) / 2];\n  }\n}\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n -\
    \ 1) / 2] + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  return $l[($n -\
    \ 1) / 2];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return\
    \ $l[$n / 2];\n  }\n  else {\n    return ($l[$n / 2] + $l[($n - 1) / 2]) / 2;\n\
    \  }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n\
    \    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2]) / 2;\n  }\n}\n", "  $l = array_filter($l);\n  if (count($l) == 0)\
    \ return null;\n  sort($l);\n  return $l[count($l)/2];\n}\n", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 - 1];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) /\
    \ 2 - 1]) / 2;\n}\n", "    if (count($l) % 2 === 0) {\n        return $l[count($l)\
    \ / 2 - 1];\n    }\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[(count($l)\
    \ / 2) - 1];\n  }\n  else {\n    return ($l[($n - 1) / 2] - $l[($n - 2) / 2];\n\
    \  }\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2]\
    \ + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  return ($l[($n - 1) / 2]\
    \ + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n",
  "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n + 1) /\
    \ 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}", "    $l = array_values($l);\n    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
