name: HumanEval_42_incr_list
language: php
prompt: "<?php\n// Return list with elements incremented by 1.\n// >>> incr_list(array(1,\
  \ 2, 3))\n// array(2, 3, 4)\n// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
  // array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n"
tests: "function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
  \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k] = $v + 1;\n\
    \  }\n  return $r;\n}", "  $r = array();\n  foreach ($l as $e) {\n    $r[] = $e\
    \ + 1;\n  }\n  return $r;\n}", "  $r = array();\n  foreach ($l as $k => $v) {\n\
    \    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n  foreach ($l\
    \ as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n\
    \  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n",
  "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return\
    \ $r;\n}", "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n\
    \  }\n  return $r;\n}\n", "  $r = array();\n  foreach ($l as $e) {\n    $r[] =\
    \ $e + 1;\n  }\n  return $r;\n}", "  $r = array();\n  foreach ($l as $k => $v)\
    \ {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}", "  $r = array();\n  foreach\
    \ ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}", "  $r = array();\n\
    \  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}", " \
    \ $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return\
    \ $r;\n}\n", "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] =\
    \ $v;\n  }\n  return $r;\n}\n", "  $i = 1;\n  $ret = $l;\n  foreach ($l as $e)\
    \ {\n    $ret[] = $e + $i;\n    $i++;\n  }\n  return $ret;\n}\n", "  $i = 1;\n\
    \  $ret = array();\n  foreach ($l as $e) {\n    $ret[] = $e + $i;\n    $i++;\n\
    \  }\n  return $ret;\n}\n", "  $r = array();\n  foreach ($l as $k => $v) {\n \
    \   $r[$k + 1] = $v;\n  }\n  return $r;\n}", "  $r = array();\n  foreach ($l as\
    \ $e) {\n    $r[] = $e + 1;\n  }\n  return $r;\n}\n", "  $r = array();\n  foreach\
    \ ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$arr2 =\
    \ array();\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n\
    $arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] =\
    \ $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n\
    $arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] =\
    \ $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n\
    $arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] =\
    \ $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n\
    $arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] =\
    \ $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n\
    $arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] =\
    \ $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n\
    $arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] = $arr;\n$arr2[] =\
    \ $arr;\n$arr2[] = $arr;\n$arr2[] = $arr", "  $r = array();\n  foreach ($l as\
    \ $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n\
    \  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
