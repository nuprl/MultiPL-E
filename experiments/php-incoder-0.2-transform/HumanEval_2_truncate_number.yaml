name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $decimals = 1;\n    $integer = floor($number);\n    if ($integer\
    \ == $number) {\n        return $integer;\n    }\n    if ($integer < 0) {\n  \
    \      $decimals = floor($number * log10($number));\n        $integer = floor($number\
    \ * pow(10, $decimals));\n    }\n    return $integer / pow(10, $decimals);\n}\n",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    $integer = $integer - ($integer % 1);\n    return $integer . '.' . substr($decimals,\
    \ 0, $decimals);\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer != $number) {\n        $decimals = strlen($number - $integer);\n\
    \    }\n    return $decimals ? $number - $integer : 0;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "  $decimals = preg_replace('/\\./',\
    \ '', $number);\n  $decimals = strlen($decimals);\n  return $decimals > 0 ? substr($number,\
    \ 0, $decimals) : 0.0;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "    if ($number < 0) {\n        return 0;\n\
    \    }\n    return intval($number);\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}", "  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    $decimals = $decimals\
    \ - 1;\n  }\n  return $number - intval($number);\n}\n", "  return intval($number\
    \ * 100) / 100;\n}\n", "    $parts = explode('.', $number);\n    return $parts[0]\
    \ . '.' . substr($parts[1], 0, -1);\n}\n", "  $decimals = preg_replace('/\\./',\
    \ '', $number);\n  return round($number, $decimals);\n}\n", "    $decimals = 1;\n\
    \    $integer = floor($number);\n    if ($integer != $number) {\n        $decimals\
    \ = strlen($number - $integer);\n    }\n    return $decimals ? round($number,\
    \ $decimals) : $number;\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer == $number) {\n        return $decimals;\n    }\n    $decimals\
    \ = $number - $integer;\n    return $decimals;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  return $number - $decimals;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return round($number, $decimals);\n}\n", "  $number = round($number,\
    \ 0);\n  return $number < 1 ? 1 : $number;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    $decimals = max($decimals,\
    \ 0);\n    $decimals = min($decimals, 1);\n    return $number - $decimals;\n}\n",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
