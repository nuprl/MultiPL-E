name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $decimals = 1;\n    $integer = floor($number);\n    if ($integer\
    \ == $number) {\n        return $integer;\n    }\n    if ($integer < 0) {\n  \
    \      $decimals = floor($number * log10($number));\n        $integer = floor($number\
    \ * pow(10, $decimals));\n    }\n    return $integer / pow(10, $decimals);\n}\n",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    $integer = $integer - ($integer % 1);\n    return $integer . '.' . substr($decimals,\
    \ 0, $decimals);\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer != $number) {\n        $decimals = strlen($number - $integer);\n\
    \    }\n    return $decimals ? $number - $integer : 0;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "  $decimals = preg_replace('/\\./',\
    \ '', $number);\n  $decimals = strlen($decimals);\n  return $decimals > 0 ? substr($number,\
    \ 0, $decimals) : 0.0;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "    if ($number < 0) {\n        return 0;\n\
    \    }\n    return intval($number);\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}", "  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    $decimals = $decimals\
    \ - 1;\n  }\n  return $number - intval($number);\n}\n", "  return intval($number\
    \ * 100) / 100;\n}\n", "    $parts = explode('.', $number);\n    return $parts[0]\
    \ . '.' . substr($parts[1], 0, -1);\n}\n", "  $decimals = preg_replace('/\\./',\
    \ '', $number);\n  return round($number, $decimals);\n}\n", "    $decimals = 1;\n\
    \    $integer = floor($number);\n    if ($integer != $number) {\n        $decimals\
    \ = strlen($number - $integer);\n    }\n    return $decimals ? round($number,\
    \ $decimals) : $number;\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer == $number) {\n        return $decimals;\n    }\n    $decimals\
    \ = $number - $integer;\n    return $decimals;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  return $number - $decimals;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return round($number, $decimals);\n}\n", "  $number = round($number,\
    \ 0);\n  return $number < 1 ? 1 : $number;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    $decimals = max($decimals,\
    \ 0);\n    $decimals = min($decimals, 1);\n    return $number - $decimals;\n}\n",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n    while\
    \ ($integer % 1 > 0) {\n        $decimals++;\n        $integer = floor($number);\n\
    \    }\n    return $number - $integer;\n}\n", "  return intval($number * 100)\
    \ / 100;\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n  \
    \  if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n    }\n\
    \    return $number;\n}\n", "  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer === 0) {\n    return 0.0;\n  }\n  while ($integer % 10 === 0)\
    \ {\n    $decimals++;\n    $integer /= 10;\n  }\n  return $number - $integer *\
    \ pow(10, $decimals);\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n\
    \  return floor($number * pow(10, strlen($decimals))) / pow(10, strlen($decimals));\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number - intval($number * pow(10, $decimals));\n}\n", "  $decimals = strlen($number)\
    \ - strrpos($number, '.');\n  return substr($number, 0, $decimals);\n}\n", " \
    \   $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "    $parts = explode('.', $number);\n    return\
    \ $parts[0] . '.' . substr($parts[1], 0, 1);\n}\n", "    if ($number < 1) {\n\
    \        return 0;\n    }\n    $parts = explode('.', $number);\n    return $parts[1];\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  if ($decimals > 0) {\n    $number = floor($number);\n    $number = $number\
    \ - ($number % 1);\n  }\n  return $number;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals > 0) {\n        return substr($number,\
    \ 0, $decimals);\n    }\n    return $number;\n}\n", "  $decimals = preg_replace('/0+$/',\
    \ '', $number);\n  return round($number, $decimals);\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "    $parts = explode('.', $number);\n    return\
    \ $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n", " \
    \   $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a tags=php,floating-point,rounding |>\n<| a tags=php,floating-point,rounding\
    \ |>\nI wrote a function that does this for me:\n<code>", "  $decimals = preg_replace('/0+$/',\
    \ '', $number);\n  return $number - $decimals;\n}\n", "  $number = floor($number);\n\
    \  $decimals = $number - $number;\n  return $decimals > 0 ? $decimals : 0.0;\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n    if\
    \ ($integer != $number) {\n        $decimals = strlen($number) - strlen($integer);\n\
    \    }\n    return $integer / pow(10, $decimals);\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        return $number - $decimals;\n    }\n    return $number;\n}\n", " \
    \   $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n}\n", " \
    \   $parts = explode('.', $number);\n    $decimals = $parts[1];\n    return $parts[0]\
    \ . '.' . substr($decimals, 0, -1);\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n", "    if ($number == 0) {\n        return 0;\n    }\n\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals <= 0) {\n        return $number;\n\
    \    }\n\n    return round($number, $decimals);\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, strlen($parts[1])\
    \ - 1);\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n   \
    \ if ($decimals < 0) {\n        return $number;\n    }\n    return substr($number,\
    \ 0, $decimals);\n}\n", "    $decimal_part = floor($number);\n    $decimal_part\
    \ = abs($decimal_part);\n    $int_part = floor($number - $decimal_part);\n   \
    \ if ($int_part == 0) {\n        return $decimal_part;\n    }\n    return $decimal_part\
    \ + $int_part;\n}\n", "    $decimals = preg_replace('/0+$/', '', $number);\n \
    \   return $number - $decimals;\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ > 0 ? $decimals : 0;\n    return $number - intval($number * pow(10, -$decimals));\n\
    }\n", "    $decimal_part = floor($number);\n    $decimal_part = $decimal_part\
    \ - ($decimal_part % 1);\n    return $decimal_part;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        return $number - ($number % 1);\n    }\n    return $number;\n}\n",
  "    $parts = explode('.', $number);\n    $decimals = $parts[1];\n    if ($decimals\
    \ == '0') {\n        return $parts[0];\n    }\n    return $parts[0] . '.' . substr($decimals,\
    \ 0, 1);\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals\
    \ = strlen($decimals);\n  if ($decimals > 0) {\n    return $number - intval($number);\n\
    \  }\n  return $number;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n\
    \  return round($number, $decimals);\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        return\
    \ $number - ($number % 1);\n    }\n    return $number;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n\
    \    $decimals = $decimals - 1;\n  }\n  return $number;\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n", "  return intval($number * 100) / 100;\n}\n", "    $parts =\
    \ explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1], -1);\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    return $number - $decimals;\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals = $decimals\
    \ - 1;\n    }\n    return $number;\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n\
    \        return $number - $decimals;\n    }\n    return $number;\n}\n", "    $parts\
    \ = explode('.', $number);\n    $decimals = $parts[1];\n    $integer = $parts[0];\n\
    \    if ($decimals == '')\n        return $integer;\n    return $integer . '.'\
    \ . substr($decimals, 0, 1);\n}\n", "    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        $decimals = strlen($decimals);\n    }\n    return $integer . '.' . $decimals;\n\
    }\n", "    $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return\
    \ round($number, $decimals);\n}\n", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals - strlen($decimals\
    \ % 2);\n    return $number - $decimals;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number - intval($number\
    \ * pow(10, $decimals));\n}\n", "    if ($number < 1) {\n        return 0;\n \
    \   }\n    return intval($number);\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals - strlen($decimals\
    \ % 2);\n    return $decimals % 2 ? $number - ceil($number / 2) * pow(2, $decimals)\
    \ : $number;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n   \
    \ $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals\
    \ = $decimals - 1;\n    }\n    return $number;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number;\n}\n", " \
    \   $parts = explode('.', $number);\n    return $parts[1];\n}\n</code>\n<|/ a\
    \ tags=php,rounding,math |>\n<| c |>\nThis doesn't work for negative numbers,\
    \ it just rounds them to the nearest integer.\n<|/ c |>\n<| c |>\n: It works for\
    \ negative numbers. Try it yourself.\n<|/ c |>\n<| c |>\n: It works for negative\
    \ numbers. Try it yourself.\n<|/ c |>\n<| c |>\n: It works for negative numbers.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: It works for negative numbers. Try it\
    \ yourself.\n<|/ c |>\n<| a tags=php,rounding,math |>\n<code>", "  $decimals =\
    \ strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  $decimals = $decimals > 0 ? $decimals : 0;\n  return $number - intval($number\
    \ * pow(10, -$decimals));\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return $number;\n}\n", "    $decimals = 1;\n\
    \    $integer = floor($number);\n    while ($integer % 10 == 0) {\n        $decimals++;\n\
    \        $integer /= 10;\n    }\n    return $decimals;\n}\n", "    $decimals =\
    \ strlen($number) - strrpos($number, '.');\n    return substr($number, 0, $decimals);\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals\
    \ = strlen($decimals);\n  if ($decimals > 0) {\n    $number = floor($number);\n\
    \    $number = $number - ($number % 1);\n  }\n  return $number;\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return $number > 0 ? substr($number,\
    \ 0, $decimals) : 0;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't\
    \ work if you have a number like `
  "    $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n", "    $parts = explode('.', $number);\n    return $parts[0] .\
    \ '.' . substr($parts[1], 0, -1);\n}\n", "    $decimal_part = floor($number);\n\
    \    $integer_part = floor($number - $decimal_part);\n    return $decimal_part\
    \ + $integer_part * pow(10, count($decimal_part) - 1);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if you have a number like `0.0000000001`\n<|/\
    \ c |>\n<| c |>\nYes, it does. `0.0000000001` becomes `1` after truncation.\n\
    <|/ c |>\n<| c |>\nYes, but `0.0000000001` should still be `1` after truncation.\n\
    <|/ c |>\n<| c |>\nYes, it should be. `0.0000000001` becomes `1` after truncation.\n\
    <|/ c |>\n<| c |>\nYes, but `0.0000000001` should still be `1` after truncation.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$number = 0.0000000001;\n$number =\
    \ round($number, 8);\n$number = str_replace(\"0.\", \"\", $number);\necho $number;",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    return $integer + ($decimals > 0 ? $decimals : 0);\n}\n", "  $decimals =\
    \ strlen($number) - strrpos($number, '.');\n  return $number > 0 ? substr($number,\
    \ 0, $decimals) : 0.0;\n}\n", "    $parts = explode('.', $number);\n    return\
    \ $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n", "  return floor($number *\
    \ 100) / 100;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n  \
    \  $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        return $number\
    \ - $decimals;\n    }\n    return $number;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  return $number - $decimals;\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n\
    \    return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n  }\n \
    \ return $number;\n}\n", "    $decimals = preg_replace('/0+$/', '', $number);\n\
    \    $decimals = preg_replace('/\\.$/', '', $decimals);\n    $decimals = preg_replace('/\\\
    ./', '', $decimals);\n    return $decimals;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], -1);\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return substr($number, 0, $decimals);\n\
    }\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return round($number, $decimals);\n    }\n\
    \    return $number;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n", "    $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $decimals\
    \ = strlen($decimals) ? str_pad($decimals, strlen($decimals), '0') : '';\n   \
    \ return $parts[0] . '.' . $decimals;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n<?php\n$number = 1.234567;\n$number = number_format($number, 0, '', '');\n\
    echo $number;", "  return floor($number * 100) / 100;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n", " \
    \   $decimal_places = strlen($number) - strrpos($number, '.');\n    if ($decimal_places\
    \ <= 0) {\n        return $number;\n    }\n    $decimal_places = abs($decimal_places);\n\
    \    $integer = substr($number, 0, $decimal_places);\n    $decimal = substr($number,\
    \ $decimal_places);\n    return $integer . '.' . substr($decimal, 0, -1);\n}\n",
  "    $decimals = 1;\n    $integer = floor($number);\n    if ($integer > 0 && $number\
    \ < 1) {\n        $decimals = strlen($number) - strlen($integer);\n    }\n   \
    \ return $integer . '.' . str_pad('', $decimals, '0');\n}\n", "    $decimals =\
    \ preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n  \
    \  if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    $integer\
    \ = floor($number);\n    if ($decimals > 0) {\n        $integer = $integer + $decimals;\n\
    \    }\n    return $integer;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals < 0) {\n        return $number;\n    }\n    return\
    \ substr($number, 0, $decimals);\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer === 0) {\n        return 0;\n    }\n    if ($integer > 0 &&\
    \ $number < 1) {\n        return 0;\n    }\n    if ($integer > 0 && $number >=\
    \ 1) {\n        $decimals = floor($number - $integer);\n    }\n    return $decimals;\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a tags=php,rounding,math |>\n<| a dscore=0 |>\n<code>\n<?php",
  "    $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number) - strlen($integer);\n    }\n    return\
    \ $integer / pow(10, $decimals);\n}\n", "  $decimals = preg_replace('/0+$/', '',\
    \ $number);\n  return $number - $decimals;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n  \
    \  $decimals = strlen($decimals);\n    $decimals = max($decimals, 0);\n    $integer\
    \ = floor($number);\n    return $integer / pow(10, $decimals);\n}\n", "  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n",
  "    $parts = explode('.', $number);\n    $decimals = count($parts) - 1;\n    return\
    \ $parts[$decimals];\n}\n", "    $parts = explode('.', $number);\n    return $parts[1];\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return round($number,\
    \ $decimals);\n}\n", "  $decimals = preg_replace('/0+$/', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n\
    \  return $number - $decimals;\n}\n", "  $decimals = preg_replace('/\\./', '',\
    \ $number);\n  return $number - $decimals;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        return floor($number);\n    }\n    return $number;\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return floor($number * pow(10,\
    \ $decimals)) / pow(10, $decimals);\n}\n", "    $parts = explode('.', $number);\n\
    \    $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0)\
    \ {\n        return $integer . '.' . substr($decimals, 0, 1);\n    }\n    return\
    \ $integer;\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    return round($number, $decimals);\n}\n", "  $decimals = strlen($number) -\
    \ strrpos($number, '.');\n  return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n</code>\n\
    <|/ a tags=php,rounding,math |>\n<| c |>\nThis doesn't work for negative numbers,\
    \ e.g. `truncate_number(-7.5)` returns `-7.5`.\n<|/ c |>\n<| c |>\nIt does work\
    \ for negative numbers, as long as you use `$number` instead of `$number*-1`.\n\
    <|/ c |>\n<| c |>\nYes, but that doesn't work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| c |>\nIt does work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| c |>\nIt does work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| a tags=php,rounding,math |>\n<code>", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n", "   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    if ($number < 1) {\n        return 0;\n    }\n    return $number -\
    \ floor($number);\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer === 0) {\n        return 0;\n    }\n    if ($integer > $number)\
    \ {\n        $decimals = $integer - $number;\n        $integer = $number;\n  \
    \  }\n    return $integer + $decimals;\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[0] . '.' . ($parts[1] ? str_pad($parts[1], strlen($parts[1])\
    \ - 1, '.', STR_PAD_LEFT) : '');\n}\n", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    return $number - $decimals;\n}\n", "  return floor($number\
    \ * 100) / 100;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals\
    \ = $decimals - 1;\n    }\n    return $number - $decimals;\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0) {\n     \
    \   return substr($number, 0, $decimals);\n    }\n    return $number;\n}\n", " \
    \   $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals >\
    \ 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ > 0 ? $decimals : 0;\n    return $number - $decimals;\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return round($number, $decimals);\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  if ($decimals > 0) {\n    $number = floor($number);\n  }\n  return $number;\n\
    }\n", "    $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "    $parts = explode('.', $number);\n    return\
    \ $parts[1];\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    return substr($number, 0, $decimals);\n}\n", "  $decimals = preg_replace('/0+$/',\
    \ '', $number);\n  return $number - $decimals;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number - intval($number);\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n", "    $parts = explode('.', $number);\n    return $parts[1];\n}\n", "  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return $decimals > 0 ? substr($number,\
    \ 0, $decimals) : $number;\n}\n", "    $parts = explode('.', $number);\n    return\
    \ $parts[1];\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "    $parts = explode('.', $number);\n    $decimals\
    \ = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n        $decimals\
    \ = substr($decimals, 0, 1);\n    }\n    return $integer . '.' . $decimals;\n\
    }\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return $number\
    \ > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n", "  $decimals = strlen($number)\
    \ - strrpos($number, '.');\n  return $decimals > 0 ? substr($number, 0, $decimals)\
    \ : $number;\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n   \
    \ }\n    return $number;\n}\n", "    $decimals = preg_replace('/0+$/', '', $number);\n\
    \    $decimals = strlen($decimals);\n    $decimals = max($decimals, 0);\n    return\
    \ $number - intval($number * pow(10, -$decimals));\n}\n", "  $decimals = preg_replace('/\\\
    ./', '', $number);\n  $decimals = strlen($decimals);\n  $decimals = $decimals\
    \ > 0 ? $decimals : 0;\n  return $number - intval($number * pow(10, -$decimals));\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n\
    }\n", "    if ($number < 1) {\n        return 0;\n    }\n    return $number -\
    \ floor($number);\n}\n", "    $decimals = preg_replace('/0+$/', '', $number);\n\
    \    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        $number\
    \ = floor($number);\n    }\n    return $number;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
