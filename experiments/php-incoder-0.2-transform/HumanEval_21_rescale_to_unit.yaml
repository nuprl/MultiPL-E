name: HumanEval_21_rescale_to_unit
language: php
prompt: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
  \ transform to that list,\n// such that the smallest number will become 0 and the\
  \ largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
  // array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers) {\n"
tests: "function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
  \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
  \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
  \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max\
    \ - $min);\n  return array_map(function ($num) use ($scale) {\n    return $num\
    \ * $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function($number) { return\
    \ $number * $scale; }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n   \
    \ $range[] = $number - $min;\n  }\n  $range = array_map('abs', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  return array_map(function ($number) {\n    return $number / $range;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem to work when there\
    \ are negative numbers in the array. e.g. `array(1.2, -1.2, 2.3, -3.4, 4.5)` returns\
    \ `array(0.2, 0.4, 0.6, -0.8, 1.0)` instead of `array(0.2, 0.4, 0.6, -0.8, 1.0)`\n\
    <|/ c |>\n<| c |>\n: It does work. Try it out yourself. It returns `array(0.2,\
    \ 0.4, 0.6, -0.8, 1.0)` as expected.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ out yourself. It returns `array(0.2, 0.4, 0.6, -0.8, 1.0)` as expected.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it out yourself. It returns `array(0.2, 0.4,\
    \ 0.6, -0.8, 1.0)` as expected.\n<|/ c |>\n<| c |>\n: It does work. Try it out\
    \ yourself. It returns `array(0.2, 0.4, 0.6, -0.8, 1.0)` as expected.\n<|/ c |>\n\
    <| a tags=php,math |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('abs', $range);\n  $range[] = 1;\n  $range\
    \ = array_map('sqrt', $range);\n  $range = array_map('round', $range);\n  return\
    \ array_map(function ($number) {\n    return $number / $range[0];\n  }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) use ($min, $max) {\n        return $number - $min;\n    }, array_values($numbers));\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers in the array. For example, `array(1.0, -2.0, 3.0, 4.0, -5.0)` returns\
    \ `array(0.0, -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it out here: https://3v4l.org/0Pq3T\n<|/ c |>\n<| c |>\nOh I see, I didn't realize\
    \ that `array_map` would return negative numbers. I thought it would just return\
    \ the negative numbers. Thanks for pointing that out!\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\n    array(\n        'id' => 1,\n        'name'\
    \ => 'test',\n        'price' => 1,\n    ),\n    array(\n        'id' => 2,\n\
    \        'name' => 'test2',\n        'price' => 2,\n    ),\n    array(\n     \
    \   'id' => 3,\n        'name' => 'test3',\n        'price' => 3,\n    ),\n  \
    \  array(\n        'id' => 4,\n        'name' => 'test4',\n        'price' =>\
    \ 4,\n    ),\n    array(\n        'id' => 5,\n        'name' => 'test5',\n   \
    \     'price' => 5,\n    ),\n);\n\n$array = array_map(function ($item) {\n   \
    \ return $item['price'];\n}, $array);\n\n$min = min($array);\n$max = max($array);\n\
    \n$array = array_map(function ($item) {\n    return $item / $max;\n}, $array);\n\
    \n$array = array_map(function ($item) {\n    return $item - $min;\n}, $array);\n\
    \nvar_dump($array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to\
    \ work when there are negative numbers in the array. For example, `array(1.0,\
    \ -2.0, 3.0, 4.0, -5.0)` returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`.\n<|/\
    \ c |>\n<| c |>\nI edited my answer, now it works with negative numbers too.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in\
    \ the array. For example, `array(1.0, -2.0, 3.0, 4.0, -5.0)` returns `array(0.0,\
    \ -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n<| c |>\nI edited my ", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  $range = array_map('sqrt', $range);\n \
    \ $range = array_map('round', $range);\n  return array_map(function($number) {\
    \ return $number / $range; }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n\
    <| c |>\nThis doesn't seem to work. `array_map` doesn't seem to take a `$numbers`\
    \ parameter. `array_map` seems to only take a `$callback` parameter.\n<|/ c |>\n\
    <| c |>\nIt does take a `$callback` parameter. `array_map` takes a `callable`\
    \ as its first parameter. `array_map` calls the `callable` on each element of\
    \ the array and returns the result. `array_map` doesn't take a `$numbers` parameter.\
    \ `array_map` calls the `callable` on each element of the array and returns the\
    \ result. `array_map` doesn't take a `$numbers` parameter. `array_map` calls the\
    \ `callable` on each element of the array and returns the result. `array_map`\
    \ doesn't take a `$numbers` parameter. `array_map` calls the `callable` on each\
    \ element of the array and returns the result. `array_map` doesn't take a `$numbers`\
    \ parameter. `array_map` calls the `callable` on each element of the array and\
    \ returns the result. `array_map` doesn't take a `$numbers` parameter. `array_map`\
    \ calls the `callable` on each element of the array and returns the result. `array_map`\
    \ doesn't take a `$numbers` parameter. `array_map` calls the `callable` on each\
    \ element of the array and returns the result. `array_map` doesn't take a `$numbers`\
    \ parameter. `array_map` calls the `callable` on each element of the array and\
    \ returns the result. `array_map` doesn't take a `$numbers` parameter. `array_map`\
    \ calls the `callable` on each element of the array and returns the result.\n\
    <|/ c |>\n<| c |>\nI see what you mean. `array_map` doesn't take a `$numbers`\
    \ parameter. `array_map` calls the `callable` on each element of the array and\
    \ returns the result. `array_map` doesn't take a `$numbers` parameter. `array_map`\
    \ calls the `callable` on each element of the array and returns the result. `array_map`\
    \ doesn't take a `$numbers` parameter. `array_map` calls the `callable` on each\
    \ element of the array and returns the result. `array_map` doesn't take a `$numbers`\
    \ parameter. `array_map` calls the `callable` on each element of the array and\
    \ returns the result. `array_map` doesn't take a `$numbers` parameter. ", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  return\
    \ array_map(function ($number) {\n    return $number * $scale;\n  }, $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work when the numbers are\
    \ negative.\n<|/ c |>\n<| c |>\nIt works fine for me with negative numbers. Can\
    \ you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me with negative numbers. Try `array(1.0, -2.0, 3.0, 4.0, -5.0)`\n<|/ c\
    \ |>\n<| c |>\nI see. I've updated my answer with a version that works for negative\
    \ numbers as well.\n<|/ c |>\n<| a tags=php,math |>\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array($min / $max, $max / $min);\n}\n", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = $max\
    \ - $min;\n  return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range = array_map('abs', $range);\n  $range = $range[0];\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\nI came up with something that seems to work\
    \ pretty well:\n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    $range[] = $max - $min;\n    return $range;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    return array($min\
    \ / $max, $max / $min);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range[] = 1;\n  return array_map(function ($number) { return\
    \ $number / $range; }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,math\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $scale = array_sum($range) / count($range);\n\
    \  foreach ($range as $i => $value) {\n    $range[$i] /= $scale;\n  }\n  return\
    \ $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale =\
    \ 1 / ($max - $min);\n  return array_map(function ($number) { return $number *\
    \ $scale; }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = [\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4\
    \ => 5,\n];\n\n$min = min($array);\n$max = max($array);\n\n$scale = ($max - $min)\
    \ / (count($array) - 1);\n\n$array = array_map(function ($number) {\n    return\
    \ $number * $scale;\n}, $array);\n\nvar_dump($array);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = [\n    0 => 1,\n    1 => 2,\n\
    \    2 => 3,\n    3 => 4,\n    4 => 5,\n];\n\n$min = min($array);\n$max = max($array);\n\
    \n$scale = ($max - $min) / (count($array) - 1);\n\n$array = array_map(function\
    \ ($number) {\n    return $number * $scale;\n}, $array);\n\nvar_dump($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = [\n    0\
    \ => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n];\n\n$min = min($array);\n\
    $max = max($array);\n\n$scale = ($max - $min) / (count($array) - 1);\n\n$array\
    \ = array_map(function ($number) {\n    return $number * $scale;\n}, $array);\n\
    \nvar_dump($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = [\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n];\n\n\
    $min = min($array);\n$max = max($array);\n\n$scale = ($max - $min) / (count($array)\
    \ - 1);\n\n$array = array_map(function ($number) {\n    return $number * $scale;\n\
    }, $array);\n\nvar_dump($array);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [\n    0 => 1,\n    1 => 2,\n    ", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  return array_map(function ($number)\
    \ {\n    return $number / $range[$number];\n  }, $numbers);\n}\n", "    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    return\
    \ array_map(function ($number) { return $number / $range; }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map('intval', $numbers);\n$numbers = array_filter($numbers);\n\
    $numbers = array_map('round', $numbers);\n$numbers = array_map('array_sum', $numbers);\n\
    $numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_unique',\
    \ $numbers);\n$numbers = array_map('array_intersect', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$numbers = array_map('array_diff',\
    \ $numbers);\n$numbers = array_map('array_diff', $numbers);\n$number", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  return\
    \ array_map(function ($number) {\n    return $number * $scale;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI like this solution, but I wonder\
    \ if it will work when I have negative numbers. I guess it should, because of\
    \ the min/max functions, but I wonder if there is a way to make it work without\
    \ using min/max functions?\n<|/ c |>\n<| c |>\nIt should work fine with negative\
    \ numbers. If you have negative numbers, just add `abs($number)` before dividing\
    \ by `$scale`.\n<|/ c |>\n<| c |>\nI added an example with negative numbers to\
    \ the answer.\n<|/ c |>\n<| c |>\nI added a version that doesn't use min/max functions.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThanks for the answer! I ended up using\
    \ your first solution, but I used `array_map` instead of `array_walk` because\
    \ I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to be able to handle negative numbers. I ended up using `array_map`\
    \ because I needed to ", "  $min = min($numbers);\n  $max = max($numbers);\n \
    \ $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range[] = 1;\n  return array_map(function ($number) { return\
    \ $number / $range; }, $numbers);\n}\n</code>\n<|/ a dscore=5 tags=math,php,algorithm\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, it seems that it fails when the input array has negative\
    \ numbers. I added a solution that handles negative numbers as well.\n<|/ c |>\n\
    <| c |>\nI added a solution that handles negative numbers as well.\n<|/ c |>\n\
    <| c |>\nI added a solution that handles negative numbers as well.\n<|/ c |>\n\
    <| c |>\nI added a solution that handles negative numbers as well.\n<|/ c |>\n\
    <| c |>\nI added a solution that handles negative numbers as well.\n<|/ c |>\n\
    <| a tags=math,php,algorithm |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range[] = 1;\n  return array_map(function ($number) {\n   \
    \ return $number / $range[count($range) - 1];\n  }, $numbers);\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI like the idea of using array_map, but I believe this would\
    \ not work if you had negative numbers in the array. For example, if you had an\
    \ array with values `[-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`, it would not\
    \ work as expected.\n<|/ c |>\n<| c |>\nI believe that would work if you used\
    \ `array_map` instead of `array_walk`. `array_map` will pass each element of the\
    \ array to the callback function, and return a new array with the return value\
    \ of the callback function applied to each element. `array_walk` will pass each\
    \ element of the array to the callback function, and modify the array in place.\
    \ `array_map` would return `[-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`, whereas\
    \ `array_walk` would return `[-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/\
    \ c |>\n<| c |>\nAh, I see. Thanks for the clarification.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\n    0 => 0,\n    1 => 1,\n    2 => 2,\n    3 =>\
    \ 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 =>\
    \ 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n\
    \    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n \
    \   20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 => 24,\n  \
    \  25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n   \
    \ 30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n    35\
    \ => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n    40 =>\
    \ 40,\n    41 => 41,\n    42 => 42,\n    4", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $scale = ($max - $min);\n  return array_map(function ($number)\
    \ {\n    return $number / $scale;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers in the array\n\
    <|/ c |>\n<| a dscore=5 tags=php,arrays |>\n<code>\n$array = array(1, 2, 3, 4,\
    \ 5);\n$array = array_map(function($v){return $v / count($array);}, $array);\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are negative numbers in\
    \ the array\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1, 2,\
    \ 3, 4, 5);\n$array = array_map(function($v){return $v / count($array);}, $array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1, 2,\
    \ 3, 4, 5);\n$array = array_map(function($v){return $v / count($array);}, $array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1, 2,\
    \ 3, 4, 5);\n$array = array_map(function($v){return $v / count($array);}, $array);\n\
    </code>\n<|/ a dscore=5 |>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array($min / $max, $max / $min);\n}\n", "  $min = min($numbers);\n \
    \ $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return\
    \ $range;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale\
    \ = 1 / ($max - $min);\n    return array_map(function ($num) use ($scale) {\n\
    \        return $num * $scale;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't seem to work if you have a list of numbers like `array(0.5,\
    \ 0.5, 0.5)`\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\nIt does work, just not for my use case. I've updated my question to include\
    \ an example of a case where it fails.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated my answer to account for that.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer! I ended up using something similar to your answer, but with a different\
    \ approach. I've posted my answer below.\n<|/ c |>\n<| a tags=arrays,php |>\n\
    I ended up using something similar to what suggested, but with a different approach.\
    \ Here's what I did:\n<code>\n<?php", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    $range = array_map('abs', $range);\n    $range\
    \ = array_sum($range);\n    $range = array_map('sqrt', $range);\n    $range =\
    \ array_map('round', $range);\n    $range = array_map('ceil', $range);\n    $range\
    \ = array_map('floor', $range);\n    $range = array_map('round', $range);\n  \
    \  $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range[] = $max - $min;\n  return array_map(function ($number) {\n   \
    \ return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\nI wrote a small PHP function to do this. It will take an array of numbers\
    \ and output an array of numbers that is scaled to the range 0 to 1.\n<code>",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs',\
    \ $range);\n  $range = array_sum($range);\n  $scale = 1 / $range;\n  foreach ($numbers\
    \ as $number) {\n    $numbers[$number] = $scale * $number;\n  }\n  return $numbers;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max -\
    \ $min;\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution,\
    \ but I believe it only works if all numbers are positive. Otherwise the largest\
    \ number will end up being `1` and the smallest number will be `0`.\n<|/ c |>\n\
    <| c |>\nYes, I believe this solution only works if all numbers are positive.\
    \ I'll update my answer to include a solution that works with negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nI added a solution that works with negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nI like the second solution, but I believe it only\
    \ works if all numbers are positive. Otherwise the largest number will end up\
    \ being `1` and the smallest number will be `0`.\n<|/ c |>\n<| c |>\nYes, I believe\
    \ this solution only works if all numbers are positive. I'll update my answer\
    \ to include a solution that works with negative numbers as well.\n<|/ c |>\n\
    <| a tags=php,math |>\nI believe this should work:\n<code>\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0);\n$min = min($numbers);\n$max = max($numbers);\n$scale =\
    \ 1 / $max - $min;\n$numbers = array_map(function ($number) {\n    return $number\
    \ * $scale;\n}, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution,\
    \ but I believe it only works if all numbers are positive. Otherwise the largest\
    \ number will end up being `1` and the smallest number will be `0`.\n<|/ c |>\n\
    <| c |>\nYes, I believe this solution only works if all numbers are positive.\
    \ I'll update my answer to include a solution that works with negative numbers\
    \ as well.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$numbers = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0);\n$min = min($numbers);\n$max = max($numbers);\n$scale = 1 / $max\
    \ - $min;\n$numbers = array_map(function ($number) {\n    return $number * $scale;\n\
    }, $numbers);\n</code>\n<|/ a tags=php,math |>\n<| a |>\n<code>\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n \
    \ $range = array_map('round', $range);\n  $range[] = $max - $min;\n  return $range;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n  return $range;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to work when there are\
    \ negative numbers in the array. For example, `array(1.0, -2.0, 3.0, 4.0, -5.0)`\
    \ returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`\n<|/ c |>\n<| c |>\nIt does work,\
    \ just not as expected. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it does work.\
    \ Try it yourself and see for yourself.\n<|/ c |>\n<| c |>\nYes, it does work.\
    \ Try it yourself and see for yourself.\n<|/ c |>\n<| c |>\nYes, it does work.\
    \ Try it yourself and see for yourself.\n<|/ c |>\n<| a dscore=3 |>\nI wrote a\
    \ function that does this in PHP:\n<code>", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\n\
    I like this solution, however it fails for negative numbers. I added a fix for\
    \ that as well. Thanks!\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that will\
    \ take an array of numbers and return a percentage array that sums to 100. \n\
    <code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = ($max -\
    \ $min) / (count($numbers) - 1);\n  foreach ($numbers as &$number) {\n    $number\
    \ *= $scale;\n  }\n  return $numbers;\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  $range[] = 1;\n  $range = array_map('sqrt',\
    \ $range);\n  return array_map(function ($number) {\n    return $number / $range;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,math |>\n<code>",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = array();\n    foreach ($numbers as $number) {\n        $range[] = $number\
    \ - $min;\n    }\n    return $range;\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n   \
    \ $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return $range;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  $range = array_map('round', $range);\n  return $range;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n \
    \ return array_map(function ($number) {\n    return $number * $scale;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max\
    \ - $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,math |>\n\
    I came up with this solution:\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function($number) {\n    return $number / $max - $min;\n \
    \ }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function($number) {\n    return $number / $max - $min;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max\
    \ - $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $range = $max - $min;\n$array2 = [];\nforeach($array as $key => $value) {\n  \
    \  $array2[$key] = $value / $range;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $range = $max - $min;\n$array2 = [];\nforeach($array as $key => $value) {\n  \
    \  $array2[$key] = $value / $range;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $range = $max - $min;\n$array2 = [];\nforeach($array as $key => $value) {\n  \
    \  $array2[$key] = $value / $range;\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$range = $max - $min;\n$array2 = [];\nforeach($array as $key\
    \ => $value) {\n    $array2[$key] = $value / $range;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$range = $max - $min;\n$array2 = [];\nforeach($array as $key\
    \ => $value) {\n    $array2[$key] = $value / $range;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$range = $max - $min;\n$array2 = [];\nforeach($array ", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  return array($min / $max,\
    \ $max / $min);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($number) {\n    return $number - $min;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    return array_map(function\
    \ ($number) use ($scale) {\n        return $number * $scale;\n    }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/17778994)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question, since it does exactly\
    \ what the OP asked for, namely \"how to rescale an array to fit a certain range\"\
    . It's also a very elegant solution, since it uses no loops or recursion.\n<|/\
    \ c |>\n<| c |>\nI believe this does answer the question, since it does exactly\
    \ what the OP asked for, namely \"how to rescale an array to fit a certain range\"\
    . It's also a very elegant solution, since it uses no loops or recursion.\n<|/\
    \ c |>\n<| c |>\nI believe this does answer the question, since it does exactly\
    \ what the OP asked for, namely \"how to rescale an array to fit a certain range\"\
    . It's also a very elegant solution, since it uses no loops or recursion.\n<|/\
    \ c |>\n<| c |>\nI believe this does answer the question, since it does exactly\
    \ what the OP asked for, namely \"how to rescale an array to fit a certain range\"\
    . It's also a very elegant solution, since it uses no loops or recursion.\n<|/\
    \ c |>\n<| a tags=php,arrays,math |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array($min,$max);\n$numbers\
    \ = array_map(function($n) use ($range) {\n    return $n / $range[1] - $range[0];\n\
    }, $numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/17778994)\n\
    <|/ c |>\n<| c |>\nI ", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = ($max - $min);\n  return array_map(function ($num) use ($scale) {\n    return\
    \ $num / $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  return array_map(function($number)\
    \ {\n    return $number / $max;\n  }, $range);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a |>\n<code>\n<?php", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n\
    <| c |>\nThis doesn't seem to work if the array is `array(0.2, 0.4, 0.6, 0.8)`\n\
    <|/ c |>\n<| c |>\nIt works perfectly for me. `array(0.2, 0.4, 0.6, 0.8)` becomes\
    \ `array(0.0, 0.25, 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nIt works perfectly for\
    \ me. `array(0.2, 0.4, 0.6, 0.8)` becomes `array(0.0, 0.25, 0.5, 0.75, 1.0)`\n\
    <|/ c |>\n<| c |>\nIt works perfectly for me. `array(0.2, 0.4, 0.6, 0.8)` becomes\
    \ `array(0.0, 0.25, 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nIt works perfectly for\
    \ me. `array(0.2, 0.4, 0.6, 0.8)` becomes `array(0.0, 0.25, 0.5, 0.75, 1.0)`\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $n) {\n    $range[] = $n - $min;\n\
    \  }\n  $range = array_map('sqrt', $range);\n  foreach ($range as $n) {\n    $range[$n]\
    \ = 1 / $n;\n  }\n  foreach ($numbers as $n) {\n    $numbers[$n] = $range[$n]\
    \ * $max - $min;\n  }\n  return $numbers;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. I'm sorry I didn't explain myself well. I'm looking for a function\
    \ that will take an array of numbers and return an array of numbers that will\
    \ rescale them to the range [0,1]. For example, if the input array is `array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)`, then the output array should be `array(0.0, 0.25, 0.5,\
    \ 0.75, 1.0)`.\n<|/ c |>\n<| c |>\nOk, I updated my answer with a function that\
    \ does that. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry\
    \ I didn't explain myself well. I'm looking for a function that will take an array\
    \ of numbers and return an array of numbers that will rescale them to the range\
    \ [0,1]. For example, if the input array is `array(1.0, 2.0, 3.0, 4.0, 5.0)`,\
    \ then the output array should be `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n<|/ c |>\n\
    <| c |>\nOk, I updated my answer with a function that does that. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain myself well.\
    \ I'm looking for a function that will take an array of numbers and return an\
    \ array of numbers that will rescale them to the range [0,1]. For example, if\
    \ the input array is `array(1.0, 2.0, 3.0, 4.0, 5.0)`, then the output array should\
    \ be `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n<|/ c |>\n<| a |>\n<code>", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like your solution, but I still don't understand why my solution doesn't\
    \ work. Can you please explain why my solution doesn't work?\n<|/ c |>\n<| c |>\n\
    I added a comment to my answer, explaining why your solution doesn't work.\n<|/\
    \ c |>\n<| c |>\nI see. Thank you very much!\n<|/ c |>\n<| a dscore=0 |>\nI believe\
    \ that your solution is correct, but I believe that your problem is that you are\
    \ trying to use array_map to solve this problem and that array_map doesn't work\
    \ like that. \narray_map will apply the function you give it to every element\
    \ in the array and return the new array. \nIn your case you are trying to apply\
    \ the function to the entire array and return the new array but array_map doesn't\
    \ work like that. \nTry this instead:\n<code>", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return $range;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nI like your solution, however it seems to me\
    \ that your function doesn't work when all numbers are negative. Try it out with\
    \ array(1.0, -2.0, 3.0, -4.0, 5.0)\n<|/ c |>\n<| c |>\nI added a fix for negative\
    \ numbers. I tested it and it seems to work fine.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it seems to work fine. Thanks!\n<|/ c |>\n<| a tags=php,math |>\nI came\
    \ up with this solution:\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = ($max - $min) / count($numbers);\n  return array_map(function ($number)\
    \ use ($scale) {\n    return $number * $scale;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\n    array(\n   \
    \     'number' => 1,\n        'name' => 'one'\n    ),\n    array(\n        'number'\
    \ => 2,\n        'name' => 'two'\n    ),\n    array(\n        'number' => 3,\n\
    \        'name' => 'three'\n    ),\n    array(\n        'number' => 4,\n     \
    \   'name' => 'four'\n    ),\n    array(\n        'number' => 5,\n        'name'\
    \ => 'five'\n    )\n);\n\n$numbers = array_map(function($number) {\n    return\
    \ $number['number'];\n}, $numbers);\n\n$numbers = array_unique($numbers);\n\n\
    $numbers = array_map(function($number) {\n    return $number['number'] / count($numbers);\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number) {\n    return $number['number'];\n\
    }, $numbers);\n\n$numbers = array_map(function($number", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  $range = array_map('sqrt', $range);\n \
    \ $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  return array_map(function ($number)\
    \ {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit(array(1.2, 2.3, 3.4,\
    \ 4.5, 5.6))` returns `array(0.2, 0.4, 0.6, 0.8, 1.0)` instead of `array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)`.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ floats.\n<|/ c |>\n<| c |>\n: I added a version that works with floats.\n<|/\
    \ c |>\n<| c |>\n: I added a version that works with floats.\n<|/ c |>\n<| c |>\n\
    : I added a version that works with floats.\n<|/ c |>\n<| a tags=php,math |>\n\
    <code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $n) {\n    $range[] = $n - $min;\n  }\n  return $range;\n}\n", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n  return\
    \ array_map(function ($number) { return $number / $range; }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nThis doesn't seem to work. `array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0)` returns `array(0.0, 0.25, 0.5, 0.75, 1.0)` instead of `array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ `array(1.0, 2.0, 3.0, 4.0, 5.0)` as input. Maybe you used a different input?\n\
    <|/ c |>\n<| c |>\nI used `array(1.0, 2.0, 3.0, 4.0, 5.0)` as input. Maybe you\
    \ used a different input?\n<|/ c |>\n<| c |>\nI used `array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)` as input. Maybe you used a different input?\n<|/ c |>\n<| c |>\nI used\
    \ `array(1.0, 2.0, 3.0, 4.0, 5.0)` as input. Maybe you used a different input?\n\
    <|/ c |>\n<| a tags=php,math |>\nI believe this should work:\n<code>\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$min = min($numbers);\n$max = max($numbers);\n\
    $range = array();\nforeach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    }\n$range[] = 1;\n$numbers = array_map(function ($number) { return $number / $range;\
    \ }, $numbers);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work.\
    \ `array(1.0, 2.0, 3.0, 4.0, 5.0)` returns `array(0.0, 0.25, 0.5, 0.75, 1.0)`\
    \ instead of `array(0.0, 0.25, 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nI used `array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)` as input. Maybe you used a different input?\n<|/ c |>\n\
    <| c |>\nI used `array(1.0, 2.0, 3.0, 4.0, 5.0)` as input. Maybe you used a different\
    \ input?\n<|/ c |>\n<| c |>\nI used `array(1.0, 2.0, 3.0, 4.0, 5.0)` as input.\
    \ Maybe you used a different input?\n<|/ c |>\n<| c |>\nI used `array(1.0, ",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = ", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  return array_map(function\
    \ ($number) {\n    return $number / $max;\n  }, $range);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThanks for your answer. I've tried this but I'm getting an error:\
    \ Warning: array_map() expects parameter 1 to be a valid callback, function 'rescale_to_unit'\
    \ not found or invalid function name in /home/user/public_html/test/index.php\
    \ on line 7\n<|/ c |>\n<| c |>\nYou have to define that function before using\
    \ it\n<|/ c |>\n<| c |>\nI added the function to the top of my php file but I'm\
    \ still getting the same error. I've also tried defining the function before using\
    \ it but I'm still getting the same error.\n<|/ c |>\n<| c |>\nYou have to define\
    \ it before using it\n<|/ c |>\n<| c |>\nI added the function to the top of my\
    \ php file but I'm still getting the same error. I've also tried defining the\
    \ function before using it but I'm still getting the same error.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\n<code>\n<?php\n$numbers = array(\n    array(\n       \
    \ 1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n\
    \        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n\
    \        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n\
    \        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n\
    \        26,\n        27,\n        28,\n        29,\n        30,\n        31,\n\
    \        32,\n        33,\n        34,\n        35,\n        36,\n        37,\n\
    \        38,\n        39,\n        40,\n        41,\n        42,\n        43,\n\
    \        44,\n        45,\n        46,\n        47,\n        48,\n        49,\n\
    \        50,\n        51,\n        52,\n        53,\n        54,\n        55,\n\
    \        56,\n        57,\n        58,\n        59,\n        60,\n        61,\n\
    \        62,\n        63,\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('abs', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('sqrt', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('round', $range);\n  return array_map(function($number)\
    \ {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in the\
    \ array. For example, `rescale_to_unit(array(1.0, -2.0, 3.0, 4.0, 5.0))` returns\
    \ `array(0.0, -0.25, 0.5, 0.75, 1.0)` instead of `array(0.0, -0.5, 1.0, 1.5, 1.5)`.\n\
    <|/ c |>\n<| c |>\nI added a fix for negative numbers, please try again.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! It works perfectly for positive numbers,\
    \ but it fails for negative numbers. For example, `rescale_to_unit(array(1.0,\
    \ -2.0, 3.0, 4.0, 5.0))` returns `array(0.0, -0.5, 1.0, 1.5, 1.5)` instead of\
    \ `array(0.0, -0.25, 1.0, 1.5, 1.5)`.\n<|/ c |>\n<| c |>\nI added a fix for negative\
    \ numbers, please try again.\n<|/ c |>\n<| c |>\nThanks for your answer! It works\
    \ perfectly for positive numbers, but it fails for negative numbers. For example,\
    \ `rescale_to_unit(array(1.0, -2.0, 3.0, 4.0, 5.0))` returns `array(0.0, -0.5,\
    \ 1.0, 1.5, 1.5)` instead of `array(0.0, -0.25, 1.0, 1.5, 1.5)`.\n<|/ c |>\n<|\
    \ a |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range =\
    \ array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range[] = 1;\n  return array_map(function($number) { return $number /\
    \ $range; }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n$numbers = array(\n    array(\n        'id' => 1,\n        'name' => 'one',\n\
    \        'price' => 1,\n        'quantity' => 1,\n    ),\n    array(\n       \
    \ 'id' => 2,\n        'name' => 'two',\n        'price' => 2,\n        'quantity'\
    \ => 2,\n    ),\n    array(\n        'id' => 3,\n        'name' => 'three',\n\
    \        'price' => 3,\n        'quantity' => 3,\n    ),\n    array(\n       \
    \ 'id' => 4,\n        'name' => 'four',\n        'price' => 4,\n        'quantity'\
    \ => 4,\n    ),\n    array(\n        'id' => 5,\n        'name' => 'five',\n \
    \       'price' => 5,\n        'quantity' => 5,\n    ),\n    array(\n        'id'\
    \ => 6,\n        'name' => 'six',\n        'price' => 6,\n        'quantity' =>\
    \ 6,\n    ),\n    array(\n        'id' => 7,\n        'name' => 'seven',\n   \
    \     'price' => 7,\n        'quantity' => 7,\n    ),\n    array(\n        'id'\
    \ => 8,\n        'name' => 'eight',\n        'price' => 8,\n        'quantity'\
    \ => 8,\n    ),\n    array(\n        'id' => 9,\n        'name' => 'nine',\n \
    \       'price' => 9,\n        'quantity' => 9,\n    ),\n    array(\n        'id'\
    \ => 10,\n        'name' => 'ten',\n        'price' => 10,\n        'quantity'\
    \ => 10,\n    ),\n    array(\n        'id' => 11,\n        'name' => 'eleven',\n\
    \        'price' => 11,\n        'quantity' => 11,\n    ),\n    array(\n     \
    \   'id' => 12,\n        'name' => 'twelve',\n        'price' => 12,\n       \
    \ 'quantity' => 12,\n    ),\n    array(\n        'id' => 13,\n        'name' =>\
    \ 'thirteen',\n        'price' => 13,\n        'quantity' => 13,\n    ),\n   \
    \ array(\n        'id' => 14,\n        'name' => 'fourteen',\n        'price'\
    \ => 14,\n        'quantity' => 14,\n    ),\n    array(\n        'id' => 15,\n\
    \        'name' => 'fifteen',\n        'price' => 15,\n        'quantity' => 15,\n\
    \    ),\n    array(\n        'id' => 16,\n        'name' => 'sixteen',\n     \
    \   'price' => 16,\n        '", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('sqrt', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  return array_map(function ($number) {\n    return $number / $range;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range = array_map('sqrt', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  return array_map(function ($number) {\n    return $number / $range;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nThis doesn't seem to work\
    \ when there are negative numbers in the array. For example, `array(1.0, -2.0,\
    \ 3.0, 4.0, -5.0)` returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n\
    <| c |>\nI added a version that works with negative numbers. I tested it and it\
    \ works.\n<|/ c |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers in the array. For example, `array(1.0, -2.0, 3.0, 4.0, -5.0)` returns\
    \ `array(0.0, -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with negative numbers. I tested it and it works.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't seem to work when there are negative numbers in the array.\
    \ For example, `array(1.0, -2.0, 3.0, 4.0, -5.0)` returns `array(0.0, -0.25, -0.5,\
    \ -0.75, -1.0)`.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that does this\
    \ for you:\n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n \
    \   $range = array();\n    foreach ($numbers as $number) {\n        $range[] =\
    \ $number - $min;\n    }\n    return $range;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function\
    \ ($number) {\n    return $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a tags=php,arrays,math |>\n<| c |>\nThis doesn't work if the array contains\
    \ negative numbers. For example: `[-1.0, 0.0, 1.0]` becomes `[-0.5, 0.0, 0.5]`\n\
    <|/ c |>\n<| c |>\nIt doesn't work for negative numbers, because you divide by\
    \ zero. `1 / 0` is `0`.\n<|/ c |>\n<| c |>\nYes, I know. But I thought that OP\
    \ wants negative numbers to be treated as positive.\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood the question. OP wants to scale a range of numbers to `[0, 1]`,\
    \ not `[-1, 1]`.\n<|/ c |>\n<| c |>\nYes, I understood that. But the OP also said\
    \ \"the smallest number will become 0 and the largest will become 1\". That's\
    \ why I thought that OP wants negative numbers to be treated as positive.\n<|/\
    \ c |>\n<| a dscore=4 |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n\
    <| c |>\nThis doesn't seem to work when there are negative numbers in the array.\
    \ For example, `rescale_to_unit([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])`\
    \ returns `array(0.000000000000000, -0.5, -0.25, 0.25, 0.5, 1.0, 1.5, 2.0, 2.5,\
    \ 3.0, 3.5, 4.0, 4.5, 5.0)`\n<|/ c |>\n<| c |>\nI added a fix for negative numbers.\
    \ I didn't test it thoroughly, so there might be some edge cases that I didn't\
    \ think of. Let me know if it works for you.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works perfectly. Thank you!\n<|/ c |>\n<| a tags=php,arrays,math |>\nI believe\
    \ this should work:\n<code>\n$numbers = array(\n    array(-10, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5),\n    array(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110,\
    \ 120),\n    array(100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200)\n\
    );\n\n$min = min($numbers);\n$max = max($numbers);\n\n$scale = 1 / ($max - $min);\n\
    \n$numbers = array_map(function ($number) {\n    return $number * $scale;\n},\
    \ $numbers);\n\nprint_r($numbers);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't seem to work when there are negative numbers in the array. For example,\
    \ `rescale_to_unit([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns `array(0.000000000000000,\
    \ -0.5, -0.25, 0.25, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0)`\n<|/ c\
    \ |>\n<| c |>\nI added a fix for negative numbers. I didn't test it thoroughly,\
    \ so there might be some edge cases that I didn't think of. Let me know if it\
    \ works for you.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n  return array_map(function\
    \ ($number) { return $number / $range; }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array. `array_map`\
    \ will round the negative numbers to zero. `array_map` also doesn't work if you\
    \ have a number that's not in the array.\n<|/ c |>\n<| c |>\n: That's not true.\
    \ `array_map` will never round negative numbers to zero. `array_map` will never\
    \ round numbers that are not in the array to zero. `array_map` will never round\
    \ numbers that are not in the array to zero. `array_map` will never round numbers\
    \ that are not in the array to zero. `array_map` will never round numbers that\
    \ are not in the array to zero. `array_map` will never round numbers that are\
    \ not in the array to zero. `array_map` will never round numbers that are not\
    \ in the array to zero. `array_map` will never round numbers that are not in the\
    \ array to zero. `array_map` will never round numbers that are not in the array\
    \ to zero. `array_map` will never round numbers that are not in the array to zero.\
    \ `array_map` will never round numbers that are not in the array to zero. `array_map`\
    \ will never round numbers that are not in the array to zero. `array_map` will\
    \ never round numbers that are not in the array to zero. `array_map` will never\
    \ round numbers that are not in the array to zero. `array_map` will never round\
    \ numbers that are not in the array to zero. `array_map` will never round numbers\
    \ that are not in the array to zero. `array_map` will never round numbers that\
    \ are not in the array to zero. `array_map` will never round numbers that are\
    \ not in the array to zero. `array_map` will never round numbers that are not\
    \ in the array to zero. `array_map` will never round numbers that are not in the\
    \ array to zero. `array_map` will never round numbers that are not in the array\
    \ to zero. `array_map` will never round numbers that are not in the array to zero.\
    \ `array_map` will never round numbers that are not in the array to zero. `array_map`\
    \ will never round numbers that are not in the array to zero. `array_map` will\
    \ never round numbers that are not in the array to zero. `array_map` will never\
    \ round numbers that are not in the array to zero. `array_map` will never round\
    \ numbers that are not in the array to zero. `", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  return $range;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = ", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range = array_map('round', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('ceil', $range);\n  return array_map(function($number) {\
    \ return $number / $max; }, $range);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ seem to work if the array is empty. `array_map` returns an empty array.\n<|/\
    \ c |>\n<| c |>\nIt works fine for me with an empty array. Can you give an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nIt works fine for me with an empty\
    \ array. Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt\
    \ works fine for me with an empty array. Can you give an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nIt works fine for me with an empty array. Can you\
    \ give an example where it doesn't work?\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $numbers = array(1,2,3,4,5);\n$min = min($numbers);\n$max = max($numbers);\n$range\
    \ = array();\nforeach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    }\n$range = array_map('round', $range);\n$range = array_map('floor', $range);\n\
    $range = array_map('ceil', $range);\n$range = array_map('round', $range);\n$range\
    \ = array_map('ceil', $range);\n$range = array_map('floor', $range);\n$range =\
    \ array_map('round', $range);\n$range = array_map('ceil', $range);\n$range = array_map('floor',\
    \ $range);\n$range = array_map('round', $range);\n$range = array_map('ceil', $range);\n\
    $range = array_map('floor', $range);\n$range = array_map('round', $range);\n$range\
    \ = array_map('ceil', $range);\n$range = array_map('floor', $range);\n$range =\
    \ array_map('round', $range);\n$range = array_map('ceil', $range);\n$range = array_map('floor',\
    \ $range);\n$range = array_map('round', $range);\n$range = array_map('ceil', $range);\n\
    $range = array_map('floor', $range);\n$range = array_map('round", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs', $range);\n\
    \  $range = array_sum($range);\n  $scale = 1 / $range;\n  foreach ($numbers as\
    \ $number) {\n    $numbers[$number] = $scale * $number;\n  }\n  return $numbers;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1.0 / ($max\
    \ - $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem\
    \ to work. `rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))` returns `array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)` instead of `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n<|/ c\
    \ |>\n<| c |>\nIt works fine for me. Did you copy the code exactly? I tested it\
    \ on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\nYes, I copied it exactly. I'm\
    \ running PHP 5.3.10. Maybe it's an issue with my PHP installation. I'll test\
    \ it on another server.\n<|/ c |>\n<| c |>\nIt works fine on PHP 5.3.10. Maybe\
    \ it's an issue with my PHP installation. I'll test it on another server.\n<|/\
    \ c |>\n<| c |>\nIt works fine on PHP 5.3.10. Maybe it's an issue with my PHP\
    \ installation. I'll test it on another server.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = ($max -\
    \ $min);\n  return array_map(function ($number) {\n    return $number / $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to\
    \ work. `array_map` returns a new array, so the original array is unchanged. See\
    \ https://3v4l.org/fJY4R\n<|/ c |>\n<| c |>\nI see what you mean. I've updated\
    \ the answer to reflect this.\n<|/ c |>\n<| c |>\nThis still doesn't work. `array_map`\
    \ returns a new array, so the original array is unchanged. See https://3v4l.org/fJY4R\n\
    <|/ c |>\n<| c |>\nAh, I see what you mean. I've updated the answer to reflect\
    \ this.\n<|/ c |>\n<| c |>\nThis still doesn't work. `array_map` returns a new\
    \ array, so the original array is unchanged. See https://3v4l.org/fJY4R\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\n    array(\n       \
    \ 'number' => 1,\n        'name' => 'one'\n    ),\n    array(\n        'number'\
    \ => 2,\n        'name' => 'two'\n    ),\n    array(\n        'number' => 3,\n\
    \        'name' => 'three'\n    ),\n    array(\n        'number' => 4,\n     \
    \   'name' => 'four'\n    ),\n    array(\n        'number' => 5,\n        'name'\
    \ => 'five'\n    ),\n    array(\n        'number' => 6,\n        'name' => 'six'\n\
    \    ),\n    array(\n        'number' => 7,\n        'name' => 'seven'\n    ),\n\
    \    array(\n        'number' => 8,\n        'name' => 'eight'\n    ),\n    array(\n\
    \        'number' => 9,\n        'name' => 'nine'\n    ),\n    array(\n      \
    \  'number' => 10,\n        'name' => 'ten'\n    ),\n    array(\n        'number'\
    \ => 11,\n        'name' => 'eleven'\n    ),\n    array(\n        'number' =>\
    \ 12,\n        'name' => 'twelve'\n    ),\n    array(\n        'number' => 13,\n\
    \        'name' => 'thirteen'\n    ),\n    array(\n        'number' => 14,\n \
    \       'name' => 'fourteen'\n    ),\n    array(\n        'number' => 15,\n  \
    \      'name' => 'fifteen'\n    ),\n    array(\n        'number' => 16,\n    \
    \    'name' => 'sixteen", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('sqrt', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('min', $range);\n  $range = array_map('max',\
    \ $range);\n  return array_combine($range, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = array();\n    foreach ($numbers as $number)\
    \ {\n        $range[] = $number - $min;\n    }\n    $range[] = $max - $min;\n\
    \    return $range;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    $range[] = $max - $min;\n    return $range;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max\
    \ - $min);\n  return array_map(function($number) { return $number * $scale; },\
    \ $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nThis doesn't work if you have a negative number. Try it with `array(1.0,\
    \ -2.0, 3.0, 4.0, 5.0)`.\n<|/ c |>\n<| c |>\nI added a version that handles negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have a negative number. Try it with `array(1.0, -2.0, 3.0, 4.0, 5.0)`.\n\
    <|/ c |>\n<| c |>\nI added a version that handles negative numbers. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a negative\
    \ number. Try it with `array(1.0, -2.0, 3.0, 4.0, 5.0)`.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nI like your answer but I'm\
    \ getting a syntax error on line 5 (the array_map line).\n<|/ c |>\n<| c |>\n\
    I fixed the syntax error, but I didn't test it, so let me know if it works.\n\
    <|/ c |>\n<| c |>\nIt works great! Thank you so much! I really appreciate it.\n\
    <|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\n$numbers = array(\n    array(\n        0,\n        1,\n        2,\n   \
    \     3,\n        4,\n        5,\n        6,\n        7,\n        8,\n       \
    \ 9,\n        10,\n        11,\n        12,\n        13,\n        14,\n      \
    \  15,\n        16,\n        17,\n        18,\n        19,\n        20,\n    \
    \    21,\n        22,\n        23,\n        24,\n        25,\n        26,\n  \
    \      27,\n        28,\n        29,\n        30,\n        31,\n        32,\n\
    \        33,\n        34,\n        35,\n        36,\n        37,\n        38,\n\
    \        39,\n        40,\n        41,\n        42,\n        43,\n        44,\n\
    \        45,\n        46,\n        47,\n        48,\n        49,\n        50,\n\
    \        51,\n        52,\n        53,\n        54,\n        55,\n        56,\n\
    \        57,\n        58,\n        59,\n        60,\n        61,\n        62,\n\
    \        63,\n        64,\n        65,\n        66,\n        67,\n        68,\n\
    \        69,\n        70,\n        71,\n        72,\n        73,\n        74,\n\
    \        75,\n        76,\n        77,\n        78,\n        79,\n        80,\n\
    \        81,\n        82,\n        83,\n        84,\n        85,\n        86,\n\
    \        87,\n        88,\n        89,\n        90,\n        91,\n        92,\n\
    \        93,\n        94,\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer,\
    \ but I'm having trouble understanding how it works. Can you please explain how\
    \ it works?\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI added a more detailed explanation.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI like your answer, but I'm having trouble understanding how it works. Can\
    \ you please explain how it works?\n\nThe function below takes an array of numbers\
    \ and returns a new array where each element in the new array is the result of\
    \ applying the function to the corresponding element in the original array.\n\
    <code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\n\
    This doesn't seem to work. `rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))` returns\
    \ `array(0.5, 0.5, 0.5, 0.5, 1.0)` instead of `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it again. `rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))` returns `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n<|/ c |>\n<| c\
    \ |>\nAh, I see what you mean. Yes, it does work. Thanks!\n<|/ c |>\n<| c |>\n\
    : You're welcome. By the way, I added a version that doesn't require the use of\
    \ `array_map`.\n<|/ c |>\n<| a tags=php,arrays,math |>\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return\
    \ $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array($min / $max, $max\
    \ / $min);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range = array_map('abs', $range);\n  $range[] = 1;\n  $range = array_map('sqrt',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  return array_map(function ($number) {\n    return $number / $range[0];\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to\
    \ work. `array_map` returns an array of the same length as the input, but with\
    \ each element replaced by the return value of the callback. `array_map('round',\
    \ array(1.2, 2.3, 3.4))` returns `array(1.2, 2.3, 3.4)`.\n<|/ c |>\n<| c |>\n\
    You're right, I forgot about that. I've updated the answer with a working solution.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe function array_map() passes each element of the\
    \ array to the callback function, and returns the result. \n<code>\n$numbers =\
    \ array(1.2, 2.3, 3.4);\n$numbers = array_map('round', $numbers);\n</code>\n<|/\
    \ a tags=php,arrays,rounding |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1.2,\
    \ 2.3, 3.4);\n$numbers = array_map('round', $numbers);\n</code>\n<|/ a tags=php,arrays,rounding\
    \ |>\n<| a tags=php,arrays,rounding |>\n<code>\n$numbers = array(1.2, 2.3, 3.4);\n\
    $numbers = array_map('round', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = array(1.2, 2.3, 3.4);\n$numbers = array_map('round',\
    \ $numbers);\n</code>\n<|/ a tags=php,arrays,rounding |>\n<| a tags=php,arrays,rounding\
    \ |>\n<code>\n$numbers = array(1.2, 2.3, 3.4);\n$numbers = array_map('round',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,rounding |>\n<code>\n\
    $numbers = array(1.2, 2.3, 3.4);\n$numbers = array_map('round', $numbers);\n</code>\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\n<?php\n$numbers = array(\n    array(\n        'number'\
    \ => 1,\n        'name' => 'one'\n    ),\n    array(\n        'number' => 2,\n\
    \        'name' => 'two'\n    ),\n    array(\n        'number' => 3,\n       \
    \ 'name' => 'three'\n    ),\n    array(\n        'number' => 4,\n        'name'\
    \ => 'four'\n    ),\n    array(\n        'number' => 5,\n        'name' => 'five'\n\
    \    ),\n    array(\n        'number' => 6,\n        'name' => 'six'\n    ),\n\
    \    array(\n        'number' => 7,\n        'name' => 'seven'\n    ),\n    array(\n\
    \        'number' => 8,\n        'name' => 'eight'\n    ),\n    array(\n     \
    \   'number' => 9,\n        'name' => 'nine'\n    ),\n    array(\n        'number'\
    \ => 10,\n        'name' => 'ten'\n    ),\n    array(\n        'number' => 11,\n\
    \        'name' => 'eleven'\n    ),\n    array(\n        'number' => 12,\n   \
    \     'name' => 'twelve'\n    ),\n    array(\n        'number' => 13,\n      \
    \  'name' => 'thirteen'\n    ),\n    array(\n        'number' => 14,\n       \
    \ 'name' => 'fourteen'\n    ),\n    array(\n        'number' => 15,\n        'name'\
    \ => 'fifteen'\n    ),\n    array(\n        'number' => 16,\n        'name' =>\
    \ 'sixteen'\n    ),\n    array(\n        'number' => 17,\n        'name' => 'seventeen'\n\
    \    ),\n    array(\n        'number' => 18,\n        'name' => 'eighteen'\n \
    \   ),\n    array(\n        'number' => 19,\n        'name' => 'nineteen'\n  \
    \  ),\n    array(\n        'number' => 20,\n        'name' => 'twenty'\n    ),\n\
    \    array(\n        'number' => 21,\n        'name' => 'twenty-one'\n    ),\n\
    \    array(\n        'number' => 22,\n        'name' => 'twenty-two'\n    ),\n\
    \    array(\n        'number' => 23,\n        'name' => 'twenty-three'\n    ),\n\
    \    array(\n        'number' => 24,\n        'name' => 'twenty-four'\n    ),\n\
    \    array(\n        'number' => 25,\n        'name' => 'twenty-five'\n    ),\n\
    \    array(\n        'number' => 26,\n        'name' => 'twenty-six'", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = 1.0;\n  $range = array_map('sqrt',\
    \ $range);\n  $range = array_map('round', $range);\n  return array_combine($numbers,\
    \ $range);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range[] = 1;\n  return array_map(function($number) {\n    return $number\
    \ / $range[count($range) - 1];\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nI needed a function that would take an array of numbers and\
    \ return a percentage of the total sum of the numbers. I needed the function to\
    \ work both ways, i.e. if the array is [1,2,3,4,5] and the total is 10, the function\
    \ should return [1/10, 2/10, 3/10, 4/10, 5/10] or [10, 10, 10, 10, 10] or [1,1,1,1,1].\
    \ \nI came up with this solution:\n<code>", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  $scale = ($max - $min) / (count($numbers) - 1);\n  return\
    \ array_map(function ($value) use ($scale) {\n    return $value * $scale;\n  },\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately this doesn't work. I've added some more information to my question.\
    \ Maybe you can help me with that?\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ include a function that will do what you want.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Unfortunately this doesn't work. I've added some more information\
    \ to my question. Maybe you can help me with that?\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a function that will do what you want.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Unfortunately this doesn't work. I've added some\
    \ more information to my question. Maybe you can help me with that?\n<|/ c |>\n\
    <| a dscore=1 |>\nI finally found a solution that works. I used the function array_map()\
    \ from PHP to apply the function array_map() to the array $numbers. I used the\
    \ function array_min() and array_max() from PHP to get the minimum and maximum\
    \ values of $numbers. I then used the function array_map() again to apply the\
    \ function array_map() to the array $numbers. I used the function array_sum()\
    \ from PHP to get the sum of the array $numbers. I then used the function array_sum()\
    \ again to apply the function array_sum() to the array $numbers. I then used the\
    \ function array_sum() again to apply the function array_sum() to the array $numbers.\
    \ I then used the function array_sum() again to apply the function array_sum()\
    \ to the array $numbers. I then used the function array_sum() again to apply the\
    \ function array_sum() to the array $numbers. I then used the function array_sum()\
    \ again to apply the function array_sum() to the array $numbers. I then used the\
    \ function array_sum() again to apply the function array_sum() to the array $numbers.\
    \ I then used the function array_sum() again to apply the function array_sum()\
    \ to the array $numbers. I then used the function array_sum() again to apply the\
    \ function array_sum() to the array $numbers. I then used the function array_sum()\
    \ again to apply the function array_sum() to the array $numbers. I then used the ",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = ", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($num) use ($min, $max) {\n    return $num - $min\
    \ / ($max - $min);\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n   \
    \ $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return array_map(function($number)\
    \ {\n    return $number / $range;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = ($max - $min) / (count($numbers) - 1);\n\
    \  foreach ($numbers as &$number) {\n    $number = $number - $min;\n    $number\
    \ *= $scale;\n  }\n  return $numbers;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer. I'm going to try it out and let you know how it goes.\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't require the use of any external\
    \ libraries.\n<|/ c |>\n<| c |>\nThanks again for your answer. I tried it out\
    \ and it works great. I'm going to accept it as the answer since it is the most\
    \ complete answer and it also has the most upvotes.\n<|/ c |>\n<| a dscore=1 |>\n\
    I wrote a small function that does this for you:\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs', $range);\n\
    \  $range = array_sum($range);\n  $scale = 1 / $range;\n  foreach ($numbers as\
    \ $number) {\n    $numbers[$number] = $scale * $number;\n  }\n  return $numbers;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array_map(function ($number) {\n        return $number / $range[count($range)\
    \ - 1];\n    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't seem to work. `array_map` seems to only take one argument. http://php.net/manual/en/function.array-map.php\n\
    <|/ c |>\n<| c |>\n: You're right. I've fixed the code. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\n: I've added a version that works with PHP 5.3+.\n\
    <|/ c |>\n<| c |>\n: I've added a version that works with PHP 5.3+.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\n$numbers = array(1,2,3,4,5);\n$min = min($numbers);\n\
    $max = max($numbers);\n$range = array();\nforeach ($numbers as $number) {\n  \
    \  $range[] = $number - $min;\n}\n$numbers = array_map(function ($number) {\n\
    \    return $number / $range[count($range) - 1];\n}, $numbers);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=2 |>\n<code>\n$numbers = array(1,2,3,4,5);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n}\n$numbers = array_map(function\
    \ ($number) {\n    return $number / $range[count($range) - 1];\n}, $numbers);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1,2,3,4,5);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n}\n$numbers = array_map(function\
    \ ($number) {\n    return $number / $range[count($range) - 1];\n}, $numbers);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$numbers =\
    \ array(1,2,3,4,5);\n$min = min($numbers);\n$max = max($numbers);\n$range = array",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = ($max - $min);\n \
    \ return array_map(function($number) { return $number / $scale; }, $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any external libraries. I already tried this and I got this result:\
    \ https://i.imgur.com/WQvJ5YR.png\n<|/ c |>\n<| c |>\nI updated my answer to include\
    \ a pure PHP solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately I cannot use any external libraries. I already tried this and\
    \ I got this result: https://i.imgur.com/WQvJ5YR.png\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a pure PHP solution. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Unfortunately I cannot use any external libraries. I already\
    \ tried this and I got this result: https://i.imgur.com/WQvJ5YR.png\n<|/ c |>\n\
    <| a tags=arrays,php |>\nI got it working with array_reduce:\n<code>\n$numbers\
    \ = array(\n    array(\n        0 => 1,\n        1 => 2,\n        2 => 3,\n  \
    \      3 => 4,\n        4 => 5,\n        5 => 6,\n        6 => 7,\n        7 =>\
    \ 8,\n        8 => 9,\n        9 => 10,\n        10 => 11,\n        11 => 12,\n\
    \        12 => 13,\n        13 => 14,\n        14 => 15,\n        15 => 16,\n\
    \        16 => 17,\n        17 => 18,\n        18 => 19,\n        19 => 20,\n\
    \        20 => 21,\n        21 => 22,\n        22 => 23,\n        23 => 24,\n\
    \        24 => 25,\n        25 => 26,\n        26 => 27,\n        27 => 28,\n\
    \        28 => 29,\n        29 => 30,\n        30 => 31,\n        31 => 32,\n\
    \        32 => 33,\n        33 => 34,\n        34 => 35,\n        35 => 36,\n\
    \        36 => 37,\n        37 => 38,\n        38 => 39,\n        39 => 40,\n\
    \        40 => 41,\n        41 => 42,\n        42 => 43,\n        43 => 44,\n\
    \        44 => 45,\n        45 => 46", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('sqrt', $range);\n  $range[] = 1.0;\n  return\
    \ array_map(function ($number) {\n    return $number / $range[count($range) -\
    \ 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis does\
    \ not answer the question. He wants to rescale a list of numbers to fit a certain\
    \ range. Your function does not do that.\n<|/ c |>\n<| c |>\n: It does answer\
    \ the question. He wants to rescale a list of numbers to fit a certain range.\
    \ Your function does not do that. He wants to rescale a list of numbers to fit\
    \ a certain range. Your function does not do that. He wants to rescale a list\
    \ of numbers to fit a certain range. Your function does not do that. He wants\
    \ to rescale a list of numbers to fit a certain range. Your function does not\
    \ do that. He wants to rescale a list of numbers to fit a certain range. Your\
    \ function does not do that. He wants to rescale a list of numbers to fit a certain\
    \ range. Your function does not do that. He wants to rescale a list of numbers\
    \ to fit a certain range. Your function does not do that. He wants to rescale\
    \ a list of numbers to fit a certain range. Your function does not do that. He\
    \ wants to rescale a list of numbers to fit a certain range. Your function does\
    \ not do that. He wants to rescale a list of numbers to fit a certain range. Your\
    \ function does not do that. He wants to rescale a list of numbers to fit a certain\
    \ range. Your function does not do that. He wants to rescale a list of numbers\
    \ to fit a certain range. Your function does not do that. He wants to rescale\
    \ a list of numbers to fit a certain range. Your function does not do that. He\
    \ wants to rescale a list of numbers to fit a certain range. Your function does\
    \ not do that. He wants to rescale a list of numbers to fit a certain range. Your\
    \ function does not do that. He wants to rescale a list of numbers to fit a certain\
    \ range. Your function does not do that. He wants to rescale a list of numbers\
    \ to fit a certain range. Your function does not do that. He wants to rescale\
    \ a list of numbers to fit a certain range. Your function does not do that. He\
    \ wants to rescale a list of number", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  return $range;\n}\n", "    $min = min($numbers);\n    $max =\
    \ max($numbers);\n    return array_map(function ($num) use ($min, $max) {\n  \
    \      return $num - $min;\n    }, array_values($numbers));\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `array_map` returns an array with one\
    \ less element than the original array. `array_map` also doesn't seem to work\
    \ with `array_fill`.\n<|/ c |>\n<| c |>\nI tested it and it works. `array_map`\
    \ returns an array with one less element than the original array. `array_map`\
    \ also doesn't seem to work with `array_fill`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. `array_map` returns an array with one less element than the original\
    \ array. `array_map` also doesn't seem to work with `array_fill`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. `array_map` returns an array with one less\
    \ element than the original array. `array_map` also doesn't seem to work with\
    \ `array_fill`.\n<|/ c |>\n<| c |>\nI tested it and it works. `array_map` returns\
    \ an array with one less element than the original array. `array_map` also doesn't\
    \ seem to work with `array_fill`.\n<|/ c |>\n<| a tags=php,arrays,math |>\n<code>\n\
    <?php\n$numbers = array(1,2,3,4,5);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't\
    \ seem to work. `array_map` returns an array with one less element than the original\
    \ array. `array_map` also doesn't seem to work with `array_fill`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. `array_map` returns an array with one less\
    \ element than the original array. `array_map` also doesn't seem to work with\
    \ `array_fill`.\n<|/ c |>\n<| c |>\nI tested it and it works. `array_map` returns\
    \ an array with one less element than the original array. `array_map` also doesn't\
    \ seem to work with `array_fill`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ `array_map` returns an array with one less element than the original array.\
    \ `array_map` also doesn't seem to ", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function ($number) use ($scale)\
    \ {\n    return $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$range = range($min, $max);\n$array = array_map(function\
    \ ($value) use ($range) {\n    return $range[$value - $min];\n}, $array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = [1, 2, 3, 4, 5];\n\
    $min = min($array);\n$max = max($array);\n$range = range($min, $max);\n$array\
    \ = array_map(function ($value) use ($range) {\n    return $range[$value - $min];\n\
    }, $array);\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$range = range($min, $max);\n$array = array_map(function\
    \ ($value) use ($range) {\n    return $range[$value - $min];\n}, $array);\nprint_r($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a |>\n<code>\n$array = [1,\
    \ 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n$range = range($min,\
    \ $max);\n$array = array_map(function ($value) use ($range) {\n    return $range[$value\
    \ - $min];\n}, $array);\nprint_r($array);\n</code>\n<|/ a dscore=0 tags=php,arrays\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3,\
    \ 4, 5];\n$min = min($array);\n$max = max($array);\n$range = range($min, $max);\n\
    $", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array($min / $max, $max / $min);\n}\n", "  $min = min($numbers);\n \
    \ $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('round', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n\
    \  return array_map(function ($number) {\n    return $number / $range;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))` returns `array(0.0, 0.25, 0.5, 0.75, 1.0)` instead of\
    \ `array(0.0, 0.25, 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works.\
    \ I used the exact same code as you posted.\n<|/ c |>\n<| c |>\nI tested it on\
    \ PHP 5.3.10 and it works. I used the exact same code as you posted.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.10 and it works. I used the exact same code as\
    \ you posted.\n<|/ c |>\n<| a tags=php,math |>\nI came up with a simple solution\
    \ that is based on a linear transformation that converts any number from 0 to\
    \ 1 to a number from 0 to 255. \n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's simple.\n<|/ c |>\n\
    <| c |>\nI like this answer because it doesn't require any additional libraries.\
    \ I used this in my own project and it worked great.\n<|/ c |>\n<| c |>\nI like\
    \ this answer because it doesn't require any additional libraries. I used this\
    \ in my own project and it worked great.\n<|/ c |>\n<| c |>\nI like this answer\
    \ because it doesn't require any additional libraries. I used this in my own project\
    \ and it worked great.\n<|/ c |>\n<| c |>\nI like this answer because it doesn't\
    \ require any additional libraries. I used this in my own project and it worked\
    \ great.\n<|/ c |>\n<| a dscore=5 |>\nI like using array_map for this:\n<code>\n\
    $numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$numbers = array_map(function($number)\
    \ {\n    return $number * 0.5;\n}, $numbers);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's simple.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's simple.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$numbers = array_map(function($number) {\n\
    \    return $number * 0.5;\n}, $numbers);\n</code>\n<|/ a tags=arrays,php |>\n\
    <| c |>\nThis should be the accepted answer. Works perfectly and it's simple.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n\
    $numbers = array_map(function($number) {", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = array();\n    foreach ($numbers as $number) {\n\
    \        $range[] = $number - $min;\n    }\n    return $range;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n \
    \ return array_map(function ($number) {\n    return $number * $scale;\n  }, $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a function to do this,\
    \ which I called \"rescale_to_unit\". It takes an array of numbers and returns\
    \ a new array with the smallest number becoming 0 and largest becoming 1.\n<code>",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n\
    \  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,math |>\n\
    <code>\n<?php", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. For example, `rescale_to_unit(array(1.0,\
    \ -2.0, 3.0, 4.0, 5.0))` returns `array(0.0, -0.25, -0.5, -0.75, 1.0)`\n<|/ c\
    \ |>\n<| a tags=php,math |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('abs', $range);\n  $range[] = 1;\n  $scale\
    \ = array_sum($range) / count($range);\n  foreach ($range as &$number) {\n   \
    \ $number *= $scale;\n  }\n  return $range;\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| c |>\nI like your solution, however it fails when there are negative\
    \ numbers in the array. E.g. `array(1.0, -2.0, 3.0, 4.0, 5.0)` returns `array(0.5,\
    \ 0.5, 0.5, 0.5, 1.0)` instead of `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n<|/ c |>\n\
    <| c |>\n: I added a version that handles negative numbers. I tested it and it\
    \ works.\n<|/ c |>\n<| c |>\n: I added a version that handles negative numbers.\
    \ I tested it and it works.\n<|/ c |>\n<| c |>\n: I added a version that handles\
    \ negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n: I added a\
    \ version that handles negative numbers. I tested it and it works.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range[] = 1;\n  return array_map(function ($number) {\n    return $number\
    \ / $range[count($range) - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('abs', $range);\n  $range = $range[0];\n\
    \  $scale = 1 / $range;\n  foreach ($numbers as $number) {\n    $numbers[$number]\
    \ = $scale * $number;\n  }\n  return $numbers;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't seem to work if the array has more than two elements. I\
    \ get the following error: `Warning: array_map(): Argument #2 should be an array\
    \ in /Applications/MAMP/htdocs/test/test.php on line 4`\n<|/ c |>\n<| c |>\n:\
    \ It works fine for me with PHP 5.3.10 and 5.4.4. I added a test case to the answer.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with arrays of any length.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with arrays of any length.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with arrays of any length.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($n)\
    \ use ($min, $max) {\n    return $n / $max - $min;\n}, $numbers);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work if the array has more\
    \ than two elements. I get the following error: `Warning: array_map(): Argument\
    \ #2 should be an array in /Applications/MAMP/htdocs/test/test.php on line 4`\n\
    <|/ c |>\n<| c |>\n: It works fine for me with PHP 5.3.10 and 5.4.4. I added a\
    \ test case to the answer.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ with arrays of any length.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ with arrays of any length.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function($n) use ($min, $max) {\n    return $n / $max - $min;\n\
    }, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,", "  $min = min($numbers);\n  $max = max($numbers);\n \
    \ $scale = ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number / $scale;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nThis doesn't seem to work if there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nIt works fine for me. Can you give an example where it fails?\n\
    <|/ c |>\n<| c |>\nIt fails when the array is `array(1.0, 2.0, 3.0, -4.0, -5.0)`\n\
    <|/ c |>\n<| c |>\nAh, I see. Thanks for the clarification. I've updated the answer\
    \ to account for negative numbers.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($array);\n$max = max($array);\n\
    $scale = 100/$max-$min;\n$array = array_map(function($value){\n    return $value*$scale;\n\
    },$array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work if\
    \ there are negative numbers in the array\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work if there are negative numbers in the array\n<|/ c |>\n<| c |>\nThis\
    \ doesn't seem to work if there are negative numbers in the array\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work if there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work if there are negative numbers in\
    \ the array\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($array);\n$max = max($array);\n$scale = 100/$max-$min;\n$array = array_map(function($value){\n\
    \    return $value*$scale;\n},$array);\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nThis doesn't seem to work if there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work if there are negative numbers in\
    \ the array\n<|/ c |>\n<| c |>\nThis doesn't seem to work if there are negative\
    \ numbers in the array\n<|/ c |>\n<| c |>\nThis doesn't seem to work if there\
    \ are negative numbers in the array\n<|/ c |>\n<| a dscore=", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n  return array_map(function\
    \ ($number) {\n    return $number / $range[count($range) - 1];\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max\
    \ - $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$numbers = array(\n    array(1,2,3,4,5),\n    array(6,7,8,9,10),\n\
    \    array(11,12,13,14,15),\n    array(16,17,18,19,20),\n    array(21,22,23,24,25),\n\
    \    array(26,27,28,29,30),\n    array(31,32,33,34,35),\n    array(36,37,38,39,40),\n\
    \    array(41,42,43,44,45),\n    array(46,47,48,49,50),\n    array(51,52,53,54,55),\n\
    \    array(56,57,58,59,60),\n    array(61,62,63,64,65),\n    array(66,67,68,69,70),\n\
    \    array(71,72,73,74,75),\n    array(76,77,78,79,80),\n    array(81,82,83,84,85),\n\
    \    array(86,87,88,89,90),\n    array(91,92,93,94,95),\n    array(96,97,98,99,100),\n\
    \    array(101,102,103,104,105),\n    array(106,107,108,109,110),\n    array(111,112,113,114,115),\n\
    \    array(116,117,118,119,120),\n    array(121,122,123,124,125),\n    array(126,127,128,129,130),\n\
    \    array(131,132,133,134,135),\n    array(136,137,138,139,140),\n    array(141,142,143,144,145),\n\
    \    array(146,147,148,149,150),\n    array(151,152,153,154,155),\n    array(156,157,158,159,160),\n\
    \    array(161,162,163,164,165),\n    array(166,167,168,169,170),\n    array(171,172,173,174,175),\n\
    \    array(176,177,178,179,180),\n    array(181,", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $n) {\n\
    \    $range[] = $n - $min;\n  }\n  $range[] = 1;\n  return array_map(function($n)\
    \ use ($min, $max) {\n    return $min + ($n - $min) * ($max - $min) / ($range[count($range)\
    \ - 1] - $range[0]);\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,math\
    \ |>\n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale\
    \ = 1 / ($max - $min);\n    return array_map(function ($number) use ($scale) {\n\
    \        return $number * $scale;\n    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array has negative numbers. Try `array(1.0,\
    \ -2.0, 3.0, 4.0, 5.0)`\n<|/ c |>\n<| c |>\nThis doesn't work if the array has\
    \ negative numbers. Try `array(1.0, -2.0, 3.0, 4.0, 5.0)`\n<|/ c |>\n<| c |>\n\
    This doesn't work if the array has negative numbers. Try `array(1.0, -2.0, 3.0,\
    \ 4.0, 5.0)`\n<|/ c |>\n<| c |>\nThis doesn't work if the array has negative numbers.\
    \ Try `array(1.0, -2.0, 3.0, 4.0, 5.0)`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array has negative numbers. Try `array(1.0, -2.0, 3.0, 4.0, 5.0)`\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    $range[] = $max - $min;\n    return $range;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array($range, $min, $max);\n}\n", "  $min = min($numbers);\n \
    \ $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs', $range);\n\
    \  $range = array_sum($range);\n  return array_map(function ($number) {\n    return\
    \ $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n\
    <| c |>\nThanks for your answer. Unfortunately it didn't work as expected. I've\
    \ added an example to my question.\n<|/ c |>\n<| c |>\nI added a second example\
    \ to my answer. Does that work?\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ it didn't work as expected. I've added an example to my question.\n<|/ c |>\n\
    <| c |>\nI added a second example to my answer. Does that work?\n<|/ c |>\n<|\
    \ c |>\nThanks for your answer. Unfortunately it didn't work as expected. I've\
    \ added an example to my question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(\n    array(\n        'number' => 1,\n        'weight' => 1\n\
    \    ),\n    array(\n        'number' => 2,\n        'weight' => 2\n    ),\n \
    \   array(\n        'number' => 3,\n        'weight' => 3\n    ),\n    array(\n\
    \        'number' => 4,\n        'weight' => 4\n    ),\n    array(\n        'number'\
    \ => 5,\n        'weight' => 5\n    ),\n    array(\n        'number' => 6,\n \
    \       'weight' => 6\n    ),\n    array(\n        'number' => 7,\n        'weight'\
    \ => 7\n    ),\n    array(\n        'number' => 8,\n        'weight' => 8\n  \
    \  ),\n    array(\n        'number' => 9,\n        'weight' => 9\n    ),\n   \
    \ array(\n        'number' => 10,\n        'weight' => 10\n    ),\n    array(\n\
    \        'number' => 11,\n        'weight' => 11\n    ),\n    array(\n       \
    \ 'number' => 12,\n        'weight' => 12\n    ),\n    array(\n        'number'\
    \ => 13,\n        'weight' => 13\n    ),\n    array(\n        'number' => 14,\n\
    \        'weight' => 14\n    ),\n    array(\n        'number' => 15,\n       \
    \ 'weight' => 15\n    ),\n    array(\n        'number' => 16,\n        'weight'\
    \ => 16\n    ),\n    array(\n        'number' => 17,\n        'weight' => 17\n\
    \    ),\n    array(\n        '", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = 1 / ($max - $min);\n  return array_map(function($number) { return $number\
    \ * $scale; }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function($number) {\n    return $number / $max - $min;\n \
    \ }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n \
    \ return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n \
    \ $range = array_map('round', $range);\n  $range = array_map('intval', $range);\n\
    \  $range = array_map('floatval', $range);\n  return $range;\n}\n", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  $range[] = 1;\n  return array_map(function\
    \ ($number) {\n    return $number / $range[count($range) - 1];\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))` returns `array(0.0, 0.25, 0.5, 0.75, 1.0)` instead of\
    \ `array(0.0, 0.5, 1.0, 1.5, 2.0)`.\n<|/ c |>\n<| c |>\nIt does work. `rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))` returns `array(0.0, 0.5, 1.0, 1.5, 2.0)` as expected.\n\
    <|/ c |>\n<| c |>\nAh, I misunderstood your question. I thought you wanted the\
    \ smallest number to be 0, the largest to be 1, and everything in between. I'll\
    \ update my answer.\n<|/ c |>\n<| c |>\nThanks for your answer! I updated my question\
    \ to make it clearer. Your solution doesn't seem to work when there are more than\
    \ 2 elements in the array.\n<|/ c |>\n<| c |>\nAh, I see. I've updated my answer\
    \ again. Hopefully that works for you.\n<|/ c |>\n<| a tags=php,math |>\n<code>",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('sqrt',\
    \ $range);\n  $range[] = 1.0;\n  return array_map(function ($number) {\n    return\
    \ $number / $range[count($range) - 1];\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nI wrote a function to do this\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return\
    \ $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", " \
    \   $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('sqrt', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = ", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1.0 * ($max - $min);\n  $offset = 0.0 * ($max\
    \ - $min);\n  foreach ($numbers as $number) {\n    $offset += $number;\n    $numbers[$number]\
    \ = $offset / $scale;\n  }\n  return $numbers;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = 1.0;\n  $range = array_map('sqrt',\
    \ $range);\n  foreach ($range as $key => $value) {\n    $range[$key] = $value\
    \ / max($range);\n  }\n  return array_map(function($number) {\n    return $number\
    \ * $range[0];\n  }, $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like\
    \ your solution, however it seems to me that `array_map` should be `array_map('sqrt',\
    \ $range)` instead of `array_map('sqrt', $range[0])`\n<|/ c |>\n<| c |>\n: Yes,\
    \ you are right. I fixed the typo.\n<|/ c |>\n<| c |>\nThis works great for me,\
    \ but I needed to change `array_map('sqrt', $range)` to `array_map('sqrt', $range)`\
    \ - otherwise it just returns an array of numbers, not an array of arrays of numbers.\n\
    <|/ c |>\n<| c |>\n: I fixed the typo now. Thanks for pointing that out.\n<|/\
    \ c |>\n<| c |>\n: Thanks for pointing that out. Fixed now.\n<|/ c |>\n<| a tags=math,php,arrays\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1\
    \ / ($max - $min);\n  return array_map(function ($number) { return $number * $scale;\
    \ }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for this!\
    \ I used the code above and added a little bit of error checking to ensure that\
    \ the array was at least 2 elements long. Works great!\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `rescale_to_unit(array(1.0, -2.0, 3.0,\
    \ 4.0, 5.0))`\n<|/ c |>\n<| c |>\n: Yes, it does. `rescale_to_unit(array(1.0,\
    \ -2.0, 3.0, 4.0, 5.0))` returns `array(0.0, -0.25, -0.5, -0.75, 1.0)`\n<|/ c\
    \ |>\n<| c |>\nAh, I missed that requirement. Thanks for pointing that out.\n\
    <|/ c |>\n<| a dscore=2 |>\nI wrote a small function that does this for you:\n\
    <code>", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = $max - $min;\n    return $range;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / $max - $min;\n  return array_map(function ($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,math\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n \
    \ return array_map(function($number) { return $number * $scale; }, $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$numbers = array(\n\
    \    array(\n        'name' => 'a',\n        'value' => 1\n    ),\n    array(\n\
    \        'name' => 'b',\n        'value' => 2\n    ),\n    array(\n        'name'\
    \ => 'c',\n        'value' => 3\n    ),\n    array(\n        'name' => 'd',\n\
    \        'value' => 4\n    ),\n    array(\n        'name' => 'e',\n        'value'\
    \ => 5\n    )\n);\n\n$min = min($numbers);\n$max = max($numbers);\n$scale = 1\
    \ / ($max - $min);\n\n$numbers = array_map(function($number) { return $number\
    \ * $scale; }, $numbers);\n\nvar_dump($numbers);\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=arrays,php |>\n<code>\n$numbers = array(\n    array(\n        'name'\
    \ => 'a',\n        'value' => 1\n    ),\n    array(\n        'name' => 'b',\n\
    \        'value' => 2\n    ),\n    array(\n        'name' => 'c',\n        'value'\
    \ => 3\n    ),\n    array(\n        'name' => 'd',\n        'value' => 4\n   \
    \ ),\n    array(\n        'name' => 'e',\n        'value' => 5\n    )\n);\n\n\
    $min = min($numbers);\n$max = max($numbers);\n$scale = 1 / ($max - $min);\n\n\
    $numbers = array_map(function($number) { return $number * $scale; }, $numbers);\n\
    \nvar_dump($numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = array(\n    array(\n        'name' => 'a',\n        'value' => 1\n\
    \    ),\n    array(\n        'name' => 'b',\n        'value' => 2\n    ),\n  \
    \  array(\n        'name' => 'c',\n        'value' => 3\n    ),\n    array(\n\
    \        'name' => 'd',\n        'value' => 4\n    ),\n    array(\n        'name'\
    \ => 'e',\n        'value' => 5\n    )\n);\n\n$min = min($numbers);\n$max = max($numbers);\n\
    $scale = 1 / ($max - $min);\n\n$numbers = array_map(function($number) { return\
    \ $number * $scale; }, $numbers);\n\nvar_dump($numbers);\n</code>\n<|/ a tags=arrays,php\
    \ |>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1.0;\n  $range[] = $max - $min;\n  return array_map('round', $range);\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI used the solution from and modified\
    \ it a little bit to make it work for me. \n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return\
    \ array_map(function($number) { return $number / $range; }, $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI used the answer from and modified it a\
    \ bit.\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0))` returns `array(0.0, 0.25, 0.5, 0.75, 1.0)` instead of `array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nIt does work. Try it out yourself\
    \ and see if it works. I tested it on PHP 5.6.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.6 and it does work. Try it out yourself and see if it works. I tested\
    \ it on PHP 5.6.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6 and it does work.\
    \ Try it out yourself and see if it works. I tested it on PHP 5.6.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.6 and it does work. Try it out yourself and see\
    \ if it works. I tested it on PHP 5.6.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n\
    \  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    return $range;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this answer, but I'm having trouble understanding how it works. Can\
    \ you please explain how it works?\n<|/ c |>\n<| c |>\nThis works great for me\
    \ and I love the simplicity of it.  However, I noticed that if you have negative\
    \ numbers, it seems to round the negative numbers to positive numbers.  For example\
    \ if you have `[-10, -5, -2, 0, 2, 5, 10]` it returns `[-0.5, -0.5, -0.5, -0.5,\
    \ -0.5, -0.5, -0.5, -0.5]`.  Any idea how to fix that?\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `[-10, -5, -2, 0, 2, 5, 10]` with your\
    \ function.\n<|/ c |>\n<| c |>\nI fixed it by changing `return $number / $max\
    \ - $min;` to `return $number / $max - $min * $scale;`\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `[-10, -5, -2, 0, 2, 5, 10]` with your\
    \ function.\n<|/ c |>\n<| a tags=php,math,arrays |>\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n  return\
    \ $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your answer, but this does not solve\
    \ the problem. Your code does not take into account the fact that some numbers\
    \ are negative.\n<|/ c |>\n<| c |>\nI added a solution that takes into account\
    \ negative numbers. I hope it helps.\n<|/ c |>\n<| a tags=php,math |>\nI wrote\
    \ a function that does this for you:\n<code>", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $n) {\n    $range[]\
    \ = $n - $min;\n  }\n  $range = array_map('round', $range);\n  $range = array_map('intval',\
    \ $range);\n  $range = array_map('floatval', $range);\n  return $range;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs',\
    \ $range);\n  $range = array_sum($range);\n  $scale = 1.0 / $range;\n  foreach\
    \ ($numbers as $number) {\n    $numbers[$number] = $scale * $number;\n  }\n  return\
    \ $numbers;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work.\
    \ `array(1.0, 2.0, 3.0, 4.0, 5.0)` becomes `array(0.0, 0.25, 0.5, 0.75, 1.0)`\
    \ but `array(1.0, 2.0, 3.0, 4.0, 5.0)` becomes `array(1.0, 2.0, 3.0, 4.0, 5.0)`\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried it out and it seems\
    \ to work fine. I'm going to accept it as the answer since it does seem to work\
    \ fine.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account\
    \ for that.\n<|/ c |>\n<| a tags=php,math |>\nThe answer by is correct, but I\
    \ thought I'd post the code I ended up using in case anyone else is interested.\n\
    <code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function ($number) {\n    return $number / $range[$number];\n  },\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do this without having to use array_map(). I'm\
    \ thinking there might be a way to do this with array_reduce(), but I'm not sure.\n\
    <|/ c |>\n<| c |>\nI added a solution without `array_map()`\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do this without having\
    \ to use array_map(). I'm thinking there might be a way to do this with array_reduce(),\
    \ but I'm not sure.\n<|/ c |>\n<| c |>\nI added a solution without `array_map()`\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0);\n$min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n}\n$numbers = array_map(function\
    \ ($number) {\n    return $number / $range[$number];\n}, $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without having to use array_map(). I'm thinking there might be a\
    \ way to do this with array_reduce(), but I'm not sure.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$min = min($numbers);\n\
    $max = max($numbers);\n$range = array();\nforeach ($numbers as $number) {\n  \
    \  $range[] = $number - $min;\n}\n$numbers = array_map(function ($number) {\n\
    \    return $number / $range[$number];\n}, $numbers);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n}\n$", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    return array($min / $max, $max / $min);\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `array_map` returns an array\
    \ of arrays. `array_reduce` returns an array of numbers. `array_merge` returns\
    \ an array of arrays. `array_merge_recursive` returns an array of arrays. `array_sum`\
    \ returns an array of numbers. `array_unique` returns an array of numbers. `array_values`\
    \ returns an array of numbers. `array_filter` returns an array of numbers. `array_search`\
    \ returns an array of numbers. `array_keys` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of numbers. `array_reduce`\
    \ returns an array of numbers. `array_reduce` returns an array of number"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
