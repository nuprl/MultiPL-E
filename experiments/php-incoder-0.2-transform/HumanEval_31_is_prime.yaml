name: HumanEval_31_is_prime
language: php
prompt: "<?php\n// Return true if a given number is prime, and false otherwise.\n\
  // >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
  // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
  // false\n// >>> is_prime(1)\n// false\nfunction is_prime($n) {\n"
tests: "function candidate(...$args) {\n    return is_prime(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(101) !== true) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(13441) !== true) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(61) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !==\
  \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17) !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(85) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(255379) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  if ($n < 2) {\n    return false;\n  }\n  // Sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n  $primes = array(2,\
    \ 3);\n  $n = $n - 1;\n  for ($i = 2; $i <= $n; $i++) {\n    if ($primes[$i] <=\
    \ $n) {\n      $primes[$i] = $primes[$i - 1] + $primes[$i];\n    }\n  }\n  return\
    \ $primes[$n] == $n;\n}\n", "    $n = abs($n);\n    $n = $n <= 1 ? 1 : ($n % 2\
    \ == 0 ? 3 : ($n % 3 == 0 ? 6 : ($n % 5 == 0 ? 9 : ($n % 7 == 0 ? 12 : false))));\n\
    \    return $n <= 1;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n\
    \    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n   \
    \     return false;\n    }\n    $root = $this->sqrt($n);\n    for ($i = 3; $i\
    \ <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    for\
    \ ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n <= 1) return false;\n\
    \    if ($n == 2) return true;\n    if ($n % 2 == 0) return false;\n    if ($n\
    \ % 3 == 0) return false;\n    if ($n % 5 == 0) return false;\n    if ($n % 7\
    \ == 0) return false;\n    if ($n % 11 == 0) return false;\n    if ($n % 13 ==\
    \ 0) return false;\n    if ($n % 17 == 0) return false;\n    if ($n % 19 == 0)\
    \ return false;\n    if ($n % 23 == 0) return false;\n    if ($n % 29 == 0) return\
    \ false;\n    if ($n % 31 == 0) return false;\n    if ($n % 37 == 0) return false;\n\
    \    if ($n % 41 == 0) return false;\n    if ($n % 43 == 0) return false;\n  \
    \  if ($n % 47 == 0) return false;\n    if ($n % 53 == 0) return false;\n    if\
    \ ($n % 59 == 0) return false;\n    if ($n % 61 == 0) return false;\n    if ($n\
    \ % 67 == 0) return false;\n    if ($n % 71 == 0) return false;\n    if ($n %\
    \ 73 == 0) return false;\n    if ($n % 79 == 0) return false;\n    if ($n % 83\
    \ == 0) return false;\n    if ($n % 89 == 0) return false;\n    if ($n % 97 ==\
    \ 0) return false;\n    if ($n % 101 == 0) return false;\n    if ($n % 103 ==\
    \ 0) return false;\n    if ($n % 107 == 0) return false;\n    if ($n % 111 ==\
    \ 0) return false;\n    if ($n % 117 == 0) return false;\n    if ($n % 121 ==\
    \ 0) return false;\n    if ($n % 127 == 0) return false;\n    if ($n % 131 ==\
    \ 0) return false;\n    if ($n % 137 == 0) return false;\n    if ($n % 141 ==\
    \ 0) return false;\n    if ($n % 147 == 0) return false;\n    if ($n % 151 ==\
    \ 0) return false;\n    if ($n % 157 == 0) return false;\n    if ($n % 161 ==\
    \ 0) return false;\n    if ($n % 167 == 0) return false;\n    if ($n % 173 ==\
    \ 0) return false;\n    if ($n % 179 == 0) return false;\n    if ($n % 181 ==\
    \ 0) return false;\n    if ($n % 187 == 0) return false;\n    if ($n % 191 ==\
    \ 0) return false;\n    if ($n % 193 == 0) return false;\n    if ($n % 197 ==\
    \ 0) return false;\n    if ($n % 199 == 0) return false;\n    if ($n % 201 ==\
    \ 0) return false;\n    if ($n % 207 == 0) return false;\n    if ($n % 211 ==\
    \ 0) return false;\n    if ($n % 213 == 0) return false;\n    if ($n % 217 ==\
    \ 0) return false;\n    if ($n % 221 == 0) return false;\n    if ($n % 225 ==\
    \ 0) return false;\n    if ($n % 23", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    for($i =\
    \ 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $f = 1;\n    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i ==\
    \ 0) {\n            $f = false;\n            break;\n        }\n    }\n    return\
    \ $f;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2)\
    \ {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n\
    \    }\n    $root = $this->sqrt($n);\n    $f = 1;\n    for($i = 3; $i <= $root;\
    \ $i += 2) {\n        if ($n % $i == 0) {\n            $f = false;\n         \
    \   break;\n        }\n    }\n    return $f;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n\n  \
    \  // Trial division using Euclid's algorithm.\n    // If n is prime then either\
    \ its only divisor is 1 or n - 1.\n    // If n is composite then either its only\
    \ divisor is 1 or sqrt(n).\n    // If n is even then its only divisor is 2 or\
    \ sqrt(n).\n    // If n is odd, then its only divisor is 3 or sqrt(n).\n\n   \
    \ $d = $n - 1;\n    $m = 1;\n    $sqrt_n = sqrt($n);\n\n    do {\n        if ($n\
    \ % $m == 0) {\n            return false;\n        }\n\n        $m++;\n    } while\
    \ ($d % $m != 0);\n\n    return $m == 1;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n\n    // Trial division algorithm from https://en.wikipedia.org/wiki/Primality_test#Trial_division\n\
    \    $a = $n - 1;\n    $b = $n / 2;\n    $c = 1;\n\n    while ($b > 0) {\n   \
    \     if ($b & 1) {\n            if ($a <= 0) {\n                return false;\n\
    \            }\n            $a--;\n        }\n        $b--;\n        $c++;\n \
    \   }\n\n    if ($c <= 3) {\n        return true;\n    }\n\n    if ($n % 2 ==\
    \ 0) {\n        return false;\n    }\n\n    $d = 5 - 2 * $c;\n    $e = $n - $d;\n\
    \n    if ($e == 0) {\n        return true;\n    }\n\n    if ($e % 2 == 0) {\n\
    \        return false;\n    }\n\n    $f = 5 - 2 * $e / 2;\n\n    if ($f == 0)\
    \ {\n        return true;\n    }\n\n    if ($f % 2 == 0) {\n        return false;\n\
    \    }\n\n    $g = 5 - 2 * $f / 2;\n\n    if ($g == 0) {\n        return true;\n\
    \    }\n\n    if ($g % 2 == 0) {\n        return false;\n    }\n\n    $h = 5 -\
    \ 2 * $g / 2;\n\n    if ($h == 0) {\n        return true;\n    }\n\n    if ($h\
    \ % 2 == 0) {\n        return false;\n    }\n\n    $i = 5 - 2 * $h / 2;\n\n  \
    \  if ($i == 0) {\n        return true;\n    }\n\n    if ($i % 2 == 0) {\n   \
    \     return false;\n    }\n\n    $j = 5;\n\n    while ($j * $j <= $n) {\n   \
    \     if ($i * $i + $j * $j == $n) {\n            return true;\n        }\n\n\
    \        $j += 2;\n    }\n\n    return false;\n}\n", "    $n = abs($n);\n    if\
    \ ($n < 2) return false;\n    if ($n == 2) return true;\n    if ($n % 2 == 0)\
    \ return false;\n    $i = 3;\n    while ($i <= sqrt($n)) {\n        if ($n % $i\
    \ == 0) return false;\n        $i += 2;\n    }\n    return true;\n}\n", "    $n\
    \ = abs($n);\n    $n = $n <= 1 ? 1 : ($n % 2 == 0 ? 3 : ($n % 3 == 0 ? 5 : 7));\n\
    \    $n = ($n % 6 == 0 ? $n : 6 - $n);\n    return ($n == 1);\n}\n", "    if ($n\
    \ < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i * $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    $n\
    \ = abs($n);\n    if ($n < 2) return false;\n    if ($n == 2) return true;\n \
    \   if ($n % 2 == 0) return false;\n    if ($n % 3 == 0) return false;\n    if\
    \ ($n % 5 == 0) return false;\n    $m = $n / 5;\n    $k = floor($m);\n    $lcm\
    \ = lcm($k, $m);\n    return $lcm;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 =\
    \ $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n\
    \ % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n \
    \       return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n \
    \   }\n    $root = $this->sqrt($n);\n    for($i = 3; $i * $i <= $root; $i += 2)\
    \ {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    $n = abs($n);\n    if ($n < 2) return false;\n \
    \   if ($n == 2) return true;\n    if ($n % 2 == 0) return false;\n    $i = 3;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) return false;\n     \
    \   $i += 2;\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    for($i\
    \ = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $i = 3;\n    while ($i <= $root) {\n        if ($n % $i == 0) {\n       \
    \     return false;\n        }\n        $i += 2;\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
