language: php
name: HumanEval_68_pluck
results:
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $min = $evens[0];\n    $min_index = 0;\n    foreach ($evens\
    \ as $i => $v) {\n        if ($v === $min) {\n            $min_index = $i;\n \
    \       }\n    }\n    return [$min, $min_index];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4yoed49.php:44\n\
    Stack trace:\n#0 /tmp/tmpd4yoed49.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpd4yoed49.php\
    \ on line 44\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) === 0) return [];\n    return array_reduce($evens, function($a,\
    \ $v) { return $a < $v ? $a : $v; }, array_keys($arr));\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxbtxzd3.php:37\n\
    Stack trace:\n#0 /tmp/tmpgxbtxzd3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpgxbtxzd3.php\
    \ on line 37\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $smallest = array_reduce($evens,\
    \ function($min, $n) { return $min < $n ? $min : $n; });\n    $index = array_search($smallest,\
    \ $evens);\n    return [$smallest, $index];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07lhvzpz.php:41\n\
    Stack trace:\n#0 /tmp/tmp07lhvzpz.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp07lhvzpz.php\
    \ on line 41\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ < count($arr)) {\n        return [];\n    }\n    $evens = array_keys($evens);\n\
    \    $evens = array_flip($evens);\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $min_index];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebb80er5.php:43\n\
    Stack trace:\n#0 /tmp/tmpebb80er5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpebb80er5.php\
    \ on line 43\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ > 0) {\n        $smallest = min($evens);\n        return array_filter($arr,\
    \ function($v) use ($smallest) { return $v & $smallest; });\n    }\n    return\
    \ [];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7gvimyp.php:40\n\
    Stack trace:\n#0 /tmp/tmpk7gvimyp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpk7gvimyp.php\
    \ on line 40\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function ($n) {\n        return $n % 2 == 0;\n\
    \    });\n    if (count($evens) === 0) return [];\n    $min = array_reduce($evens,\
    \ function ($min, $n) {\n        return $min < $n ? $n : $min;\n    });\n    $index\
    \ = array_search($min, $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp848g0zb2.php:43\n\
    Stack trace:\n#0 /tmp/tmp848g0zb2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp848g0zb2.php\
    \ on line 43\n"
  timestamp: 1659730778
- exit_code: 0
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $even = min($evens);\n\
    \    $index = array_search($even, $arr);\n    return [$even, $index];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730778
- exit_code: 0
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function ($num) {\n        return $num % 2 ===\
    \ 0;\n    });\n    if (count($evens) === 0) {\n        return [];\n    }\n   \
    \ $smallest_value = min($evens);\n    $smallest_index = array_search($smallest_value,\
    \ $evens);\n    return [$smallest_value, $smallest_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($v) { return $v & 1; });\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ykbi5hy.php:39\n\
    Stack trace:\n#0 /tmp/tmp1ykbi5hy.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1ykbi5hy.php\
    \ on line 39\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($n) {\n        return $n % 2 === 0;\n\
    \    });\n    if (count($evens) === 0) return [];\n    return array_reduce($evens,\
    \ function($a, $b) {\n        if ($a === $b) {\n            return $a;\n     \
    \   }\n        return $a < $b ? $a : $b;\n    });\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbebv2odr.php:45\n\
    Stack trace:\n#0 /tmp/tmpbebv2odr.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbebv2odr.php\
    \ on line 45\n"
  timestamp: 1659730778
- exit_code: 0
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($n) {\n        return $n % 2 == 0;\n\
    \    });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $even\
    \ = min($evens);\n    $index = array_search($even, $arr);\n    return [$even,\
    \ $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) > 0) {\n\
    \        $result = $even;\n        $result = array_search($result[0], $even);\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfsyncn3.php:48\n\
    Stack trace:\n#0 /tmp/tmphfsyncn3.php(58): test()\n#1 {main}\n  thrown in /tmp/tmphfsyncn3.php\
    \ on line 48\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($n) {\n        return $n % 2 === 0;\n\
    \    });\n    if (count($evens) === 0) return [];\n    $min = min($evens);\n \
    \   $index = array_search($min, $evens);\n    return [$min, $index];\n}\n</code>\n\
    <|/ a tags=php,arrays,algorithm |>\n<| c |>\nI like this solution, although I\
    \ believe it can be optimized a little bit more. Since you are only searching\
    \ for the smallest even number, you can stop searching after the first even number\
    \ is found. Also, you don't need to search for the smallest even number twice.\
    \ Just store the smallest even number in a variable and use that variable in the\
    \ `array_search` function.\n<|/ c |>\n<| c |>\nYes, you are right. I was thinking\
    \ about this solution too, but I didn't want to change too much the original code.\
    \ I'll edit my answer to reflect your suggestions.\n<|/ c |>\n<| c |>\nI added\
    \ a solution based on your suggestions.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l379eah.php on line 36

    '
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $min = array_reduce($evens,\
    \ function($min, $n) { return $min < $n ? $min : $n; });\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7agab80z.php:42\n\
    Stack trace:\n#0 /tmp/tmp7agab80z.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7agab80z.php\
    \ on line 42\n"
  timestamp: 1659730778
- exit_code: 0
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($num) {\n        return $num % 2 ===\
    \ 0;\n    });\n    if (count($evens) === 0) {\n        return [];\n    }\n   \
    \ $min_value = min($evens);\n    $min_key = array_search($min_value, $evens);\n\
    \    return [$min_value, $min_key];\n}\n\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $smallest = null;\n    $smallest_index = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($smallest === null || $value < $smallest)\
    \ {\n            $smallest = $value;\n            $smallest_index = $key;\n  \
    \      }\n    }\n    $result[] = $smallest;\n    $result[] = $smallest_index;\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nthiwzt.php:47\n\
    Stack trace:\n#0 /tmp/tmp0nthiwzt.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0nthiwzt.php\
    \ on line 47\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $smallest = null;\n    $smallest_index = 0;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($smallest === null || $value < $smallest)\
    \ {\n            $smallest = $value;\n            $smallest_index = $key;\n  \
    \      }\n    }\n    $result[] = $smallest;\n    $result[] = $smallest_index;\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer\
    \ to the question. Your solution does not return the smallest even number in the\
    \ array. Your solution returns the smallest even number in the array plus the\
    \ index of the smallest even number in the array. Your solution does not return\
    \ the smallest even number in the array plus the index of the smallest even number\
    \ in the array. Your solution does not return the smallest even number in the\
    \ array plus the index of the smallest even number in the array. Your solution\
    \ does not return the smallest even number in the array plus the index of the\
    \ smallest even number in the array. Your solution does not return the smallest\
    \ even number in the array plus the index of the smallest even number in the array.\
    \ Your solution does not return the smallest even number in the array plus the\
    \ index of the smallest even number in the array. Your solution does not return\
    \ the smallest even number in the array plus the index of the smallest even number\
    \ in the array. Your solution does not return the smallest even number in the\
    \ array plus the index of the smallest even number in the array. Your solution\
    \ does not return the smallest even number in the array plus the index of the\
    \ smallest even number in the array. Your solution does not return the smallest\
    \ even number in the array plus the index of the smallest even number in the array.\n\
    <|/ c |>\n<| c |>\nYour solution does not return the smallest even number in the\
    \ array plus the index of the smallest even number in the array. Your solution\
    \ does not return the smallest even number in the array plus the index of the\
    \ smallest even number in the array. Your solution does not return the smallest\
    \ even number in the array plus the index of the smallest even number in the array.\
    \ Your solution does not return the smallest even number in the array plus the\
    \ index of the smallest even number in the array. Your solution does not return\
    \ the smallest even number in the array plus the index of the smallest even number\
    \ in the array. Your solution does not return the smallest even number in the\
    \ array plus the index of the smallest even number in the array. Your solution\
    \ does not return the smallest even number in the array plus the index of the\
    \ smallest even number in the array. Your solution does not return the smallest\
    \ even number in the array plus the index of the smallest even number in the array.\
    \ Your solution does not return the smallest even number in the array plus the\
    \ index of the smallest even number in the array. Your solution does not return\
    \ the smallest even number in the array plus the index of the smallest even number\
    \ in the array. Your solution does not return the smallest even number in the\
    \ array plus the index of the smallest even number in the array. Your solution\
    \ does not return the smallest even number in the array plus the index of the\
    \ smallest even number in the \nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmjcblpv_.php on line 41

    '
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $min = null;\n    $minIndex = null;\n    foreach ($arr\
    \ as $key => $value) {\n        if ($min === null || $value < $min) {\n      \
    \      $min = $value;\n            $minIndex = $key;\n        }\n    }\n    $result[]\
    \ = $min;\n    $result[] = $minIndex;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp7gn5ta.php:48\n\
    Stack trace:\n#0 /tmp/tmpwp7gn5ta.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwp7gn5ta.php\
    \ on line 48\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $result = [];\n    $evens = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n        } else\
    \ {\n            $result[$value] = $key;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    foreach ($result\
    \ as $key => $value) {\n        if ($key == $min) {\n            $result[$key]\
    \ = $key;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8zu0div.php:53\n\
    Stack trace:\n#0 /tmp/tmpj8zu0div.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpj8zu0div.php\
    \ on line 53\n"
  timestamp: 1659730778
- exit_code: 255
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n\
    // array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0,\
    \ 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so\
    \ we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\
    \    $evens = array_filter($arr, function($v) {\n        return $v & 1;\n    });\n\
    \    if (count($evens) > 0) {\n        $min = min($evens);\n        $index = array_search($min,\
    \ $evens);\n        return array($min, $index);\n    }\n    return array();\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdskihga2.php:44\n\
    Stack trace:\n#0 /tmp/tmpdskihga2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdskihga2.php\
    \ on line 44\n"
  timestamp: 1659730778
