language: php
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsfqa2l_a.php:29\n\
    Stack trace:\n#0 /tmp/tmpsfqa2l_a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsfqa2l_a.php\
    \ on line 29\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpg4tz8vck.php:16\nStack trace:\n#0 /tmp/tmpg4tz8vck.php(23): int_to_mini_roman(19)\n\
    #1 /tmp/tmpg4tz8vck.php(27): candidate(19)\n#2 /tmp/tmpg4tz8vck.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg4tz8vck.php on line 16\n"
  timestamp: 1659731121
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array('M' => 1000, 'CM' => 900, 'D'\
    \ => 500, 'CD' => 400, 'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' => 10,\
    \ 'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1);\n    foreach ($roman_numerals as\
    \ $roman => $numeral) {\n        $numeral *= $number;\n        if ($numeral >=\
    \ 1000) {\n            $numeral /= 100;\n            $roman .= $numeral;\n   \
    \     } else {\n            $roman .= $numeral;\n        }\n    }\n    return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpelpiw0oy.php:32\n\
    Stack trace:\n#0 /tmp/tmpelpiw0oy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpelpiw0oy.php\
    \ on line 32\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = ($num / 10);\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmprun8inpp.php:16\nStack trace:\n#0 /tmp/tmprun8inpp.php(23): int_to_mini_roman(19)\n\
    #1 /tmp/tmprun8inpp.php(27): candidate(19)\n#2 /tmp/tmprun8inpp.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmprun8inpp.php on line 16\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpot68070d.php:15\n\
    Stack trace:\n#0 /tmp/tmpot68070d.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpot68070d.php(25):\
    \ candidate(19)\n#2 /tmp/tmpot68070d.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpot68070d.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ih4_08i.php:26\n\
    Stack trace:\n#0 /tmp/tmp6ih4_08i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6ih4_08i.php\
    \ on line 26\n"
  timestamp: 1659731121
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= roman($num % 10);\n  \
    \      $num = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp7gk489mr.php:18\n\
    Stack trace:\n#0 /tmp/tmp7gk489mr.php(25): int_to_mini_roman(19)\n#1 /tmp/tmp7gk489mr.php(29):\
    \ candidate(19)\n#2 /tmp/tmp7gk489mr.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp7gk489mr.php\
    \ on line 18\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpot68070d.php:15\n\
    Stack trace:\n#0 /tmp/tmpot68070d.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpot68070d.php(25):\
    \ candidate(19)\n#2 /tmp/tmpot68070d.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpot68070d.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'b',\n    100000 => 'k',\n    1000000 => 'y'\n  );\n  foreach\
    \ ($roman_numerals as $roman => $numeral) {\n    if ($number >= $numeral) {\n\
    \      $number = $number - $numeral;\n      $roman .= $numeral;\n      break;\n\
    \    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpqak_nrpd.php on line\
    \ 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqak_nrpd.php:41\n\
    Stack trace:\n#0 /tmp/tmpqak_nrpd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqak_nrpd.php\
    \ on line 41\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $romans[$num] : romans[$num];\n    if ($num == 0) {\n      break;\n    }\n \
    \ }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Use of undefined constant romans - assumed 'romans' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmp04z9ghsw.php on line 18\n\
    \nWarning: Use of undefined constant romans - assumed 'romans' (this will throw\
    \ an Error in a future version of PHP) in /tmp/tmp04z9ghsw.php on line 18\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp04z9ghsw.php:31\nStack\
    \ trace:\n#0 /tmp/tmp04z9ghsw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp04z9ghsw.php\
    \ on line 31\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ '' : $remainder == 1 ? 'i' : 'v';\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc4gi32jq.php:31\n\
    Stack trace:\n#0 /tmp/tmpc4gi32jq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpc4gi32jq.php\
    \ on line 31\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    if ($num >= 1000)\
    \ {\n      $roman .= 'M';\n      $num -= 1000;\n    } else {\n      $roman .=\
    \ 'C';\n    }\n    if ($num >= 500) {\n      $roman .= 'D';\n      $num -= 500;\n\
    \    } else {\n      $roman .= 'L';\n    }\n    if ($num >= 100) {\n      $roman\
    \ .= 'X';\n      $num -= 100;\n    } else {\n      $roman .= 'V';\n    }\n   \
    \ if ($num >= 50) {\n      $roman .= 'I';\n      $num -= 50;\n    } else {\n \
    \     $roman .= 'I';\n    }\n    if ($num >= 10) {\n      $roman .= 'X';\n   \
    \   $num -= 10;\n    } else {\n      $roman .= 'L';\n    }\n    if ($num >= 5)\
    \ {\n      $roman .= 'C';\n      $num -= 5;\n    } else {\n      $roman .= 'C';\n\
    \    }\n    if ($num >= 1) {\n      $roman .= 'M';\n      $num -= 1;\n    } else\
    \ {\n      break;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvmt8u9z.php:67\n\
    Stack trace:\n#0 /tmp/tmpuvmt8u9z.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpuvmt8u9z.php\
    \ on line 67\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'I',\n    5 => 'V',\n\
    \    10 => 'X',\n    40 => 'L',\n    100 => 'C',\n    400 => 'D',\n    1000 =>\
    \ 'M',\n  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $roman_numerals[$roman] = $numeral;\n      $number = $number\
    \ - $roman;\n    }\n  }\n  $roman_numerals[1000] = 'M';\n  foreach ($roman_numerals\
    \ as $roman => $numeral) {\n    if ($number >= $roman) {\n      $roman_numerals[$roman]\
    \ = $numeral;\n      $number = $number - $roman;\n    }\n  }\n  $roman_numerals[4000]\
    \ = 'D';\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $roman_numerals[$roman] = $numeral;\n      $number = $number\
    \ - $roman;\n    }\n  }\n  $roman_numerals[10000] = 'C';\n  foreach ($roman_numerals\
    \ as $roman => $numeral) {\n    if ($number >= $roman) {\n      $roman_numerals[$roman]\
    \ = $numeral;\n      $number = $number - $roman;\n    }\n  }\n  $roman_numerals[100000]\
    \ = 'L';\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $roman_numerals[$roman] = $numeral;\n      $number = $number\
    \ - $roman;\n    }\n  }\n  $roman_numerals[1000000] = 'X';\n  foreach ($roman_numerals\
    \ as $roman => $numeral) {\n    if ($number >= $roman) {\n      $roman_numerals[$roman]\
    \ = $numeral;\n      $number = $number - $roman;\n    }\n  }\n  $roman_numerals[10000000]\
    \ = 'V';\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $roman_numerals[$roman] = $numeral;\n      $number = $number\
    \ - $roman;\n    }\n  }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptrmp4svr.php on line 93

    '
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  $roman_numerals_length\
    \ = min($roman_numerals_length, $number);\n  for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n  \
    \  $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpci6j6zzs.php:29\n\
    Stack trace:\n#0 /tmp/tmpci6j6zzs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpci6j6zzs.php\
    \ on line 29\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpt25z8n1s.php:16\n\
    Stack trace:\n#0 /tmp/tmpt25z8n1s.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpt25z8n1s.php(27):\
    \ candidate(19)\n#2 /tmp/tmpt25z8n1s.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpt25z8n1s.php\
    \ on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    10 => 'iii',\n    50 => 'iv',\n    100 => 'v',\n    500 => 'vi',\n    1000\
    \ => 'vii',\n    5000 => 'viii',\n    10000 => 'ix',\n    100000 => 'x'\n  );\n\
    \  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number >= $roman)\
    \ {\n      $roman_numerals[$roman] = $numeral;\n      $roman = $numeral;\n   \
    \ }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3dgeugf.php:40\n\
    Stack trace:\n#0 /tmp/tmpg3dgeugf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpg3dgeugf.php\
    \ on line 40\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = $roman .\
    \ roman_numeral($number) . roman_numeral($i);\n    $number = $number / $i;\n \
    \ }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpuiwlapb3.php:15\nStack trace:\n#0 /tmp/tmpuiwlapb3.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpuiwlapb3.php(26): candidate(19)\n#2 /tmp/tmpuiwlapb3.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuiwlapb3.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length * $i + $i) {\n      $roman .= $roman_numerals[$number\
    \ - $roman_numerals_length * $i];\n      break;\n    }\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmpt9wam0ar.php on line 19\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpt9wam0ar.php:31\nStack\
    \ trace:\n#0 /tmp/tmpt9wam0ar.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpt9wam0ar.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / 10);\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp8ztcijkb.php:15\n\
    Stack trace:\n#0 /tmp/tmp8ztcijkb.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp8ztcijkb.php(26):\
    \ candidate(19)\n#2 /tmp/tmp8ztcijkb.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp8ztcijkb.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  while ($number > 0) {\n    $roman .= $roman_numerals[$number\
    \ % 10];\n    $number /= 10;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-7 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-8 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-9 to int loses precision in /tmp/tmplxjdp110.php
    on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-10 to int loses
    precision in /tmp/tmplxjdp110.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-11 to int loses
    precision in /tmp/tmplxjdp110.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-12 to int loses
    precision in /tmp/tmplxjdp110.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-13 to int loses
    precision in /tmp/tmplxjdp110.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-14 to int loses
    precision in /tmp/tmplxjdp110.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-15 to int loses
    precision in /tmp/tmplxjdp110.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000006E-16 to int loses
    precision in /tmp/tmplxjdp110.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000007E-17 to int loses
    precisio'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length - $i) {\n      $roman .= $roman_numerals[$roman_numerals_length\
    \ - $i - 1];\n      break;\n    }\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64wdxytt.php:31\n\
    Stack trace:\n#0 /tmp/tmp64wdxytt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp64wdxytt.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000000, 'L', 'LL', 'LLL', 'LLLL',\
    \ 'LLLLL', 'LLLLLL', 'LLLLLLL', 'LLLLLLLL',\n    1000000000, 'X', 'XX', 'XXX',\
    \ 'XXXX', 'XXXXX', 'XXXXXX', 'XXXXXXX', 'XXXXXXXX',\n    1000000000000, 'C', 'CC',\
    \ 'CCC', 'CCCC', 'CCCCC', 'CCCCCC', 'CCCCCCC', 'CCCCCCCC',\n    1000000000000000,\
    \ 'D', 'DD', 'DDD', 'DDDD', 'DDDDD', 'DDDDDD', 'DDDDDDD', 'DDDDDDDD',\n    1000000000000000000,\
    \ 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n  );\n\
    \  $roman_numeral_length = strlen($roman_numerals);\n  for ($i = 0; $i < $roman_numeral_length;\
    \ $i++) {\n    $roman .= $roman_numerals[$number%$roman_numeral_length];\n   \
    \ $number = floor($number/$roman_numeral_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmp8kcxq08u.php:22\nStack trace:\n#0 /tmp/tmp8kcxq08u.php(31):\
    \ int_to_mini_roman(19)\n#1 /tmp/tmp8kcxq08u.php(35): candidate(19)\n#2 /tmp/tmp8kcxq08u.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8kcxq08u.php on line 22\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $romans[$remainder];\n    if ($num == 0) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $romans in /tmp/tmpzsznclug.php on line 18\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmpzsznclug.php\
    \ on line 18\n\nWarning: Undefined variable $romans in /tmp/tmpzsznclug.php on\
    \ line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpzsznclug.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsznclug.php:31\n\
    Stack trace:\n#0 /tmp/tmpzsznclug.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzsznclug.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  while ($number > 0) {\n    $roman .= $roman_numerals[$number\
    \ % 10];\n    $number /= 10;\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-7 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-8 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-9 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-10 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-11 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-12 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-13 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-14 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-15 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000006E-16 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000007E-17 to int loses
    precisio'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        100  => 'M',\n  \
    \      500  => 'D',\n        1000 => 'C',\n        2000 => 'L',\n        3000\
    \  => 'X',\n        5000  => 'V',\n        10000 => 'I',\n        50000 => 'X',\n\
    \        100000  => 'C',\n        200000  => 'D',\n        300000  => 'L',\n \
    \       400000  => 'X',\n        500000  => 'V',\n        1000000 => 'X',\n  \
    \      2000000 => 'D',\n        3000000 => 'L',\n        4000000 => 'X',\n   \
    \     5000000 => 'V',\n        10000000  => 'X',\n        20000000  => 'D',\n\
    \        30000000  => 'L',\n        40000000  => 'X',\n        50000000  => 'V',\n\
    \        100000000 => 'X',\n        200000000 => 'D',\n        300000000 => 'L',\n\
    \        400000000 => 'X',\n        500000000 => 'V',\n        1000000000  =>\
    \ 'X',\n        2000000000  => 'D',\n        3000000000  => 'L',\n        4000000000\
    \  => 'X',\n        5000000000  => 'V',\n        10000000000 => 'X',\n       \
    \ 20000000000 => 'D',\n        30000000000 => 'L',\n        40000000000 => 'X',\n\
    \        500000000000 => 'V',\n        100000000000  => 'X',\n        200000000000\
    \  => 'D',\n        300000000000  => 'L',\n        400000000000  => 'X',\n   \
    \     5000000000000  => 'V',\n        1000000000000  => 'X',\n        2000000000000\
    \  => 'D',\n        3000000000000  => 'L',\n        4000000000000  => 'X',\n \
    \       50000000000000  => 'V',\n        10000000000000  => 'X',\n        20000000000000\
    \  => 'D',\n        30000000000000  => 'L',\n        40000000000000  => 'X',\n\
    \        500000000000000  => 'V',\n        100000000000000  => 'X',\n        200000000000000\
    \  => 'D',\n        300000000000000  => 'L',\n        400000000000000  => 'X',\n\
    \        5000000000000000  => 'V',\n        1000000000000000000  => 'X',\n   \
    \     20000000000000000  => 'D',\n        30000000000000000  => 'L',\n       \
    \ 40000000000000000  => 'X',\n        50000000000000000  => 'V',\n    );\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp5yb7r9gc.php on line 100

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ih4_08i.php:26\n\
    Stack trace:\n#0 /tmp/tmp6ih4_08i.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6ih4_08i.php\
    \ on line 26\n"
  timestamp: 1659731121
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  $roman_numerals_length\
    \ = min($roman_numerals_length, $number);\n  for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n  \
    \  $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpci6j6zzs.php:29\n\
    Stack trace:\n#0 /tmp/tmpci6j6zzs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpci6j6zzs.php\
    \ on line 29\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length * $i) {\n      $roman .= $roman_numerals[($number\
    \ - $roman_numerals_length * $i) % $roman_numerals_length];\n    }\n  }\n  return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6grk7e1j.php:30\n\
    Stack trace:\n#0 /tmp/tmp6grk7e1j.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6grk7e1j.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = ($number\
    \ % $i) ? $roman . roman_numeral($i) : $roman;\n  }\n  return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpu60l_8fc.php:15\nStack trace:\n#0 /tmp/tmpu60l_8fc.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpu60l_8fc.php(25): candidate(19)\n#2 /tmp/tmpu60l_8fc.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpu60l_8fc.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmpgj0ycd90.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgj0ycd90.php:30\nStack\
    \ trace:\n#0 /tmp/tmpgj0ycd90.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgj0ycd90.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpl4sqilbh.php:15\nStack trace:\n#0 /tmp/tmpl4sqilbh.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpl4sqilbh.php(26): candidate(19)\n#2 /tmp/tmpl4sqilbh.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl4sqilbh.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = $num / 10;\n    if ($num == 0) {\n      break;\n    }\n  \
    \  $roman .= $remainders[$remainder];\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmphn3a4vzn.php
    on line 21


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmphn3a4vzn.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmphn3a4vzn.php
    on line 21


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmphn3a4vzn.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmphn3a4vzn.php
    on line 21


    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmphn3a4vzn.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmphn3a4vzn.php
    on line 21


    Deprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmphn3a4vzn.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmphn3a4vzn.php
    on line 21


    Deprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmphn3a4vzn.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmphn3a4vzn.php
    on line 21


    Deprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmphn3a4vzn.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmphn3a4vzn.php
    on line 21


    Deprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmphn3a4vzn.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmphn3a4vzn.php on line 21


    Wa'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xvi', 14 => 'xvii',\n    15 =>\
    \ 'xix', 16 => 'xx', 17 => 'xxi', 18 => 'xxii', 19 => 'xxiii', 20 => 'xxiv',\n\
    \    30 => 'xxv', 40 => 'xxvi', 50 => 'xxvii', 60 => 'xxix', 70 => 'xxx', 80 =>\
    \ 'xxxx',\n    90 => 'xxxxx', 100 => 'xxxxxx', 1000 => 'xxxxxxx'\n  );\n  if ($number\
    \ < 0 || $number > 1000) {\n    return $roman;\n  }\n  $roman = array_shift($roman_numerals);\n\
    \  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oqt59yk.php:36\n\
    Stack trace:\n#0 /tmp/tmp7oqt59yk.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7oqt59yk.php\
    \ on line 36\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe40nntnd.php:28\n\
    Stack trace:\n#0 /tmp/tmpe40nntnd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpe40nntnd.php\
    \ on line 28\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length && $number % $roman_numerals_length\
    \ == 0) {\n      $roman .= $roman_numerals[$roman_numerals_length - 1];\n    \
    \  break;\n    }\n    if ($number >= $roman_numerals_length * 2 && $number % $roman_numerals_length\
    \ * 2 == 0) {\n      $roman .= $roman_numerals[$roman_numerals_length - 2];\n\
    \      break;\n    }\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgo9dkk3k.php:35\n\
    Stack trace:\n#0 /tmp/tmpgo9dkk3k.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpgo9dkk3k.php\
    \ on line 35\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'c',\n    100000 => 'd',\n    1000000 => 'm',\n    10000000\
    \ => 'c',\n    100000000 => 'd',\n    1000000000 => 'm',\n    10000000000 => 'c',\n\
    \    100000000000 => 'd',\n    1000000000000 => 'm',\n    10000000000000 => 'c',\n\
    \    100000000000000 => 'd',\n    1000000000000000 => 'm',\n    10000000000000000\
    \ => 'c',\n    100000000000000000 => 'd',\n    1000000000000000000 => 'm',\n \
    \   10000000000000000000 => 'c',\n    100000000000000000000 => 'd',\n    1000000000000000000000\
    \ => 'm',\n    10000000000000000000000 => 'c',\n    100000000000000000000000 =>\
    \ 'd',\n    1000000000000000000000000 => 'm',\n    10000000000000000000000000\
    \ => 'c',\n    100000000000000000000000000 => 'd',\n    1000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000 => 'c',\n    100000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000 => 'm',\n    10000000000000000000000000000000\
    \ => 'c',\n    100000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000 => 'c',\n    100000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000 => 'm',\n    10000000000000000000000000000000000000\
    \ => 'c',\n    100000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000 => 'c',\n    100000000000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000000000000 => 'm',\n    1000000000000000000000000000000000000000000000\
    \ => 'c',\n    10000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000\
    \ => 'm',\n    1000000000000000000000000000000000000000000000000 => 'c',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000000000000 => 'c',\n  \
    \  10000000000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'm',\n    1000000000000000000000000000000000000000000000000000000 => 'c',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000000000000\
    \ => 'm',\n    1000000000000000000000000000000000000000000000000000000000 => 'c',\n\
    \    1000000000000000000000000000000000000000000000000000000000000 => '\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmppn_5tmca.php
    on line 74

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length * $i) {\n      $roman .= $roman_numerals[($number\
    \ - $roman_numerals_length * $i) % $roman_numerals_length];\n    }\n  }\n  return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6grk7e1j.php:30\n\
    Stack trace:\n#0 /tmp/tmp6grk7e1j.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6grk7e1j.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xv', 14 => 'xvi',\n    15 =>\
    \ 'xvii', 16 => 'xix', 17 => 'xx', 18 => 'xxi', 19 => 'xxii', 20 => 'xxiii',\n\
    \    21 => 'xxiv', 22 => 'xxv', 23 => 'xxvi', 24 => 'xxvii', 25 => 'xxix', 26\
    \ => 'xxx',\n    27 => 'xxxi', 28 => 'xxxiv', 29 => 'xxxv', 30 => 'xxxvi', 31\
    \ => 'xxxvii', 32 => 'xxxix',\n    33 => 'xxx', 34 => 'xxxi', 35 => 'xxxiv', 36\
    \ => 'xxxv', 37 => 'xxxvi', 38 => 'xxxvii',\n    39 => 'xxxix', 40 => 'xxx'\n\
    \  );\n  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i <\
    \ $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tmp/tmpvj2z64p6.php on line 25


    Warning: Undefined array key 0 in /tm'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $remainder =\
    \ $num % 10;\n    $roman .= $remainder == 0 ? $num : $remainder == 1 ? $roman[0]\
    \ . $roman[1] : $roman[0] . $roman[1];\n    $num = $num / 10;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp92q5qjyu.php on line
    17

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  while ($number\
    \ > 0) {\n    $roman .= $roman_numerals[$number % 10];\n    $number /= 10;\n \
    \ }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-7 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-8 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-9 to int loses precision in /tmp/tmpebpymqjn.php
    on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-10 to int loses
    precision in /tmp/tmpebpymqjn.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-11 to int loses
    precision in /tmp/tmpebpymqjn.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-12 to int loses
    precision in /tmp/tmpebpymqjn.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-13 to int loses
    precision in /tmp/tmpebpymqjn.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-14 to int loses
    precision in /tmp/tmpebpymqjn.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-15 to int loses
    precision in /tmp/tmpebpymqjn.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000006E-16 to int loses
    precision in /tmp/tmpebpymqjn.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000007E-17 to int loses
    precisio'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num = $num % 10;\n    $num =\
    \ $num * 100 + $num % 100;\n    $num = $num * 10 + $num % 10;\n    $roman = str_pad($num,\
    \ 3, '0', STR_PAD_LEFT);\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp80hrc4d.php:27\n\
    Stack trace:\n#0 /tmp/tmpp80hrc4d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpp80hrc4d.php\
    \ on line 27\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'ii',\n\
    \    10 => 'iii',\n    50 => 'iv',\n    100 => 'v',\n    500 => 'vi',\n    1000\
    \ => 'vii',\n    5000 => 'viii',\n    10000 => 'ix',\n    100000 => 'x'\n  );\n\
    \  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number >= $roman)\
    \ {\n      $number = floor($number / $roman) * $roman;\n      $roman .= $numeral;\n\
    \    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply0ocdss.php:40\n\
    Stack trace:\n#0 /tmp/tmply0ocdss.php(56): test()\n#1 {main}\n  thrown in /tmp/tmply0ocdss.php\
    \ on line 40\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpot68070d.php:15\n\
    Stack trace:\n#0 /tmp/tmpot68070d.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpot68070d.php(25):\
    \ candidate(19)\n#2 /tmp/tmpot68070d.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpot68070d.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpn0wm1d4b.php:16\nStack trace:\n#0 /tmp/tmpn0wm1d4b.php(23): int_to_mini_roman(19)\n\
    #1 /tmp/tmpn0wm1d4b.php(27): candidate(19)\n#2 /tmp/tmpn0wm1d4b.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn0wm1d4b.php on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = ($number\
    \ % $i) ? $roman . roman_numeral($i) : $roman;\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmp7g8imvza.php:15\nStack trace:\n#0 /tmp/tmp7g8imvza.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmp7g8imvza.php(25): candidate(19)\n#2 /tmp/tmp7g8imvza.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7g8imvza.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length * $i + $i) {\n      $roman .= $roman_numerals[$number\
    \ - $roman_numerals_length * $i];\n      break;\n    }\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 152 in /tmp/tmpo7d1h_6f.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7d1h_6f.php:32\nStack\
    \ trace:\n#0 /tmp/tmpo7d1h_6f.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo7d1h_6f.php\
    \ on line 32\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  if ($num >= 1000) {\n    $num -= 1000;\n\
    \    $roman .= 'M';\n  }\n  if ($num >= 500) {\n    $num -= 500;\n    $roman .=\
    \ 'CM';\n  }\n  if ($num >= 100) {\n    $num -= 100;\n    $roman .= 'D';\n  }\n\
    \  if ($num >= 50) {\n    $num -= 50;\n    $roman .= 'CD';\n  }\n  if ($num >=\
    \ 10) {\n    $num -= 10;\n    $roman .= 'C';\n  }\n  if ($num >= 5) {\n    $num\
    \ -= 5;\n    $roman .= 'XC';\n  }\n  if ($num >= 1) {\n    $num -= 1;\n    $roman\
    \ .= 'L';\n  }\n  if ($num >= 0.5) {\n    $num -= 0.5;\n    $roman .= 'XL';\n\
    \  }\n  if ($num >= 0.25) {\n    $num -= 0.25;\n    $roman .= 'X';\n  }\n  if\
    \ ($num >= 0.1) {\n    $num -= 0.1;\n    $roman .= 'IX';\n  }\n  if ($num >= 0.05)\
    \ {\n    $num -= 0.05;\n    $roman .= 'V';\n  }\n  if ($num >= 0.01) {\n    $num\
    \ -= 0.01;\n    $roman .= 'IV';\n  }\n  if ($num >= 0.001) {\n    $num -= 0.001;\n\
    \    $roman .= 'I';\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilnksqni.php:75\n\
    Stack trace:\n#0 /tmp/tmpilnksqni.php(91): test()\n#1 {main}\n  thrown in /tmp/tmpilnksqni.php\
    \ on line 75\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpbzjrfi1u.php:15\n\
    Stack trace:\n#0 /tmp/tmpbzjrfi1u.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpbzjrfi1u.php(25):\
    \ candidate(19)\n#2 /tmp/tmpbzjrfi1u.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpbzjrfi1u.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    if ($num >= 1000)\
    \ {\n      $roman .= 'M';\n      $num -= 1000;\n    } else {\n      $roman .=\
    \ 'D';\n    }\n    if ($num >= 500) {\n      $roman .= 'C';\n      $num -= 500;\n\
    \    } else {\n      $roman .= 'L';\n    }\n    if ($num >= 100) {\n      $roman\
    \ .= 'X';\n      $num -= 100;\n    } else {\n      $roman .= 'V';\n    }\n   \
    \ if ($num >= 50) {\n      $roman .= 'I';\n      $num -= 50;\n    } else {\n \
    \     $roman .= 'I'; // no roman numeral for 50.\n    }\n    if ($num === 0) {\n\
    \      break;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    130023432 bytes) in /tmp/tmp2viibey2.php on line 38

    '
  timestamp: 1659824754
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $num -= 1;\n   \
    \ $digit = intval($num / 1000);\n    $roman .= str_repeat('M', $digit);\n    $num\
    \ -= $digit * 1000;\n    $digit = intval($num / 100);\n    $roman .= str_repeat('D',\
    \ $digit);\n    $num -= $digit * 100;\n    $digit = intval($num / 10);\n    $roman\
    \ .= str_repeat('C', $digit);\n    $num -= $digit * 10;\n    if ($num < 0) {\n\
    \      break;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy04jiwl8.php:38\n\
    Stack trace:\n#0 /tmp/tmpy04jiwl8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpy04jiwl8.php\
    \ on line 38\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp5y31izpe.php:15\n\
    Stack trace:\n#0 /tmp/tmp5y31izpe.php(21): int_to_mini_roman(19)\n#1 /tmp/tmp5y31izpe.php(25):\
    \ candidate(19)\n#2 /tmp/tmp5y31izpe.php(41): test()\n#3 {main}\n  thrown in /tmp/tmp5y31izpe.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num = ($num / 10);\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpjuabfd3j.php:16\n\
    Stack trace:\n#0 /tmp/tmpjuabfd3j.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpjuabfd3j.php(27):\
    \ candidate(19)\n#2 /tmp/tmpjuabfd3j.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpjuabfd3j.php\
    \ on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  $roman_numerals_length\
    \ = count($roman_numerals);\n  $int_length = strlen($number);\n  for ($i = 0;\
    \ $i < $int_length; $i++) {\n    $roman_numeral = $roman_numerals[$number % $roman_numerals_length];\n\
    \    $roman .= $roman_numeral;\n    $number /= $roman_numerals_length;\n  }\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.2666666666666666 to int\
    \ loses precision in /tmp/tmpsu7cdv3h.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsu7cdv3h.php:30\nStack trace:\n#0 /tmp/tmpsu7cdv3h.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsu7cdv3h.php on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[$number % 1000];\n    $number /= 1000;\n  }\n\
    \  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmpjeea4hu5.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjeea4hu5.php:30\nStack\
    \ trace:\n#0 /tmp/tmpjeea4hu5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjeea4hu5.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ '' : $romans[$remainder];\n    if ($num == 0) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $romans in /tmp/tmpt5aptk0s.php on line 18\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmpt5aptk0s.php\
    \ on line 18\n\nWarning: Undefined variable $romans in /tmp/tmpt5aptk0s.php on\
    \ line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpt5aptk0s.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5aptk0s.php:31\n\
    Stack trace:\n#0 /tmp/tmpt5aptk0s.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpt5aptk0s.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array('M' => 1000, 'CM' => 900, 'D'\
    \ => 500, 'CD' => 400,\n        'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40,\
    \ 'X' => 10, 'IX' => 9,\n        'V' => 5, 'IV' => 4, 'I' => 1);\n    while ($number\
    \ >= 1000) {\n        $roman .= $roman_numerals[floor($number / 1000)];\n    \
    \    $number %= 1000;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl12as6by.php:29\n\
    Stack trace:\n#0 /tmp/tmpl12as6by.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpl12as6by.php\
    \ on line 29\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $remainder =\
    \ $num % 10;\n    $roman .= $remainder == 0 ? $num : $remainder + $roman;\n  \
    \  $num = $num / 10;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpjzvzhcbr.php:17\nStack trace:\n#0 /tmp/tmpjzvzhcbr.php(24): int_to_mini_roman(19)\n\
    #1 /tmp/tmpjzvzhcbr.php(28): candidate(19)\n#2 /tmp/tmpjzvzhcbr.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjzvzhcbr.php on line 17\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_nums = array(\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', '\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "", expecting ")" in /tmp/tmpu4d2r1ct.php
    on line 35

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsfqa2l_a.php:29\n\
    Stack trace:\n#0 /tmp/tmpsfqa2l_a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsfqa2l_a.php\
    \ on line 29\n"
  timestamp: 1659731187
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    if ($num >= 1000)\
    \ {\n      $roman .= 'M';\n      $num -= 1000;\n    } else {\n      $roman .=\
    \ 'D';\n    }\n    if ($num >= 500) {\n      $roman .= 'C';\n      $num -= 500;\n\
    \    } else {\n      $roman .= 'L';\n    }\n    if ($num >= 100) {\n      $roman\
    \ .= 'X';\n      $num -= 100;\n    } else {\n      $roman .= 'V';\n    }\n   \
    \ if ($num >= 50) {\n      $roman .= 'I';\n      $num -= 50;\n    } else {\n \
    \     $roman .= 'I'; // no roman numeral for 50.\n    }\n    if ($num == 0) {\n\
    \      break;\n    }\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    130023432 bytes) in /tmp/tmpkq4x5m8_.php on line 38

    '
  timestamp: 1659824754
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlmyvfab.php:77\n\
    Stack trace:\n#0 /tmp/tmprlmyvfab.php(93): test()\n#1 {main}\n  thrown in /tmp/tmprlmyvfab.php\
    \ on line 77\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    if ($num >= 1000)\
    \ {\n      $roman .= 'M';\n      $num -= 1000;\n    } else {\n      $roman .=\
    \ 'CM';\n      $num -= 100;\n    }\n    if ($num >= 100) {\n      $roman .= 'D';\n\
    \      $num -= 100;\n    } else {\n      $roman .= 'CD';\n      $num -= 10;\n\
    \    }\n    if ($num >= 10) {\n      $roman .= 'C';\n      $num -= 10;\n    }\
    \ else {\n      $roman .= 'XC';\n      $num -= 1;\n    }\n    if ($num >= 1) {\n\
    \      $roman .= 'L';\n      $num -= 1;\n    } else {\n      $roman .= 'XL';\n\
    \      $num -= 1;\n    }\n    if ($num >= 1) {\n      $roman .= 'X';\n      $num\
    \ -= 1;\n    } else {\n      $roman .= 'IX';\n      $num -= 1;\n    }\n    if\
    \ ($num >= 1) {\n      $roman .= 'V';\n      $num -= 1;\n    } else {\n      $roman\
    \ .= 'IV';\n      $num -= 1;\n    }\n    if ($num >= 1) {\n      $roman .= 'I';\n\
    \      $num -= 1;\n    } else {\n      break;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnndjtc27.php:73\n\
    Stack trace:\n#0 /tmp/tmpnndjtc27.php(89): test()\n#1 {main}\n  thrown in /tmp/tmpnndjtc27.php\
    \ on line 73\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpl4sqilbh.php:15\nStack trace:\n#0 /tmp/tmpl4sqilbh.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpl4sqilbh.php(26): candidate(19)\n#2 /tmp/tmpl4sqilbh.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl4sqilbh.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= 'M';\n    $number -= 1000;\n  }\n  while ($number >= 900) {\n\
    \    $roman .= 'CM';\n    $number -= 900;\n  }\n  while ($number >= 500) {\n \
    \   $roman .= 'D';\n    $number -= 500;\n  }\n  while ($number >= 400) {\n   \
    \ $roman .= 'CD';\n    $number -= 400;\n  }\n  while ($number >= 100) {\n    $roman\
    \ .= 'C';\n    $number -= 100;\n  }\n  while ($number >= 90) {\n    $roman .=\
    \ 'XC';\n    $number -= 90;\n  }\n  while ($number >= 50) {\n    $roman .= 'L';\n\
    \    $number -= 50;\n  }\n  while ($number >= 40) {\n    $roman .= 'XL';\n   \
    \ $number -= 40;\n  }\n  while ($number >= 10) {\n    $roman .= 'X';\n    $number\
    \ -= 10;\n  }\n  while ($number >= 9) {\n    $roman .= 'IX';\n    $number -= 9;\n\
    \  }\n  while ($number >= 5) {\n    $roman .= 'V';\n    $number -= 5;\n  }\n \
    \ while ($number >= 4) {\n    $roman .= 'IV';\n    $number -= 4;\n  }\n  while\
    \ ($number >= 1) {\n    $roman .= 'I';\n    $number -= 1;\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlmyvfab.php:77\n\
    Stack trace:\n#0 /tmp/tmprlmyvfab.php(93): test()\n#1 {main}\n  thrown in /tmp/tmprlmyvfab.php\
    \ on line 77\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[$number\
    \ % 100];\n    $number /= 100;\n  }\n  $roman .= $roman_numerals[$number];\n \
    \ return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmp7v4cx3i7.php on line 19\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7v4cx3i7.php:28\nStack\
    \ trace:\n#0 /tmp/tmp7v4cx3i7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7v4cx3i7.php\
    \ on line 28\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  for ($i = 0;\
    \ $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 15 in /tmp/tmpc_vcfbp5.php on line 16\n\n\
    Warning: Undefined array key 16 in /tmp/tmpc_vcfbp5.php on line 16\n\nWarning:\
    \ Undefined array key 17 in /tmp/tmpc_vcfbp5.php on line 16\n\nWarning: Undefined\
    \ array key 18 in /tmp/tmpc_vcfbp5.php on line 16\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc_vcfbp5.php:26\nStack trace:\n#0 /tmp/tmpc_vcfbp5.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc_vcfbp5.php on line 26\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  while ($number > 0) {\n    $roman .= $roman_numerals[$number\
    \ % 10];\n    $number /= 10;\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-7 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-8 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9E-9 to int loses precision in /tmp/tmp6rdetwl8.php
    on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-10 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000002E-11 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-12 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-13 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000004E-14 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000005E-15 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000006E-16 to int loses
    precision in /tmp/tmp6rdetwl8.php on line 16


    Deprecated: Implicit conversion from float 1.9000000000000007E-17 to int loses
    precisio'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  $roman_numerals_length\
    \ = count($roman_numerals);\n  for ($i = 0; $i < $roman_numerals_length; $i++)\
    \ {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n    $number\
    \ = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblf3q9xl.php:28\n\
    Stack trace:\n#0 /tmp/tmpblf3q9xl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpblf3q9xl.php\
    \ on line 28\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= $num % 10;\n        $num\
    \ = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpj226oj5q.php
    on line 18


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpj226oj5q.php
    on line 18


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpj226oj5q.php
    on line 18


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpj226oj5q.php
    on line 18


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpj226oj5q.php
    on line 18


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpj226oj5q.php
    on line 18


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpj226oj5q.php on line 18


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpj226oj5q.php
    on line 18


    Deprecated: Implicit conversion from float'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => '',\n    5 => 'i',\n\
    \    10 => 'ii',\n    20 => 'iii',\n    40 => 'iv',\n    80 => 'v',\n    100 =>\
    \ 'vi',\n    200 => 'vii',\n    400 => 'viii',\n    800 => 'ix',\n    1000 =>\
    \ 'x',\n  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $roman_numerals[$roman] = $numeral;\n      break;\n    }\n\
    \  }\n  foreach ($roman_numerals as $roman => $numeral) {\n    $roman -= $number;\n\
    \    if ($roman >= 1000) {\n      $roman_numerals[$roman] = $numeral . substr($roman_numerals[$roman\
    \ - 1000], 1);\n    }\n  }\n  return strtolower(implode('', $roman_numerals));\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9hix5ev.php:47\n\
    Stack trace:\n#0 /tmp/tmpd9hix5ev.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpd9hix5ev.php\
    \ on line 47\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length - $i) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1o_72sc.php:30\n\
    Stack trace:\n#0 /tmp/tmps1o_72sc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmps1o_72sc.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xv', 14 => 'xvi',\n    15 =>\
    \ 'xvii', 16 => 'xix', 17 => 'xx', 18 => 'xxi', 19 => 'xxii', 20 => 'xxiii',\n\
    \    21 => 'xxiv', 22 => 'xxv', 23 => 'xxvi', 24 => 'xxvii', 25 => 'xxix', 26\
    \ => 'xxx',\n    27 => 'xxxi', 28 => 'xxxi', 29 => 'xxxiv', 30 => 'xxxv', 31 =>\
    \ 'xxxvi', 32 => 'xxxvii',\n    33 => 'xxxix', 34 => 'xxxix', 35 => 'xxxvii',\
    \ 36 => 'xxxviii', 37 => 'xxxixi',\n    38 => 'xxxixi', 39 => 'xxxviii', 40 =>\
    \ 'xxxviii', 41 => 'xxxixii', 42 => 'xxxixii',\n    43 => 'xxxviiii', 44 => 'xxxviiii',\
    \ 45 => 'xxxixiii', 46 => 'xxxixiii', 47 => 'xxxviiiii',\n    48 => 'xxxviiiii',\
    \ 49 => 'xxxixiiii', 50 => 'xxxixiiii', 51 => 'xxxviiiiii',\n    52 => 'xxxviiiiii',\
    \ 53 => 'xxxixiiiii', 54 => 'xxxixiiiii', 55 => 'xxxviiiiiii',\n    56 => 'xxxviiiiiii',\
    \ 57 => 'xxxixiiiiii', 58 => 'xxxixiiiiii', 59 => 'xxxviiiiiiii',\n    60 => 'xxxviiiiiiii',\
    \ 61 => 'xxxixiiiiiii', 62 => 'xxxixiiiiiii', 63 => 'xxxviiiiiiiii',\n    64 =>\
    \ 'xxxviiiiiiiii', 65 => 'xxxixiiiiiiii', 66 => 'xxxixiiiiiiii', 67 => 'xxxviiiiiiiiii',\n\
    \    68 => 'xxxviiiiiiiiii', 69 => 'xxxixiiiiiiiii', 70 => 'xxxixiiiiiiiii', 71\
    \ => 'xxxviiiiiiiiiii\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "xxxviiiiiiiiiii" in /tmp/tmp9ugg_7h8.php
    on line 28

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array('', 'I', 'II', 'III', 'IV',\
    \ 'V', 'VI', 'VII', 'VIII', 'IX');\n    $roman_numerals_length = count($roman_numerals);\n\
    \    $roman_numerals_length = min($roman_numerals_length, $number);\n    $roman_numerals_length\
    \ = max($roman_numerals_length, 1);\n    $roman_numerals_length = max($roman_numerals_length,\
    \ 1);\n    for ($i = 0; $i < $roman_numerals_length; $i++) {\n        $roman .=\
    \ $roman_numerals[$number % $roman_numerals_length];\n        $number = floor($number\
    \ / $roman_numerals_length);\n    }\n    return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71jqu289.php:31\n\
    Stack trace:\n#0 /tmp/tmp71jqu289.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp71jqu289.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral($num\
    \ % 10);\n    $num /= 10;\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpcqi_72o2.php:16\nStack trace:\n#0 /tmp/tmpcqi_72o2.php(23): int_to_mini_roman(19)\n\
    #1 /tmp/tmpcqi_72o2.php(27): candidate(19)\n#2 /tmp/tmpcqi_72o2.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcqi_72o2.php on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= roman_numeral($num % 10);\n\
    \        $num = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpmppozmsu.php:18\nStack trace:\n#0 /tmp/tmpmppozmsu.php(25): int_to_mini_roman(19)\n\
    #1 /tmp/tmpmppozmsu.php(29): candidate(19)\n#2 /tmp/tmpmppozmsu.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmppozmsu.php on line 18\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpwdd0h_jw.php:15\n\
    Stack trace:\n#0 /tmp/tmpwdd0h_jw.php(22): int_to_mini_roman(19)\n#1 /tmp/tmpwdd0h_jw.php(26):\
    \ candidate(19)\n#2 /tmp/tmpwdd0h_jw.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpwdd0h_jw.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    5000 => 'b',\n    10000 => 'y',\n    50000 => 'k',\n    100000 =>\
    \ 'n',\n    500000 => 'p',\n    1000000 => 'm',\n    5000000 => 'b',\n    10000000\
    \ => 'y',\n    50000000 => 'k',\n    100000000 => 'n',\n    500000000 => 'p',\n\
    \    1000000000 => 'm',\n    5000000000 => 'b',\n    10000000000 => 'y',\n   \
    \ 50000000000 => 'k',\n    100000000000 => 'n',\n    500000000000 => 'p',\n  \
    \  1000000000000 => 'm',\n    5000000000000 => 'b',\n    10000000000000 => 'y',\n\
    \    50000000000000 => 'k',\n    100000000000000 => 'n',\n    500000000000000\
    \ => 'p',\n    1000000000000000 => 'm',\n    5000000000000000 => 'b',\n    1000000000000000000\
    \ => 'y',\n    50000000000000000 => 'k',\n    10000000000000000000 => 'n',\n \
    \   500000000000000000 => 'p',\n    100000000000000000000 => 'm',\n    50000000000000000000\
    \ => 'b',\n    1000000000000000000000 => 'y',\n    500000000000000000000 => 'k',\n\
    \    10000000000000000000000 => 'n',\n    50000000000000000000000 => 'p',\n  \
    \  100000000000000000000000 => 'm',\n    500000000000000000000000 => 'b',\n  \
    \  1000000000000000000000000 => 'y',\n    5000000000000000000000000 => 'k',\n\
    \    10000000000000000000000000 => 'n',\n    50000000000000000000000000 => 'p',\n\
    \    100000000000000000000000000 => 'm',\n    500000000000000000000000000 => 'b',\n\
    \    1000000000000000000000000000 => 'y',\n    5000000000000000000000000000 =>\
    \ 'k',\n    10000000000000000000000000000 => 'n',\n    50000000000000000000000000000\
    \ => 'p',\n    100000000000000000000000000000 => 'm',\n    500000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000 => 'y',\n    5000000000000000000000000000000\
    \ => 'k',\n    10000000000000000000000000000000 => 'n',\n    50000000000000000000000000000000\
    \ => 'p',\n    100000000000000000000000000000000 => 'm',\n    500000000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000000 => 'y',\n    5000000000000000000000000000000000\
    \ => 'k',\n    10000000000000000000000000000000000 => 'n',\n    50000000000000000000000000000000000\
    \ => 'p',\n    100000000000000000000000000000000000 => 'm',\n    500000000000000000000000000000000000\
    \ => 'b',\n    1000000000000000000000000000000000000 => 'y',\n    5000000000000000000000000000000000000\
    \ => '\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmpgc2wmeli.php
    on line 84

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num -= $num % 10;\n    $num =\
    \ $num / 10;\n    while ($num > 0) {\n        $roman .= roman_numeral($num % 10);\n\
    \        $num = $num / 10;\n    }\n    return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpmppozmsu.php:18\nStack trace:\n#0 /tmp/tmpmppozmsu.php(25): int_to_mini_roman(19)\n\
    #1 /tmp/tmpmppozmsu.php(29): candidate(19)\n#2 /tmp/tmpmppozmsu.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmppozmsu.php on line 18\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[$number % 1000];\n    $number /= 1000;\n  }\n\
    \  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmpjeea4hu5.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjeea4hu5.php:30\nStack\
    \ trace:\n#0 /tmp/tmpjeea4hu5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjeea4hu5.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4se4c86.php:28\n\
    Stack trace:\n#0 /tmp/tmpq4se4c86.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpq4se4c86.php\
    \ on line 28\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i', 2 => 'ii', 3 =>\
    \ 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\n    8 => 'ix', 9 => 'x',\
    \ 10 => 'xii', 11 => 'xiii', 12 => 'xiv', 13 => 'xvi', 14 => 'xvii',\n    15 =>\
    \ 'xix', 16 => 'xx', 17 => 'xxi', 18 => 'xxii', 19 => 'xxiii', 20 => 'xxiv',\n\
    \    30 => 'xxv', 40 => 'xxvi', 50 => 'xxvii', 60 => 'xxix', 70 => 'xxx', 80 =>\
    \ 'xxxx',\n    90 => 'xxxxx', 100 => 'xxxxxx', 1000 => 'xxxxxxx'\n  );\n  foreach\
    \ ($roman_numerals as $roman => $numeral) {\n    if ($number >= $numeral) {\n\
    \      $roman = $numeral;\n      break;\n    }\n  }\n  return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6awch0_5.php:35\n\
    Stack trace:\n#0 /tmp/tmp6awch0_5.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6awch0_5.php\
    \ on line 35\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    40 => 'l',\n    100 => 'c',\n    400 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'cm',\n    100000 => 'd',\n    1000000 => 'd',\n    10000000\
    \ => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'm',\n    10000000000 =>\
    \ 'm',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n    10000000000000\
    \ => 'cm',\n    100000000000000 => 'cm',\n    1000000000000000 => 'm',\n    10000000000000000\
    \ => 'm',\n    100000000000000000 => 'd',\n    1000000000000000000 => 'd',\n \
    \   10000000000000000000 => 'cm',\n    100000000000000000000 => 'cm',\n    1000000000000000000000\
    \ => 'm',\n    10000000000000000000000 => 'm',\n    100000000000000000000000 =>\
    \ 'd',\n    1000000000000000000000000 => 'd',\n    10000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000 => 'cm',\n    1000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000 => 'm',\n    100000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000 => 'd',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000\
    \ => 'cm',\n    1000000000000000000000000000000000000000000000000000 => 'm',\n\
    \    10000000000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000000000\
    \ => 'cm\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "cm" in /tmp/tmptxxlr27s.php
    on line 74

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman_numeral($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpnwd3t9ly.php:15\nStack trace:\n#0 /tmp/tmpnwd3t9ly.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpnwd3t9ly.php(25): candidate(19)\n#2 /tmp/tmpnwd3t9ly.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnwd3t9ly.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpot68070d.php:15\n\
    Stack trace:\n#0 /tmp/tmpot68070d.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpot68070d.php(25):\
    \ candidate(19)\n#2 /tmp/tmpot68070d.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpot68070d.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral_to_int($i,\
    \ $number);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral_to_int()\
    \ in /tmp/tmpzro14kpk.php:15\nStack trace:\n#0 /tmp/tmpzro14kpk.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpzro14kpk.php(25): candidate(19)\n#2 /tmp/tmpzro14kpk.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzro14kpk.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  $roman_numerals_length\
    \ = count($roman_numerals);\n  for ($i = 0; $i < $roman_numerals_length; $i++)\
    \ {\n    $roman_numerals[$i] = $roman_numerals[$i].$roman_numerals[$i];\n  }\n\
    \  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n    $roman_numerals[$i] = $roman_numerals[$i].$roman_numerals[$i];\n\
    \  }\n  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i <\
    \ $roman_numerals_length; $i++) {\n    $roman_numerals[$i] = $roman_numerals[$i].$roman_numerals[$i];\n\
    \  }\n  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i <\
    \ $roman_numerals_length; $i++) {\n    $roman_numerals[$i] = $roman_numerals[$i].$roman_numerals[$i];\n\
    \  }\n  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i <\
    \ $roman_numerals_length; $i++) {\n    $roman_numerals[$i] = $roman_numerals[$i].$roman_numerals[$i];\n\
    \  }\n  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i <\
    \ $roman_numerals_length; $i++) {\n    $roman_numerals[$i] = $roman_numerals[$i].$roman_numerals[$i];\n\
    \  }\n  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i <\
    \ $roman_numerals_length; $i++) {\n    $roman_numerals[$i] = $roman_numerals[$i].$roman_numerals[$i];\n\
    \  }\n  $roman_numerals_length = count($roman_numerals);\n  for ($i = 0; $i <\
    \ $roman_numerals_length; $i++) {\n    $roman_numerals[$i] = $roman_numerals[$i].\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpm1rcbbwz.php on line 46

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i]\
    \ * pow(10, $roman_numerals_length - $i - 1);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int * string\
    \ in /tmp/tmpdt8_u7yu.php:17\nStack trace:\n#0 /tmp/tmpdt8_u7yu.php(23): int_to_mini_roman(19)\n\
    #1 /tmp/tmpdt8_u7yu.php(27): candidate(19)\n#2 /tmp/tmpdt8_u7yu.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdt8_u7yu.php on line 17\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \    $number = floor($number/$roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe40nntnd.php:28\n\
    Stack trace:\n#0 /tmp/tmpe40nntnd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpe40nntnd.php\
    \ on line 28\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = $roman .\
    \ roman($number);\n    $number = floor($number / $i);\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpio7m0j2m.php:15\n\
    Stack trace:\n#0 /tmp/tmpio7m0j2m.php(22): int_to_mini_roman(19)\n#1 /tmp/tmpio7m0j2m.php(26):\
    \ candidate(19)\n#2 /tmp/tmpio7m0j2m.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpio7m0j2m.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[$number\
    \ % 100];\n    $number /= 100;\n  }\n  $roman .= $roman_numerals[$number];\n \
    \ return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmpbpb1osl3.php on line 19\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbpb1osl3.php:28\nStack\
    \ trace:\n#0 /tmp/tmpbpb1osl3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbpb1osl3.php\
    \ on line 28\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num /= 10;\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpcyp0stam.php:16\n\
    Stack trace:\n#0 /tmp/tmpcyp0stam.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpcyp0stam.php(27):\
    \ candidate(19)\n#2 /tmp/tmpcyp0stam.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpcyp0stam.php\
    \ on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $num = $number;\n    $num = $num % 10;\n    $num =\
    \ $num * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num\
    \ * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n\
    \    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n    $num\
    \ = $num / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n    $num = $num\
    \ / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n\
    \    $num = $num % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n    $num\
    \ = $num % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n    $num = $num\
    \ % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n\
    \    $num = $num * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num\
    \ = $num * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num\
    \ * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n\
    \    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n    $num\
    \ = $num / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n    $num = $num\
    \ / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n\
    \    $num = $num % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n    $num\
    \ = $num % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n    $num = $num\
    \ % 10;\n    $num = $num * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n\
    \    $num = $num * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num\
    \ = $num * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num\
    \ * 1000;\n    $num = $num / 10;\n    $num = $num % 10;\n    $num = $num * 1000;\n\
    \    $num = $\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpzjslqpdi.php on line 84

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length + $i) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0ujrq2h.php:30\n\
    Stack trace:\n#0 /tmp/tmpt0ujrq2h.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt0ujrq2h.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    40 => 'c',\n    100 => 'd',\n    400 => 'cc',\n    1000 =>\
    \ 'ccc',\n  );\n  foreach ($roman_numerals as $numeral => $roman_numeral) {\n\
    \    if ($number >= $numeral) {\n      $roman .= $roman_numeral;\n      $number\
    \ -= $numeral;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0jypdrss.php:37\n\
    Stack trace:\n#0 /tmp/tmp0jypdrss.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0jypdrss.php\
    \ on line 37\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    40 => 'l',\n    100 => 'c',\n    400 => 'd',\n    1000 =>\
    \ 'm',\n  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $number = floor($number / $roman) * $roman;\n      $roman\
    \ .= $numeral;\n      break;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyz7txyi.php:38\n\
    Stack trace:\n#0 /tmp/tmpzyz7txyi.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzyz7txyi.php\
    \ on line 38\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[$number\
    \ % 100];\n    $number /= 100;\n  }\n  $roman .= $roman_numerals[$number];\n \
    \ return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 152 in /tmp/tmpngdeywuk.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngdeywuk.php:29\nStack\
    \ trace:\n#0 /tmp/tmpngdeywuk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpngdeywuk.php\
    \ on line 29\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n                          'C' => 100, 'XC' => 90, 'L' =>\
    \ 50, 'XL' => 40,\n                          'X' => 10, 'IX' => 9, 'V' => 5, 'IV'\
    \ => 4, 'I' => 1);\n  while ($number >= 1000) {\n    $roman .= 'M';\n    $number\
    \ -= 1000;\n  }\n  while ($number >= 900) {\n    $roman .= 'CM';\n    $number\
    \ -= 900;\n  }\n  while ($number >= 500) {\n    $roman .= 'D';\n    $number -=\
    \ 500;\n  }\n  while ($number >= 400) {\n    $roman .= 'CD';\n    $number -= 400;\n\
    \  }\n  while ($number >= 100) {\n    $roman .= 'C';\n    $number -= 100;\n  }\n\
    \  while ($number >= 90) {\n    $roman .= 'XC';\n    $number -= 90;\n  }\n  while\
    \ ($number >= 50) {\n    $roman .= 'L';\n    $number -= 50;\n  }\n  while ($number\
    \ >= 40) {\n    $roman .= 'XL';\n    $number -= 40;\n  }\n  while ($number >=\
    \ 10) {\n    $roman .= 'X';\n    $number -= 10;\n  }\n  while ($number >= 9) {\n\
    \    $roman .= 'IX';\n    $number -= 9;\n  }\n  while ($number >= 5) {\n    $roman\
    \ .= 'V';\n    $number -= 5;\n  }\n  while ($number >= 4) {\n    $roman .= 'IV';\n\
    \    $number -= 4;\n  }\n  while ($number >= 1) {\n    $roman .= 'I';\n    $number\
    \ -= 1;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkod0svm7.php:77\n\
    Stack trace:\n#0 /tmp/tmpkod0svm7.php(93): test()\n#1 {main}\n  thrown in /tmp/tmpkod0svm7.php\
    \ on line 77\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 10 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Warning: Undefined array key 11 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning:\
    \ Undefined array key 12 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined\
    \ array key 13 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array\
    \ key 14 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 15\
    \ in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 16 in /tmp/tmp5qhikbe0.php\
    \ on line 16\n\nWarning: Undefined array key 17 in /tmp/tmp5qhikbe0.php on line\
    \ 16\n\nWarning: Undefined array key 18 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5qhikbe0.php:26\nStack\
    \ trace:\n#0 /tmp/tmp5qhikbe0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5qhikbe0.php\
    \ on line 26\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral_to_roman($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral_to_roman()\
    \ in /tmp/tmpe5nanoli.php:15\nStack trace:\n#0 /tmp/tmpe5nanoli.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpe5nanoli.php(25): candidate(19)\n#2 /tmp/tmpe5nanoli.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe5nanoli.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $num -= 1;\n   \
    \ $digit = intval($num / 1000);\n    $roman .= $digits[$digit];\n    if ($num\
    \ % 1000 === 0) {\n      break;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined variable $digits in /tmp/tmpoxc7_eqv.php on line 18


    Warning: Trying to access array offset on value of type null in /tmp/tmpoxc7_eqv.php
    on line 18


    Warning: Undefined '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number%$i);\n\
    \    $number = floor($number/$i);\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmp2rkwnwg7.php:15\nStack trace:\n#0 /tmp/tmp2rkwnwg7.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmp2rkwnwg7.php(26): candidate(19)\n#2 /tmp/tmp2rkwnwg7.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2rkwnwg7.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length - $i) {\n      break;\n    }\n    $number\
    \ -= $roman_numerals_length - $i;\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5_0_sse.php:31\n\
    Stack trace:\n#0 /tmp/tmpm5_0_sse.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpm5_0_sse.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  $roman_numerals_length\
    \ = min($roman_numerals_length, $number);\n  for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n    $roman .= $roman_numerals[$number % $roman_numerals_length];\n\
    \    $number = floor($number / $roman_numerals_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlp39pqo.php:29\n\
    Stack trace:\n#0 /tmp/tmphlp39pqo.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphlp39pqo.php\
    \ on line 29\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 10 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Warning: Undefined array key 11 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning:\
    \ Undefined array key 12 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined\
    \ array key 13 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array\
    \ key 14 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 15\
    \ in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 16 in /tmp/tmp5qhikbe0.php\
    \ on line 16\n\nWarning: Undefined array key 17 in /tmp/tmp5qhikbe0.php on line\
    \ 16\n\nWarning: Undefined array key 18 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5qhikbe0.php:26\nStack\
    \ trace:\n#0 /tmp/tmp5qhikbe0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5qhikbe0.php\
    \ on line 26\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'cm',\n    100000 => 'd',\n    1000000 => 'd',\n    10000000\
    \ => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'm',\n    10000000000 =>\
    \ 'm',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n    10000000000000\
    \ => 'cm',\n    100000000000000 => 'cm',\n    1000000000000000 => 'm',\n    10000000000000000\
    \ => 'm',\n    100000000000000000 => 'd',\n    1000000000000000000 => 'd',\n \
    \   10000000000000000000 => 'cm',\n    100000000000000000000 => 'cm',\n    1000000000000000000000\
    \ => 'm',\n    10000000000000000000000 => 'm',\n    100000000000000000000000 =>\
    \ 'd',\n    1000000000000000000000000 => 'd',\n    10000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000 => 'cm',\n    1000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000 => 'm',\n    100000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000 => 'd',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000\
    \ => 'cm',\n    1000000000000000000000000000000000000000000000000000 => 'm',\n\
    \    10000000000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000000000\
    \ => 'cm\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "cm" in /tmp/tmp7gn7icds.php
    on line 74

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length - $i) {\n      $roman .= $roman_numerals[$roman_numerals_length\
    \ - $i];\n      break;\n    }\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgccyffrh.php:31\n\
    Stack trace:\n#0 /tmp/tmpgccyffrh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpgccyffrh.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_nums = array(\n    1 => 'i',\n    5 => 'v',\n  \
    \  10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 => 'm',\n\
    \    10000 => 'c',\n    100000 => 'd',\n    1000000 => 'm',\n    10000000 => 'c',\n\
    \    100000000 => 'd',\n    1000000000 => 'm',\n    10000000000 => 'c',\n    100000000000\
    \ => 'd',\n    1000000000000 => 'm',\n    10000000000000 => 'c',\n    100000000000000\
    \ => 'd',\n    1000000000000000 => 'm',\n    10000000000000000 => 'c',\n    100000000000000000\
    \ => 'd',\n    1000000000000000000 => 'm',\n  );\n  while ($number >= 1000) {\n\
    \    $number /= 1000;\n    $roman .= $roman_nums[$number];\n  }\n  $roman .= $roman_nums[$number];\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmpctyozfwp.php on line 42\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpctyozfwp.php:51\nStack\
    \ trace:\n#0 /tmp/tmpctyozfwp.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpctyozfwp.php\
    \ on line 51\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 10 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Warning: Undefined array key 11 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning:\
    \ Undefined array key 12 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined\
    \ array key 13 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array\
    \ key 14 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 15\
    \ in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 16 in /tmp/tmp5qhikbe0.php\
    \ on line 16\n\nWarning: Undefined array key 17 in /tmp/tmp5qhikbe0.php on line\
    \ 16\n\nWarning: Undefined array key 18 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5qhikbe0.php:26\nStack\
    \ trace:\n#0 /tmp/tmp5qhikbe0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5qhikbe0.php\
    \ on line 26\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_nums = array(\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    1000, 'M', 'MM', 'MMM', 'MMMM',\
    \ 'MMMMM', 'MMMMMM', 'MMMMMMM', '\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "", expecting ")" in /tmp/tmpu4d2r1ct.php
    on line 35

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= int_to_roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function int_to_roman()\
    \ in /tmp/tmpsgmzqdxh.php:15\nStack trace:\n#0 /tmp/tmpsgmzqdxh.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpsgmzqdxh.php(25): candidate(19)\n#2 /tmp/tmpsgmzqdxh.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsgmzqdxh.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  while ($number >= 1000) {\n    $roman .= $roman_numerals[($number\
    \ % 1000)];\n    $number /= 1000;\n  }\n  $roman .= $roman_numerals[$number];\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 152 in /tmp/tmpbich5chb.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbich5chb.php:29\nStack\
    \ trace:\n#0 /tmp/tmpbich5chb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbich5chb.php\
    \ on line 29\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpbzjrfi1u.php:15\n\
    Stack trace:\n#0 /tmp/tmpbzjrfi1u.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpbzjrfi1u.php(25):\
    \ candidate(19)\n#2 /tmp/tmpbzjrfi1u.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpbzjrfi1u.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $num * 100 + $remainder;\n    if ($num == 0) {\n      break;\n    }\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo563lgk6.php:31\n\
    Stack trace:\n#0 /tmp/tmpo563lgk6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo563lgk6.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $romans[$remainder];\n    if ($num == 0) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $romans in /tmp/tmpzsznclug.php on line 18\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmpzsznclug.php\
    \ on line 18\n\nWarning: Undefined variable $romans in /tmp/tmpzsznclug.php on\
    \ line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpzsznclug.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsznclug.php:31\n\
    Stack trace:\n#0 /tmp/tmpzsznclug.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzsznclug.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = ($number\
    \ % 10) == 0 ?\n      $roman . str_repeat('x', $i) :\n      str_repeat('v', $i).$roman;\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjz0n09iw.php:28\n\
    Stack trace:\n#0 /tmp/tmpjz0n09iw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjz0n09iw.php\
    \ on line 28\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV');\n  $roman_numerals_length\
    \ = count($roman_numerals);\n  for ($i = 0; $i < $roman_numerals_length; $i++)\
    \ {\n    $roman .= $roman_numerals[$i];\n    if ($number >= $roman_numerals_length\
    \ - $i) {\n      break;\n    }\n    $number -= $roman_numerals_length - $i;\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12xr0mem.php:31\n\
    Stack trace:\n#0 /tmp/tmp12xr0mem.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp12xr0mem.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length * $i) {\n      $roman .= $roman_numerals[($number\
    \ - $roman_numerals_length * $i) % $roman_numerals_length];\n      break;\n  \
    \  }\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp965zdnna.php:31\n\
    Stack trace:\n#0 /tmp/tmp965zdnna.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp965zdnna.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpbzjrfi1u.php:15\n\
    Stack trace:\n#0 /tmp/tmpbzjrfi1u.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpbzjrfi1u.php(25):\
    \ candidate(19)\n#2 /tmp/tmpbzjrfi1u.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpbzjrfi1u.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        100  => 'M',\n  \
    \      500  => 'D',\n        1000 => 'C',\n        2000 => 'L',\n        3000\
    \  => 'X',\n        5000  => 'V',\n        10000 => 'I',\n        20000  => 'N',\n\
    \        50000  => 'X',\n        100000  => 'C',\n        200000  => 'D',\n  \
    \      500000  => 'C',\n        1000000 => 'L',\n        2000000 => 'X',\n   \
    \     5000000 => 'C',\n        10000000  => 'L',\n        20000000  => 'X',\n\
    \        50000000  => 'C',\n        100000000 => 'L',\n        200000000  => 'X',\n\
    \        500000000  => 'C',\n        1000000000  => 'L',\n        2000000000 \
    \ => 'X',\n        5000000000  => 'C',\n        10000000000  => 'L',\n       \
    \ 20000000000  => 'X',\n        50000000000  => 'C',\n        100000000000  =>\
    \ 'L',\n        200000000000  => 'X',\n        500000000000  => 'C',\n       \
    \ 1000000000000 => 'L',\n        2000000000000  => 'X',\n        5000000000000\
    \  => 'C',\n        10000000000000  => 'L',\n        20000000000000  => 'X',\n\
    \        50000000000000  => 'C',\n        100000000000000  => 'L',\n        200000000000000\
    \  => 'X',\n        500000000000000  => 'C',\n        1000000000000000  => 'L',\n\
    \        2000000000000000  => 'X',\n        5000000000000000  => 'C',\n      \
    \  1000000000000000000  => 'L',\n        20000000000000000  => 'X',\n        50000000000000000\
    \  => 'C',\n    );\n\n    $roman_numerals_length = count($roman_numerals);\n \
    \   $roman_numerals_length = min($roman_numerals_length, $number);\n\n    for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n        $roman .= $roman_numerals[$number%$roman_numerals_length];\n\
    \        $number = floor($number/$roman_numerals_length);\n    }\n\n    return\
    \ strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\n\
    Warning: Undefined array key 1 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning:\
    \ Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined array key\
    \ 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined array key 0 in /tmp/tmp1aqyrfou.php\
    \ on line 66\n\nWarning: Undefined array key 0 in /tmp/tmp1aqyrfou.php on line\
    \ 66\n\nWarning: Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\n\
    Warning: Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning:\
    \ Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined array key\
    \ 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined array key 0 in /tmp/tmp1aqyrfou.php\
    \ on line 66\n\nWarning: Undefined array key 0 in /tmp/tmp1aqyrfou.php on line\
    \ 66\n\nWarning: Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\n\
    Warning: Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning:\
    \ Undefined array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmp1aqyrfou.php on line 66\n\nWarning: Undefined array key\
    \ 0 in /tmp/tmp1aqyrfou.php on line 66\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1aqyrfou.php:78\nStack trace:\n#0 /tmp/tmp1aqyrfou.php(94):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1aqyrfou.php on line 78\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[$number % 1000];\n    $number /= 1000;\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxe4ze5h7.php:29\n\
    Stack trace:\n#0 /tmp/tmpxe4ze5h7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxe4ze5h7.php\
    \ on line 29\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = $num / 10;\n    if ($num == 0) {\n      break;\n    }\n  \
    \  $roman .= $remainders[$remainder];\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmpt6jvz19i.php
    on line 21


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpt6jvz19i.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmpt6jvz19i.php
    on line 21


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpt6jvz19i.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmpt6jvz19i.php
    on line 21


    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpt6jvz19i.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmpt6jvz19i.php
    on line 21


    Deprecated: Implicit conversion from float 0.0019 to int loses precision in /tmp/tmpt6jvz19i.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmpt6jvz19i.php
    on line 21


    Deprecated: Implicit conversion from float 0.00019 to int loses precision in /tmp/tmpt6jvz19i.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmpt6jvz19i.php
    on line 21


    Deprecated: Implicit conversion from float 1.9E-5 to int loses precision in /tmp/tmpt6jvz19i.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Warning: Trying to access array offset on value of type null in /tmp/tmpt6jvz19i.php
    on line 21


    Deprecated: Implicit conversion from float 1.9E-6 to int loses precision in /tmp/tmpt6jvz19i.php
    on line 16


    Warning: Undefined variable $remainders in /tmp/tmpt6jvz19i.php on line 21


    Wa'
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = ($number\
    \ % 10) == 0 ?\n      chr($i + 96) : chr($i + 9) + $roman;\n    $number = floor($number\
    \ / 10);\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string +\
    \ string in /tmp/tmpoyp3vqy1.php:16\nStack trace:\n#0 /tmp/tmpoyp3vqy1.php(23):\
    \ int_to_mini_roman(19)\n#1 /tmp/tmpoyp3vqy1.php(27): candidate(19)\n#2 /tmp/tmpoyp3vqy1.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpoyp3vqy1.php on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM',\
    \ 'MMMMMMMMMMM',\n        1000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM',\
    \ 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM', 'MMMMMMMMMMM',\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM',\
    \ 'MMMMMMMMMMM',\n        1000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM',\
    \ 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM', 'MMMMMMMMMMM',\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM',\
    \ 'MMMMMMMMMMM',\n        1000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM',\
    \ 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM', 'MMMMMMMMMMM',\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM',\
    \ 'MMMMMMMMMMM',\n        1000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM',\
    \ 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM', 'MMMMMMMMMMM',\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM',\
    \ 'MMMMMMMMMMM',\n        1000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM',\
    \ 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM', 'MMMMMMMMMMM',\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM',\
    \ 'MMMMMMMMMMM',\n        1000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM',\
    \ 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM', 'MMMMMMMMMMM',\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM',\
    \ 'MMMMMMMMMMM',\n        1000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM',\
    \ 'MMMMMMMM', 'MMMMMMMMM', 'MMMMMMMMMM', '\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "", expecting ")" in /tmp/tmpfn4aef4b.php
    on line 28

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numeral_length = strlen($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numeral_length; $i++) {\n    $roman .= $roman_numerals[$number%$roman_numeral_length];\n\
    \    $number = floor($number/$roman_numeral_length);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: strlen(): Argument #1 ($str) must be\
    \ of type string, array given in /tmp/tmp7nd7ank7.php:15\nStack trace:\n#0 /tmp/tmp7nd7ank7.php(24):\
    \ int_to_mini_roman(19)\n#1 /tmp/tmp7nd7ank7.php(28): candidate(19)\n#2 /tmp/tmp7nd7ank7.php(44):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7nd7ank7.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  $roman_numerals_length = count($roman_numerals);\n\
    \  for ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length + $i) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0ujrq2h.php:30\n\
    Stack trace:\n#0 /tmp/tmpt0ujrq2h.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt0ujrq2h.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => '',\n    5 => 'i',\n\
    \    10 => 'ii',\n    20 => 'iii',\n    40 => 'iv',\n    80 => 'v',\n    100 =>\
    \ 'vi',\n    200 => 'vii',\n    400 => 'viii',\n    800 => 'ix',\n    1000 =>\
    \ 'x',\n  );\n  foreach ($roman_numerals as $roman => $numeral) {\n    if ($number\
    \ >= $roman) {\n      $roman_numerals[$roman] = $numeral;\n      break;\n    }\n\
    \  }\n  foreach ($roman_numerals as $roman => $numeral) {\n    $roman_numerals[$roman]\
    \ = $numeral.$roman;\n  }\n  foreach ($roman_numerals as $roman => $numeral) {\n\
    \    $roman .= $numeral;\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwqb3_v6.php:47\n\
    Stack trace:\n#0 /tmp/tmpwwqb3_v6.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwwqb3_v6.php\
    \ on line 47\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman_numeral_to_alpha($num\
    \ % 1000);\n    $num = (int) ($num / 1000);\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral_to_alpha()\
    \ in /tmp/tmpdbhg6059.php:16\nStack trace:\n#0 /tmp/tmpdbhg6059.php(23): int_to_mini_roman(19)\n\
    #1 /tmp/tmpdbhg6059.php(27): candidate(19)\n#2 /tmp/tmpdbhg6059.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdbhg6059.php on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    40 => 'c',\n    100 => 'l',\n    1000 => 'd',\n    10000\
    \ => 'c',\n    100000 => 'l',\n    1000000 => 'x',\n    10000000 => 'd',\n   \
    \ 100000000 => 'c',\n    1000000000 => 'l',\n    10000000000 => 'x',\n    100000000000\
    \ => 'd',\n    1000000000000 => 'c',\n    10000000000000 => 'l',\n    100000000000000\
    \ => 'x',\n    1000000000000000 => 'd',\n    10000000000000000 => 'c',\n    100000000000000000\
    \ => 'l',\n    1000000000000000000 => 'x',\n    10000000000000000000 => 'd',\n\
    \    100000000000000000000 => 'c',\n    1000000000000000000000 => 'l',\n    10000000000000000000000\
    \ => 'x',\n    100000000000000000000000 => 'd',\n    1000000000000000000000000\
    \ => 'c',\n    10000000000000000000000000 => 'l',\n    100000000000000000000000000\
    \ => 'x',\n    1000000000000000000000000000 => 'd',\n    10000000000000000000000000000\
    \ => 'c',\n    100000000000000000000000000000 => 'l',\n    1000000000000000000000000000000\
    \ => 'x',\n    10000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000\
    \ => 'c',\n    1000000000000000000000000000000000 => 'l',\n    10000000000000000000000000000000000\
    \ => 'x',\n    100000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000\
    \ => 'c',\n    10000000000000000000000000000000000000 => 'l',\n    100000000000000000000000000000000000000\
    \ => 'x',\n    1000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000\
    \ => 'c',\n    100000000000000000000000000000000000000000 => 'l',\n    1000000000000000000000000000000000000000000\
    \ => 'x',\n    10000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000\
    \ => 'c',\n    1000000000000000000000000000000000000000000000 => 'l',\n    10000000000000000000000000000000000000000000000\
    \ => 'x',\n    100000000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000000\
    \ => 'c',\n    10000000000000000000000000000000000000000000000000 => 'l',\n  \
    \  100000000000000000000000000000000000000000000000000 => 'x',\n    1000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000000000 => 'c',\n\
    \    100000000000000000000000000000000000000000000000000000 => 'l',\n    1000000000000000000000000000000000000000000000000000000\
    \ => 'x',\n    10000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    100000000000000000000000000000000000000000000000000000000 => 'c',\n    100000000000000000000000000000000000000000000000000000000\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpfydecrc5.php
    on line 75

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = $num / 10;\n    if ($remainder == 0) {\n      $roman .= $remainder;\n\
    \      break;\n    }\n    $roman .= $remainder . ' ';\n  }\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.9 to int loses precision\
    \ in /tmp/tmprjlpuabm.php on line 16\n\nDeprecated: Implicit conversion from float\
    \ 0.19 to int loses precision in /tmp/tmprjlpuabm.php on line 16\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprjlpuabm.php:32\nStack trace:\n\
    #0 /tmp/tmprjlpuabm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprjlpuabm.php\
    \ on line 32\n"
  timestamp: 1659824751
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'cm',\n    100000 => 'd',\n    1000000 => 'd',\n    10000000\
    \ => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'm',\n    10000000000 =>\
    \ 'm',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n    10000000000000\
    \ => 'cm',\n    100000000000000 => 'cm',\n    1000000000000000 => 'm',\n    10000000000000000\
    \ => 'm',\n    100000000000000000 => 'd',\n    1000000000000000000 => 'd',\n \
    \   10000000000000000000 => 'cm',\n    100000000000000000000 => 'cm',\n    1000000000000000000000\
    \ => 'm',\n    10000000000000000000000 => 'm',\n    100000000000000000000000 =>\
    \ 'd',\n    1000000000000000000000000 => 'd',\n    10000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000 => 'cm',\n    1000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000 => 'm',\n    100000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000\
    \ => 'cm',\n    100000000000000000000000000000000000000000000 => 'cm',\n    1000000000000000000000000000000000000000000000\
    \ => 'm',\n    10000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000 => 'd',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000\
    \ => 'cm',\n    1000000000000000000000000000000000000000000000000000 => 'm',\n\
    \    10000000000000000000000000000000000000000000000000000 => 'm',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'cm',\n    100000000000000000000000000000000000000000000000000000000\
    \ => 'cm\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "cm" in /tmp/tmp7gn7icds.php
    on line 74

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman\
    \ .= $roman_numerals[$i];\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 10 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Warning: Undefined array key 11 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning:\
    \ Undefined array key 12 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined\
    \ array key 13 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array\
    \ key 14 in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 15\
    \ in /tmp/tmp5qhikbe0.php on line 16\n\nWarning: Undefined array key 16 in /tmp/tmp5qhikbe0.php\
    \ on line 16\n\nWarning: Undefined array key 17 in /tmp/tmp5qhikbe0.php on line\
    \ 16\n\nWarning: Undefined array key 18 in /tmp/tmp5qhikbe0.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp5qhikbe0.php:26\nStack\
    \ trace:\n#0 /tmp/tmp5qhikbe0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5qhikbe0.php\
    \ on line 26\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_nums = array(\n        1000, 'M', 'MM', 'MMM',\n\
    \        100, 'D', 'DD', 'DDD',\n        10, 'C', 'XC', 'XL',\n        5, 'L',\
    \ 'LX', 'LXX',\n        1, 'X', 'XX', 'XXX'\n    );\n    foreach ($roman_nums\
    \ as $roman => $num) {\n        if ($number >= $num) {\n            $roman_num\
    \ = $number / $num;\n            $roman .= $roman_num * $roman;\n            $number\
    \ -= $roman_num * $num;\n        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5l1w4me7.php:36\n\
    Stack trace:\n#0 /tmp/tmp5l1w4me7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5l1w4me7.php\
    \ on line 36\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpl4sqilbh.php:15\nStack trace:\n#0 /tmp/tmpl4sqilbh.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpl4sqilbh.php(26): candidate(19)\n#2 /tmp/tmpl4sqilbh.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpl4sqilbh.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num = (int) ($num / 10);\n  }\n  return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmprg8juo3x.php:16\n\
    Stack trace:\n#0 /tmp/tmprg8juo3x.php(23): int_to_mini_roman(19)\n#1 /tmp/tmprg8juo3x.php(27):\
    \ candidate(19)\n#2 /tmp/tmprg8juo3x.php(43): test()\n#3 {main}\n  thrown in /tmp/tmprg8juo3x.php\
    \ on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[$number];\n  return strtolower($roman);\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmphutu_7jm.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphutu_7jm.php:30\nStack\
    \ trace:\n#0 /tmp/tmphutu_7jm.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphutu_7jm.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        100   => 'M',\n \
    \       500   => 'D',\n        1000  => 'C',\n        5000  => 'C',\n        10000\
    \ => 'C',\n        50000 => 'C',\n        100000 => 'C',\n        500000 => 'C',\n\
    \        1000000 => 'M',\n        5000000 => 'D',\n        10000000 => 'D',\n\
    \        50000000 => 'D',\n        100000000 => 'D',\n        500000000 => 'D',\n\
    \        1000000000 => 'D',\n        5000000000 => 'D',\n        10000000000 =>\
    \ 'D',\n        50000000000 => 'D',\n        100000000000 => 'D',\n        500000000000\
    \ => 'D',\n        1000000000000 => 'D',\n        5000000000000 => 'D',\n    \
    \    10000000000000 => 'D',\n        50000000000000 => 'D',\n        100000000000000\
    \ => 'D',\n        500000000000000 => 'D',\n        1000000000000000 => 'D',\n\
    \        5000000000000000 => 'D',\n        1000000000000000000 => 'D',\n     \
    \   50000000000000000 => 'D',\n        10000000000000000000 => 'D',\n        500000000000000000\
    \ => 'D',\n        100000000000000000000 => 'D',\n        50000000000000000000\
    \ => 'D',\n        1000000000000000000000 => 'D',\n        500000000000000000000\
    \ => 'D',\n        10000000000000000000000 => 'D',\n        50000000000000000000000\
    \ => 'D',\n        100000000000000000000000 => 'D',\n        500000000000000000000000\
    \ => 'D',\n        1000000000000000000000000 => 'D',\n        5000000000000000000000000\
    \ => 'D',\n        10000000000000000000000000 => 'D',\n        50000000000000000000000000\
    \ => 'D',\n        100000000000000000000000000 => 'D',\n        500000000000000000000000000\
    \ => 'D',\n        1000000000000000000000000000 => 'D',\n        5000000000000000000000000000\
    \ => 'D',\n        10000000000000000000000000000 => 'D',\n        50000000000000000000000000000\
    \ => 'D',\n        100000000000000000000000000000 => 'D',\n        500000000000000000000000000000\
    \ => 'D',\n        1000000000000000000000000000000 => 'D',\n        5000000000000000000000000000000\
    \ => 'D',\n        10000000000000000000000000000000 => 'D',\n        50000000000000000000000000000000\
    \ => 'D',\n        100000000000000000000000000000000 => 'D',\n        500000000000000000000000000000000\
    \ => 'D',\n        1000000000000000000000000000000000 => 'D',\n        5000000000000000000000000000000000\
    \ => 'D',\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpa0z2lr59.php on line 75

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array(\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm',\n    10000 => 'cm',\n    100000 => 'd',\n    1000000 => 'd',\n    10000000\
    \ => 'cm',\n    100000000 => 'cm',\n    1000000000 => 'cm',\n    10000000000 =>\
    \ 'd',\n    100000000000 => 'd',\n    1000000000000 => 'd',\n    10000000000000\
    \ => 'd',\n    100000000000000 => 'd',\n    1000000000000000 => 'd',\n    10000000000000000\
    \ => 'd',\n    100000000000000000 => 'd',\n    1000000000000000000 => 'd',\n \
    \   10000000000000000000 => 'd',\n    100000000000000000000 => 'd',\n    1000000000000000000000\
    \ => 'd',\n    10000000000000000000000 => 'd',\n    100000000000000000000000 =>\
    \ 'd',\n    1000000000000000000000000 => 'd',\n    10000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000 => 'd',\n    1000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000 => 'd',\n    100000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000 => 'd',\n    10000000000000000000000000000000000000000000\
    \ => 'd',\n    100000000000000000000000000000000000000000000 => 'd',\n    1000000000000000000000000000000000000000000000\
    \ => 'd',\n    10000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000 => 'd',\n   \
    \ 10000000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    10000000000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000000000\
    \ => 'd',\n    1000000000000000000000000000000000000000000000000000000 => 'd',\n\
    \    10000000000000000000000000000000000000000000000000000000 => 'd',\n    100000000000000000000000000000000000000000000000000000000\
    \ => '\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmpevi87cd1.php
    on line 74

    '
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length - $i) {\n      $roman .= $roman_numerals[$roman_numerals_length\
    \ - $i - 1];\n      break;\n    }\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64wdxytt.php:31\n\
    Stack trace:\n#0 /tmp/tmp64wdxytt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp64wdxytt.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return substr($roman, 0, $number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpa01f1wf9.php:15\n\
    Stack trace:\n#0 /tmp/tmpa01f1wf9.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpa01f1wf9.php(25):\
    \ candidate(19)\n#2 /tmp/tmpa01f1wf9.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpa01f1wf9.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num = ($num / 10);\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpjuabfd3j.php:16\n\
    Stack trace:\n#0 /tmp/tmpjuabfd3j.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpjuabfd3j.php(27):\
    \ candidate(19)\n#2 /tmp/tmpjuabfd3j.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpjuabfd3j.php\
    \ on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpdbzfwbnf.php:15\n\
    Stack trace:\n#0 /tmp/tmpdbzfwbnf.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpdbzfwbnf.php(25):\
    \ candidate(19)\n#2 /tmp/tmpdbzfwbnf.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpdbzfwbnf.php\
    \ on line 15\n"
  timestamp: 1659824751
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vy82scz.php:26\n\
    Stack trace:\n#0 /tmp/tmp5vy82scz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5vy82scz.php\
    \ on line 26\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        1000, 'M', 'MM',\
    \ 'MMM', 'MMMM', 'MMMMM', 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n        1000000, 'L',\
    \ 'LL', 'LLL', 'LLLL', 'LLLLL', 'LLLLLL', 'LLLLLLL', 'LLLLLLLL',\n        1000000000,\
    \ 'X', 'XX', 'XXX', 'XXXX', 'XXXXX', 'XXXXXX', 'XXXXXXX', 'XXXXXXXX',\n      \
    \  1000000000000, 'C', 'CC', 'CCC', 'CCCC', 'CCCCC', 'CCCCCC', 'CCCCCCC', 'CCCCCCCC',\n\
    \        1000000000000000, 'D', 'DD', 'DDD', 'DDDD', 'DDDDD', 'DDDDDD', 'DDDDDDD',\
    \ 'DDDDDDDD',\n        1000000000000000000, 'M', 'MM', 'MMM', 'MMMM', 'MMMMM',\
    \ 'MMMMMM', 'MMMMMMM', 'MMMMMMMM',\n    );\n    $roman_numerals_length = count($roman_numerals);\n\
    \    $roman_numerals_length = min($roman_numerals_length, $number);\n    $roman_numerals_length\
    \ = max($roman_numerals_length, 1);\n    for ($i = 0; $i < $roman_numerals_length;\
    \ $i++) {\n        $roman .= $roman_numerals[$number % $roman_numerals_length];\n\
    \        $number /= $roman_numerals_length;\n    }\n    return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.05263157894736842 to int loses precision
    in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 0.002770083102493075 to int loses precision
    in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 0.0001457938474996355 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 7.673360394717659E-6 to int loses precision
    in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 4.038610734061926E-7 to int loses precision
    in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 2.1255845968746978E-8 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 1.1187287351972093E-9 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 5.888045974722154E-11 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 3.0989715656432392E-12 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 1.6310376661280207E-13 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 8.584408769094846E-15 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 4.518109878470972E-16 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 2.377952567616301E-17 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 1.251553982955948E-18 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 6.587126226083937E-20 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 3.466908540044178E-21 to int loses
    precision in /tmp/tmp4u9lve3p.php on line 26


    Deprecated: Implicit conversion from float 1.8246887052864093E-22 '
  timestamp: 1659824751
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = ($number\
    \ % $i) + $roman;\n    $number = floor($number / $i);\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpe7nak6_h.php:15\nStack trace:\n#0 /tmp/tmpe7nak6_h.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpe7nak6_h.php(26): candidate(19)\n#2 /tmp/tmpe7nak6_h.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe7nak6_h.php on line 15\n"
  timestamp: 1659824751
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 0; $i < $number; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpot68070d.php:15\n\
    Stack trace:\n#0 /tmp/tmpot68070d.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpot68070d.php(25):\
    \ candidate(19)\n#2 /tmp/tmpot68070d.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpot68070d.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while ($num > 0) {\n    $roman .= roman($num\
    \ % 10);\n    $num /= 10;\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpcyp0stam.php:16\n\
    Stack trace:\n#0 /tmp/tmpcyp0stam.php(23): int_to_mini_roman(19)\n#1 /tmp/tmpcyp0stam.php(27):\
    \ candidate(19)\n#2 /tmp/tmpcyp0stam.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpcyp0stam.php\
    \ on line 16\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('', 'I', 'II', 'III', 'IV', 'V',\
    \ 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII',\
    \ 'XVIII', 'XIX');\n  $roman_numerals_length = count($roman_numerals);\n  for\
    \ ($i = 0; $i < $roman_numerals_length; $i++) {\n    $roman .= $roman_numerals[$i];\n\
    \    if ($number >= $roman_numerals_length - $i) {\n      break;\n    }\n    $number\
    \ -= $roman_numerals_length - $i;\n  }\n  return strtolower($roman);\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5_0_sse.php:31\n\
    Stack trace:\n#0 /tmp/tmpm5_0_sse.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpm5_0_sse.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    if ($num < 1) {\n\
    \      break;\n    }\n    $num *= 10;\n    $roman .= roman_numeral($num);\n  }\n\
    \  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpwiyyzhtm.php:20\nStack trace:\n#0 /tmp/tmpwiyyzhtm.php(26): int_to_mini_roman(19)\n\
    #1 /tmp/tmpwiyyzhtm.php(30): candidate(19)\n#2 /tmp/tmpwiyyzhtm.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwiyyzhtm.php on line 20\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / 10);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpwdd0h_jw.php:15\n\
    Stack trace:\n#0 /tmp/tmpwdd0h_jw.php(22): int_to_mini_roman(19)\n#1 /tmp/tmpwdd0h_jw.php(26):\
    \ candidate(19)\n#2 /tmp/tmpwdd0h_jw.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpwdd0h_jw.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i < $number; $i++) {\n    $roman .= roman_numeral($i);\n\
    \  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpnwd3t9ly.php:15\nStack trace:\n#0 /tmp/tmpnwd3t9ly.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpnwd3t9ly.php(25): candidate(19)\n#2 /tmp/tmpnwd3t9ly.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnwd3t9ly.php on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ '' : $romans[$remainder];\n    if ($num == 0) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $romans in /tmp/tmpt5aptk0s.php on line 18\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmpt5aptk0s.php\
    \ on line 18\n\nWarning: Undefined variable $romans in /tmp/tmpt5aptk0s.php on\
    \ line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpt5aptk0s.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5aptk0s.php:31\n\
    Stack trace:\n#0 /tmp/tmpt5aptk0s.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpt5aptk0s.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($number);\n\
    \    $number = floor($number / $i);\n  }\n  return strtolower($roman);\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmp91z6ates.php:15\n\
    Stack trace:\n#0 /tmp/tmp91z6ates.php(22): int_to_mini_roman(19)\n#1 /tmp/tmp91z6ates.php(26):\
    \ candidate(19)\n#2 /tmp/tmp91z6ates.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp91z6ates.php\
    \ on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $roman_numerals = array('M' => 1000, 'CM' => 900, 'D' =>\
    \ 500, 'CD' => 400,\n    'C' => 100, 'XC' => 90, 'L' => 50, 'XL' => 40, 'X' =>\
    \ 10, 'IX' => 9,\n    'V' => 5, 'IV' => 4, 'I' => 1);\n  while ($number >= 1000)\
    \ {\n    $roman .= $roman_numerals[floor($number / 1000)];\n    $number %= 1000;\n\
    \  }\n  $roman .= $roman_numerals[floor($number)];\n  return strtolower($roman);\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 19 in /tmp/tmpgj0ycd90.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgj0ycd90.php:30\nStack\
    \ trace:\n#0 /tmp/tmpgj0ycd90.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgj0ycd90.php\
    \ on line 30\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman($i);\n\
    \  }\n  return substr($roman, 0, $number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpa01f1wf9.php:15\n\
    Stack trace:\n#0 /tmp/tmpa01f1wf9.php(21): int_to_mini_roman(19)\n#1 /tmp/tmpa01f1wf9.php(25):\
    \ candidate(19)\n#2 /tmp/tmpa01f1wf9.php(41): test()\n#3 {main}\n  thrown in /tmp/tmpa01f1wf9.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $num = $number;\n  while (true) {\n    $remainder = $num\
    \ % 10;\n    $num = ($num - $remainder) / 10;\n    $roman .= $remainder == 0 ?\
    \ $num : $romans[$remainder];\n    if ($num == 0) {\n      break;\n    }\n  }\n\
    \  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $romans in /tmp/tmpzsznclug.php on line 18\n\
    \nWarning: Trying to access array offset on value of type null in /tmp/tmpzsznclug.php\
    \ on line 18\n\nWarning: Undefined variable $romans in /tmp/tmpzsznclug.php on\
    \ line 18\n\nWarning: Trying to access array offset on value of type null in /tmp/tmpzsznclug.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsznclug.php:31\n\
    Stack trace:\n#0 /tmp/tmpzsznclug.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzsznclug.php\
    \ on line 31\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman = $roman .\
    \ roman($number);\n    $number = floor($number / $i);\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman() in /tmp/tmpio7m0j2m.php:15\n\
    Stack trace:\n#0 /tmp/tmpio7m0j2m.php(22): int_to_mini_roman(19)\n#1 /tmp/tmpio7m0j2m.php(26):\
    \ candidate(19)\n#2 /tmp/tmpio7m0j2m.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpio7m0j2m.php\
    \ on line 15\n"
  timestamp: 1659824750
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral_to_roman($number);\n\
    \    $number = floor($number / 10);\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral_to_roman()\
    \ in /tmp/tmpb9on00n3.php:15\nStack trace:\n#0 /tmp/tmpb9on00n3.php(22): int_to_mini_roman(19)\n\
    #1 /tmp/tmpb9on00n3.php(26): candidate(19)\n#2 /tmp/tmpb9on00n3.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpb9on00n3.php on line 15\n"
  timestamp: 1659824751
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n\
    // \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  for ($i = 1; $i <= 1000; $i++) {\n    $roman .= roman_numeral($number,\
    \ $i);\n  }\n  return strtolower($roman);\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function roman_numeral()\
    \ in /tmp/tmpd3tc2lzl.php:15\nStack trace:\n#0 /tmp/tmpd3tc2lzl.php(21): int_to_mini_roman(19)\n\
    #1 /tmp/tmpd3tc2lzl.php(25): candidate(19)\n#2 /tmp/tmpd3tc2lzl.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd3tc2lzl.php on line 15\n"
  timestamp: 1659731120
