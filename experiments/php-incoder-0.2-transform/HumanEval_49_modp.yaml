name: HumanEval_49_modp
language: php
prompt: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n\
  // 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
  // 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n"
tests: "function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if\
    \ ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return $p;\n\
    \  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n\
    \  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n  return $p;\n}\n",
  "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ if ($n < 0) {\n    $n = ($p / abs($n)) % $n;\n  }\n  return $n;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return $n % $p;\n}\n", "  $n = $p - $n * floor($n / $p);\n\
    \  if ($n % $p == 0) {\n    return $n;\n  }\n  return $n % $p;\n}\n", "    return\
    \ ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n\
    }\n", "  $n = $n & 0xFFFFFFFF;\n  $n = ($n >> 32) & 0xFFFFFFFF;\n  $n = ($n >>\
    \ 16) & 0xFFFFFFFF;\n  $n = ($n >> 8) & 0xFFFFFFFF;\n  $n = $n & 0xFFFFFFFF;\n\
    \  $n = ($n >> 32) & 0xFFFFFFFF;\n  $n = ($n >> 16) & 0xFFFFFFFF;\n  $n = ($n\
    \ >> 8) & 0xFFFFFFFF;\n  $n = $n & 0xFFFFFFFF;\n  $n = ($n >> 32) & 0xFFFFFFFF;\n\
    \  $n = ($n >> 16) & 0xFFFFFFFF;\n  $n = ($n >> 8) & 0xFFFFFFFF;\n  $n = $n &\
    \ 0xFFFFFFFF;\n  $n = ($n >> 32) & 0xFFFFFFFF;\n  $n = ($n >> 16) & 0xFFFFFFFF;\n\
    \  $n = ($n >> 8) & 0xFFFFFFFF;\n  $n = $n & 0xFFFFFFFF;\n  return ($n % $p);\n\
    }", "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <\
    \ 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n  if ($p < 0) {\n    return $n % $p;\n\
    \  }\n  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n %\
    \ $p;\n}\n", "    return ($n % $p) + $p;\n}\n", "  $n = (int) $n;\n  $p = (int)\
    \ $p;\n  if ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n   \
    \ return $p;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n \
    \   return $p;\n  }\n  if ($p < $n) {\n    return $n;\n  }\n  $r = $n % $p;\n\
    \  if ($r == 0) {\n    return $p;\n  }\n  return $p;\n}\n", "  return $n % $p;\n\
    }\n", "  return $n % $p;\n}\n", "  $n = intval($n);\n  $p = intval($p);\n  if\
    \ ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n  if ($p < 0) {\n    $p = -$p;\n\
    \  }\n  if ($n == 0) {\n    return $p;\n  }\n  if ($p == 0) {\n    return $n;\n\
    \  }\n  if ($n == $p) {\n    return 0;\n  }\n  if ($n > $p) {\n    return modp($p\
    \ - $n, $p);\n  }\n  return modp($p + $n, $p);\n}\n", "  return $n % $p;\n}\n",
  "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  $n = (int) $n;\n\
    \  $p = (int) $p;\n  if ($n < 0 || $p < 0) {\n    return null;\n  }\n  if ($p\
    \ === 0) {\n    return 1;\n  }\n  if ($p === 1) {\n    return $n;\n  }\n  if ($p\
    \ === 2) {\n    return $n % 2 ? $n : $n + 1;\n  }\n  if ($p === 3) {\n    return\
    \ $n % 3 ? $n : $n + 3;\n  }\n  if ($p === 4) {\n    return $n % 4 ? $n : $n +\
    \ 4;\n  }\n  if ($p === 5) {\n    return $n % 5 ? $n : $n + 5;\n  }\n  if ($p\
    \ === 6) {\n    return $n % 6 ? $n : $n + 6;\n  }\n  if ($p === 7) {\n    return\
    \ $n % 7 ? $n : $n + 7;\n  }\n  if ($p === 8) {\n    return $n % 8 ? $n : $n +\
    \ 8;\n  }\n  if ($p === 9) {\n    return $n % 9 ? $n : $n + 9;\n  }\n  if ($p\
    \ === 10) {\n    return $n % 10 ? $n : $n + 10;\n  }\n  if ($p === 11) {\n   \
    \ return $n % 11 ? $n : $n + 11;\n  }\n  if ($p === 12) {\n    return $n % 12\
    \ ? $n : $n + 12;\n  }\n  if ($p === 13) {\n    return $n % 13 ? $n : $n + 13;\n\
    \  }\n  if ($p === 14) {\n    return $n % 14 ? $n : $n + 14;\n  }\n  if ($p ===\
    \ 15) {\n    return $n % 15 ? $n : $n + 15;\n  }\n  if ($p === 16) {\n    return\
    \ $n % 16 ? $n : $n + 16;\n  }\n  if ($p === 17) {\n    return $n % 17 ? $n :\
    \ $n + 17;\n  }\n  if ($p === 18) {\n    return $n % 18 ? $n : $n + 18;\n  }\n\
    \  if ($p === 19) {\n    return $n % 19 ? $n : $n + 19;\n  }\n  if ($p === 20)\
    \ {\n    return $n % 20 ? $n : $n + 20;\n  }\n  if ($p === 21) {\n    return $n\
    \ % 21 ? $n : $n + 21;\n  }\n  if ($p === 22) {\n    return $n % 22 ? $n : $n\
    \ + 22;\n  }\n  if ($p === 23) {\n    return $n % 23 ? $n : $n + 23;\n  }\n  if\
    \ ($p === 24) {\n    return $n % 24 ? $n : $n + 24;", "  return ($n % $p) + $p;\n\
    }\n", "  if ($n < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n",
  "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n\
    \    return $n % $p;\n  }\n  if ($p < 0) {\n    return $n % $p;\n  }\n  if ($n\
    \ == 0) {\n    return $p;\n  }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($p\
    \ > $n) {\n    return $n % $p;\n  }\n  if ($p < $n) {\n    return $n % $p;\n \
    \ }\n  return $n;\n}", "  return $n % $p;\n}\n", "  $n = $n & ~0x3FFFFFFF;\n \
    \ $n = ($n & 0x7FFFFFFF) | 0x80000000;\n  $n = ($n & 0x3FFFFFFF) | 0x40000000;\n\
    \  $n = ($n & 0x7FFFFFFF) | 0x80000000;\n  $n = ($n & 0x3FFFFFFF) | 0x40000000;\n\
    \  return ($n >> $p) & $p;\n}", "    return ($n % $p + $p) % $p;\n}\n", "  if\
    \ ($n < 0) {\n    $n = -$n;\n  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n\
    \ == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return $p;\n \
    \ }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n    return modp($n,\
    \ $p);\n  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n  return\
    \ modp($p - $r, $p);\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0\
    \ || $p == 0) {\n    return 0;\n  }\n  if ($n < 0) {\n    return $p % -$n;\n \
    \ }\n  return ($p % $n) + $n;\n}\n", "  return ($n % $p) + $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return\
    \ ($n % $p) + $p;\n}\n", "  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n\
    }\n", "  return $n % $p;\n}\n", "  return ($n % $p + $p) % $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return ($n % $p) + $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p == 0) {\n    return 1;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n\
    \  if ($p == 2) {\n    return $n * $n;\n  }\n  if ($p == 3) {\n    return $n *\
    \ $n * $n;\n  }\n  if ($p == 6) {\n    return $n * $n * $n * $n;\n  }\n  if ($p\
    \ == 7) {\n    return $n * $n * $n * $n * $n;\n  }\n  if ($p == 8) {\n    return\
    \ $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 9) {\n    return $n * $n * $n\
    \ * $n * $n * $n * $n;\n  }\n  if ($p == 10) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n * $n;\n  }\n  if ($p == 11) {\n    return $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n;\n  }\n  if ($p == 12) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 13) {\n    return $n * $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 14) {\n    return\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p ==\
    \ 15) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n;\n  }\n  if ($p == 16) {\n    return $n * $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 17) {\n    return $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if\
    \ ($p == 18) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n;\n  }\n  if ($p == 19) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == ",
  "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \   return ($n % $p + $p) % $p;\n}\n", "  return $n % $p;\n}\n", "  if ($n < 0)\
    \ {\n    return $n % $p;\n  }\n  return $n % $p + $p;\n}\n", "  return $n % $p;\n\
    }\n", "  return ($n % $p) + $p;\n}\n", "    return ($n % $p + $p) % $p;\n}\n",
  "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n\
    \  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n == 0) {\n    return 1;\n \
    \ }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($n == $p) {\n    return 0;\n\
    \  }\n  if ($n > $p) {\n    return modp($n - $p, $p);\n  }\n  return modp($p -\
    \ $n, $p);\n}\n", "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n\
    \  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n  if ($p < 0) {\n    $p =\
    \ -$p;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n  if ($n == 1) {\n    return\
    \ $p;\n  }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($p == 1) {\n    return\
    \ $n;\n  }\n  if ($p == 2) {\n    return $n * $n;\n  }\n  if ($p == 3) {\n   \
    \ return $n * $n * $n;\n  }\n  if ($p == 4) {\n    return $n * $n * $n * $n;\n\
    \  }\n  if ($p == 6) {\n    return $n * $n * $n * $n * $n;\n  }\n  if ($p == 8)\
    \ {\n    return $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 9) {\n    return\
    \ $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 10) {\n    return $n * $n\
    \ * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 11) {\n    return $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 12) {\n    return $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 13) {\n    return\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 14)\
    \ {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n \
    \ }\n  if ($p == 15) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n * $n;\n  }\n  if ($p == 16) {\n    return $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 17)\
    \ {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n;\n  }\n  if ($p == 18) {\n    return $n * $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n * $", "  return $n % $p;\n}\n", "    return\
    \ ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int)\
    \ $p;\n  if ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n   \
    \ return $p;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n \
    \   return modp($n, $p);\n  }\n  $r = $n % $p;\n  return ($r == 0) ? $p : $p;\n\
    }\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n\
    }\n", "  return $n % $p;\n}\n", "    return ($n % $p) + $p;\n}\n", "  return ($n\
    \ % $p + $p) % $p;\n}\n", "  return $n % $p;\n}\n", "  return ($n % $p + $p) %\
    \ $p;\n}\n", "  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return ($n % $p + $p) % $p;\n}\n", "  return $n % $p;\n}\n",
  "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ if ($n < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n", " \
    \ return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n\
    }\n", "  if ($n < 0) {\n    $n = -$n;\n  }\n  if ($p < 0) {\n    $p = -$p;\n \
    \ }\n  if ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return\
    \ 1;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n    return\
    \ modp($n, $p);\n  }\n  $m = (int) ($p / $n);\n  $r = $p % $n;\n  return ($r ==\
    \ 0) ? $m : modp($m, $n);\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n\
    \ == 0 || $p == 0)\n    return 0;\n  if ($n == 1)\n    return $p;\n  if ($p ==\
    \ 1)\n    return $n;\n  if ($p > $n)\n    return $p;\n  if ($p < $n)\n    return\
    \ $n;\n  $r = $n % $p;\n  if ($r == 0)\n    return $p;\n  return $p;\n}\n", " \
    \ $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n    return 0;\n\
    \  }\n  if ($p > $n) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n",
  "  return $n % $p;\n}\n", "  if ($n < 0) {\n    return $n % $p;\n  }\n  return ($n\
    \ % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int)\
    \ $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n  if ($p < 0) {\n \
    \   return $n;\n  }\n  if ($p == 0) {\n    return 0;\n  }\n  if ($p == 1) {\n\
    \    return $n;\n  }\n  if ($p == 2) {\n    return $n % 2 ? $n : $n + 1;\n  }\n\
    \  if ($p % 2 == 0) {\n    return $n % $p ? $n : $n + $p;\n  }\n  return $n %\
    \ $p ? $n % $p : $n;\n}\n", "  return ($n % $p + $p) % $p;\n}\n", "  return ($n\
    \ % $p + $p) % $p;\n}\n", "  if ($n < 0) {\n    return $n % $p;\n  }\n  return\
    \ ($n % $p) + $p;\n}\n", "  $n = $n & 0xFFFFFFFF;\n  $p = ($p & 0xFFFFFFFF) +\
    \ ($p >> 32);\n  $p = ($p & 0xFFFFFFFF) + ($p >> 32);\n  return ($n - ($p & 0xFFFFFFFF))\
    \ & 0xFFFFFFFF;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ $n = $n & $p;\n  $p = ($n >> 16) & 0xffff;\n  $p = ($p << 16) & 0xffff;\n  $p\
    \ = ($p >> 16) & 0xffff;\n  return $p & $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return ($n % $p + $p) %\
    \ $p;\n}\n", "  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n  if ($p ==\
    \ 0) {\n    return 1;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p ==\
    \ 2) {\n    return $n * $n;\n  }\n  if ($p % 2 == 0) {\n    return $n - ($n /\
    \ $p);\n  }\n  return $n - ($n / $p) * modp($n, $p / 2);\n}\n", "  if ($n < 0)\
    \ {\n    $n = -$n;\n  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n === 0)\
    \ {\n    return 1;\n  }\n  if ($p === 0) {\n    return $n;\n  }\n  if ($p ===\
    \ $n) {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n % $p;\n  }\n  return\
    \ ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  if ($n < 0) {\n    $n = $p - ($n * $p);\n  }\n  return\
    \ $n % $p;\n}\n", "  return ($n % $p + $p) % $p;\n}\n", "  return $n % $p;\n}\n",
  "    return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  $n = (int) $n;\n\
    \  $p = (int) $p;\n  if ($p < 1) {\n    return $n;\n  }\n  if ($p > $n) {\n  \
    \  return $n;\n  }\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n \
    \   return 1;\n  }\n  if ($n == $p) {\n    return 1;\n  }\n  if ($n % 2 == 0)\
    \ {\n    return $n - ($n / 2);\n  }\n  $r = $n % $p;\n  return $p - $r;\n}\n",
  "  $n = $n ^ ($n >> 31);\n  $n = ($n & ($p - 1) - 1) * ($p >> 31);\n  return $n;\n\
    }\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n\
    }\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n\
    }\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n\
    }\n", "  return $n % $p;\n}\n", "    return ($n % $p + $p) % $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return $n % $p;\n}\n", "  if ($n < 0) {\n    return -modp($n,\
    \ $p);\n  }\n  if ($p < 0) {\n    return modp($n, -$p);\n  }\n  if ($p === 0)\
    \ {\n    return 1;\n  }\n  if ($p === $n) {\n    return $n;\n  }\n  if ($p ===\
    \ 1) {\n    return $n;\n  }\n  if ($n % $p === 0) {\n    return $p;\n  }\n  return\
    \ modp($n % $p, $p);\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n",
  "  return $n % $p;\n}\n", "  if ($n < 0) {\n    $n = -$n;\n  }\n  if ($p < 0) {\n\
    \    $p = -$p;\n  }\n  if ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n\
    \ == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p\
    \ > $n) {\n    return modp($p - $n, $p);\n  }\n  if ($p < $n) {\n    return modp($n,\
    \ $p);\n  }\n  $m = (int) ($p / $n);\n  $r = $n % $p;\n  return modp($m, $p) +\
    \ $r;\n}\n", "  return ($n % $p) + $p;\n}\n", "  $n = (int) $n;\n  $p = (int)\
    \ $p;\n  if ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n   \
    \ return $p;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n \
    \   return $p;\n  }\n  $r = $n % $p;\n  return ($r == 0) ? $p : $p;\n}\n", " \
    \ $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0)\n    return 0;\n\
    \  if ($n == 1)\n    return $p;\n  if ($p == 1)\n    return $n;\n  if ($p < $n)\n\
    \    return $p;\n  if ($p > $n)\n    return $n;\n  $r = $n % $p;\n  if ($r ==\
    \ 0)\n    return $p;\n  return $n;\n}\n", "  if ($n < 0) {\n    return $n % $p;\n\
    \  }\n  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n %\
    \ $p;\n}\n", "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n \
    \ if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n\
    \  if ($p == 0) {\n    return 1;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n\
    \  if ($p == 2) {\n    return $n % 2 ? $n : $n + 1;\n  }\n  if ($p < $n) {\n \
    \   return $n % $p ? $n % $p : $modp($n, $p);\n  }\n  return $n % $p ? $modp($n,\
    \ $p) : $modp($n, $p);\n}\n</code>\n<|/ a tags=php,modular-arithmetic |>\n<| a\
    \ dscore=1 |>\nI wrote a PHP library for doing modular arithmetic with arbitrary\
    \ bases and arbitrary modulus. It's called ModularArithmetic, and it can be found\
    \ on GitHub.\n<|/ a tags=php,modular-arithmetic |>\n<| a dscore=0 |>\nI wrote\
    \ a PHP library for doing modular arithmetic with arbitrary bases and arbitrary\
    \ modulus. It's called ModularArithmetic, and it can be found on GitHub.\n<|/\
    \ a tags=php,modular-arithmetic |>\n<| c |>\nPlease don't post link-only answers.\
    \ Instead, please summarize the content of the link in your answer.\n<|/ c |>\n\
    <| c |>\nI wrote a PHP library for doing modular arithmetic with arbitrary bases\
    \ and arbitrary modulus. It's called ModularArithmetic, and it can be found on\
    \ GitHub.\n<|/ c |>\n<| c |>\nPlease don't post link-only answers. Instead, please\
    \ summarize the content of the link in your answer.\n<|/ c |>\n<| c |>\nI wrote\
    \ a PHP library for doing modular arithmetic with arbitrary bases and arbitrary\
    \ modulus. It's called ModularArithmetic, and it can be found on GitHub.\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php", "  return ($n % $p) + $p;\n}\n", "  return $n\
    \ % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n \
    \ if ($p == 0) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n\
    \  $m = (int) ($p * log($n) / log($p));\n  return $n % $p;\n}", "  return ($n\
    \ % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n\
    \ = -$n;\n    $p = -$p;\n  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n ==\
    \ 0) {\n    return 1;\n  }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($p >\
    \ $n) {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n;\n  }\n  $m = (int)\
    \ ($n / $p);\n  $r = $n % $p;\n  return ($m == 0) ? ($r) : ($m + modp($r, $p));\n\
    }", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n",
  "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0) {\n\
    \    return 0;\n  }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($n == $p) {\n\
    \    return 1;\n  }\n  if ($n < $p) {\n    return modp($p - $n, $p);\n  }\n  return\
    \ modp($n, $p) % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n",
  "  return ($n % $p + $p) % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n\
    }\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n += $p;\n  }\n\
    \  if ($n >= $p) {\n    return $n;\n  }\n  if ($p < 0) {\n    return $n % $p;\n\
    \  }\n  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0 || $p < 0) {\n    return $n;\n  }\n  if\
    \ ($p > $n) {\n    return $n;\n  }\n  if ($n == 0) {\n    return 0;\n  }\n  if\
    \ ($n == 1) {\n    return 1;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if\
    \ ($p == 2) {\n    return $n * $n;\n  }\n  if ($p == 3) {\n    return $n * $n\
    \ * $n;\n  }\n  if ($p == 4) {\n    return $n * $n * $n * $n;\n  }\n  if ($p ==\
    \ 5) {\n    return $n * $n * $n * $n * $n;\n  }\n  if ($p == 6) {\n    return\
    \ $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 7) {\n    return $n * $n * $n\
    \ * $n * $n * $n * $n;\n  }\n  if ($p == 8) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n * $n;\n  }\n  if ($p == 9) {\n    return $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n;\n  }\n  if ($p == 10) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 11) {\n    return $n * $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 12) {\n    return\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p ==\
    \ 13) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n\
    \  }\n  if ($p == 14) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n;\n  }\n  if ($p == 15) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 16) {\n \
    \   return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n\
    \  }\n  if ($p == 17) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * ",
  "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n\
    \  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  $n = $n & ((1 << $p) - 1);\n  return\
    \ $n;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n\
    \ % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n\
    \ % $p;\n}\n", "  return $n % $p;\n}\n", "  $n = $n & $p;\n  $n = ($n >> 16) &\
    \ 0xffff;\n  $n = ($n >> 8) & 0xffff;\n  $n = ($n >> 4) & 0xffff;\n  $n = $n &\
    \ 0xffff;\n  return $n;\n}\n", "  return ($n % $p + $p) % $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \   return $n % $p;\n}\n", "  return $n % $p;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
