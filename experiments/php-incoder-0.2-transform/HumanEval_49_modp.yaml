name: HumanEval_49_modp
language: php
prompt: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n\
  // 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
  // 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n"
tests: "function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if\
    \ ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return $p;\n\
    \  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n\
    \  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n  return $p;\n}\n",
  "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ if ($n < 0) {\n    $n = ($p / abs($n)) % $n;\n  }\n  return $n;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return $n % $p;\n}\n", "  $n = $p - $n * floor($n / $p);\n\
    \  if ($n % $p == 0) {\n    return $n;\n  }\n  return $n % $p;\n}\n", "    return\
    \ ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", " \
    \ return $n % $p;\n}\n", "  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n\
    }\n", "  $n = $n & 0xFFFFFFFF;\n  $n = ($n >> 32) & 0xFFFFFFFF;\n  $n = ($n >>\
    \ 16) & 0xFFFFFFFF;\n  $n = ($n >> 8) & 0xFFFFFFFF;\n  $n = $n & 0xFFFFFFFF;\n\
    \  $n = ($n >> 32) & 0xFFFFFFFF;\n  $n = ($n >> 16) & 0xFFFFFFFF;\n  $n = ($n\
    \ >> 8) & 0xFFFFFFFF;\n  $n = $n & 0xFFFFFFFF;\n  $n = ($n >> 32) & 0xFFFFFFFF;\n\
    \  $n = ($n >> 16) & 0xFFFFFFFF;\n  $n = ($n >> 8) & 0xFFFFFFFF;\n  $n = $n &\
    \ 0xFFFFFFFF;\n  $n = ($n >> 32) & 0xFFFFFFFF;\n  $n = ($n >> 16) & 0xFFFFFFFF;\n\
    \  $n = ($n >> 8) & 0xFFFFFFFF;\n  $n = $n & 0xFFFFFFFF;\n  return ($n % $p);\n\
    }", "  return $n % $p;\n}\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <\
    \ 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n  if ($p < 0) {\n    return $n % $p;\n\
    \  }\n  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n}\n", "  return $n %\
    \ $p;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
