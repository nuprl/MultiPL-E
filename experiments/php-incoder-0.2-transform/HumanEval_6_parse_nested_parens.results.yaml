language: php
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqtjgzc37.php on line 48

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_level--;\n    $paren_string = $paren_stack[$paren_level];\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    $paren_level++;\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_qk7n_1.php:26\n\
    Stack trace:\n#0 /tmp/tmp2_qk7n_1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2_qk7n_1.php\
    \ on line 26\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $level\
    \ = 0;\n  $opening_paren_level = 0;\n  $opening_paren_char = '';\n  $opening_paren_char_count\
    \ = 0;\n  $opening_paren_char_index = 0;\n  $opening_paren_char_length = 0;\n\
    \  $opening_paren_char_last_index = 0;\n  $opening_paren_char_last_char = '';\n\
    \  $opening_paren_char_last_char_count = 0;\n  $opening_paren_char_last_char_index\
    \ = 0;\n  $opening_paren_char_last_char_length = 0;\n  $opening_paren_char_last_char_last_index\
    \ = 0;\n  $opening_paren_char_last_char_last_char = '';\n  $opening_paren_char_last_char_last_char_count\
    \ = 0;\n  $opening_paren_char_last_char_last_char_index = 0;\n  $opening_paren_char_last_char_last_char_length\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_index = 0;\n  $opening_paren_char_last_char_last_char_last_char\
    \ = '';\n  $opening_paren_char_last_char_last_char_last_char_count = 0;\n  $opening_paren_char_last_char_last_char_last_char_index\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_length = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_index\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char = '';\n\
    \  $opening_paren_char_last_char_last_char_last_char_last_char_count = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_index\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_length =\
    \ 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_index\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char\
    \ = '';\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char_count\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char_index\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char_length\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char_last_index\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char_last_char\
    \ = '';\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char_last_char_count\
    \ = 0;\n  $opening_paren_char_last_char_last_char_last_char_last_char_last_char_last_char_index\
    \ = 0;\n  $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0r5twj4g.php on line 46

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack = array_reverse($paren_stack);\n\
    \  foreach (explode(\" \", $paren_string) as $paren) {\n    if ($paren == \"(\"\
    ) {\n      $paren_level++;\n      $paren_stack[] = array();\n      $paren_stack\
    \ = array_reverse($paren_stack);\n    } elseif ($paren == \")\") {\n      $paren_level--;\n\
    \      $paren_stack = array_reverse($paren_stack);\n    }\n    if ($paren_level\
    \ == 0 && count($paren_stack) > 0) {\n      $paren_array[] = count($paren_stack);\n\
    \    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbh9aybn.php:34\n\
    Stack trace:\n#0 /tmp/tmphbh9aybn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphbh9aybn.php\
    \ on line 34\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = array();\n    $paren_level_max_count_index[0]\
    \ = 0;\n    $paren_level_max_count_index[1] = 1;\n    $paren_level_max_count_index[2]\
    \ = 2;\n    $paren_level_max_count_index[3] = 3;\n    $paren_level_max_count_index[4]\
    \ = 4;\n    $paren_level_max_count_index[5] = 5;\n    $paren_level_max_count_index[6]\
    \ = 6;\n    $paren_level_max_count_index[7] = 7;\n    $paren_level_max_count_index[8]\
    \ = 8;\n    $paren_level_max_count_index[9] = 9;\n    $paren_level_max_count_index[10]\
    \ = 10;\n    $paren_level_max_count_index[11] = 11;\n    $paren_level_max_count_index[12]\
    \ = 12;\n    $paren_level_max_count_index[13] = 13;\n    $paren_level_max_count_index[14]\
    \ = 14;\n    $paren_level_max_count_index[15] = 15;\n    $paren_level_max_count_index[16]\
    \ = 16;\n    $paren_level_max_count_index[17] = 17;\n    $paren_level_max_count_index[18]\
    \ = 18;\n    $paren_level_max_count_index[19] = 19;\n    $paren_level_max_count_index[20]\
    \ = 20;\n    $paren_level_max_count_index[21] = 21;\n    $paren_level_max_count_index[22]\
    \ = 22;\n    $paren_level_max_count_index[23] = 23;\n    $paren_level_max_count_index[24]\
    \ = 24;\n    $paren_level_max_count_index[25] = 25;\n    $paren_level_max_count_index[26]\
    \ = 26;\n    $paren_level_max_count_index[27] = 27;\n    $paren_level_max_count_index[28]\
    \ = 28;\n    $paren_level_max_count_index[29] = 29;\n    $paren_level_max_count_index[30]\
    \ = 30;\n    $paren_level_max_count_index[31] = 31;\n    $paren_level_max_count_index[32]\
    \ = 32;\n    $paren_level_max_count_index[33] = 33;\n    $paren_level_max_count_index[34]\
    \ = 34;\n    $paren_level_max_count_index[35] = 35;\n    $paren_level_max_count_index[36]\
    \ = 36;\n    $paren_level_max_count_index[37] = 37;\n    $paren_level_max_count_index\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxj1c4qxs.php on line 53

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_level--;\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    foreach ($paren_array as $paren_string)\
    \ {\n      if ($paren_string == \"(\") {\n        $paren_level++;\n        $paren_stack[$paren_level]\
    \ = $paren_string;\n      } else if ($paren_string == \")\") {\n        $paren_level--;\n\
    \      }\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe59bgqcf.php:33\n\
    Stack trace:\n#0 /tmp/tmpe59bgqcf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe59bgqcf.php\
    \ on line 33\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = array();\n  $paren_stack[$paren_level + 1] = array();\n\
    \  foreach (explode(\" \", $paren_string) as $char) {\n    if ($char == \"(\"\
    ) {\n      $paren_level++;\n      $paren_stack[$paren_level] = array();\n    \
    \  $paren_stack[$paren_level + 1] = array();\n    } else if ($char == \")\") {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level] = array();\n      $paren_stack[$paren_level\
    \ + 1] = array();\n    } else if ($char == \" \") {\n      $paren_stack[$paren_level][count($paren_stack[$paren_level])]\
    \ = $paren_stack[$paren_level + 1][count($paren_stack[$paren_level + 1]) - 1];\n\
    \      $paren_stack[$paren_level + 1] = array();\n    } else {\n      $paren_stack[$paren_level][count($paren_stack[$paren_level])]\
    \ = $char;\n    }\n  }\n  return $paren_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3m1jsixb.php:36\n\
    Stack trace:\n#0 /tmp/tmp3m1jsixb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3m1jsixb.php\
    \ on line 36\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level--;\n\
    \        $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    }\n    return $paren_array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,parentheses,regex\
    \ |>\n<code>\n$string = \"(()()) ((())) () ((())()())\";\n$parens = preg_match_all('/\\\
    ((.*?)\\)/', $string, $matches);\n$parens = $matches[1];\n$parens = array_count_values($parens);\n\
    arsort($parens);\n$max = $parens[0];\n$maxKeys = array_keys($parens, $max);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n\
    $maxKeys = array_pop($maxKeys);\n$maxKeys = array_pop($maxKeys);\n$maxKey\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq87pnkzq.php on line 19

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_level = array_pop($paren_stack);\n\
    \    $paren_array[] = $paren_level;\n    if ($paren_string == '') {\n      break;\n\
    \    }\n    $paren_stack[$paren_level] = $paren_string;\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp595jgg38.php:29\n\
    Stack trace:\n#0 /tmp/tmp595jgg38.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp595jgg38.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $parens =\
    \ preg_split('/\\s*\\((?=\\()/', $paren_string);\n  $levels = array();\n  $level\
    \ = 0;\n  foreach ($parens as $paren) {\n    if ($paren == '(') {\n      $levels[$level]++;\n\
    \    } else {\n      $levels[$level]--;\n    }\n    $level++;\n  }\n  return $levels;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much! I really appreciate it!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphod6sgru.php on line 22

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level);\n  $paren_stack_string = str_repeat(\")\"\
    , $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n\
    \  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string\
    \ = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n\
    \  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string\
    \ = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n\
    \  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string\
    \ = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n\
    \  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string\
    \ = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n\
    \  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string\
    \ = str_repeat($paren_stack_string, $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n\
    \  $paren_stack_string = str_repeat($paren_stack_string, $paren_level);\n  $\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb14yteb0.php on line 38

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\(/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $paren_string);\n    $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '$1', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppggad559.php on line 33

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count[0]\
    \ = 0;\n  $paren_level_max_count[1] = 0;\n  $paren_level_max_count[2] = 0;\n \
    \ $paren_level_max_count[3] = 0;\n  $paren_level_max_count[4] = 0;\n  $paren_level_max_count[5]\
    \ = 0;\n  $paren_level_max_count[6] = 0;\n  $paren_level_max_count[7] = 0;\n \
    \ $paren_level_max_count[8] = 0;\n  $paren_level_max_count[9] = 0;\n  $paren_level_max_count[10]\
    \ = 0;\n  $paren_level_max_count[11] = 0;\n  $paren_level_max_count[12] = 0;\n\
    \  $paren_level_max_count[13] = 0;\n  $paren_level_max_count[14] = 0;\n  $paren_level_max_count[15]\
    \ = 0;\n  $paren_level_max_count[16] = 0;\n  $paren_level_max_count[17] = 0;\n\
    \  $paren_level_max_count[18] = 0;\n  $paren_level_max_count[19] = 0;\n  $paren_level_max_count[20]\
    \ = 0;\n  $paren_level_max_count[21] = 0;\n  $paren_level_max_count[22] = 0;\n\
    \  $paren_level_max_count[23] = 0;\n  $paren_level_max_count[24] = 0;\n  $paren_level_max_count[25]\
    \ = 0;\n  $paren_level_max_count[26] = 0;\n  $paren_level_max_count[27] = 0;\n\
    \  $paren_level_max_count[28] = 0;\n  $paren_level_max_count[29] = 0;\n  $paren_level_max_count[30]\
    \ = 0;\n  $paren_level_max_count[31] = 0;\n  $paren_level_max_count[32] = 0;\n\
    \  $paren_level_max_count[33] = 0;\n  $paren_level_max_count[34] = 0;\n  $paren_level_max_count[35]\
    \ = 0;\n  $paren_level_max_count[36] = 0;\n  $paren_level_max_count[37] = 0;\n\
    \  $paren_level_max_count[38] = 0;\n  $paren_level_max_count[39] = 0;\n  $paren_level_max_count[40]\
    \ = 0;\n  $paren_level_max_count[41] = 0;\n  $paren_level_max_count[42] = 0;\n\
    \  $paren_level_max_count[43] = 0;\n  $paren_level_max_count[44] = 0;\n  $paren_level_max_count[45]\
    \ = 0;\n  $paren_level_max_count[46] = 0;\n  $paren_level_max_count[47] = 0;\n\
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdabzx_ir.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $level) {\n    if ($level == \"(\") {\n  \
    \    $max_level++;\n    } else if ($level == \")\") {\n      $max_level--;\n \
    \     if ($max_level < 0) {\n        throw new Exception(\"Invalid paren string:\
    \ unexpected closing parenthesis\");\n      }\n    } else {\n      if ($max_level\
    \ < 0) throw new Exception(\"Invalid paren string: unexpected opening parenthesis\"\
    );\n    }\n    $max_level_array[] = $max_level;\n  }\n  return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa1lxrhhk.php:32\n\
    Stack trace:\n#0 /tmp/tmpa1lxrhhk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa1lxrhhk.php\
    \ on line 32\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\((/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\((\\()/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\((\\()/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\((\\()/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\\
    ((\\()/', '(', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\((\\()/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\((\\()/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\((\\()/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\((\\()/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\\
    ((\\()/', '(', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\((\\()/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdvcj8u2t.php on line 36

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_len = count($paren_stack);\n  $paren_stack[$paren_stack_len] =\
    \ $paren_level;\n  $paren_stack[$paren_stack_len - 1]++;\n  while ($paren_level\
    \ > 0) {\n    $paren_level--;\n    $paren_stack[$paren_stack_len] = $paren_level;\n\
    \    $paren_stack[$paren_stack_len - 1]++;\n  }\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\n  $paren_stack[$paren_stack_len\
    \ - 1]++;\n  $paren_stack[$paren_stack_len - 1]++;\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmptoad2mlt.php on line 63

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n  \
    \    $max_level++;\n    }\n    if ($paren == \")\") {\n      $max_level--;\n \
    \   }\n    if ($max_level > $max_level_array[0]) {\n      $max_level_array = $max_level;\n\
    \    }\n  }\n  return $max_level_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp3gks3hwb.php on line 18\n\n\
    Warning: Undefined array key 0 in /tmp/tmp3gks3hwb.php on line 18\n\nWarning:\
    \ Undefined array key 0 in /tmp/tmp3gks3hwb.php on line 18\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmp3gks3hwb.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3gks3hwb.php:30\nStack trace:\n#0 /tmp/tmp3gks3hwb.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3gks3hwb.php on line 30\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        $paren_array[$i]\
    \ = trim($paren_array[$i]);\n        if ($paren_array[$i] == '(') {\n        \
    \    $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n   \
    \     } else if ($paren_array[$i] == ')') {\n            $max_level--;\n     \
    \   }\n    }\n    $max_level_paren_array_length = count($max_level_paren_array);\n\
    \    for ($i = 0; $i < $max_level_paren_array_length; $i++) {\n        if ($max_level_paren_array[$i]\
    \ == 0) {\n            unset($max_level_paren_array[$i]);\n        }\n    }\n\
    \    return $max_level_paren_array;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_3u1rxc.php:35\n\
    Stack trace:\n#0 /tmp/tmpc_3u1rxc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc_3u1rxc.php\
    \ on line 35\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index2 = 0;\n\
    \    $paren_level_max_count_index3 = 0;\n    $paren_level_max_count_index4 = 0;\n\
    \    $paren_level_max_count_index5 = 0;\n    $paren_level_max_count_index6 = 0;\n\
    \    $paren_level_max_count_index7 = 0;\n    $paren_level_max_count_index8 = 0;\n\
    \    $paren_level_max_count_index9 = 0;\n    $paren_level_max_count_index10 =\
    \ 0;\n    $paren_level_max_count_index11 = 0;\n    $paren_level_max_count_index12\
    \ = 0;\n    $paren_level_max_count_index13 = 0;\n    $paren_level_max_count_index14\
    \ = 0;\n    $paren_level_max_count_index15 = 0;\n    $paren_level_max_count_index16\
    \ = 0;\n    $paren_level_max_count_index17 = 0;\n    $paren_level_max_count_index18\
    \ = 0;\n    $paren_level_max_count_index19 = 0;\n    $paren_level_max_count_index20\
    \ = 0;\n    $paren_level_max_count_index21 = 0;\n    $paren_level_max_count_index22\
    \ = 0;\n    $paren_level_max_count_index23 = 0;\n    $paren_level_max_count_index24\
    \ = 0;\n    $paren_level_max_count_index25 = 0;\n    $paren_level_max_count_index26\
    \ = 0;\n    $paren_level_max_count_index27 = 0;\n    $paren_level_max_count_index28\
    \ = 0;\n    $paren_level_max_count_index29 = 0;\n    $paren_level_max_count_index30\
    \ = 0;\n    $paren_level_max_count_index31 = 0;\n    $paren_level_max_count_index32\
    \ = 0;\n    $paren_level_max_count_index33 = 0;\n    $paren_level_max_count_index34\
    \ = 0;\n    $paren_level_max_count_index35 = 0;\n    $paren_level_max_count_index36\
    \ = 0;\n    $paren_level_max_count_index37 = 0;\n    $paren_level_max_count_index38\
    \ = 0;\n    $paren_level_max_count_index39 = 0;\n    $paren_level_max_count_index40\
    \ = 0;\n    $paren_level_max_count_index41 = 0;\n    $paren_level_max_count_index42\
    \ = 0;\n    $paren_level_max_count_index43 = 0;\n    $paren_level_max_count_index44\
    \ = 0;\n    $paren_level_max_count_index45 = 0;\n    $paren_level_max_count_index46\
    \ = 0;\n    $paren_level_max_count_index47 = 0;\n    $paren_level_max_count_index48\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpmdf8prxb.php
    on line 61

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_level--;\n    $paren_string = trim($paren_stack[$paren_level]);\n\
    \    if ($paren_string == '') {\n      $paren_level++;\n      $paren_string =\
    \ trim($paren_stack[$paren_level]);\n    }\n    if ($paren_string == '') {\n \
    \     continue;\n    }\n    $paren_array = explode(' ', $paren_string);\n    foreach\
    \ ($paren_array as $key => $value) {\n      if ($paren_level == $key) {\n    \
    \    $paren_level++;\n        $paren_string = trim($paren_stack[$paren_level]);\n\
    \      }\n      if ($paren_string == '') {\n        continue;\n      }\n     \
    \ $paren_stack[$paren_level] = $value;\n    }\n  }\n  return $paren_array;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_u3yy00.php:42\n\
    Stack trace:\n#0 /tmp/tmp5_u3yy00.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5_u3yy00.php\
    \ on line 42\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5tm8j_sh.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while ($paren_stack) {\n        $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n    }\n \
    \   return $paren_array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote\
    \ this in PHP and it works pretty well:\n<code>\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd92j6ear.php
    on line 20

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char === '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char === ')')\
    \ {\n      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n  \
    \  } else if ($char === ' ') {\n      $paren_stack[$paren_level][] = array();\n\
    \    } else {\n      $paren_stack[$paren_level][] = $char;\n    }\n  }\n  foreach\
    \ ($paren_stack as $level) {\n    $paren_array[] = count($level);\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppew1iu8j.php:37\n\
    Stack trace:\n#0 /tmp/tmppew1iu8j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppew1iu8j.php\
    \ on line 37\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren == '(') {\n\
    \      $paren_stack[] = $paren;\n      $paren_level++;\n    } elseif ($paren ==\
    \ ')') {\n      $paren_level--;\n      $paren_stack[] = $paren;\n    } elseif\
    \ ($paren == '') {\n      $paren_stack[] = $paren;\n    }\n    if ($paren_level\
    \ == 0) {\n      $paren_array[] = count($paren_stack);\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wo30zhb.php:33\n\
    Stack trace:\n#0 /tmp/tmp0wo30zhb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0wo30zhb.php\
    \ on line 33\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_count_max = array();\n    $paren_level_count_max_index\
    \ = array();\n    $paren_level_count_max_index[0] = 0;\n    $paren_level_count_max[0]\
    \ = 0;\n    $paren_level_count_max[1] = 0;\n    $paren_level_count_max[2] = 0;\n\
    \    $paren_level_count_max[3] = 0;\n    $paren_level_count_max[4] = 0;\n    $paren_level_count_max[5]\
    \ = 0;\n    $paren_level_count_max[6] = 0;\n    $paren_level_count_max[7] = 0;\n\
    \    $paren_level_count_max[8] = 0;\n    $paren_level_count_max[9] = 0;\n    $paren_level_count_max[10]\
    \ = 0;\n    $paren_level_count_max[11] = 0;\n    $paren_level_count_max[12] =\
    \ 0;\n    $paren_level_count_max[13] = 0;\n    $paren_level_count_max[14] = 0;\n\
    \    $paren_level_count_max[15] = 0;\n    $paren_level_count_max[16] = 0;\n  \
    \  $paren_level_count_max[17] = 0;\n    $paren_level_count_max[18] = 0;\n    $paren_level_count_max[19]\
    \ = 0;\n    $paren_level_count_max[20] = 0;\n    $paren_level_count_max[21] =\
    \ 0;\n    $paren_level_count_max[22] = 0;\n    $paren_level_count_max[23] = 0;\n\
    \    $paren_level_count_max[24] = 0;\n    $paren_level_count_max[25] = 0;\n  \
    \  $paren_level_count_max[26] = 0;\n    $paren_level_count_max[27] = 0;\n    $paren_level_count_max[28]\
    \ = 0;\n    $paren_level_count_max[29] = 0;\n    $paren_level_count_max[30] =\
    \ 0;\n    $paren_level_count_max[31] = 0;\n    $paren_level_count_max[32] = 0;\n\
    \    $paren_level_count_max[33] = 0;\n    $paren_level_count_max[34] = 0;\n  \
    \  $paren_level_count_max[35] = 0;\n    $paren_level_count_max[36] = 0;\n    $paren_level_count_max[37]\
    \ = 0;\n    $paren_level_count_max[38] = 0;\n    $paren_level_count_max[39] =\
    \ 0;\n    $paren_level_count_max[40] = 0;\n    $paren_level_count_max[41] = 0;\n\
    \    $paren_level_count_max[42] = 0;\n    $paren_level_count_max[43] = 0;\n  \
    \  $paren_level_count_max[44] = 0;\n    $paren_level_count_max[45] = 0;\n    $paren_level_count_max[46]\
    \ = 0;\n    $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpi6e6o3qf.php
    on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_start = 0;\n  $paren_end\
    \ = 0;\n  $paren_levels = array();\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpjjiv8tw9.php
    on line 51

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count[0] = 0;\n    $paren_level_max_count[1] = 0;\n    $paren_level_max_count[2]\
    \ = 0;\n    $paren_level_max_count[3] = 0;\n    $paren_level_max_count[4] = 0;\n\
    \    $paren_level_max_count[5] = 0;\n    $paren_level_max_count[6] = 0;\n    $paren_level_max_count[7]\
    \ = 0;\n    $paren_level_max_count[8] = 0;\n    $paren_level_max_count[9] = 0;\n\
    \    $paren_level_max_count[10] = 0;\n    $paren_level_max_count[11] = 0;\n  \
    \  $paren_level_max_count[12] = 0;\n    $paren_level_max_count[13] = 0;\n    $paren_level_max_count[14]\
    \ = 0;\n    $paren_level_max_count[15] = 0;\n    $paren_level_max_count[16] =\
    \ 0;\n    $paren_level_max_count[17] = 0;\n    $paren_level_max_count[18] = 0;\n\
    \    $paren_level_max_count[19] = 0;\n    $paren_level_max_count[20] = 0;\n  \
    \  $paren_level_max_count[21] = 0;\n    $paren_level_max_count[22] = 0;\n    $paren_level_max_count[23]\
    \ = 0;\n    $paren_level_max_count[24] = 0;\n    $paren_level_max_count[25] =\
    \ 0;\n    $paren_level_max_count[26] = 0;\n    $paren_level_max_count[27] = 0;\n\
    \    $paren_level_max_count[28] = 0;\n    $paren_level_max_count[29] = 0;\n  \
    \  $paren_level_max_count[30] = 0;\n    $paren_level_max_count[31] = 0;\n    $paren_level_max_count[32]\
    \ = 0;\n    $paren_level_max_count[33] = 0;\n    $paren_level_max_count[34] =\
    \ 0;\n    $paren_level_max_count[35] = 0;\n    $paren_level_max_count[36] = 0;\n\
    \    $paren_level_max_count[37] = 0;\n    $paren_level_max_count[38] = 0;\n  \
    \  $paren_level_max_count[39] = 0;\n    $paren_level_max_count[40] = 0;\n    $paren_level_max_count[41]\
    \ = 0;\n    $paren_level_max_count[42] = 0;\n    $paren_level_max_count[43] =\
    \ 0;\n    $paren_level_max_count[44] = 0;\n    $paren_level_max_count[45] = 0;\n\
    \    $paren_level_max_count[46] = 0;\n    $paren_level_max_count[47] = 0;\n  \
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpugq4zcor.php
    on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level++] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_level = array_pop($paren_stack);\n\
    \    $paren_array[] = $paren_level;\n    $paren_stack[$paren_level++] = $paren_string;\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp0il3i0dz.php on line 15

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ' ') {\n      $paren_stack[$paren_level][] = array();\n    }\n\
    \  }\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_ufwofl.php:35\n\
    Stack trace:\n#0 /tmp/tmp0_ufwofl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0_ufwofl.php\
    \ on line 35\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode(\"\
    \ \", $paren_string) as $char) {\n    if ($char == \"(\") {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = $char;\n    } else if ($char == \")\") {\n\
    \      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_stack[$paren_level][]\
    \ = $char;\n      }\n    }\n  }\n  $paren_level = 0;\n  foreach ($paren_stack\
    \ as $level) {\n    foreach ($level as $char) {\n      if ($char == \"(\") {\n\
    \        $paren_level++;\n      } else if ($char == \")\") {\n        $paren_level--;\n\
    \      }\n    }\n  }\n  return $paren_level;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't seem to work. `parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )` returns `array(2, 3, 1, 3)`\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ Maybe you missed something in the code?\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works fine for me. Maybe you missed something in the code?\n<|/ c |>\n\
    <| c |>\nI tested it again and it works fine for me. Maybe you missed something\
    \ in the code?\n<|/ c |>\n<| c |>\nI tested it again and it works fine for me.\
    \ Maybe you missed something in the code?\n<|/ c |>\n<| a dscore=0 |>\nI wrote\
    \ a recursive function which can parse nested parentheses strings and return an\
    \ array with the deepest level of nesting for each parentheses group:\n<code>\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpg78hyb85.php
    on line 36

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = array();\n \
    \   $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack[] = -1;\n\
    \    $paren_stack_string = \"\";\n    $paren_level_string = \"\";\n    $paren_level_strings[]\
    \ = $paren_level_string;\n    $paren_stack_strings[] = $paren_stack_string;\n\
    \    $paren_level_strings[] = $paren_level_string;\n    $paren_stack_strings[]\
    \ = $paren_stack_string;\n    $paren_level_strings[] = $paren_level_string;\n\
    \    $paren_stack_strings[] = $paren_stack_string;\n    $paren_level_strings[]\
    \ = $paren_level_string;\n    $paren_stack_strings[] = $paren_stack_string;\n\
    \    $paren_level_strings[] = $paren_level_string;\n    $paren_stack_strings[]\
    \ = $paren_stack_string;\n    $paren_level_strings[] = $paren_level_string;\n\
    \    $paren_stack_strings[] = $paren_stack_string;\n    $paren_level_strings[]\
    \ = $paren_level_string;\n    $paren_stack_strings[] = $paren_stack_string;\n\
    \    $paren_level_strings[] = $paren_level_string;\n    $paren_stack_strings[]\
    \ = $paren_stack_string;\n    $paren_level_strings[] = $paren_level_string;\n\
    \    $paren_stack_strings[] = $paren_stack_string;\n    $paren_level_strings[]\
    \ = $paren_level_string;\n    $paren_stack_strings[] = $paren_stack_string;\n\
    \    $paren_level_strings[] = $paren_level_string;\n    $paren_stack_strings[]\
    \ = $paren_stack_string;\n    $paren_level_strings[] = $paren_level_string;\n\
    \    $paren_stack_strings[] = $paren_stack_string;\n    $paren_level_strings[]\
    \ = $paren_level_string;\n    $paren_stack_strings[] = $paren_stack_string;\n\
    \    $paren_level_strings[] = $paren_level_string;\n    $paren_stack_strings[]\
    \ = $paren_stack_string;\n    $paren_level_strings[] = $paren_level_string;\n\
    \    $paren_stack_strings[] = $paren_stack_string;\n    $paren_level_strings[]\
    \ = $paren_level_string;\n    $paren_stack_strings[] = $paren_stack_string;\n\
    \    $paren_level_strings[] = $paren_level\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmps3er8hig.php
    on line 48

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_level;\n  $paren_stack_string = \"\";\n  $paren_stack_level\
    \ = 0;\n  $paren_stack_array[] = $paren_stack_string;\n  while ($paren_string\
    \ != \"\") {\n    $paren_level = max($paren_level, $paren_stack[$paren_stack_string]);\n\
    \    $paren_stack_string = $paren_stack_string.\" \".$paren_string;\n    $paren_stack[$paren_stack_string]\
    \ = $paren_level;\n    $paren_string = substr($paren_string, 1);\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmpvevhuec2.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvevhuec2.php:29\nStack\
    \ trace:\n#0 /tmp/tmpvevhuec2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvevhuec2.php\
    \ on line 29\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_index\
    \ = array();\n  $paren_level_max_index[0] = 0;\n  $paren_level_max_index[1] =\
    \ 0;\n  $paren_level_max_index[2] = 0;\n  $paren_level_max_index[3] = 0;\n  $paren_level_max_index[4]\
    \ = 0;\n  $paren_level_max_index[5] = 0;\n  $paren_level_max_index[6] = 0;\n \
    \ $paren_level_max_index[7] = 0;\n  $paren_level_max_index[8] = 0;\n  $paren_level_max_index[9]\
    \ = 0;\n  $paren_level_max_index[10] = 0;\n  $paren_level_max_index[11] = 0;\n\
    \  $paren_level_max_index[12] = 0;\n  $paren_level_max_index[13] = 0;\n  $paren_level_max_index[14]\
    \ = 0;\n  $paren_level_max_index[15] = 0;\n  $paren_level_max_index[16] = 0;\n\
    \  $paren_level_max_index[17] = 0;\n  $paren_level_max_index[18] = 0;\n  $paren_level_max_index[19]\
    \ = 0;\n  $paren_level_max_index[20] = 0;\n  $paren_level_max_index[21] = 0;\n\
    \  $paren_level_max_index[22] = 0;\n  $paren_level_max_index[23] = 0;\n  $paren_level_max_index[24]\
    \ = 0;\n  $paren_level_max_index[25] = 0;\n  $paren_level_max_index[26] = 0;\n\
    \  $paren_level_max_index[27] = 0;\n  $paren_level_max_index[28] = 0;\n  $paren_level_max_index[29]\
    \ = 0;\n  $paren_level_max_index[30] = 0;\n  $paren_level_max_index[31] = 0;\n\
    \  $paren_level_max_index[32] = 0;\n  $paren_level_max_index[33] = 0;\n  $paren_level_max_index[34]\
    \ = 0;\n  $paren_level_max_index[35] = 0;\n  $paren_level_max_index[36] = 0;\n\
    \  $paren_level_max_index[37] = 0;\n  $paren_level_max_index[38] = 0;\n  $paren_level_max_index[39]\
    \ = 0;\n  $paren_level_max_index[40] = 0;\n  $paren_level_max_index[41] = 0;\n\
    \  $paren_level_max_index[42] = 0;\n  $paren_level_max_index[43] = 0;\n  $paren_level_max_index[44]\
    \ = 0;\n  $paren_level_max_index[45] = 0;\n  $paren_level_max_index[46] = 0;\n\
    \  $paren_level_max_index\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp__26ccr6.php
    on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $level) {\n        if\
    \ ($level == \"(\") {\n            $max_level++;\n        } else if ($level ==\
    \ \")\") {\n            $max_level--;\n            if ($max_level < 0) {\n   \
    \             return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n        $max_level_array[] = $max_level;\n    }\n    return\
    \ $max_level_array;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't\
    \ seem to work for nested parentheses such as `((()))`. See [this demo](https://regex101.com/r/qO4qG0/1).\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a function that will handle\
    \ nested parentheses.\n<|/ c |>\n<| c |>\nThis doesn't seem to work for nested\
    \ parentheses such as `((()))`. See [this demo](https://regex101.com/r/qO4qG0/1).\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a function that will handle\
    \ nested parentheses.\n<|/ c |>\n<| c |>\nThis doesn't seem to work for nested\
    \ parentheses such as `((()))`. See [this demo](https://regex101.com/r/qO4qG0/1).\n\
    <|/ c |>\n<| a tags=php,regex |>\nThis regex will match nested parentheses:\n\
    <code>\n\\((?!\\()[^()]+\\)\n</code>\nDemo\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work for nested parentheses such as `((()))`. See [this demo](https://regex101.com/r/qO4qG0/1).\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work for nested parentheses such as `((()))`.\
    \ See [this demo](https://regex101.com/r/qO4qG0/1).\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work for nested parentheses such as `((()))`. See [this demo](https://regex101.com/r/qO4qG0/1).\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work for nested parentheses such as `((()))`.\
    \ See [this demo](https://regex101.com/r/qO4qG0/1).\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work for nested parentheses such as `((()))`. See [this demo](https://regex101.com/r/qO4q\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5d15ygpi.php
    on line 26

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = $paren_stack[$paren_level];\n    $paren_level = array_search($paren_string,\
    \ $paren_stack);\n    $paren_array[] = $paren_level;\n    $paren_string = substr($paren_string,\
    \ 0, $paren_level);\n    if ($paren_string != '') {\n      $paren_stack[$paren_level]\
    \ = $paren_string;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cgc6r10.php:29\n\
    Stack trace:\n#0 /tmp/tmp7cgc6r10.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7cgc6r10.php\
    \ on line 29\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren == '(') {\n\
    \      $paren_stack[$paren_level] = $paren;\n      $paren_level++;\n    } else\
    \ if ($paren == ')') {\n      $paren_level--;\n      if ($paren_level == 0) {\n\
    \        $paren_array[] = $paren_stack;\n        $paren_stack = array();\n   \
    \   }\n    } else {\n      $paren_stack[$paren_level] = $paren;\n    }\n  }\n\
    \  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrfzgk4p.php:33\n\
    Stack trace:\n#0 /tmp/tmptrfzgk4p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptrfzgk4p.php\
    \ on line 33\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $max_level++;\n        } else if ($paren == ')') {\n\
    \            $max_level--;\n            if ($max_level < 0) {\n              \
    \  return false;\n            }\n        } else if ($max_level > 0) {\n      \
    \      $max_level_paren = $max_level;\n        }\n    }\n    return $max_level_paren;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbtia0ju.php:31\n\
    Stack trace:\n#0 /tmp/tmpxbtia0ju.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxbtia0ju.php\
    \ on line 31\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == \"(\") {\n      $level++;\n      $paren_levels[$level] = $level;\n\
    \    } elseif ($paren == \")\") {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = max($max_level, $level);\n\
    \      }\n    }\n  }\n  return $paren_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65ddnwph.php:32\n\
    Stack trace:\n#0 /tmp/tmp65ddnwph.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp65ddnwph.php\
    \ on line 32\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_stack[$paren_level]\
    \ !== null) {\n    $paren_level++;\n    $paren_string = $paren_stack[$paren_level];\n\
    \    $paren_array = explode(\" \", $paren_string);\n    $paren_stack[$paren_level]\
    \ = $paren_string;\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpmoctlj2g.php on line 14\n\n\
    Deprecated: explode(): Passing null to parameter #2 ($string) of type string is\
    \ deprecated in /tmp/tmpmoctlj2g.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmoctlj2g.php:26\nStack trace:\n#0 /tmp/tmpmoctlj2g.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmoctlj2g.php on line 26\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_count = array();\n    $paren_levels_count = array_count_values($paren_array);\n\
    \    foreach ($paren_array as $paren_group) {\n        if ($paren_levels_count[$paren_group]\
    \ > $paren_levels_count[$paren_group - 1]) {\n            $paren_levels[] = $paren_group;\n\
    \            $paren_levels_count[$paren_group] = $paren_levels_count[$paren_group\
    \ - 1];\n        } else {\n            $paren_levels[] = $paren_group;\n     \
    \       $paren_levels_count[$paren_group] = $paren_levels_count[$paren_group];\n\
    \        }\n    }\n    return $paren_levels;\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThanks so much! This works perfectly. I'm going to have to study\
    \ this a little bit to understand how it works. I appreciate your help!\n<|/ c\
    \ |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n<|\
    \ c |>\nThanks so much! This works perfectly. I'm going to have to study this\
    \ a little bit to understand how it works. I appreciate your help!\n<|/ c |>\n\
    <| a dscore=0 |>\nI wrote this regex to match nested parentheses up to a certain\
    \ depth:\n<code>\n/(?:\\((?:[^()]*|\\((?:[^()]*|\\([^()]*\\))*\\))*\\))*[^()]*\\\
    ((?:[^()]*|\\((?:[^()]*|\\([^()]*\\))*\\))*\\)/\n</code>\nIt matches up to depth\
    \ $depth parentheses.\n<|/ a tags=php,regex |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string = \"(()()) ((())) () ((())()())\";\n$paren_levels = preg_match_all('/\\\
    (([^()]+)\\)/', $string, $matches);\n$paren_levels = $matches[1];\n$paren_levels\
    \ = array_count_values($paren_levels);\n$paren_levels = array_slice($paren_levels,\
    \ 0, 3);\nprint_r($paren_levels);\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpykczbco1.php
    on line 23

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_index\
    \ = array();\n  $paren_level_max_index[0] = 0;\n  $paren_level_max_index[1] =\
    \ 0;\n  $paren_level_max_index[2] = 0;\n  $paren_level_max_index[3] = 0;\n  $paren_level_max_index[4]\
    \ = 0;\n  $paren_level_max_index[5] = 0;\n  $paren_level_max_index[6] = 0;\n \
    \ $paren_level_max_index[7] = 0;\n  $paren_level_max_index[8] = 0;\n  $paren_level_max_index[9]\
    \ = 0;\n  $paren_level_max_index[10] = 0;\n  $paren_level_max_index[11] = 0;\n\
    \  $paren_level_max_index[12] = 0;\n  $paren_level_max_index[13] = 0;\n  $paren_level_max_index[14]\
    \ = 0;\n  $paren_level_max_index[15] = 0;\n  $paren_level_max_index[16] = 0;\n\
    \  $paren_level_max_index[17] = 0;\n  $paren_level_max_index[18] = 0;\n  $paren_level_max_index[19]\
    \ = 0;\n  $paren_level_max_index[20] = 0;\n  $paren_level_max_index[21] = 0;\n\
    \  $paren_level_max_index[22] = 0;\n  $paren_level_max_index[23] = 0;\n  $paren_level_max_index[24]\
    \ = 0;\n  $paren_level_max_index[25] = 0;\n  $paren_level_max_index[26] = 0;\n\
    \  $paren_level_max_index[27] = 0;\n  $paren_level_max_index[28] = 0;\n  $paren_level_max_index[29]\
    \ = 0;\n  $paren_level_max_index[30] = 0;\n  $paren_level_max_index[31] = 0;\n\
    \  $paren_level_max_index[32] = 0;\n  $paren_level_max_index[33] = 0;\n  $paren_level_max_index[34]\
    \ = 0;\n  $paren_level_max_index[35] = 0;\n  $paren_level_max_index[36] = 0;\n\
    \  $paren_level_max_index[37] = 0;\n  $paren_level_max_index[38] = 0;\n  $paren_level_max_index[39]\
    \ = 0;\n  $paren_level_max_index[40] = 0;\n  $paren_level_max_index[41] = 0;\n\
    \  $paren_level_max_index[42] = 0;\n  $paren_level_max_index[43] = 0;\n  $paren_level_max_index[44]\
    \ = 0;\n  $paren_level_max_index[45] = 0;\n  $paren_level_max_index[46] = 0;\n\
    \  $paren_level_max_index\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp__26ccr6.php
    on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_pointer = -1;\n  $paren_stack_pointer_length = count($paren_stack);\n\
    \  $paren_stack_pointer_length = max($paren_stack_pointer_length, 1);\n  $paren_stack_string\
    \ = implode(\" \", $paren_stack);\n  $paren_array = explode(\" \", $paren_string);\n\
    \  foreach ($paren_array as $key => $value) {\n    if ($paren_level == 0) {\n\
    \      if ($value == \"(\") {\n        $paren_stack[] = $value;\n        $paren_stack_pointer++;\n\
    \        $paren_stack_pointer_length++;\n      } else if ($value == \")\") {\n\
    \        $paren_stack_string = implode(\" \", $paren_stack);\n        $paren_stack_pointer--;\n\
    \        $paren_stack_pointer_length--;\n        if ($paren_stack_pointer_length\
    \ == 0) {\n          $paren_level--;\n          $paren_stack_string = implode(\"\
    \ \", $paren_stack);\n        }\n      }\n    } else {\n      if ($value == \"\
    )\") {\n        $paren_stack_string = implode(\" \", $paren_stack);\n        $paren_stack_pointer--;\n\
    \        $paren_stack_pointer_length--;\n        if ($paren_stack_pointer_length\
    \ == 0) {\n          $paren_level--;\n          $paren_stack_string = implode(\"\
    \ \", $paren_stack);\n        }\n      }\n      if ($value == \")\") {\n     \
    \   $paren_stack_string = implode(\" \", $paren_stack);\n        $paren_stack_pointer--;\n\
    \        $paren_stack_pointer_length--;\n        if ($paren_stack_pointer_length\
    \ == 0) {\n          $paren_level--;\n          $paren_stack_string = implode(\"\
    \ \", $paren_stack);\n        }\n      }\n      if ($value == \")\") {\n     \
    \   $paren_stack_string = implode(\" \", $paren_stack);\n        $paren_stack_pointer--;\n\
    \        $paren_stack_pointer_length--;\n        if ($paren_stack_pointer_length\
    \ == 0) {\n          $paren_level--;\n          $paren_stack_string = implode(\"\
    \ \", $paren_stack);\n        }\n      }\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkh_57q52.php:69\n\
    Stack trace:\n#0 /tmp/tmpkh_57q52.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpkh_57q52.php\
    \ on line 69\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpna7ldby1.php on line 48

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode(\"\
    \ \", $paren_string) as $char) {\n    if ($char == \"(\") {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == \")\"\
    ) {\n      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n  \
    \  } else if ($char == \")\") {\n      $paren_stack[$paren_level][] = array();\n\
    \    }\n    if ($paren_level == 0) {\n      $paren_array[] = $paren_stack[$paren_level];\n\
    \    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql2nenmk.php:35\n\
    Stack trace:\n#0 /tmp/tmpql2nenmk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpql2nenmk.php\
    \ on line 35\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpql2fpc34.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_levels = array();\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren_string) {\n        $paren_levels[]\
    \ = $paren_level;\n        $paren_level = count($paren_levels);\n        if ($paren_level\
    \ > $max_level) {\n            $max_level = $paren_level;\n        }\n    }\n\
    \    return $max_level;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for\
    \ me. `parse_nested_parens(\"(()()) ((())) () ((())()())\")` returns `array(2,\
    \ 3, 1, 3)` instead of `array(2, 3, 2, 3)`.\n<|/ c |>\n<| c |>\nI tested it on\
    \ PHP 5.6 and PHP 7.0, both return `array(2, 3, 2, 3)`.\n<|/ c |>\n<| c |>\nI\
    \ tested it on PHP 5.6 and PHP 7.0, both return `array(2, 3, 2, 3)`.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.6 and PHP 7.0, both return `array(2, 3, 2, 3)`.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6 and PHP 7.0, both return `array(2, 3,\
    \ 2, 3)`.\n<|/ c |>\n<| a tags=php,parentheses |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdafgd987.php
    on line 20

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_array = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n    }\n    if ($level < 0) {\n      $paren_array[]\
    \ = $level;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76i3_vau.php:28\n\
    Stack trace:\n#0 /tmp/tmp76i3_vau.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp76i3_vau.php\
    \ on line 28\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\)/', ') ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1) ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/\" in /tmp/tmpurlm4gfb.php
    on line 31

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren = \"\";\n\
    \    $max_level_paren_count = 0;\n    for ($i = 0; $i < $paren_array_count; $i++)\
    \ {\n        $current_level = 0;\n        $current_level_paren = \"\";\n     \
    \   $current_level_paren_count = 0;\n        for ($j = 0; $j < $i; $j++) {\n \
    \           if ($paren_array[$j] == \")\") {\n                $current_level--;\n\
    \            }\n            if ($paren_array[$j] == \"(\") {\n               \
    \ $current_level++;\n            }\n            if ($current_level > $max_level)\
    \ {\n                $max_level = $current_level;\n                $max_level_paren\
    \ = $paren_array[$j];\n                $max_level_paren_count = $current_level_paren_count;\n\
    \            }\n            if ($current_level < $max_level) {\n             \
    \   $current_level_paren_count += $current_level;\n            }\n        }\n\
    \    }\n    return array($max_level, $max_level_paren, $max_level_paren_count);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7idgpvr2.php:42\n\
    Stack trace:\n#0 /tmp/tmp7idgpvr2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7idgpvr2.php\
    \ on line 42\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    $paren_level++;\n    while($paren_level\
    \ > 0) {\n        $paren_string = $paren_stack[$paren_level];\n        $paren_level\
    \ = array_search($paren_string, $paren_stack);\n        $paren_array[] = $paren_level;\n\
    \        $paren_stack[$paren_level] = $paren_string;\n        $paren_level++;\n\
    \    }\n    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 1 in /tmp/tmpfg5vof4e.php on line 14\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpfg5vof4e.php:28\nStack\
    \ trace:\n#0 /tmp/tmpfg5vof4e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfg5vof4e.php\
    \ on line 28\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5tm8j_sh.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  foreach (explode(\" \", $paren_string) as\
    \ $paren) {\n    if ($paren == \"(\") {\n      $paren_level++;\n      $paren_stack[]\
    \ = $paren;\n    } elseif ($paren == \")\") {\n      $paren_level--;\n      if\
    \ ($paren_level == 0) {\n        $paren_array[] = $paren_stack;\n        $paren_stack\
    \ = array();\n      }\n    } elseif ($paren == \"\") {\n      if ($paren_level\
    \ == 0) {\n        $paren_array[] = $paren_stack;\n      }\n    }\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7jmqtw7.php:36\n\
    Stack trace:\n#0 /tmp/tmpb7jmqtw7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpb7jmqtw7.php\
    \ on line 36\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $level = 0;\n  $max_level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == \"(\") {\n      $level++;\n      $paren_levels[$level] = $level;\n\
    \    } else if ($paren == \")\") {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = max($max_level, $level);\n\
    \      }\n    }\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dwohq3o.php:32\n\
    Stack trace:\n#0 /tmp/tmp0dwohq3o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0dwohq3o.php\
    \ on line 32\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = 0;\n  $paren_level_max_count_index2 = 0;\n  $paren_level_max_count_index3\
    \ = 0;\n  $paren_level_max_count_index4 = 0;\n  $paren_level_max_count_index5\
    \ = 0;\n  $paren_level_max_count_index6 = 0;\n  $paren_level_max_count_index7\
    \ = 0;\n  $paren_level_max_count_index8 = 0;\n  $paren_level_max_count_index9\
    \ = 0;\n  $paren_level_max_count_index10 = 0;\n  $paren_level_max_count_index11\
    \ = 0;\n  $paren_level_max_count_index12 = 0;\n  $paren_level_max_count_index13\
    \ = 0;\n  $paren_level_max_count_index14 = 0;\n  $paren_level_max_count_index15\
    \ = 0;\n  $paren_level_max_count_index16 = 0;\n  $paren_level_max_count_index17\
    \ = 0;\n  $paren_level_max_count_index18 = 0;\n  $paren_level_max_count_index19\
    \ = 0;\n  $paren_level_max_count_index20 = 0;\n  $paren_level_max_count_index21\
    \ = 0;\n  $paren_level_max_count_index22 = 0;\n  $paren_level_max_count_index23\
    \ = 0;\n  $paren_level_max_count_index24 = 0;\n  $paren_level_max_count_index25\
    \ = 0;\n  $paren_level_max_count_index26 = 0;\n  $paren_level_max_count_index27\
    \ = 0;\n  $paren_level_max_count_index28 = 0;\n  $paren_level_max_count_index29\
    \ = 0;\n  $paren_level_max_count_index30 = 0;\n  $paren_level_max_count_index31\
    \ = 0;\n  $paren_level_max_count_index32 = 0;\n  $paren_level_max_count_index33\
    \ = 0;\n  $paren_level_max_count_index34 = 0;\n  $paren_level_max_count_index35\
    \ = 0;\n  $paren_level_max_count_index36 = 0;\n  $paren_level_max_count_index37\
    \ = 0;\n  $paren_level_max_count_index38 = 0;\n  $paren_level_max_count_index39\
    \ = 0;\n  $paren_level_max_count_index40 = 0;\n  $paren_level_max_count_index41\
    \ = 0;\n  $paren_level_max_count_index42 = 0;\n  $paren_level_max_count_index43\
    \ = 0;\n  $paren_level_max_count_index44 = 0;\n  $paren_level_max_count_index45\
    \ = 0;\n  $paren_level_max_count_index46 = 0;\n  $paren_level_max_count_index47\
    \ = 0;\n  $paren_level_max_count_index48\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp4objmbpm.php
    on line 61

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    [[^()]*\\]/', '', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^()]*\\)/\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/\([^()]*\)/" in /tmp/tmpxzgyworl.php
    on line 33

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $parens\
    \ = preg_split('/\\s+/', $paren_string);\n  $levels = array();\n  $level = 0;\n\
    \  foreach ($parens as $paren) {\n    if ($paren == '(') {\n      $levels[$level]\
    \ = $level;\n      $level++;\n    } else if ($paren == ')') {\n      $levels[$level]\
    \ = $level;\n      $level--;\n    }\n  }\n  return $levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwqj4jq8.php:29\n\
    Stack trace:\n#0 /tmp/tmpzwqj4jq8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzwqj4jq8.php\
    \ on line 29\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $paren_array_max_level = array();\n    $paren_array_max_level_count\
    \ = array();\n    $paren_array_max_level_last_index = array();\n    $paren_array_max_level_last_index[0]\
    \ = -1;\n    $paren_array_max_level_last_index[1] = -1;\n    $paren_array_max_level_last_index[2]\
    \ = -1;\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        $paren_array_max_level[$i]\
    \ = -1;\n        $paren_array_max_level_count[$i] = -1;\n        for ($j = 0;\
    \ $j < $paren_array_count; $j++) {\n            if ($paren_array[$i] == $paren_array[$j])\
    \ {\n                if ($paren_array_max_level[$i] == -1) {\n               \
    \     $paren_array_max_level[$i] = $j;\n                    $paren_array_max_level_count[$i]\
    \ = 1;\n                } else {\n                    if ($paren_array_max_level_count[$i]\
    \ < $paren_array_max_level_count[$j]) {\n                        $paren_array_max_level_count[$i]\
    \ = $paren_array_max_level_count[$j];\n                        $paren_array_max_level_last_index[$i]\
    \ = $j;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return $paren_array_max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7oai92ip.php:41\n\
    Stack trace:\n#0 /tmp/tmp7oai92ip.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7oai92ip.php\
    \ on line 41\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqtjgzc37.php on line 48

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array_length =\
    \ count($paren_array);\n  $max_level = 0;\n  $level = 0;\n  $paren_array_index\
    \ = 0;\n  $paren_array_value = \"\";\n  while ($paren_array_index < $paren_array_length)\
    \ {\n    $paren_array_value = $paren_array[$paren_array_index];\n    if ($paren_array_value\
    \ == \"(\") {\n      $level++;\n    } else if ($paren_array_value == \")\") {\n\
    \      $level--;\n      if ($level < 0) {\n        break;\n      }\n    }\n  \
    \  if ($level > $max_level) {\n      $max_level = $level;\n    }\n    $paren_array_index++;\n\
    \  }\n  return $max_level;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpalkzd9in.php:36\n\
    Stack trace:\n#0 /tmp/tmpalkzd9in.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpalkzd9in.php\
    \ on line 36\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $paren_array\
    \ = array();\n    $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmpq9cydkmd.php
    on line 65

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_stack_string\
    \ = $paren_string;\n    $paren_stack_string = trim($paren_stack_string);\n   \
    \ $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n   \
    \ $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n  \
    \  $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n  \
    \  $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n \
    \   $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n \
    \   $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\"(\", \"( \", $paren_stack_string);\n\
    \    $paren_stack_string = str_replace(\")\", \" ) \", $paren_stack_string);\n\
    \    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpxyvheg9q.php on line 38

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren_array = [];\n    foreach ($paren_array as $paren_element)\
    \ {\n        if ($paren_element == '(') {\n            $max_level++;\n       \
    \ } else {\n            $max_level--;\n        }\n        if ($max_level > $max_level_paren_array[0])\
    \ {\n            $max_level_paren_array = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpdrxji9g_.php on line 17\n\n\
    Warning: Trying to access array offset on value of type int in /tmp/tmpdrxji9g_.php\
    \ on line 17\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpdrxji9g_.php on line 17\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpdrxji9g_.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdrxji9g_.php:29\nStack trace:\n#0 /tmp/tmpdrxji9g_.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdrxji9g_.php on line 29\n"
  timestamp: 1659823843
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array();\n    $paren_stack = array();\n    for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n      if ($paren_string[$i] == ')') {\n  \
    \      $paren_array[] = $paren_level;\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string[$i] == '(') {\n        $paren_stack[] = $paren_string;\n\
    \      }\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823848
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_size = count($paren_stack);\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n  $paren_stack[$paren_stack_size]\
    \ = -1;\n  $paren_stack[$paren_stack_size] = -1;\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpgn1221hu.php on line 63

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5tm8j_sh.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string.=\
    \ $paren_string;\n  $paren_stack_string = trim($paren_stack_string);\n  while\
    \ ($paren_stack_string != \"\") {\n    $paren_stack_string = trim($paren_stack_string);\n\
    \    $paren_level++;\n    $paren_array = array();\n    $paren_stack_string = substr($paren_stack_string,\
    \ 1);\n    $paren_stack_string = trim($paren_stack_string);\n    while ($paren_stack_string\
    \ != \"\") {\n      $paren_stack_string = trim($paren_stack_string);\n      $paren_array[]\
    \ = $paren_level;\n      $paren_stack_string = substr($paren_stack_string, 1);\n\
    \      $paren_stack_string = trim($paren_stack_string);\n    }\n    $paren_stack[]\
    \ = $paren_array;\n  }\n  return $paren_stack;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzb9jez81.php:37\n\
    Stack trace:\n#0 /tmp/tmpzb9jez81.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzb9jez81.php\
    \ on line 37\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_len = count($paren_stack);\n\
    \  $paren_stack_keys = array_keys($paren_stack);\n  $paren_stack_values = array_values($paren_stack);\n\
    \  foreach (explode(' ', $paren_string) as $paren_element) {\n    if ($paren_element\
    \ == '(') {\n      $paren_stack[$paren_stack_top]++;\n      $paren_stack_top++;\n\
    \      if ($paren_stack_top == $paren_stack_len) {\n        $paren_stack_bottom\
    \ = $paren_stack_len;\n      }\n      $paren_stack_keys[$paren_stack_top] = $paren_element;\n\
    \      $paren_stack_values[$paren_stack_top] = $paren_stack[$paren_stack_top];\n\
    \    } else if ($paren_element == ')') {\n      $paren_stack_top--;\n      if\
    \ ($paren_stack_top < 0) {\n        $paren_stack_top = $paren_stack_len;\n   \
    \   }\n      $paren_stack_keys[$paren_stack_top] = $paren_element;\n      $paren_stack_values[$paren_stack_top]\
    \ = $paren_stack[$paren_stack_top];\n      if ($paren_stack_bottom == $paren_stack_len)\
    \ {\n        $paren_stack_bottom--;\n      }\n    }\n  }\n  $paren_stack_keys\
    \ = array_flip($paren_stack_keys);\n  $paren_stack_values = array_flip($paren_stack_values);\n\
    \  foreach ($paren_stack_keys as $paren_stack_key => $paren_stack_value) {\n \
    \   if ($paren_stack_value == 0) {\n      $paren_array[$paren_stack_key] = $paren_stack_value;\n\
    \    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprd0d6jeq.php:52\n\
    Stack trace:\n#0 /tmp/tmprd0d6jeq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmprd0d6jeq.php\
    \ on line 52\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = array();\n  $paren_level_max_count_index[0] = 0;\n  $paren_level_max_count_index[1]\
    \ = 1;\n  $paren_level_max_count_index[2] = 2;\n  $paren_level_max_count_index[3]\
    \ = 3;\n  $paren_level_max_count_index[4] = 4;\n  $paren_level_max_count_index[5]\
    \ = 5;\n  $paren_level_max_count_index[6] = 6;\n  $paren_level_max_count_index[7]\
    \ = 7;\n  $paren_level_max_count_index[8] = 8;\n  $paren_level_max_count_index[9]\
    \ = 9;\n  $paren_level_max_count_index[10] = 10;\n  $paren_level_max_count_index[11]\
    \ = 11;\n  $paren_level_max_count_index[12] = 12;\n  $paren_level_max_count_index[13]\
    \ = 13;\n  $paren_level_max_count_index[14] = 14;\n  $paren_level_max_count_index[15]\
    \ = 15;\n  $paren_level_max_count_index[16] = 16;\n  $paren_level_max_count_index[17]\
    \ = 17;\n  $paren_level_max_count_index[18] = 18;\n  $paren_level_max_count_index[19]\
    \ = 19;\n  $paren_level_max_count_index[20] = 20;\n  $paren_level_max_count_index[21]\
    \ = 21;\n  $paren_level_max_count_index[22] = 22;\n  $paren_level_max_count_index[23]\
    \ = 23;\n  $paren_level_max_count_index[24] = 24;\n  $paren_level_max_count_index[25]\
    \ = 25;\n  $paren_level_max_count_index[26] = 26;\n  $paren_level_max_count_index[27]\
    \ = 27;\n  $paren_level_max_count_index[28] = 28;\n  $paren_level_max_count_index[29]\
    \ = 29;\n  $paren_level_max_count_index[30] = 30;\n  $paren_level_max_count_index[31]\
    \ = 31;\n  $paren_level_max_count_index[32] = 32;\n  $paren_level_max_count_index[33]\
    \ = 33;\n  $paren_level_max_count_index[34] = 34;\n  $paren_level_max_count_index[35]\
    \ = 35;\n  $paren_level_max_count_index[36] = 36;\n  $paren_level_max_count_index[37]\
    \ = 37;\n  $paren_level_max_count_index\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp2xxccaux.php
    on line 53

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  while\
    \ ($paren_string != \"\") {\n    $paren_stack_string_count++;\n    $paren_stack_string\
    \ = $paren_stack_string.$paren_string;\n    $paren_string = substr($paren_string,\
    \ 1);\n    if ($paren_stack_string_count%2 == 0) {\n      $paren_stack_string\
    \ = substr($paren_stack_string, 0, -1);\n    }\n    $paren_stack_string_count--;\n\
    \    if ($paren_stack_string_count%2 == 0) {\n      $paren_stack_string = substr($paren_stack_string,\
    \ 0, -1);\n    }\n    $paren_stack_string_count--;\n    $paren_array = array_merge($paren_stack,\
    \ $paren_array);\n    $paren_level = max($paren_stack, $paren_level);\n    $paren_stack_string\
    \ = substr($paren_stack_string, 0, -1);\n  }\n  return $paren_array;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z05hokz.php:39\n\
    Stack trace:\n#0 /tmp/tmp2z05hokz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2z05hokz.php\
    \ on line 39\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char\
    \ == '(') {\n      $paren_level++;\n      $paren_stack[$paren_level][] = array();\n\
    \    } else if ($char == ')') {\n      $paren_level--;\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else if ($char == ' ') {\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else {\n      $paren_stack[$paren_level][] = $char;\n    }\n\
    \  }\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your\
    \ solution, but I cannot get it to work with the example I gave. Can you please\
    \ have a look at my updated question?\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to include a solution that works with your example.\n<|/ c |>\n<| c |>\nThanks\
    \ for your effort! I really appreciate it! I updated my question to include a\
    \ more complex example that does not work. Can you please have a look at it?\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a solution that works with your\
    \ new example.\n<|/ c |>\n<| c |>\nThanks a lot! I really appreciate your effort!\
    \ I updated my question to include a more complex example that does not work.\
    \ Can you please have a look at it?\n<|/ c |>\n<| a tags=php,regex |>\nThis regex\
    \ should work:\n<code>\n^(?:(?:\\((?!\\))\\))|(?:\\((?!\\))\\)))+$\n</code>\n\
    Demo\n<|/ a dscore=1 |>\n<| c |>\nThanks for your effort! I really appreciate\
    \ it! I updated my question to include a more complex example that does not work.\
    \ Can you please have a look at it?\n<|/ c |>\n<| c |>\nI updated my question\
    \ to include a more complex example that does not work. Can you please have a\
    \ look at it?\n<|/ c |>\n<| a dscore=1 |>\nThis regex will match \nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp9s9c_9ev.php
    on line 32

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $paren_array_level = 0;\n    $paren_array_max_level\
    \ = 0;\n    $paren_array_max_level_array = [];\n    $paren_array_max_level_array[0]\
    \ = 0;\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        if ($paren_array[$i]\
    \ === '(') {\n            $paren_array_level++;\n            if ($paren_array_level\
    \ > $paren_array_max_level) {\n                $paren_array_max_level = $paren_array_level;\n\
    \            }\n            if ($paren_array_level > $paren_array_max_level_array[$paren_array_level])\
    \ {\n                $paren_array_max_level_array[$paren_array_level] = $paren_array_max_level;\n\
    \            }\n        } else if ($paren_array[$i] === ')') {\n            $paren_array_level--;\n\
    \            if ($paren_array_level < $paren_array_max_level) {\n            \
    \    $paren_array_max_level_array[$paren_array_level] = $paren_array_max_level;\n\
    \            }\n        }\n    }\n    return $paren_array_max_level_array;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5mr4kt8c.php:38\n\
    Stack trace:\n#0 /tmp/tmp5mr4kt8c.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5mr4kt8c.php\
    \ on line 38\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyzkwd5pl.php
    on line 77

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_count; $i++) {\n        $paren_array[$i] =\
    \ trim($paren_array[$i]);\n        if ($paren_array[$i] == '(') {\n          \
    \  $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n     \
    \   } else if ($paren_array[$i] == ')') {\n            $max_level--;\n       \
    \     $max_level_paren_array[$i] = $max_level;\n        }\n    }\n    $max_level_paren_array_count\
    \ = count($max_level_paren_array);\n    for ($i = 0; $i < $max_level_paren_array_count;\
    \ $i++) {\n        if ($max_level_paren_array[$i] == 0) {\n            unset($max_level_paren_array[$i]);\n\
    \        }\n    }\n    return $max_level_paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8_5njfs.php:36\n\
    Stack trace:\n#0 /tmp/tmpj8_5njfs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpj8_5njfs.php\
    \ on line 36\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_size\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_size; $i++) {\n        $level = 0;\n       \
    \ for ($j = $i; $j < $paren_array_size; $j++) {\n            if ($paren_array[$i]\
    \ == $paren_array[$j]) {\n                $level++;\n            } else {\n  \
    \              break;\n            }\n        }\n        if ($level > $max_level)\
    \ {\n            $max_level = $level;\n            $max_level_array = $paren_array;\n\
    \        }\n    }\n    return $max_level_array;\n}\n</code>\n<|/ a tags=php,parentheses\
    \ |>\n<| a tags=php,parentheses |>\n<code>\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxpym4yse.php
    on line 28

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = trim($paren_stack[$paren_level - 1]);\n        $paren_level\
    \ = count($paren_stack);\n        $paren_stack[$paren_level] = $paren_string;\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    }\n    return $paren_array;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,regex\
    \ |>\nI came up with a solution that doesn't use regular expressions. It's a little\
    \ more complicated than other answers, but it works.\n<code>\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmph6yrrzvz.php
    on line 20

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_parens = array();\n    foreach ($paren_array as $paren_string)\
    \ {\n        $paren_array = explode(\" \", $paren_string);\n        $level = 0;\n\
    \        foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode(\" \", $paren_string);\n            $level++;\n        }\n        if\
    \ ($level > $max_level) {\n            $max_level = $level;\n        }\n    }\n\
    \    return $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs1wsohb.php:30\n\
    Stack trace:\n#0 /tmp/tmphs1wsohb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphs1wsohb.php\
    \ on line 30\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_count = array();\n  $paren_stack_max = array();\n  $paren_stack_max_count\
    \ = array();\n  $paren_stack_max_index = array();\n  $paren_stack_max_index[0]\
    \ = 0;\n  $paren_stack_max_index[1] = 0;\n  $paren_stack_max_index[2] = 0;\n \
    \ $paren_stack_max_index[3] = 0;\n  $paren_stack_max_index[4] = 0;\n  $paren_stack_max_index[5]\
    \ = 0;\n  $paren_stack_max_index[6] = 0;\n  $paren_stack_max_index[7] = 0;\n \
    \ $paren_stack_max_index[8] = 0;\n  $paren_stack_max_index[9] = 0;\n  $paren_stack_max_index[10]\
    \ = 0;\n  $paren_stack_max_index[11] = 0;\n  $paren_stack_max_index[12] = 0;\n\
    \  $paren_stack_max_index[13] = 0;\n  $paren_stack_max_index[14] = 0;\n  $paren_stack_max_index[15]\
    \ = 0;\n  $paren_stack_max_index[16] = 0;\n  $paren_stack_max_index[17] = 0;\n\
    \  $paren_stack_max_index[18] = 0;\n  $paren_stack_max_index[19] = 0;\n  $paren_stack_max_index[20]\
    \ = 0;\n  $paren_stack_max_index[21] = 0;\n  $paren_stack_max_index[22] = 0;\n\
    \  $paren_stack_max_index[23] = 0;\n  $paren_stack_max_index[24] = 0;\n  $paren_stack_max_index[25]\
    \ = 0;\n  $paren_stack_max_index[26] = 0;\n  $paren_stack_max_index[27] = 0;\n\
    \  $paren_stack_max_index[28] = 0;\n  $paren_stack_max_index[29] = 0;\n  $paren_stack_max_index[30]\
    \ = 0;\n  $paren_stack_max_index[31] = 0;\n  $paren_stack_max_index[32] = 0;\n\
    \  $paren_stack_max_index[33] = 0;\n  $paren_stack_max_index[34] = 0;\n  $paren_stack_max_index[35]\
    \ = 0;\n  $paren_stack_max_index[36] = 0;\n  $paren_stack_max_index[37] = 0;\n\
    \  $paren_stack_max_index[38] = 0;\n  $paren_stack_max_index[39] = 0;\n  $paren_stack_max_index[40]\
    \ = 0;\n  $paren_stack_max_index[41] = 0;\n  $paren_stack_max_index[42] = 0;\n\
    \  $paren_stack_max_index[43] = 0;\n  $paren_stack_max_index[44] = 0;\n  $paren_stack_max_index[45]\
    \ = 0;\n  $paren_stack_max_index[46\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpyde75ejb.php
    on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_count; $i++) {\n        $paren_array[$i] =\
    \ trim($paren_array[$i]);\n        if ($paren_array[$i] === \"()\") {\n      \
    \      $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n \
    \       } else {\n            $max_level--;\n        }\n    }\n    return $max_level_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkvpyeq5d.php:29\n\
    Stack trace:\n#0 /tmp/tmpkvpyeq5d.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkvpyeq5d.php\
    \ on line 29\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $levels = array();\n\
    \    $level = 0;\n    $max_level = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == \"(\") {\n            $levels[$level] = $level;\n     \
    \       $level++;\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n            }\n        } elseif ($paren == \")\") {\n           \
    \ $level--;\n            if ($level < 0) {\n                throw new Exception(\"\
    Invalid parenthesis string '$paren_string'\");\n            }\n        }\n   \
    \ }\n    return $levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaz5pgp2r.php:34\n\
    Stack trace:\n#0 /tmp/tmpaz5pgp2r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaz5pgp2r.php\
    \ on line 34\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_index\
    \ = array();\n  $paren_level_max_index[0] = 0;\n  $paren_level_max_index[1] =\
    \ 0;\n  $paren_level_max_index[2] = 0;\n  $paren_level_max_index[3] = 0;\n  $paren_level_max_index[4]\
    \ = 0;\n  $paren_level_max_index[5] = 0;\n  $paren_level_max_index[6] = 0;\n \
    \ $paren_level_max_index[7] = 0;\n  $paren_level_max_index[8] = 0;\n  $paren_level_max_index[9]\
    \ = 0;\n  $paren_level_max_index[10] = 0;\n  $paren_level_max_index[11] = 0;\n\
    \  $paren_level_max_index[12] = 0;\n  $paren_level_max_index[13] = 0;\n  $paren_level_max_index[14]\
    \ = 0;\n  $paren_level_max_index[15] = 0;\n  $paren_level_max_index[16] = 0;\n\
    \  $paren_level_max_index[17] = 0;\n  $paren_level_max_index[18] = 0;\n  $paren_level_max_index[19]\
    \ = 0;\n  $paren_level_max_index[20] = 0;\n  $paren_level_max_index[21] = 0;\n\
    \  $paren_level_max_index[22] = 0;\n  $paren_level_max_index[23] = 0;\n  $paren_level_max_index[24]\
    \ = 0;\n  $paren_level_max_index[25] = 0;\n  $paren_level_max_index[26] = 0;\n\
    \  $paren_level_max_index[27] = 0;\n  $paren_level_max_index[28] = 0;\n  $paren_level_max_index[29]\
    \ = 0;\n  $paren_level_max_index[30] = 0;\n  $paren_level_max_index[31] = 0;\n\
    \  $paren_level_max_index[32] = 0;\n  $paren_level_max_index[33] = 0;\n  $paren_level_max_index[34]\
    \ = 0;\n  $paren_level_max_index[35] = 0;\n  $paren_level_max_index[36] = 0;\n\
    \  $paren_level_max_index[37] = 0;\n  $paren_level_max_index[38] = 0;\n  $paren_level_max_index[39]\
    \ = 0;\n  $paren_level_max_index[40] = 0;\n  $paren_level_max_index[41] = 0;\n\
    \  $paren_level_max_index[42] = 0;\n  $paren_level_max_index[43] = 0;\n  $paren_level_max_index[44]\
    \ = 0;\n  $paren_level_max_index[45] = 0;\n  $paren_level_max_index[46] = 0;\n\
    \  $paren_level_max_index\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp__26ccr6.php
    on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    $paren_levels[$paren_string] = 0;\n\
    \    while (count($paren_stack) > 0) {\n        $paren_string = array_pop($paren_stack);\n\
    \        $paren_levels[$paren_string]++;\n        $paren_array = array_merge($paren_array,\
    \ explode(' ', $paren_string));\n        foreach ($paren_array as $paren_string)\
    \ {\n            if ($paren_levels[$paren_string] == 0) {\n                $paren_levels[$paren_string]\
    \ = $paren_level;\n                $paren_stack[] = $paren_string;\n         \
    \   }\n        }\n    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"(()())\" in /tmp/tmps5bar4i2.php on line\
    \ 18\n\nWarning: Undefined array key \"((()))\" in /tmp/tmps5bar4i2.php on line\
    \ 18\n\nWarning: Undefined array key \"()\" in /tmp/tmps5bar4i2.php on line 18\n\
    \nWarning: Undefined array key \"((())()())\" in /tmp/tmps5bar4i2.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5bar4i2.php:32\n\
    Stack trace:\n#0 /tmp/tmps5bar4i2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmps5bar4i2.php\
    \ on line 32\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = \"\";\n  $paren_level_string = \"\";\n  $paren_level_counter = 0;\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_counter_string\
    \ = \"\";\n  $paren_level_counter_string = \"\";\n  $paren_level_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpgf8um454.php
    on line 73

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == \"(\") {\n            $max_level++;\n        } else if ($paren ==\
    \ \")\") {\n            $max_level--;\n            if ($max_level < 0) {\n   \
    \             throw new Exception(\"Invalid parenthesis string '$paren_string'\"\
    );\n            }\n        } else {\n            if ($max_level > 0) {\n     \
    \           $max_level_array[] = $max_level;\n            }\n            $max_level\
    \ = 0;\n        }\n    }\n    return $max_level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcmv3g5v.php:34\n\
    Stack trace:\n#0 /tmp/tmptcmv3g5v.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptcmv3g5v.php\
    \ on line 34\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_level = count($paren_array);\n    $paren_array\
    \ = array_merge($paren_array, preg_split('/\\s+/', $paren_string));\n    if ($paren_level\
    \ > $paren_stack[0]) {\n      $paren_stack[] = $paren_string;\n    }\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp240pzlh3.php on line 16\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp240pzlh3.php:28\nStack\
    \ trace:\n#0 /tmp/tmp240pzlh3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp240pzlh3.php\
    \ on line 28\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren == '(') {\n\
    \      $paren_level++;\n      $paren_stack[] = $paren;\n    } elseif ($paren ==\
    \ ')') {\n      $paren_level--;\n      $paren_stack[] = $paren;\n    } else {\n\
    \      if ($paren_level == 0) {\n        $paren_array[] = $paren_stack;\n    \
    \  }\n      $paren_stack[] = $paren;\n    }\n  }\n  return $paren_array;\n}\n\
    </code>\n<|/ a tags=php,regex |>\n<| c |>\nI like this solution, but I ended up\
    \ using [this answer](https://stackoverflow.com/a/56061705/143839) instead. Thanks\
    \ though!\n<|/ c |>\n<| a tags=php,regex |>\nI ended up using an answer from this\
    \ question. Thanks everyone!\n<code>\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpy7xals2a.php
    on line 27

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_len = count($paren_array);\n    $paren_levels_sum = 0;\n  \
    \  $paren_levels_index = 0;\n    $paren_levels_max = 0;\n    $paren_levels_max_index\
    \ = 0;\n    $paren_levels_max_sum = 0;\n    foreach ($paren_array as $paren_level)\
    \ {\n        $paren_levels_sum += $paren_level;\n        if ($paren_levels_sum\
    \ > $paren_levels_max) {\n            $paren_levels_max = $paren_levels_sum;\n\
    \            $paren_levels_max_index = $paren_levels_index;\n        }\n     \
    \   $paren_levels_index++;\n    }\n    foreach ($paren_array as $paren_level)\
    \ {\n        $paren_levels[$paren_levels_max_index] += $paren_level;\n    }\n\
    \    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpedhgi2j3.php:17\nStack trace:\n#0 /tmp/tmpedhgi2j3.php(31): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpedhgi2j3.php(35): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpedhgi2j3.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpedhgi2j3.php\
    \ on line 17\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_stack[$paren_level][]\
    \ = array();\n      }\n    }\n    if ($paren_level > 0) {\n      $paren_stack[$paren_level][]\
    \ = $char;\n    }\n  }\n  $paren_array[] = count($paren_stack[$paren_level]);\n\
    \  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw99x_gg_.php:36\n\
    Stack trace:\n#0 /tmp/tmpw99x_gg_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpw99x_gg_.php\
    \ on line 36\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_size = count($paren_stack);\n  $paren_stack[0] = 0;\n  foreach\
    \ (explode(\" \", $paren_string) as $char) {\n    if ($char == \"(\") {\n    \
    \  $paren_stack[$paren_stack_size] = $paren_stack[$paren_stack_size] + 1;\n  \
    \  } else if ($char == \")\") {\n      $paren_stack[$paren_stack_size] = $paren_stack[$paren_stack_size]\
    \ - 1;\n      if ($paren_stack[$paren_stack_size] == 0) {\n        $paren_level--;\n\
    \      }\n    }\n    $paren_array[] = $paren_stack[$paren_stack_size];\n  }\n\
    \  return $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdgctfsb.php:31\n\
    Stack trace:\n#0 /tmp/tmpkdgctfsb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkdgctfsb.php\
    \ on line 31\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = 0;\n  $paren_level_max_count_index2 = 0;\n  $paren_level_max_count_index3\
    \ = 0;\n  $paren_level_max_count_index4 = 0;\n  $paren_level_max_count_index5\
    \ = 0;\n  $paren_level_max_count_index6 = 0;\n  $paren_level_max_count_index7\
    \ = 0;\n  $paren_level_max_count_index8 = 0;\n  $paren_level_max_count_index9\
    \ = 0;\n  $paren_level_max_count_index10 = 0;\n  $paren_level_max_count_index11\
    \ = 0;\n  $paren_level_max_count_index12 = 0;\n  $paren_level_max_count_index13\
    \ = 0;\n  $paren_level_max_count_index14 = 0;\n  $paren_level_max_count_index15\
    \ = 0;\n  $paren_level_max_count_index16 = 0;\n  $paren_level_max_count_index17\
    \ = 0;\n  $paren_level_max_count_index18 = 0;\n  $paren_level_max_count_index19\
    \ = 0;\n  $paren_level_max_count_index20 = 0;\n  $paren_level_max_count_index21\
    \ = 0;\n  $paren_level_max_count_index22 = 0;\n  $paren_level_max_count_index23\
    \ = 0;\n  $paren_level_max_count_index24 = 0;\n  $paren_level_max_count_index25\
    \ = 0;\n  $paren_level_max_count_index26 = 0;\n  $paren_level_max_count_index27\
    \ = 0;\n  $paren_level_max_count_index28 = 0;\n  $paren_level_max_count_index29\
    \ = 0;\n  $paren_level_max_count_index30 = 0;\n  $paren_level_max_count_index31\
    \ = 0;\n  $paren_level_max_count_index32 = 0;\n  $paren_level_max_count_index33\
    \ = 0;\n  $paren_level_max_count_index34 = 0;\n  $paren_level_max_count_index35\
    \ = 0;\n  $paren_level_max_count_index36 = 0;\n  $paren_level_max_count_index37\
    \ = 0;\n  $paren_level_max_count_index38 = 0;\n  $paren_level_max_count_index39\
    \ = 0;\n  $paren_level_max_count_index40 = 0;\n  $paren_level_max_count_index41\
    \ = 0;\n  $paren_level_max_count_index42 = 0;\n  $paren_level_max_count_index43\
    \ = 0;\n  $paren_level_max_count_index44 = 0;\n  $paren_level_max_count_index45\
    \ = 0;\n  $paren_level_max_count_index46 = 0;\n  $paren_level_max_count_index47\
    \ = 0;\n  $paren_level_max_count_index48\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp4objmbpm.php
    on line 61

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ' ') {\n      $paren_stack[$paren_level][] = array();\n    }\n\
    \  }\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_ufwofl.php:35\n\
    Stack trace:\n#0 /tmp/tmp0_ufwofl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0_ufwofl.php\
    \ on line 35\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n  $paren_string = \nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpdh5t663f.php on line 38

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level++] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_array = array_merge($paren_array,\
    \ explode(' ', $paren_string));\n    $paren_level--;\n  }\n  return $paren_array;\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")` returns `array(2, 2, 1, 3)` instead of `array(2,\
    \ 3, 1, 3)`.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works fine.\
    \ Maybe you have a different version?\n<|/ c |>\n<| c |>\n: I tested it on PHP\
    \ 5.3.10 and it works fine. Maybe you have a different version?\n<|/ c |>\n<|\
    \ c |>\n: I tested it on PHP 5.3.10 and it works fine. Maybe you have a different\
    \ version?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works fine.\
    \ Maybe you have a different version?\n<|/ c |>\n<| a dscore=2 |>\nThis regex\
    \ will match all nested parentheses up to a certain depth:\n<code>\n/(?:\\((?>[^()]+|\\\
    ((?1)\\))*\\))+(?(1)\\1|$)/\n</code>\nIt will match all nested parentheses up\
    \ to a certain depth ($depth). \nThe depth can be set by passing a second argument\
    \ to the function.\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work.\
    \ `parse_nested_parens(\"(()()) ((())) () ((())()())\", 2)` returns `array(2,\
    \ 2, 1, 3)` instead of `array(2, 3, 1, 3)`.\n<|/ c |>\n<| c |>\n: I tested it\
    \ on PHP 5.3.10 and it works fine. Maybe you have a different version?\n<|/ c\
    \ |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works fine. Maybe you have a\
    \ different version?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works\
    \ fine. Maybe you have a different version?\n<|/ c |>\n<| c |>\n: I tested it\
    \ \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpv_3am50y.php
    on line 19

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_levels = array();\n  $paren_levels_count = array();\n\
    \  $paren_levels_count = array_count_values($paren_levels_count);\n  foreach (explode(\"\
    \ \", $paren_string) as $paren_string) {\n    if ($paren_levels_count[$level]\
    \ == 0) {\n      $level++;\n    }\n    if ($paren_levels_count[$level] == 1) {\n\
    \      $level++;\n    }\n    if ($paren_levels_count[$level] == 2) {\n      $level++;\n\
    \    }\n    if ($paren_levels_count[$level] == 3) {\n      $level++;\n    }\n\
    \    if ($paren_levels_count[$level] == 4) {\n      $level++;\n    }\n    if ($paren_levels_count[$level]\
    \ == 5) {\n      $level++;\n    }\n    if ($paren_levels_count[$level] == 6) {\n\
    \      $level++;\n    }\n    if ($paren_levels_count[$level] == 7) {\n      $level++;\n\
    \    }\n    if ($paren_levels_count[$level] == 8) {\n      $level++;\n    }\n\
    \    if ($paren_levels_count[$level] == 9) {\n      $level++;\n    }\n    if ($paren_levels_count[$level]\
    \ == 10) {\n      $level++;\n    }\n    if ($paren_levels_count[$level] == 11)\
    \ {\n      $level++;\n    }\n    if ($paren_levels_count[$level] == 12) {\n  \
    \    $level++;\n    }\n    if ($paren_levels_count[$level] == 13) {\n      $level++;\n\
    \    }\n    if ($paren_levels_count[$level] == 14) {\n      $level++;\n    }\n\
    \    if ($paren_levels_count[$level] == 15) {\n      $level++;\n    }\n    if\
    \ ($paren_levels_count[$level] == 16) {\n      $level++;\n    }\n    if ($paren_levels_count[$level]\
    \ == 17) {\n      $level++;\n    }\n    if ($paren_levels_count[$level] == 18)\
    \ {\n      $level++;\n    }\n    if ($paren_levels_count[$level] == 19) {\n  \
    \    $level++;\n    }\n    if ($paren_levels_count[$level] == 20) {\n      $level++;\n\
    \    }\n    if ($paren_levels_count[$level] == 21) {\n      $level++;\n    }\n\
    \    if ($paren_levels_count[$level] == 22) {\n      $level++;\n    }\n    if\
    \ ($paren_levels_count[$level] == 23) {\n      $level++;\n    }\n    if ($paren_levels_count[$level]\
    \ == 24) {\n      $level++;\n    }\n    if ($paren_levels_count[$level] == 25)\
    \ {\n      $level\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpiaa9ci3o.php
    on line 90

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        $level = 0;\n        for ($j = 0; $j < $i; $j++) {\n      \
    \      if ($paren_array[$j] === \"(\") {\n                $level++;\n        \
    \    } elseif ($paren_array[$j] === \")\") {\n                $level--;\n    \
    \        }\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv2brpuc.php:32\n\
    Stack trace:\n#0 /tmp/tmptv2brpuc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptv2brpuc.php\
    \ on line 32\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        $level = 0;\n        for ($j = 0; $j < $i; $j++) {\n      \
    \      if ($paren_array[$j] === \"(\") {\n                $level++;\n        \
    \    } else if ($paren_array[$j] === \")\") {\n                $level--;\n   \
    \         }\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ibc50un.php:32\n\
    Stack trace:\n#0 /tmp/tmp1ibc50un.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1ibc50un.php\
    \ on line 32\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_open = false;\n\
    \    $paren_closed = false;\n    $paren_level_count = 0;\n    $paren_level_max\
    \ = -1;\n    $paren_level_max_index = -1;\n    $paren_level_max_count = 0;\n \
    \   $paren_level_max_count_index = 0;\n    $paren_level_max_count_count = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index = 0;\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmppx58238x.php on line 78

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyzkwd5pl.php
    on line 77

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\[[^\\(\\)]*\\]/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\\
    (\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\\
    )]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\\
    (\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\\
    )]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\\
    (\\)]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/\([^\(\)]" in /tmp/tmpw0td05tr.php
    on line 32

    '
  timestamp: 1659823843
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while ($paren_stack) {\n        $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n    }\n \
    \   return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823848
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, $paren_level);\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823848
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == \"(\") {\n      $level++;\n      $paren_levels[$level] = $level;\n\
    \    } elseif ($paren == \")\") {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = max($max_level, $level);\n\
    \      }\n    }\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uorkqci.php:32\n\
    Stack trace:\n#0 /tmp/tmp7uorkqci.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7uorkqci.php\
    \ on line 32\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_levels = array();\n\
    \  $paren_levels[$paren_level] = 1;\n  $paren_levels[$paren_level + 1] = 1;\n\
    \  $paren_levels[$paren_level + 2] = 1;\n  $paren_levels[$paren_level + 3] = 1;\n\
    \  $paren_levels[$paren_level + 4] = 1;\n  $paren_levels[$paren_level + 5] = 1;\n\
    \  $paren_levels[$paren_level + 6] = 1;\n  $paren_levels[$paren_level + 7] = 1;\n\
    \  $paren_levels[$paren_level + 8] = 1;\n  $paren_levels[$paren_level + 9] = 1;\n\
    \  $paren_levels[$paren_level + 10] = 1;\n  $paren_levels[$paren_level + 11] =\
    \ 1;\n  $paren_levels[$paren_level + 12] = 1;\n  $paren_levels[$paren_level +\
    \ 13] = 1;\n  $paren_levels[$paren_level + 14] = 1;\n  $paren_levels[$paren_level\
    \ + 15] = 1;\n  $paren_levels[$paren_level + 16] = 1;\n  $paren_levels[$paren_level\
    \ + 17] = 1;\n  $paren_levels[$paren_level + 18] = 1;\n  $paren_levels[$paren_level\
    \ + 19] = 1;\n  $paren_levels[$paren_level + 20] = 1;\n  $paren_levels[$paren_level\
    \ + 21] = 1;\n  $paren_levels[$paren_level + 22] = 1;\n  $paren_levels[$paren_level\
    \ + 23] = 1;\n  $paren_levels[$paren_level + 24] = 1;\n  $paren_levels[$paren_level\
    \ + 25] = 1;\n  $paren_levels[$paren_level + 26] = 1;\n  $paren_levels[$paren_level\
    \ + 27] = 1;\n  $paren_levels[$paren_level + 28] = 1;\n  $paren_levels[$paren_level\
    \ + 29] = 1;\n  $paren_levels[$paren_level + 30] = 1;\n  $paren_levels[$paren_level\
    \ + 31] = 1;\n  $paren_levels[$paren_level + 32] = 1;\n  $paren_levels[$paren_level\
    \ + 33] = 1;\n  $paren_levels[$paren_level + 34] = 1;\n  $paren_levels[$paren\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpetj3niuj.php
    on line 47

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_string = trim($paren_string);\n  $paren_string =\
    \ preg_replace('/\\s+/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '(',\
    \ $paren_string);\n  $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp6563jujk.php
    on line 38

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack)\
    \ - 1;\n    $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, count($paren_stack) - 1);\n \
    \ }\n  return $paren_array;\n}\n</code>\n<|/ a tags=php,parentheses,string |>\n\
    <| a |>\n<code>\n<?php\n$string = \"(()()) ((())) () ((())()())\";\n$array = array();\n\
    $stack = array();\n$stack[] = $string;\n$level = 0;\nwhile ($stack) {\n    $string\
    \ = $stack[count($stack) - 1];\n    $level = count($stack);\n    $array = array_merge($array,\
    \ explode(\" \", $string));\n    $stack = array_slice($stack, 0, count($stack)\
    \ - 1);\n}\nprint_r($array);\n</code>\n<|/ a tags=php,parentheses,string dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = \"(()()) ((())) () ((())()())\"\
    ;\n$array = array();\n$stack = array();\n$stack[] = $string;\n$level = 0;\nwhile\
    \ ($stack) {\n    $string = $stack[count($stack) - 1];\n    $level = count($stack);\n\
    \    $array = array_merge($array, explode(\" \", $string));\n    $stack = array_slice($stack,\
    \ 0, count($stack) - 1);\n}\nprint_r($array);\n</code>\n<|/ a tags=php,parentheses,string\
    \ |>\n<| a tags=php,parentheses,string |>\n<code>\n$string = \"(()()) ((())) ()\
    \ ((())()())\";\n$array = array();\n$stack = array();\n$stack[] = $string;\n$level\
    \ = 0;\nwhile ($stack) {\n    $string = $stack[count($stack) - 1];\n    $level\
    \ = count($stack);\n    $array = array_merge($array, explode(\" \", $string));\n\
    \    $stack = array_slice($stack, 0, count($stack) - 1);\n}\nprint_r($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = \"(()())\
    \ ((())\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpw2i6pp5n.php
    on line 20

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_len = count($paren_array);\n  for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n    $paren_levels[$i] = $paren_levels_len - $i;\n  }\n  $max_level\
    \ = 0;\n  $max_level_len = count($paren_levels);\n  for ($i = 0; $i < $max_level_len;\
    \ $i++) {\n    if ($paren_levels[$i] > $max_level) {\n      $max_level = $paren_levels[$i];\n\
    \    }\n  }\n  $nested_parens = array();\n  for ($i = 0; $i < $max_level; $i++)\
    \ {\n    $nested_parens[] = $i;\n  }\n  $nested_parens_len = count($nested_parens);\n\
    \  for ($i = 0; $i < $nested_parens_len; $i++) {\n    $paren_levels[$i] = $nested_parens[$i];\n\
    \  }\n  $max_level = 0;\n  $max_level_len = count($paren_levels);\n  for ($i =\
    \ 0; $i < $max_level_len; $i++) {\n    if ($paren_levels[$i] > $max_level) {\n\
    \      $max_level = $paren_levels[$i];\n    }\n  }\n  $nested_parens = array();\n\
    \  for ($i = 0; $i < $max_level; $i++) {\n    $nested_parens[] = $i;\n  }\n  $nested_parens_len\
    \ = count($nested_parens);\n  for ($i = 0; $i < $nested_parens_len; $i++) {\n\
    \    $paren_levels[$i] = $nested_parens[$i];\n  }\n  $max_level = 0;\n  $max_level_len\
    \ = count($paren_levels);\n  for ($i = 0; $i < $max_level_len; $i++) {\n    if\
    \ ($paren_levels[$i] > $max_level) {\n      $max_level = $paren_levels[$i];\n\
    \    }\n  }\n  $nested_parens = array();\n  for ($i = 0; $i < $max_level; $i++)\
    \ {\n    $nested_parens[] = $i;\n  }\n  $nested_parens_len = count($nested_parens);\n\
    \  for ($i = 0; $i < $nested_parens_len; $i++) {\n    $paren_levels[$i] = $nested_parens[$i];\n\
    \  }\n  $max_level = 0;\n  $max_level_len = count($paren_levels);\n  for ($i =\
    \ 0; $i < $max_level_len; $i++) {\n    if ($paren_levels[$i] > $max_level) {\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 62 in /tmp/tmphawe0455.php on line 74

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_pointer = -1;\n    $paren_stack_pointer_length = count($paren_stack);\n\
    \    $paren_stack_pointer_length--;\n    $paren_stack_pointer_length--;\n    foreach\
    \ (explode(' ', $paren_string) as $char) {\n        if ($char == '(') {\n    \
    \        $paren_stack[$paren_stack_pointer]++;\n            $paren_stack_pointer++;\n\
    \        } elseif ($char == ')') {\n            $paren_stack[$paren_stack_pointer]--;\n\
    \            $paren_stack_pointer--;\n            if ($paren_stack[$paren_stack_pointer]\
    \ == 0) {\n                $paren_stack_pointer--;\n            }\n        } elseif\
    \ ($char == ' ') {\n            if ($paren_stack[$paren_stack_pointer] == 0) {\n\
    \                $paren_stack[$paren_stack_pointer] = $paren_level;\n        \
    \        $paren_level++;\n            }\n        }\n    }\n    return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgt2k9dx2.php:40\n\
    Stack trace:\n#0 /tmp/tmpgt2k9dx2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgt2k9dx2.php\
    \ on line 40\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_count = array();\n  $paren_levels_count = array_count_values($paren_array);\n\
    \  foreach ($paren_array as $paren_level) {\n    $paren_levels[] = $paren_level;\n\
    \  }\n  foreach ($paren_levels_count as $paren_level => $count) {\n    if ($paren_level\
    \ > $paren_levels_count[$paren_level - 1]) {\n      $paren_levels_count[$paren_level\
    \ - 1] = $paren_level;\n    }\n  }\n  $max_level = $paren_levels_count[$paren_levels_count];\n\
    \  $max_level_array = array();\n  $max_level_array[0] = $paren_array;\n  for ($i\
    \ = 1; $i < $max_level; $i++) {\n    $max_level_array[$i] = array();\n  }\n  for\
    \ ($i = 0; $i < $max_level; $i++) {\n    $max_level_array[$i] = array_merge($max_level_array[$i\
    \ - 1], $paren_array);\n  }\n  $paren_levels_count = array_count_values($max_level_array[$max_level\
    \ - 1]);\n  foreach ($paren_levels_count as $paren_level => $count) {\n    if\
    \ ($paren_level > $paren_levels_count[$paren_level - 1]) {\n      $paren_levels_count[$paren_level\
    \ - 1] = $paren_level;\n    }\n  }\n  $max_level = $paren_levels_count[$paren_levels_count];\n\
    \  $max_level_array = array();\n  $max_level_array[0] = $paren_array;\n  for ($i\
    \ = 1; $i < $max_level; $i++) {\n    $max_level_array[$i] = array();\n  }\n  for\
    \ ($i = 0; $i < $max_level; $i++) {\n    $max_level_array[$i] = array_merge($max_level_array[$i\
    \ - 1], $paren_array);\n  }\n  $paren_levels_count = array_count_values($max_level_array[$max_level\
    \ - 1]);\n  foreach ($paren_levels_count as $paren_level => $count) {\n    if\
    \ ($paren_level > $paren_levels_count[$paren_level - 1]) {\n      $paren_levels_count[$paren_level\
    \ - 1] = $paren_level;\n    }\n  }\n  $max_level = $paren_levels_count[$paren_levels_count];\n\
    \  $max_level_array = array();\n  $max_level_array[0] = $paren_array;\n  for ($i\
    \ = 1; $i < $max_level; $i++) {\n    $max_level_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpjzfl6jh9.php
    on line 55

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (/', '(', $paren_string);\n    $paren_string = preg_replace('/\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\\
    )/', '\\)', $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)/', '\\)', $\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpda8fh345.php on line 37

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $paren_array_level = 0;\n    $paren_array_max_level\
    \ = 0;\n    foreach ($paren_array as $paren_string) {\n        if ($paren_array_level\
    \ == 0) {\n            $paren_array_max_level = $paren_array_level;\n        }\n\
    \        if ($paren_array_level > $paren_array_max_level) {\n            $paren_array_max_level\
    \ = $paren_array_level;\n        }\n        $paren_array_level++;\n    }\n   \
    \ return $paren_array_max_level;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ seem to work. Try it with `parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )`\n<|/ c |>\n<| c |>\nIt does work. Try it here: https://3v4l.org/ZqoKK\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for `parse_nested_parens(\"((()))\")` which should\
    \ return `1`\n<|/ c |>\n<| c |>\nIt does work for `parse_nested_parens(\"((()))\"\
    )` which should return `1`\n<|/ c |>\n<| c |>\nIt doesn't work for `parse_nested_parens(\"\
    ((()))\")` which should return `1`\n<|/ c |>\n<| a dscore=2 |>\nI wrote a recursive\
    \ function that does this for me:\n<code>\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpmw_hm37q.php
    on line 23

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_pointer = -1;\n  $paren_stack_pointer_max = -1;\n  $paren_stack_pointer_max_index\
    \ = -1;\n  $paren_stack_pointer_max_value = -1;\n  $paren_stack_pointer_max_value_pos\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_index = -1;\n  $paren_stack_pointer_max_value_pos_value\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value\
    \ = -1;\n  $paren_stack_pointer_max_value_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index_pos_value_index\
    \ = -1;\n  $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpjg7j6vx2.php on line 38

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_size\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_size; $i++) {\n        $level = 0;\n       \
    \ $paren_array[$i] = trim($paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\\
    s+/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\(\\\
    )/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\(\\(\\\
    )/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\(\\(\\\
    (\\)\\)/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\\
    (\\(\\(\\(\\)\\)\\)/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\\
    (\\(\\(\\(\\(\\)\\)\\)\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)/', '', $paren_array[$i]);\n\
    \        $paren_array[$i] = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\\
    )\\)/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\(\\\
    (\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)/', '', $paren_array[$i]);\n\
    \        $paren_array[$i] = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\\
    )\\)\\)\\)\\)\\)/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_array[$i]);\n\
    \        $paren_array[$i] = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\\
    )\\)\\)\\)\\)\\)\\)\\)/', '', $paren_array[$i]);\n        $paren_array[$i] = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_array[$i]);\n\
    \        $paren_array\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp8j1b6916.php
    on line 30

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode(\"\
    \ \", $paren_string) as $char) {\n    if ($char == \"(\") {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == \")\"\
    ) {\n      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n  \
    \  } else if ($char == \")\") {\n      $paren_stack[$paren_level][] = array();\n\
    \    }\n    $paren_stack[$paren_level][] = $char;\n  }\n  foreach ($paren_stack\
    \ as $level) {\n    if (count($level) == 0) {\n      $paren_array[] = 0;\n   \
    \ } else {\n      $paren_array[] = count($level) - 1;\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4fzk55b.php:40\n\
    Stack trace:\n#0 /tmp/tmpi4fzk55b.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpi4fzk55b.php\
    \ on line 40\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_level--;\n    $paren_string = $paren_stack[$paren_level];\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    $paren_level++;\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_qk7n_1.php:26\n\
    Stack trace:\n#0 /tmp/tmp2_qk7n_1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2_qk7n_1.php\
    \ on line 26\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count[0] = 0;\n    $paren_level_max_count[1] = 0;\n    $paren_level_max_count[2]\
    \ = 0;\n    $paren_level_max_count[3] = 0;\n    $paren_level_max_count[4] = 0;\n\
    \    $paren_level_max_count[5] = 0;\n    $paren_level_max_count[6] = 0;\n    $paren_level_max_count[7]\
    \ = 0;\n    $paren_level_max_count[8] = 0;\n    $paren_level_max_count[9] = 0;\n\
    \    $paren_level_max_count[10] = 0;\n    $paren_level_max_count[11] = 0;\n  \
    \  $paren_level_max_count[12] = 0;\n    $paren_level_max_count[13] = 0;\n    $paren_level_max_count[14]\
    \ = 0;\n    $paren_level_max_count[15] = 0;\n    $paren_level_max_count[16] =\
    \ 0;\n    $paren_level_max_count[17] = 0;\n    $paren_level_max_count[18] = 0;\n\
    \    $paren_level_max_count[19] = 0;\n    $paren_level_max_count[20] = 0;\n  \
    \  $paren_level_max_count[21] = 0;\n    $paren_level_max_count[22] = 0;\n    $paren_level_max_count[23]\
    \ = 0;\n    $paren_level_max_count[24] = 0;\n    $paren_level_max_count[25] =\
    \ 0;\n    $paren_level_max_count[26] = 0;\n    $paren_level_max_count[27] = 0;\n\
    \    $paren_level_max_count[28] = 0;\n    $paren_level_max_count[29] = 0;\n  \
    \  $paren_level_max_count[30] = 0;\n    $paren_level_max_count[31] = 0;\n    $paren_level_max_count[32]\
    \ = 0;\n    $paren_level_max_count[33] = 0;\n    $paren_level_max_count[34] =\
    \ 0;\n    $paren_level_max_count[35] = 0;\n    $paren_level_max_count[36] = 0;\n\
    \    $paren_level_max_count[37] = 0;\n    $paren_level_max_count[38] = 0;\n  \
    \  $paren_level_max_count[39] = 0;\n    $paren_level_max_count[40] = 0;\n    $paren_level_max_count[41]\
    \ = 0;\n    $paren_level_max_count[42] = 0;\n    $paren_level_max_count[43] =\
    \ 0;\n    $paren_level_max_count[44] = 0;\n    $paren_level_max_count[45] = 0;\n\
    \    $paren_level_max_count[46] = 0;\n    $paren_level_max_count[47] = 0;\n  \
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpugq4zcor.php
    on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(\" \", $paren_string) as $paren) {\n    if ($paren == \"(\"\
    ) {\n      $paren_stack[$paren_level]++;\n    } else if ($paren == \")\") {\n\
    \      $paren_stack[$paren_level]--;\n      if ($paren_stack[$paren_level] ==\
    \ 0) {\n        $paren_level--;\n      }\n    }\n    $paren_array[] = $paren_level;\n\
    \  }\n  return $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6mh8e7lw.php:29\n\
    Stack trace:\n#0 /tmp/tmp6mh8e7lw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6mh8e7lw.php\
    \ on line 29\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = array();\n \
    \   $paren_level = 0;\n    $paren_nesting = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpzkqg4vw7.php
    on line 73

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == '(') {\n      $level++;\n      $paren_levels[$level] = $level;\n\
    \    } else if ($paren == ')') {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = max($max_level, $level);\n\
    \      }\n    }\n  }\n  return $max_level;\n}\n</code>\n<|/ a tags=php,parentheses,string\
    \ |>\n<| c |>\nThis doesn't work for nested parentheses such as \"((()))\" which\
    \ should return 3.\n<|/ c |>\n<| c |>\nI updated my answer to handle nested parentheses.\n\
    <|/ c |>\n<| a tags=php,parentheses,string |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpjzkppd48.php
    on line 26

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ' ') {\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ {\n      $paren_stack[$paren_level][] = $char;\n    }\n  }\n  foreach ($paren_stack\
    \ as $level) {\n    if (count($level) == 0) {\n      $paren_array[] = 0;\n   \
    \ } else {\n      $paren_array[] = count($level) - 1;\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnamruzcc.php:41\n\
    Stack trace:\n#0 /tmp/tmpnamruzcc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnamruzcc.php\
    \ on line 41\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren == '(') {\n\
    \      $paren_stack[$paren_level]++;\n    } else if ($paren == ')') {\n      $paren_stack[$paren_level]--;\n\
    \      if ($paren_stack[$paren_level] == 0) {\n        $paren_level--;\n     \
    \ }\n    }\n    $paren_array[] = $paren_level;\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0xh3nbw.php:30\n\
    Stack trace:\n#0 /tmp/tmpk0xh3nbw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk0xh3nbw.php\
    \ on line 30\n"
  timestamp: 1659823843
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = array();\n \
    \   $paren_level = 0;\n    $paren_nesting = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while (count($paren_stack)) {\n    \
    \    $paren_string = array_pop($paren_stack);\n        if ($paren_string == ')')\
    \ {\n            $paren_nesting--;\n            if ($paren_nesting == 0) {\n \
    \               $paren_array[] = $paren_level;\n            }\n        } else\
    \ if ($paren_string == '(') {\n            $paren_nesting++;\n            $paren_level++;\n\
    \            $paren_stack[] = $paren_string;\n        } else {\n            $paren_stack[]\
    \ = $paren_string;\n        }\n    }\n    return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823848
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  foreach (explode(\"\
    \ \", $paren_string) as $char) {\n    if ($paren_level > 0) {\n      $paren_stack_string\
    \ = $paren_stack_string.$char;\n      if ($paren_stack_string==\"(\") {\n    \
    \    $paren_stack[] = $paren_level;\n      } else if ($paren_stack_string==\"\
    )\") {\n        $paren_level = $paren_stack[count($paren_stack)-1];\n        $paren_stack_string\
    \ = \"\";\n      }\n    } else {\n      $paren_stack_string = $char;\n    }\n\
    \  }\n  return $paren_array;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. Unfortunately this doesn't work for me. I've tried it on http://sandbox.onlinephpfunctions.com/code/7a59e3ebd507d89a79e00d50d59e3dd9a2b9f67a\n\
    <|/ c |>\n<| c |>\nI updated my answer with some more test cases. I hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your effort. I tried your test cases and it seems\
    \ to work fine. Unfortunately it doesn't work for my real life case. I've added\
    \ my real life case to my original question. Maybe you can have a look and see\
    \ what I'm doing wrong.\n<|/ c |>\n<| c |>\nI updated my answer with some more\
    \ test cases. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your effort. I tried\
    \ your test cases and it seems to work fine. Unfortunately it doesn't work for\
    \ my real life case. I've added my real life case to my original question. Maybe\
    \ you can have a look and see what I'm doing wrong.\n<|/ c |>\n<| a dscore=1 |>\n\
    I finally found a solution that works for my real life case. I've added my real\
    \ life case to my original question. Maybe you can have a look and see what I'm\
    \ doing wrong.\n<code>\n<?php\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpsffpvwul.php
    on line 28

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_array = array_merge($paren_array, explode('\
    \ ', $paren_string));\n    $paren_level = count($paren_array);\n    foreach ($paren_array\
    \ as $paren_string) {\n      if ($paren_string == '(') {\n        $paren_stack[]\
    \ = $paren_string;\n      } else if ($paren_string == ')') {\n        $paren_stack\
    \ = array_merge($paren_stack, array_reverse($paren_stack));\n      }\n    }\n\
    \  }\n  return $paren_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5z8jvj6u.php:32\n\
    Stack trace:\n#0 /tmp/tmp5z8jvj6u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5z8jvj6u.php\
    \ on line 32\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[$paren_level]++;\n    } else if ($char == ')') {\n      $paren_stack[$paren_level]--;\n\
    \      if ($paren_stack[$paren_level] == 0) {\n        $paren_level--;\n     \
    \ }\n    }\n    $paren_array[] = $paren_level;\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm89vj25n.php:30\n\
    Stack trace:\n#0 /tmp/tmpm89vj25n.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm89vj25n.php\
    \ on line 30\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode(\"\
    \ \", $paren_string) as $char) {\n    if ($char == \"(\") {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == \")\"\
    ) {\n      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n  \
    \  } else if ($char == \" \") {\n      $paren_stack[$paren_level][] = array();\n\
    \    } else {\n      $paren_stack[$paren_level][] = $char;\n    }\n  }\n  while\
    \ ($paren_level > 0) {\n    $paren_level--;\n    $paren_stack[$paren_level][]\
    \ = array();\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1ylc_3i.php:38\n\
    Stack trace:\n#0 /tmp/tmpw1ylc_3i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpw1ylc_3i.php\
    \ on line 38\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ' ') {\n      $paren_stack[$paren_level][] = array();\n    }\n\
    \  }\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_ufwofl.php:35\n\
    Stack trace:\n#0 /tmp/tmp0_ufwofl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0_ufwofl.php\
    \ on line 35\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = count($paren_stack);\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp6xjnc_1p.php
    on line 61

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $paren_string) {\n    $paren_array = explode(\"\
    (\", $paren_string);\n    $level = 0;\n    foreach ($paren_array as $paren_string)\
    \ {\n      if ($paren_string == \"(\") {\n        $level++;\n      } else if ($paren_string\
    \ == \")\") {\n        $level--;\n      }\n      if ($level > $max_level) {\n\
    \        $max_level = $level;\n        $max_level_array = $paren_array;\n    \
    \  }\n    }\n  }\n  return $max_level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3ded43w.php:34\n\
    Stack trace:\n#0 /tmp/tmpb3ded43w.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpb3ded43w.php\
    \ on line 34\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char\
    \ == '(') {\n      $paren_level++;\n      $paren_stack[$paren_level][] = array();\n\
    \    } else if ($char == ')') {\n      $paren_level--;\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else if ($char == ' ') {\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else {\n      $paren_stack[$paren_level][] = $char;\n    }\n\
    \  }\n  $paren_array[] = $paren_level;\n  $paren_array[] = $paren_stack;\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnei7_vb.php:37\n\
    Stack trace:\n#0 /tmp/tmplnei7_vb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplnei7_vb.php\
    \ on line 37\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5tm8j_sh.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = \"\";\n  $paren_stack[$paren_level] .= $paren_string;\n\
    \  while ($paren_stack[$paren_level] != \"\") {\n    $paren_level++;\n    $paren_stack[$paren_level]\
    \ = \"\";\n  }\n  $paren_level--;\n  for ($i = 0; $i < $paren_level; $i++) {\n\
    \    $paren_array[$i] = $paren_stack[$i];\n  }\n  return $paren_array;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s86sf4x.php:29\n\
    Stack trace:\n#0 /tmp/tmp2s86sf4x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2s86sf4x.php\
    \ on line 29\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == \"(\") {\n      $level++;\n      if ($level > $max_level) {\n\
    \        $max_level = $level;\n      }\n      $paren_levels[] = $level;\n    }\
    \ else if ($paren == \")\") {\n      $level--;\n      if ($level < 0) {\n    \
    \    $level = 0;\n      }\n      $paren_levels[] = $level;\n    }\n  }\n  $max_level\
    \ = max($max_level);\n  $max_level = min(count($paren_levels), $max_level);\n\
    \  $paren_levels = array_reverse($paren_levels);\n  return $max_level;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: max(): Argument #1 ($value) must be\
    \ of type array, int given in /tmp/tmpnz2tqnpc.php:27\nStack trace:\n#0 /tmp/tmpnz2tqnpc.php(27):\
    \ max(0)\n#1 /tmp/tmpnz2tqnpc.php(34): parse_nested_parens('(()()) ((())) (...')\n\
    #2 /tmp/tmpnz2tqnpc.php(38): candidate('(()()) ((())) (...')\n#3 /tmp/tmpnz2tqnpc.php(43):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmpnz2tqnpc.php on line 27\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\))/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\))\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\))\\\
    )\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\\
    (\\))\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\\
    (\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\\
    ))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\\
    ))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp9to3563n.php on line 38

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_len = count($paren_stack);\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top\
    \ = -1;\n  $paren_stack_bottom = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom\
    \ = -1;\n  $paren_stack_top = -1;\n  $paren_stack_bottom = -1;\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpbnfa585m.php on line 87

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $level) {\n        if\
    \ ($level == \"(\") {\n            $max_level++;\n            $max_level_array[]\
    \ = $max_level;\n        } else if ($level == \")\") {\n            $max_level--;\n\
    \            $max_level_array[] = $max_level;\n        }\n    }\n    return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpshw4gizv.php:28\n\
    Stack trace:\n#0 /tmp/tmpshw4gizv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpshw4gizv.php\
    \ on line 28\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    }\n\
    \    if ($paren_level == 0 && count($paren_stack[$paren_level]) == 0) {\n    \
    \  $paren_array[] = count($paren_stack);\n    }\n    $paren_stack[$paren_level][]\
    \ = $char;\n  }\n  return $paren_array;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. Your code works fine for single parentheses but fails\
    \ for nested parentheses.\n<|/ c |>\n<| c |>\nIt works for nested parentheses\
    \ just fine. I've tested it on multiple examples. Please give an example where\
    \ it doesn't work.\n<|/ c |>\n<| c |>\nIt works for nested parentheses just fine.\
    \ I've tested it on multiple examples. Please give an example where it doesn't\
    \ work.\n<|/ c |>\n<| c |>\nIt works for nested parentheses just fine. I've tested\
    \ it on multiple examples. Please give an example where it doesn't work.\n<|/\
    \ c |>\n<| c |>\nIt works for nested parentheses just fine. I've tested it on\
    \ multiple examples. Please give an example where it doesn't work.\n<|/ c |>\n\
    <| a dscore=1 |>\nI wrote a recursive solution for this. It works for all cases,\
    \ including nested parentheses.\n<code>\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpuza2tbe3.php
    on line 28

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_level_count = array();\n  $paren_level_count_stack = array();\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[]\
    \ = 0;\n  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n\
    \  $paren_level_count_stack[] = 0;\n  $paren_level_count_stack[] = 0;\n  $paren\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmptp3sl9wf.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $paren_array_max_level = -1;\n    $paren_array_max_level_length\
    \ = -1;\n    foreach ($paren_array as $paren_array_item) {\n        if ($paren_array_item\
    \ == \"(\") {\n            $paren_array_max_level++;\n        } else if ($paren_array_item\
    \ == \")\") {\n            $paren_array_max_level--;\n            if ($paren_array_max_level\
    \ < 0) {\n                throw new Exception(\"Invalid parentheses string: \"\
    \ . $paren_string);\n            }\n        } else if ($paren_array_item == \"\
    (\") {\n            $paren_array_max_level_length++;\n        } else if ($paren_array_item\
    \ == \")\") {\n            $paren_array_max_level_length--;\n        }\n    }\n\
    \    if ($paren_array_max_level_length < 0) {\n        throw new Exception(\"\
    Invalid parentheses string: \" . $paren_string);\n    }\n    $paren_array_max_level_length++;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_array_max_level_length--;\n\
    \    $paren_array_max_level_length--;\n    $paren_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpxyif5w2t.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_pointer = 0;\n  $paren_stack_pointer_max = 0;\n  $paren_stack_pointer_max_index\
    \ = 0;\n  $paren_stack_pointer_max_index2 = 0;\n  $paren_stack_pointer_max_index3\
    \ = 0;\n  $paren_stack_pointer_max_index4 = 0;\n  $paren_stack_pointer_max_index5\
    \ = 0;\n  $paren_stack_pointer_max_index6 = 0;\n  $paren_stack_pointer_max_index7\
    \ = 0;\n  $paren_stack_pointer_max_index8 = 0;\n  $paren_stack_pointer_max_index9\
    \ = 0;\n  $paren_stack_pointer_max_index10 = 0;\n  $paren_stack_pointer_max_index11\
    \ = 0;\n  $paren_stack_pointer_max_index12 = 0;\n  $paren_stack_pointer_max_index13\
    \ = 0;\n  $paren_stack_pointer_max_index14 = 0;\n  $paren_stack_pointer_max_index15\
    \ = 0;\n  $paren_stack_pointer_max_index16 = 0;\n  $paren_stack_pointer_max_index17\
    \ = 0;\n  $paren_stack_pointer_max_index18 = 0;\n  $paren_stack_pointer_max_index19\
    \ = 0;\n  $paren_stack_pointer_max_index20 = 0;\n  $paren_stack_pointer_max_index21\
    \ = 0;\n  $paren_stack_pointer_max_index22 = 0;\n  $paren_stack_pointer_max_index23\
    \ = 0;\n  $paren_stack_pointer_max_index24 = 0;\n  $paren_stack_pointer_max_index25\
    \ = 0;\n  $paren_stack_pointer_max_index26 = 0;\n  $paren_stack_pointer_max_index27\
    \ = 0;\n  $paren_stack_pointer_max_index28 = 0;\n  $paren_stack_pointer_max_index29\
    \ = 0;\n  $paren_stack_pointer_max_index30 = 0;\n  $paren_stack_pointer_max_index31\
    \ = 0;\n  $paren_stack_pointer_max_index32 = 0;\n  $paren_stack_pointer_max_index33\
    \ = 0;\n  $paren_stack_pointer_max_index34 = 0;\n  $paren_stack_pointer_max_index35\
    \ = 0;\n  $paren_stack_pointer_max_index36 = 0;\n  $paren_stack_pointer_max_index37\
    \ = 0;\n  $paren_stack_pointer_max_index38 = 0;\n  $paren_stack_pointer_max_index39\
    \ = 0;\n  $paren_stack_pointer_max_index40 = 0;\n  $paren_stack_pointer_max_index41\
    \ = 1;\n  $paren_stack_pointer_max_index42 = 1;\n  $paren_stack_pointer_max_index43\
    \ = 1;\n  $paren_stack_pointer_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp4xhd1uh1.php
    on line 57

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $parens\
    \ = preg_split('/\\s+/', $paren_string);\n  $level = 0;\n  $parens_stack = array();\n\
    \  foreach ($parens as $paren) {\n    if ($paren == '(') {\n      $parens_stack[]\
    \ = $level;\n    } else if ($paren == ')') {\n      $level = array_pop($parens_stack);\n\
    \    }\n  }\n  return $parens_stack;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpij6s7eee.php:27\n\
    Stack trace:\n#0 /tmp/tmpij6s7eee.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpij6s7eee.php\
    \ on line 27\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_level--;\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    foreach ($paren_array as $paren_item)\
    \ {\n      if ($paren_item == \"(\") {\n        $paren_level++;\n        $paren_stack[$paren_level]\
    \ = $paren_string;\n      } else if ($paren_item == \")\") {\n        $paren_level--;\n\
    \        $paren_stack[$paren_level] = $paren_string;\n      }\n    }\n  }\n  return\
    \ $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62lwmj55.php:33\n\
    Stack trace:\n#0 /tmp/tmp62lwmj55.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp62lwmj55.php\
    \ on line 33\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_level--;\n        $paren_string = $paren_stack[$paren_level];\n\
    \        $paren_array = explode(\" \", $paren_string);\n        $paren_level++;\n\
    \    }\n    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30p3m9tm.php:26\n\
    Stack trace:\n#0 /tmp/tmp30p3m9tm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp30p3m9tm.php\
    \ on line 26\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n            $max_level_array[]\
    \ = $max_level;\n        } else if ($paren == ')') {\n            $max_level--;\n\
    \            $max_level_array[] = $max_level;\n        }\n    }\n    return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrsy3stf.php:28\n\
    Stack trace:\n#0 /tmp/tmptrsy3stf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptrsy3stf.php\
    \ on line 28\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\)\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\)\\)\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\)\\\
    )\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\\
    (\\(\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\\
    )\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/\(\(\(\(\(\(\(\(\(\(\(\(\(\(\..."
    in /tmp/tmp8w778swi.php on line 18

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string = \"\";\n \
    \ $paren_stack_string_count = 0;\n  $paren_\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyzkwd5pl.php
    on line 77

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_size = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_array = [];\n  for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n    }\n \
    \   if ($paren_array[$i] === ')') {\n      $max_level--;\n    }\n    $max_level_array[$i]\
    \ = $max_level;\n  }\n  $max_level_array_size = count($max_level_array);\n  $max_level_array_index\
    \ = 0;\n  for ($i = 0; $i < $max_level_array_size; $i++) {\n    if ($max_level_array[$i]\
    \ > $max_level) {\n      $max_level_array_index = $i;\n    }\n  }\n  $max_level\
    \ = $max_level_array[$max_level_array_index];\n  $paren_array_size = $paren_array_size\
    \ - $max_level_array_index;\n  $paren_array_index = 0;\n  $paren_array = [];\n\
    \  for ($i = 0; $i < $paren_array_size; $i++) {\n    if ($paren_array[$i] ===\
    \ '(') {\n      $paren_array[$i] = '';\n    }\n    if ($paren_array[$i] === ')')\
    \ {\n      $paren_array[$i] = '';\n    }\n    $paren_array[$i] = $paren_array[$i]\
    \ . $paren_array[$i + 1];\n    $paren_array[$i + 1] = '';\n    $paren_array_index++;\n\
    \  }\n  return $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpwg8nwa80.php on line 33\n\n\
    Warning: Undefined array key 0 in /tmp/tmpwg8nwa80.php on line 36\n\nWarning:\
    \ Undefined array key 0 in /tmp/tmpwg8nwa80.php on line 39\n\nWarning: Undefined\
    \ array key 1 in /tmp/tmpwg8nwa80.php on line 39\n\nWarning: Undefined array key\
    \ 2 in /tmp/tmpwg8nwa80.php on line 39\n\nWarning: Undefined array key 3 in /tmp/tmpwg8nwa80.php\
    \ on line 39\n\nWarning: Undefined array key 4 in /tmp/tmpwg8nwa80.php on line\
    \ 39\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwg8nwa80.php:50\n\
    Stack trace:\n#0 /tmp/tmpwg8nwa80.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpwg8nwa80.php\
    \ on line 50\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char == '(') {\n      $paren_level++;\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else if ($char == ')') {\n      $paren_level--;\n      if\
    \ ($paren_level == 0) {\n        $paren_stack[$paren_level][] = array();\n   \
    \   }\n    } else if ($char == ' ') {\n      if ($paren_level == 0) {\n      \
    \  $paren_stack[$paren_level][] = array();\n      }\n    } else {\n      $paren_stack[$paren_level][]\
    \ = $char;\n    }\n  }\n  $paren_array[] = $paren_level;\n  $paren_array[] = $paren_stack;\n\
    \  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqfdydfj.php:42\n\
    Stack trace:\n#0 /tmp/tmpfqfdydfj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfqfdydfj.php\
    \ on line 42\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5tm8j_sh.php
    on line 66

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_top = count($paren_stack);\n  $paren_stack[$paren_stack_top] =\
    \ $paren_array;\n  $paren_array[$paren_stack_top] = array();\n  $paren_level[$paren_stack_top]\
    \ = 0;\n  $paren_stack_count = count($paren_stack);\n  foreach (explode(\" \"\
    , $paren_string) as $paren_string) {\n    if ($paren_string == \"(\") {\n    \
    \  $paren_level++;\n      $paren_stack[$paren_stack_count] = $paren_array;\n \
    \     $paren_array[$paren_stack_count] = array();\n      $paren_stack_count++;\n\
    \    } else if ($paren_string == \")\") {\n      $paren_level--;\n      $paren_stack[$paren_stack_top]\
    \ = $paren_array;\n      $paren_array = $paren_stack[$paren_stack_count];\n  \
    \    $paren_stack_count--;\n      if ($paren_level == 0) {\n        $paren_stack_top--;\n\
    \      }\n    }\n  }\n  return $paren_stack;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Cannot use a scalar value as an array in\
    \ /tmp/tmp42345zf5.php:14\nStack trace:\n#0 /tmp/tmp42345zf5.php(36): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmp42345zf5.php(40): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmp42345zf5.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp42345zf5.php\
    \ on line 14\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_count = array();\n    $paren_levels_count_max = array();\n\
    \    $paren_levels_count_max[0] = 0;\n    $paren_levels_count_max[1] = 0;\n  \
    \  $paren_levels_count_max[2] = 0;\n    $paren_levels_count_max[3] = 0;\n    foreach\
    \ ($paren_array as $paren_string) {\n        $paren_levels[] = strlen($paren_string);\n\
    \        $paren_levels_count[] = strlen($paren_string);\n        $paren_levels_count_max[0]\
    \ = max($paren_levels_count_max[0], $paren_levels_count[0]);\n        $paren_levels_count_max[1]\
    \ = max($paren_levels_count_max[1], $paren_levels_count[1]);\n        $paren_levels_count_max[2]\
    \ = max($paren_levels_count_max[2], $paren_levels_count[2]);\n        $paren_levels_count_max[3]\
    \ = max($paren_levels_count_max[3], $paren_levels_count[3]);\n    }\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count_max = array_reverse($paren_levels_count_max);\n\
    \    $paren_levels_count_max[0]++;\n    $paren_levels_count_max[1]++;\n    $paren_levels_count_max[2]++;\n\
    \    $paren_levels_count_max[3]++;\n    $paren_levels_count_max[0]--;\n    $paren_levels_count_max[1]--;\n\
    \    $paren_levels_count_max[2]--;\n    $paren_levels_count_max[3]--;\n    $paren_levels_count_max[0]--;\n\
    \    $paren_levels_count_max[1]--;\n    $paren_levels_count_max[2]--;\n    $paren_levels_count_max[3]--;\n\
    \    $paren_levels_count_max[0]--;\n    $paren_levels_count_max[1]--;\n    $paren_levels_count_max[2]--;\n\
    \    $paren_levels_count_max[3]--;\n    $paren_levels_count_max[0]--;\n    $paren_levels_count_max[1]--;\n\
    \    $paren_levels_count_max[2]--;\n    $paren_levels_count_max[3]--;\n    $paren_levels_count_max[0]--;\n\
    \    $paren_levels_count_max[1]--;\n    $paren_levels_count_max[2]--;\n    $paren_levels_count_max[3]--;\n\
    \    $paren_levels_count_max[0]--;\n    $paren_levels_count_max[1]--;\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpcnnvjruq.php on line 62

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_size = count($paren_stack);\n  $paren_stack_pointer = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\n  $paren_stack_pointer_min = 0;\n  $paren_stack_pointer_max\
    \ = $paren_stack_size;\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmp7lm94pbp.php on line 64

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack[] =\
    \ 0;\n  $paren_stack[] = 0;\n  foreach (explode(' ', $paren_string) as $char)\
    \ {\n    if ($char == '(') {\n      $paren_level++;\n      $paren_stack[] = $paren_level;\n\
    \    } else if ($char == ')') {\n      $paren_level--;\n      $paren_stack[] =\
    \ $paren_level;\n    } else if ($char == ' ') {\n      $paren_level = 0;\n   \
    \ }\n  }\n  $paren_level = 0;\n  foreach ($paren_stack as $level) {\n    if ($level\
    \ == $paren_level) {\n      $paren_level++;\n    } else {\n      $paren_level--;\n\
    \    }\n  }\n  $paren_level--;\n  while ($paren_level > 0) {\n    $paren_level--;\n\
    \    $paren_stack[$paren_level] = 0;\n  }\n  foreach ($paren_stack as $level)\
    \ {\n    $paren_array[] = $level;\n  }\n  return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbjp_836.php:50\n\
    Stack trace:\n#0 /tmp/tmpzbjp_836.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzbjp_836.php\
    \ on line 50\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_stack_string_count\
    \ = 0;\n    $paren_stack_string_index = 0;\n    $paren_stack_strings[] = $paren_string;\n\
    \    $paren_stack_string_counts[] = strlen($paren_string);\n    while (count($paren_stack)\
    \ > 0) {\n        $paren_level_count = count($paren_stack);\n        $paren_level\
    \ = $paren_stack[$paren_level_count-1];\n        $paren_string = $paren_stack_strings[$paren_level_count-1];\n\
    \        $paren_stack_string_count = $paren_stack_string_counts[$paren_level_count-1];\n\
    \        $paren_stack_string_index = $paren_stack_string_count-1;\n        $paren_stack_strings[$paren_level_count-1]\
    \ = $paren_string.substr($paren_string, 0, $paren_stack_string_count);\n     \
    \   $paren_stack_string_counts[$paren_level_count-1] = $paren_stack_string_count;\n\
    \        $paren_stack_string_index = $paren_stack_string_count-1;\n        $paren_stack_string_count\
    \ = $paren_stack_string_count-1;\n        $paren_stack_strings[$paren_level_count]\
    \ = $paren_string.substr($paren_string, $paren_stack_string_count);\n        $paren_stack_string_counts[$paren_level_count]\
    \ = $paren_stack_string_count;\n        $paren_stack_string_index = $paren_stack_string_count-1;\n\
    \        $paren_stack_string_count = $paren_stack_string_count-1;\n        $paren_stack_strings[$paren_level_count]\
    \ = $paren_string.substr($paren_string, $paren_stack_string_count);\n        $paren_stack_string_counts[$paren_level_count]\
    \ = $paren_stack_string_count;\n        $paren_stack_string_index = $paren_stack_string_count-1;\n\
    \        $paren_stack_string_count = $paren_stack_string_count-1;\n        $paren_stack_strings[$paren_level_count]\
    \ = $paren_string.substr($paren_string, $paren_stack_string_count);\n        $paren_stack_string_counts[$paren_level_count]\
    \ = $paren_stack_string_count;\n        $paren_stack_string_index = $paren_stack_string_count-1;\n\
    \        $paren_stack_string_count = $paren_stack_string_count-1;\n        $paren_stack_strings[$paren_level_count]\
    \ = $paren_string.substr($paren_string, $paren_stack_string_count);\n        $paren_stack_string_counts[\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpdcehxjj3.php on line 41

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while (count($paren_stack) > 0) {\n\
    \        $paren_string = array_pop($paren_stack);\n        $paren_array = explode('\
    \ ', $paren_string);\n        foreach ($paren_array as $paren_item) {\n      \
    \      if ($paren_item == '(') {\n                $paren_level++;\n          \
    \  } else if ($paren_item == ')') {\n                $paren_level--;\n       \
    \     }\n            if ($paren_level == 0) {\n                $paren_stack[]\
    \ = $paren_string;\n            }\n        }\n    }\n    return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmphwsfbsj3.php on line 22

    '
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode(\"\
    \ \", $paren_string) as $paren) {\n    if ($paren == \"(\") {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($paren == \")\"\
    ) {\n      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_stack[$paren_level]\
    \ = array_pop($paren_stack);\n      }\n      $paren_stack[$paren_level][] = array();\n\
    \    }\n  }\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    I wrote a recursive function for this purpose. \n<code>\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpusfiffux.php
    on line 30

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level--;\n\
    \        $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    }\n    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz6gr6bf.php:25\n\
    Stack trace:\n#0 /tmp/tmprz6gr6bf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprz6gr6bf.php\
    \ on line 25\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_size = count($paren_stack);\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_stack[] = $paren;\n   \
    \   $paren_level++;\n    } else if ($paren == ')') {\n      $paren_stack[] = $paren;\n\
    \      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_array[]\
    \ = $paren_stack;\n        $paren_stack = array();\n        $paren_stack_size\
    \ = count($paren_stack);\n      }\n    } else if ($paren == ' ') {\n      if ($paren_level\
    \ == 0) {\n        $paren_array[] = $paren_stack;\n        $paren_stack = array();\n\
    \        $paren_stack_size = count($paren_stack);\n      }\n    }\n  }\n  if ($paren_stack)\
    \ {\n    $paren_array[] = $paren_stack;\n  }\n  return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcncmzmf3.php:43\n\
    Stack trace:\n#0 /tmp/tmpcncmzmf3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpcncmzmf3.php\
    \ on line 43\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_size = count($paren_stack);\n  $paren_stack[0] = 0;\n  $paren_stack[1]\
    \ = 0;\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(')\
    \ {\n      $paren_stack[$paren_stack_size] = $paren_stack[$paren_stack_size] +\
    \ 1;\n    } else if ($char == ')') {\n      $paren_stack[$paren_stack_size] =\
    \ $paren_stack[$paren_stack_size] - 1;\n      if ($paren_stack[$paren_stack_size]\
    \ == 0) {\n        $paren_stack_size--;\n      }\n    } else if ($char == ' ')\
    \ {\n      $paren_stack[$paren_stack_size] = 0;\n    }\n  }\n  foreach ($paren_stack\
    \ as $i => $level) {\n    if ($level > $paren_stack_size) {\n      $paren_array[$i]\
    \ = $level;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04b0tqov.php:39\n\
    Stack trace:\n#0 /tmp/tmp04b0tqov.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp04b0tqov.php\
    \ on line 39\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = array();\n  $paren_level_max_count_index[0] = 0;\n  $paren_level_max_count_index[1]\
    \ = 1;\n  $paren_level_max_count_index[2] = 2;\n  $paren_level_max_count_index[3]\
    \ = 3;\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(')\
    \ {\n      $paren_array[$paren_level]++;\n      $paren_level_count[$paren_level]++;\n\
    \      if ($paren_level_count[$paren_level] > $paren_level_max[$paren_level])\
    \ {\n        $paren_level_max[$paren_level] = $paren_level_count[$paren_level];\n\
    \      }\n      $paren_level++;\n    }\n    if ($char == ')') {\n      $paren_level_count[$paren_level]--;\n\
    \      if ($paren_level_count[$paren_level] == 0) {\n        $paren_level_count[$paren_level]\
    \ = 0;\n      }\n      if ($paren_level_count[$paren_level] == $paren_level_max[$paren_level])\
    \ {\n        $paren_level_max_count[$paren_level_max_count_index[$paren_level]]\
    \ = $paren_level;\n      }\n      $paren_level--;\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewnjias7.php:46\n\
    Stack trace:\n#0 /tmp/tmpewnjias7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpewnjias7.php\
    \ on line 46\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_count = array();\n  $paren_stack_count[0] = 0;\n  $paren_stack[0]\
    \ = 0;\n  $paren_stack_count[1] = 0;\n  $paren_stack[1] = 0;\n  $paren_stack_count[2]\
    \ = 0;\n  $paren_stack[2] = 0;\n  $paren_stack_count[3] = 0;\n  $paren_stack[3]\
    \ = 0;\n  $paren_stack_count[4] = 0;\n  $paren_stack[4] = 0;\n  $paren_stack_count[5]\
    \ = 0;\n  $paren_stack[5] = 0;\n  $paren_stack_count[6] = 0;\n  $paren_stack[6]\
    \ = 0;\n  $paren_stack_count[7] = 0;\n  $paren_stack[7] = 0;\n  $paren_stack_count[8]\
    \ = 0;\n  $paren_stack[8] = 0;\n  $paren_stack_count[9] = 0;\n  $paren_stack[9]\
    \ = 0;\n  $paren_stack_count[10] = 0;\n  $paren_stack[10] = 0;\n  $paren_stack_count[11]\
    \ = 0;\n  $paren_stack[11] = 0;\n  $paren_stack_count[12] = 0;\n  $paren_stack[12]\
    \ = 0;\n  $paren_stack_count[13] = 0;\n  $paren_stack[13] = 0;\n  $paren_stack_count[14]\
    \ = 0;\n  $paren_stack[14] = 0;\n  $paren_stack_count[15] = 0;\n  $paren_stack[15]\
    \ = 0;\n  $paren_stack_count[16] = 0;\n  $paren_stack[16] = 0;\n  $paren_stack_count[17]\
    \ = 0;\n  $paren_stack[17] = 0;\n  $paren_stack_count[18] = 0;\n  $paren_stack[18]\
    \ = 0;\n  $paren_stack_count[19] = 0;\n  $paren_stack[19] = 0;\n  $paren_stack_count[20]\
    \ = 0;\n  $paren_stack[20] = 0;\n  $paren_stack_count[21] = 0;\n  $paren_stack[21]\
    \ = 0;\n  $paren_stack_count[22] = 0;\n  $paren_stack[22] = 0;\n  $paren_stack_count[23]\
    \ = 0;\n  $paren_stack[23] = 0;\n  $paren_stack_count[24] = 0;\n  $paren_stack[24]\
    \ = 0;\n  $paren_stack_count[25] = 0;\n  $paren_stack[25] = 0;\n  $paren_stack_count[26]\
    \ = 0;\n  $paren_stack[26] = 0;\n  $paren_stack_count[27] = 0;\n  $paren_stack[27]\
    \ = 0;\n  $paren_stack_count[28] = 0;\n  $paren_stack[28] = 0;\n  $paren_stack_count[29]\
    \ = 0;\n  $paren_stack\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpkq4_lvqd.php
    on line 72

    '
  timestamp: 1659823844
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while ($paren_stack) {\n        $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n    }\n \
    \   return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823848
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_level;\n    $paren_stack_string = \"\";\n    $paren_level_string\
    \ = \"\";\n    $paren_level_counter = 0;\n    $paren_level_counter_string = \"\
    \";\n    $paren_level_counter_max = 0;\n    $paren_level_counter_max_string =\
    \ \"\";\n    $paren_level_counter_max_counter = 0;\n    $paren_level_counter_max_counter_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max = 0;\n    $paren_level_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter = 0;\n    $paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max = 0;\n    $paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \    $paren_level_counter_max_counter_max_counter_max_counter_string = \"\";\n\
    \    $paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5stckc08.php
    on line 46

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_array = [];\n  for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n    $paren_array[$i] = trim($paren_array[$i]);\n    if ($paren_array[$i]\
    \ === \"()\") {\n      $max_level++;\n      $max_level_array[$i] = $max_level;\n\
    \    }\n  }\n  $max_level_array_count = count($max_level_array);\n  for ($i =\
    \ 0; $i < $max_level_array_count; $i++) {\n    for ($j = $i + 1; $j < $max_level_array_count;\
    \ $j++) {\n      if ($max_level_array[$i] > $max_level_array[$j]) {\n        $max_level_array[$j]\
    \ = $max_level_array[$i];\n      }\n    }\n  }\n  return $max_level_array;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt77z4dkm.php:35\n\
    Stack trace:\n#0 /tmp/tmpt77z4dkm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt77z4dkm.php\
    \ on line 35\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $levels = array();\n \
    \ $level = 0;\n  $paren_level = 0;\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == \"(\") {\n      $levels[$paren_level] = $level;\n      $level++;\n\
    \      $paren_level++;\n    }\n    if ($paren == \")\") {\n      $levels[$paren_level]\
    \ = $level;\n      $level--;\n      $paren_level--;\n    }\n  }\n  return $levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6mo110cr.php:32\n\
    Stack trace:\n#0 /tmp/tmp6mo110cr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6mo110cr.php\
    \ on line 32\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level--;\n\
    \        $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    }\n    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz6gr6bf.php:25\n\
    Stack trace:\n#0 /tmp/tmprz6gr6bf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmprz6gr6bf.php\
    \ on line 25\n"
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_pointer = -1;\n  $paren_stack_pointer_length = count($paren_stack);\n\
    \  $paren_stack_pointer_max = $paren_stack_pointer_length - 1;\n  $paren_stack_pointer_min\
    \ = 0;\n  $paren_stack_pointer_max_minus_one = $paren_stack_pointer_max - 1;\n\
    \  $paren_stack_pointer_min_plus_one = $paren_stack_pointer_min + 1;\n  $paren_stack_pointer_max_minus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one - 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one_plus_one + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ + 1;\n  $paren_stack_pointer_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpvs2zyfdc.php
    on line 27

    '
  timestamp: 1659823843
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count[0]\
    \ = 0;\n  $paren_level_max_count[1] = 0;\n  $paren_level_max_count[2] = 0;\n \
    \ $paren_level_max_count[3] = 0;\n  $paren_level_max_count[4] = 0;\n  $paren_level_max_count[5]\
    \ = 0;\n  $paren_level_max_count[6] = 0;\n  $paren_level_max_count[7] = 0;\n \
    \ $paren_level_max_count[8] = 0;\n  $paren_level_max_count[9] = 0;\n  $paren_level_max_count[10]\
    \ = 0;\n  $paren_level_max_count[11] = 0;\n  $paren_level_max_count[12] = 0;\n\
    \  $paren_level_max_count[13] = 0;\n  $paren_level_max_count[14] = 0;\n  $paren_level_max_count[15]\
    \ = 0;\n  $paren_level_max_count[16] = 0;\n  $paren_level_max_count[17] = 0;\n\
    \  $paren_level_max_count[18] = 0;\n  $paren_level_max_count[19] = 0;\n  $paren_level_max_count[20]\
    \ = 0;\n  $paren_level_max_count[21] = 0;\n  $paren_level_max_count[22] = 0;\n\
    \  $paren_level_max_count[23] = 0;\n  $paren_level_max_count[24] = 0;\n  $paren_level_max_count[25]\
    \ = 0;\n  $paren_level_max_count[26] = 0;\n  $paren_level_max_count[27] = 0;\n\
    \  $paren_level_max_count[28] = 0;\n  $paren_level_max_count[29] = 0;\n  $paren_level_max_count[30]\
    \ = 0;\n  $paren_level_max_count[31] = 0;\n  $paren_level_max_count[32] = 0;\n\
    \  $paren_level_max_count[33] = 0;\n  $paren_level_max_count[34] = 0;\n  $paren_level_max_count[35]\
    \ = 0;\n  $paren_level_max_count[36] = 0;\n  $paren_level_max_count[37] = 0;\n\
    \  $paren_level_max_count[38] = 0;\n  $paren_level_max_count[39] = 0;\n  $paren_level_max_count[40]\
    \ = 0;\n  $paren_level_max_count[41] = 0;\n  $paren_level_max_count[42] = 0;\n\
    \  $paren_level_max_count[43] = 0;\n  $paren_level_max_count[44] = 0;\n  $paren_level_max_count[45]\
    \ = 0;\n  $paren_level_max_count[46] = 0;\n  $paren_level_max_count[47] = 0;\n\
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdabzx_ir.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack_size = count($paren_string);\n\
    \  for($i = 0; $i < $paren_stack_size; $i++) {\n    $char = $paren_string[$i];\n\
    \    if($char === '(') {\n      $paren_stack[$level]++;\n    } elseif($char ===\
    \ ')') {\n      $paren_stack[$level]--;\n      if($paren_stack[$level] === 0)\
    \ {\n        $level--;\n      }\n    }\n  }\n  return $level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmpzoe0740x.php:10\nStack trace:\n\
    #0 /tmp/tmpzoe0740x.php(26): parse_nested_parens('(()()) ((())) (...')\n#1 /tmp/tmpzoe0740x.php(30):\
    \ candidate('(()()) ((())) (...')\n#2 /tmp/tmpzoe0740x.php(35): test()\n#3 {main}\n\
    \  thrown in /tmp/tmpzoe0740x.php on line 10\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\))/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\))\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\))\\\
    )\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\\
    (\\))\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\\
    (\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\\
    ))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\\
    ))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\))\\)\\)\\)\\)/', '', $paren_string);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpaob5hvv1.php on line 38

    '
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(\" \", $paren_string) as $paren) {\n    if ($paren == \"(\"\
    ) {\n      $paren_stack[$paren_level] = $paren;\n      $paren_level++;\n    }\
    \ else if ($paren == \")\") {\n      $paren_level--;\n      if ($paren_level ==\
    \ 0) {\n        $paren_array[] = $paren_stack[$paren_level];\n      }\n    }\n\
    \  }\n  return $paren_array;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. Your code works well for nested parentheses such as \"(()())\"\
    \ but fails for \"(())()\". Can you please help me to fix it?\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to fix the problem. Now it works for nested parentheses\
    \ such as \"(()())\" as well as \"(())()\".\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works well for nested parentheses such as \"(()())\" but fails\
    \ for \"(())()\". Can you please help me to fix it?\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to fix the problem. Now it works for nested parentheses such as \"\
    (()())\" as well as \"(())()\".\n<|/ c |>\n<| a tags=php,parentheses,regex |>\n\
    <code>\n<?php\n$string = \"(()())\";\n$paren_array = array();\n$paren_level =\
    \ 0;\n$paren_stack = array();\nforeach (explode(\" \", $string) as $paren) {\n\
    \    if ($paren == \"(\") {\n        $paren_stack[$paren_level] = $paren;\n  \
    \      $paren_level++;\n    } else if ($paren == \")\") {\n        $paren_level--;\n\
    \        if ($paren_level == 0) {\n            $paren_array[] = $paren_stack[$paren_level];\n\
    \        }\n    }\n}\nprint_r($paren_array);\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd5yd74yr.php
    on line 24

    '
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_count = array();\n    $paren_stack_count[0] = 0;\n    $paren_stack[0]\
    \ = 0;\n    $paren_stack_count[1] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack_count[2]\
    \ = 0;\n    $paren_stack[2] = 0;\n    $paren_stack_count[3] = 0;\n    $paren_stack[3]\
    \ = 0;\n    $paren_stack_count[4] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack_count[5]\
    \ = 0;\n    $paren_stack[5] = 0;\n    $paren_stack_count[6] = 0;\n    $paren_stack[6]\
    \ = 0;\n    $paren_stack_count[7] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack_count[8]\
    \ = 0;\n    $paren_stack[8] = 0;\n    $paren_stack_count[9] = 0;\n    $paren_stack[9]\
    \ = 0;\n    $paren_stack_count[10] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack_count[11]\
    \ = 0;\n    $paren_stack[11] = 0;\n    $paren_stack_count[12] = 0;\n    $paren_stack[12]\
    \ = 0;\n    $paren_stack_count[13] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack_count[14]\
    \ = 0;\n    $paren_stack[14] = 0;\n    $paren_stack_count[15] = 0;\n    $paren_stack[15]\
    \ = 0;\n    $paren_stack_count[16] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack_count[17]\
    \ = 0;\n    $paren_stack[17] = 0;\n    $paren_stack_count[18] = 0;\n    $paren_stack[18]\
    \ = 0;\n    $paren_stack_count[19] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack_count[20]\
    \ = 0;\n    $paren_stack[20] = 0;\n    $paren_stack_count[21] = 0;\n    $paren_stack[21]\
    \ = 0;\n    $paren_stack_count[22] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack_count[23]\
    \ = 0;\n    $paren_stack[23] = 0;\n    $paren_stack_count[24] = 0;\n    $paren_stack[24]\
    \ = 0;\n    $paren_stack_count[25] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack_count[26]\
    \ = 0;\n    $paren_stack[26] = 0;\n    $paren_stack_count[27] = 0;\n    $paren_stack[27]\
    \ = 0;\n    $paren_stack_count[28] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack_count[29]\
    \ = 0;\n    $paren_stack\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp74q7maou.php
    on line 72

    '
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_stack[$paren_level][]\
    \ = array();\n      } else {\n        $paren_stack[$paren_level] = array_pop($paren_stack[$paren_level]);\n\
    \      }\n    } else if ($char == ' ') {\n      $paren_stack[$paren_level][] =\
    \ array();\n    }\n  }\n  $paren_array[] = $paren_level;\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33_mfceh.php:37\n\
    Stack trace:\n#0 /tmp/tmp33_mfceh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp33_mfceh.php\
    \ on line 37\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char === '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char === ')')\
    \ {\n      $paren_level--;\n      if ($paren_level === 0) {\n        $paren_stack[$paren_level]\
    \ = array_reverse($paren_stack[$paren_level]);\n        $paren_stack[$paren_level][]\
    \ = array();\n      } else {\n        $paren_stack[$paren_level][] = array();\n\
    \      }\n    }\n  }\n  foreach ($paren_stack as $level) {\n    $paren_array[]\
    \ = count($level);\n  }\n  return $paren_array;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like your solution. Thanks. But I still don't understand why my code\
    \ doesn't work. Could you please explain why my code doesn't work?\n<|/ c |>\n\
    <| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for\
    \ your explanation. Now I understand why my code doesn't work. Your code is very\
    \ elegant. Thanks again.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_array = preg_match_all('/\\((.*?)\\\
    )/', $string, $matches);\n$paren_array = $matches[1];\n$paren_array = array_count_values($paren_array);\n\
    $max_level = max($paren_array);\n$max_level = array_search($max_level, $paren_array);\n\
    echo \"Maximum level of nesting is: $max_level\";\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. But I still don't understand why my code doesn't\
    \ work. Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    I added some explanation to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = \"(()()) ((())) () ((())()())\";\n$paren_array = preg_match_all('/\\\
    ((.*?)\\)/', $string, $matches);\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpxv52yhuz.php
    on line 32

    '
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_levels = array();\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 7 in /tmp/tmpqtu5hpew.php on line 62

    '
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $parens\
    \ = preg_split('/\\s+/', $paren_string);\n    $level = 0;\n    $max_level = 0;\n\
    \    foreach ($parens as $paren) {\n        if ($paren == '(') {\n           \
    \ $level++;\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n            }\n        } elseif ($paren == ')') {\n            $level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh_gvhvs.php:30\n\
    Stack trace:\n#0 /tmp/tmpvh_gvhvs.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvh_gvhvs.php\
    \ on line 30\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(\"(\", $paren_string);\n        $level = 0;\n \
    \       foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode(\")\", $paren_string);\n            $level++;\n        }\n        if\
    \ ($level > $max_level) {\n            $max_level = $level;\n        }\n    }\n\
    \    $max_level_array[$max_level] = $max_level;\n    return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tcuf0mc.php:31\n\
    Stack trace:\n#0 /tmp/tmp7tcuf0mc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7tcuf0mc.php\
    \ on line 31\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array();\n    $paren_stack = array();\n    foreach (explode('\
    \ ', $paren_string) as $paren) {\n      if ($paren == '(') {\n        $paren_stack[]\
    \ = $paren;\n      } else if ($paren == ')') {\n        $paren_stack = array_merge($paren_stack,\
    \ $paren_array);\n        $paren_level = count($paren_stack);\n      } else if\
    \ ($paren == '(' || $paren == ')') {\n        $paren_array[] = $paren;\n     \
    \ }\n    }\n  }\n  return $paren_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpikoyocx0.php:36\n\
    Stack trace:\n#0 /tmp/tmpikoyocx0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpikoyocx0.php\
    \ on line 36\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        $level = 0;\n        for ($j = $i; $j < $paren_array_length;\
    \ $j++) {\n            if ($paren_array[$i] == $paren_array[$j]) {\n         \
    \       $level++;\n            } else {\n                break;\n            }\n\
    \        }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0m0utq5z.php:32\n\
    Stack trace:\n#0 /tmp/tmp0m0utq5z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0m0utq5z.php\
    \ on line 32\n"
  timestamp: 1659823844
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while ($paren_stack) {\n        $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = array_merge($paren_array, preg_split('/\\s+/', $paren_string));\n\
    \        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n    }\n \
    \   return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823849
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpf9uaya8f.php
    on line 66

    '
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count[0]\
    \ = 0;\n  $paren_level_max_count[1] = 0;\n  $paren_level_max_count[2] = 0;\n \
    \ $paren_level_max_count[3] = 0;\n  $paren_level_max_count[4] = 0;\n  $paren_level_max_count[5]\
    \ = 0;\n  $paren_level_max_count[6] = 0;\n  $paren_level_max_count[7] = 0;\n \
    \ $paren_level_max_count[8] = 0;\n  $paren_level_max_count[9] = 0;\n  $paren_level_max_count[10]\
    \ = 0;\n  $paren_level_max_count[11] = 0;\n  $paren_level_max_count[12] = 0;\n\
    \  $paren_level_max_count[13] = 0;\n  $paren_level_max_count[14] = 0;\n  $paren_level_max_count[15]\
    \ = 0;\n  $paren_level_max_count[16] = 0;\n  $paren_level_max_count[17] = 0;\n\
    \  $paren_level_max_count[18] = 0;\n  $paren_level_max_count[19] = 0;\n  $paren_level_max_count[20]\
    \ = 0;\n  $paren_level_max_count[21] = 0;\n  $paren_level_max_count[22] = 0;\n\
    \  $paren_level_max_count[23] = 0;\n  $paren_level_max_count[24] = 0;\n  $paren_level_max_count[25]\
    \ = 0;\n  $paren_level_max_count[26] = 0;\n  $paren_level_max_count[27] = 0;\n\
    \  $paren_level_max_count[28] = 0;\n  $paren_level_max_count[29] = 0;\n  $paren_level_max_count[30]\
    \ = 0;\n  $paren_level_max_count[31] = 0;\n  $paren_level_max_count[32] = 0;\n\
    \  $paren_level_max_count[33] = 0;\n  $paren_level_max_count[34] = 0;\n  $paren_level_max_count[35]\
    \ = 0;\n  $paren_level_max_count[36] = 0;\n  $paren_level_max_count[37] = 0;\n\
    \  $paren_level_max_count[38] = 0;\n  $paren_level_max_count[39] = 0;\n  $paren_level_max_count[40]\
    \ = 0;\n  $paren_level_max_count[41] = 0;\n  $paren_level_max_count[42] = 0;\n\
    \  $paren_level_max_count[43] = 0;\n  $paren_level_max_count[44] = 0;\n  $paren_level_max_count[45]\
    \ = 0;\n  $paren_level_max_count[46] = 0;\n  $paren_level_max_count[47] = 0;\n\
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdabzx_ir.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while (count($paren_stack) > 0) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_level = count($paren_stack) - 1;\n  \
    \  $paren_array = explode(' ', $paren_string);\n    foreach ($paren_array as $paren_string)\
    \ {\n      if ($paren_string == '(') {\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string == ')') {\n        $paren_stack = array_merge($paren_stack,\
    \ $paren_array);\n      }\n    }\n  }\n  return $paren_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugs6r8n1.php:32\n\
    Stack trace:\n#0 /tmp/tmpugs6r8n1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpugs6r8n1.php\
    \ on line 32\n"
  timestamp: 1659823844
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_levels = array();\n  $paren_levels_count = array();\n\
    \  $paren_levels_count_max = array();\n  $paren_levels_count_max[0] = 0;\n  $paren_levels_count_max[1]\
    \ = 0;\n  $paren_levels_count_max[2] = 0;\n  $paren_levels_count_max[3] = 0;\n\
    \  $paren_levels_count_max[4] = 0;\n  $paren_levels_count_max[5] = 0;\n  $paren_levels_count_max[6]\
    \ = 0;\n  $paren_levels_count_max[7] = 0;\n  $paren_levels_count_max[8] = 0;\n\
    \  $paren_levels_count_max[9] = 0;\n  $paren_levels_count_max[10] = 0;\n  $paren_levels_count_max[11]\
    \ = 0;\n  $paren_levels_count_max[12] = 0;\n  $paren_levels_count_max[13] = 0;\n\
    \  $paren_levels_count_max[14] = 0;\n  $paren_levels_count_max[15] = 0;\n  $paren_levels_count_max[16]\
    \ = 0;\n  $paren_levels_count_max[17] = 0;\n  $paren_levels_count_max[18] = 0;\n\
    \  $paren_levels_count_max[19] = 0;\n  $paren_levels_count_max[20] = 0;\n  $paren_levels_count_max[21]\
    \ = 0;\n  $paren_levels_count_max[22] = 0;\n  $paren_levels_count_max[23] = 0;\n\
    \  $paren_levels_count_max[24] = 0;\n  $paren_levels_count_max[25] = 0;\n  $paren_levels_count_max[26]\
    \ = 0;\n  $paren_levels_count_max[27] = 0;\n  $paren_levels_count_max[28] = 0;\n\
    \  $paren_levels_count_max[29] = 0;\n  $paren_levels_count_max[30] = 0;\n  $paren_levels_count_max[31]\
    \ = 0;\n  $paren_levels_count_max[32] = 0;\n  $paren_levels_count_max[33] = 0;\n\
    \  $paren_levels_count_max[34] = 0;\n  $paren_levels_count_max[35] = 0;\n  $paren_levels_count_max[36]\
    \ = 0;\n  $paren_levels_count_max[37] = 0;\n  $paren_levels_count_max[38] = 0;\n\
    \  $paren_levels_count_max[39] = 0;\n  $paren_levels_count_max[40] = 0;\n  $paren_levels_count_max[41]\
    \ = 0;\n  $paren_levels_count_max[42] = 0;\n  $paren_levels_count_max[43] = 0;\n\
    \  $paren_levels_count_max[44\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpy1h5ojtz.php
    on line 57

    '
  timestamp: 1659823844
