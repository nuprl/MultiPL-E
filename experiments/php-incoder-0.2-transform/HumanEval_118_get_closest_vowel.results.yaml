language: php
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_count\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len_count = 0;\n    $vowels_index_len_count2\
    \ = 0;\n    $vowels_index_len_count3 = 0;\n    $vowels_index_len_count4 = 0;\n\
    \    $vowels_index_len_count5 = 0;\n    $vowels_index_len_count6 = 0;\n    $vowels_index_len_count7\
    \ = 0;\n    $vowels_index_len_count8 = 0;\n    $vowels_index_len_count9 = 0;\n\
    \    $vowels_index_len_count10 = 0;\n    $vowels_index_len_count11 = 0;\n    $vowels_index_len_count12\
    \ = 0;\n    $vowels_index_len_count13 = 0;\n    $vowels_index_len_count14 = 0;\n\
    \    $vowels_index_len_count15 = 0;\n    $vowels_index_len_count16 = 0;\n    $vowels_index_len_count17\
    \ = 0;\n    $vowels_index_len_count18 = 0;\n    $vowels_index_len_count19 = 0;\n\
    \    $vowels_index_len_count20 = 0;\n    $vowels_index_len_count21 = 0;\n    $vowels_index_len_count22\
    \ = 0;\n    $vowels_index_len_count23 = 0;\n    $vowels_index_len_count24 = 0;\n\
    \    $vowels_index_len_count25 = 0;\n    $vowels_index_len_count26 = 0;\n    $vowels_index_len_count27\
    \ = 0;\n    $vowels_index_len_count28 = 0;\n    $vowels_index_len_count29 = 0;\n\
    \    $vowels_index_len_count30 = 0;\n    $vowels_index_len_count31 = 0;\n    $vowels_index_len_count32\
    \ = 0;\n    $vowels_index_len_count33 = 0;\n    $vowels_index_len_count34 = 0;\n\
    \    $vowels_index_len_count35 = 0;\n    $vowels_index_len_count36 = 0;\n    $vowels_index_len_count37\
    \ = 0;\n    $vowels_index_len_count38 = 0;\n    $vowels_index_len_count39 = 0;\n\
    \    $vowels_index_len_count40 = 0;\n    $vowels_index_len_count41 = 1;\n    $vowels_index_len_count42\
    \ = 1;\n    $vowels_index_len_count43 = 1;\n    $vowels_index_len_count44 = 1;\n\
    \    $vowels_index_len_count45 = 1;\n    $vowels_index_len_count46 = 1;\n    $vowels_index_len_count47\
    \ = 1;\n    $vowels_index_len_count48 = 1;\n    $vowels_index_len_count49 = 1;\n\
    \    $vowels_index_len_count50 = 1;\n    $vowels_index_len_count51 = 1;\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz_hqgitk.php on line 75

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_array = array();\n    for($i = 0; $i < $vowels_count; $i++) {\n  \
    \      $vowels_array[] = $vowels[$i];\n    }\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl4xgs6f8.php on line 63

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl_y3cvq5.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg2692wg_.php on line 60

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi0rg4a7g.php on line 62

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$word.length - 1], array_reverse($vowels));\n\
    \    return $vowels[$vowels_count];\n}\n</code>\n<|/ a tags=php,string |>\n<|\
    \ c |>\nThis doesn't work if the word is \"ab\". It returns \"u\" instead of \"\
    \".\n<|/ c |>\n<| c |>\nI updated my answer to handle that case. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nThis doesn't work if the word is \"ab\". It returns\
    \ \"u\" instead of \"\".\n<|/ c |>\n<| c |>\nI updated my answer to handle that\
    \ case. Thanks for pointing that out.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu_v8h58f.php on line 22

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$word.length - 1], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 2], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 3], $vowels);\n    $vowels_count = array_search($word[$word.length - 4], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 5], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 6], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 7], $vowels);\n    $vowels_count = array_search($word[$word.length - 8], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 9], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 10], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 11], $vowels);\n    $vowels_count = array_search($word[$word.length - 12],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 13], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 14], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 15], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 16], $vowels);\n    $vowels_count = array_search($word[$word.length - 17],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 18], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 19], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 20], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 21], $vowels);\n    $vowels_count = array_search($word[$word.length - 22],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 23], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 24], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 25], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 26], $vowels);\n    $vowels_count = array_search($word[$word.length - 27],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 28], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 29], $vowels);\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgk6fkvwy.php on line 68

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2jhm9l4j.php on line 87

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnk0qrofp.php on line 57

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_fli\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx_eyoncn.php on line 60

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp18g6f6n4.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_array = explode($vowels,\
    \ $word);\n    $vowels_count = count($vowels_array);\n    $vowels_array = $vowels_array[0];\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0tq3bjg6.php on line 55

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count_from_right = count($word) - $vowels_count;\n    $vowels_count_from_left\
    \ = count($word) - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    \n\
    \    $vowels_count_from_right_to_left_count = count($word) - $vowels_count_from_right\
    \ - $vowels_count_from_left - $vowels_count;\n    \n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    \n\
    \    $vowels_count_from_left_to_right_count = count($word) - $vowels_count_from_left\
    \ - $vowels_count_from_right - $vowels_count;\n    \n    $vowels_count_from_right_to_right_count\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_right - $vowels_count_from_left;\n\
    \    \n    $vowels_count_from_left_to_left_count = count($word) - $vowels_count_from_left\
    \ - $vowels_count_from_left - $vowels_count;\n    \n    $vowels_count_from_right_to_right_to_left_count\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_right - $vowels_count_from_left\
    \ - $vowels_count;\n    \n    $vowels_count_from_left_to_left_to_right_count =\
    \ count($word) - $vowels_count_from_left - $vowels_count_from_left - $vowels_count_from_right\
    \ - $vowels_count;\n    \n    $vowels_count_from_right_to_right_to_left_to_left_count\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_right - $vowels_count_from_left\
    \ - $vowels_count_from_left - $vowels_count;\n    \n    $vowels_count_from_left_to_left_to_right_to_right_count\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_left - $vowels_count_from_right\
    \ - $vowels_count_from_right - $vowels_count;\n    \n    $vowels_count_from_right_to_right_to_left_to_left_to_right_count\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_right - $vowels_count_from_left\
    \ - $vowels_count_from_left - $vowels_count_from_right - $vowels_count;\n    \n\
    \    $vowels_count_from_left_to_left_to_right_\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf3d0eyqt.php on line 44

    '
  timestamp: 1659730897
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowel\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp8jb3r4sv.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count \n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpw2yw2fkt.php
    on line 88

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_len =\
    \ strlen($word);\n    $vowels_index = 0;\n    $vowels_index_end = strlen($word)\
    \ - 1;\n    \n    for($i = 0; $i < $vowels_count; $i++) {\n        $vowels_index_start\
    \ = strpos($word, $vowels[$i], $vowels_index);\n        $vowels_index_end = strpos($word,\
    \ $vowels[$i], $vowels_index_start + 1);\n        \n        if($vowels_index_start\
    \ !== false && $vowels_index_end !== false) {\n            $vowels_index = $vowels_index_end;\n\
    \        }\n    }\n    \n    if($vowels_index === false) {\n        return \"\"\
    ;\n    }\n    \n    $vowels_index_start = strpos($word, $vowels[$vowels_index],\
    \ $vowels_index + 1);\n    $vowels_index_end = strpos($word, $vowels[$vowels_index],\
    \ $vowels_index_start + 1);\n    \n    if($vowels_index_start !== false && $vowels_index_end\
    \ !== false) {\n        return $vowels[$vowels_index];\n    }\n    \n    return\
    \ \"\";\n}\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgybafs4.php:51\n\
    Stack trace:\n#0 /tmp/tmptgybafs4.php(66): test()\n#1 {main}\n  thrown in /tmp/tmptgybafs4.php\
    \ on line 51\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi0rg4a7g.php on line 62

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count =\
    \ array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowel\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpglroyobz.php
    on line 52

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count_from_right = count($word) - $vowels_count;\n    \n    $vowels_count_from_right\
    \ = min($vowels_count_from_right, count($word) - 1);\n    \n    for($i = $vowels_count_from_right;\
    \ $i >= 0; $i--) {\n        if(in_array($word[$i], $vowels)) {\n            return\
    \ $word[$i];\n        }\n    }\n    \n    return \"\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, string given in /tmp/tmp59n_disa.php:19\nStack trace:\n\
    #0 /tmp/tmp59n_disa.php(33): get_closest_vowel('yogurt')\n#1 /tmp/tmp59n_disa.php(37):\
    \ candidate('yogurt')\n#2 /tmp/tmp59n_disa.php(52): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp59n_disa.php on line 19\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = count($word) - 1;\n    $vowels_index3 = $vowels_index2\
    \ - 1;\n    $vowels_index4 = $vowels_index3 - 1;\n    $vowels_index5 = $vowels_index4\
    \ - 1;\n    $vowels_index6 = $vowels_index5 - 1;\n    $vowels_index7 = $vowels_index6\
    \ - 1;\n    $vowels_index8 = $vowels_index7 - 1;\n    $vowels_index9 = $vowels_index8\
    \ - 1;\n    $vowels_index10 = $vowels_index9 - 1;\n    $vowels_index11 = $vowels_index10\
    \ - 1;\n    $vowels_index12 = $vowels_index11 - 1;\n    $vowels_index13 = $vowels_index12\
    \ - 1;\n    $vowels_index14 = $vowels_index13 - 1;\n    $vowels_index15 = $vowels_index14\
    \ - 1;\n    $vowels_index16 = $vowels_index15 - 1;\n    $vowels_index17 = $vowels_index16\
    \ - 1;\n    $vowels_index18 = $vowels_index17 - 1;\n    $vowels_index19 = $vowels_index18\
    \ - 1;\n    $vowels_index20 = $vowels_index19 - 1;\n    $vowels_index21 = $vowels_index20\
    \ - 1;\n    $vowels_index22 = $vowels_index21 - 1;\n    $vowels_index23 = $vowels_index22\
    \ - 1;\n    $vowels_index24 = $vowels_index23 - 1;\n    $vowels_index25 = $vowels_index24\
    \ - 1;\n    $vowels_index26 = $vowels_index25 - 1;\n    $vowels_index27 = $vowels_index26\
    \ - 1;\n    $vowels_index28 = $vowels_index27 - 1;\n    $vowels_index29 = $vowels_index28\
    \ - 1;\n    $vowels_index30 = $vowels_index29 - 1;\n    $vowels_index31 = $vowels_index30\
    \ - 1;\n    $vowels_index32 = $vowels_index31 - 1;\n    $vowels_index33 = $vowels_index32\
    \ - 1;\n    $vowels_index34 = $vowels_index33 - 1;\n    $vowels_index35 = $vowels_index34\
    \ - 1;\n    $vowels_index36 = $vowels_index35 - 1;\n    $vowels_index37 = $vowels_index36\
    \ - 1;\n    $vowels_index38 = $vowels_index37 - 1;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5s_2nh5g.php
    on line 58

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowel\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp8jb3r4sv.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_length\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_length = strlen($word)\
    \ - $vowels_count;\n    \n    for($i = 0; $i < $vowels_index_length; $i++) {\n\
    \        if($word[$vowels_index + $i] == $vowels[$vowels_index]) {\n         \
    \   $vowels_index++;\n        }\n    }\n    \n    for($i = 0; $i < $vowels_index_length;\
    \ $i++) {\n        if($word[$vowels_index + $i] == $vowels[$vowels_index]) {\n\
    \            $vowels_index++;\n        }\n    }\n    \n    if($vowels_index ==\
    \ $vowels_count) {\n        return \"\";\n    }\n    \n    return $vowels[$vowels_index];\n\
    }\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2n8vq5u.php:47\n\
    Stack trace:\n#0 /tmp/tmpe2n8vq5u.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpe2n8vq5u.php\
    \ on line 47\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmph6_vqj6g.php
    on line 88

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_count_right = count($word)\
    \ - $vowels_count;\n    $vowels_count_left = count($word) - $vowels_count_right;\n\
    \    $vowels_count_left_right = count($word) - $vowels_count_left - $vowels_count_right;\n\
    \    $vowels_count_left_right_left = count($word) - $vowels_count_left - $vowels_count_right\
    \ - $vowels_count_left;\n    $vowels_count_left_right_left_right = count($word)\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left - $vowels_count_right\
    \ - $vowels_count_left;\n    $vowels_count_left_right_left_right_left = count($word)\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left - $vowels_count_right\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left;\n    $vowels_count_left_right_left_right_left_right\
    \ = count($word) - $vowels_count_left - $vowels_count_right - $vowels_count_left\
    \ - $vowels_count_right - $vowels_count_left - $vowels_count_right - $vowels_count_left\
    \ - $vowels_count_right - $vowels_count_left;\n    $vowels_count_left_right_left_right_left_right_left\
    \ = count($word) - $vowels_count_left - $vowels_count_right - $vowels_count_left\
    \ - $vowels_count_right - $vowels_count_left - $vowels_count_right - $vowels_count_left\
    \ - $vowels_count_right - $vowels_count_left - $vowels_count_right - $vowels_count_left;\n\
    \    $vowels_count_left_right_left_right_left_right_left_right = count($word)\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left - $vowels_count_right\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left - $vowels_count_right\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left - $vowels_count_right;\n\
    \    $vowels_count_left_right_left_right_left_right_left_right_left = count($word)\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left - $vowels_count_right\
    \ - $vowels_count_left - $vowels_count_right - $vowels_count_left - $vowels_count_right\
    \ - $vowels_count_left - $vowels_count_right - \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpvwkzg7vt.php on line 29

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count \n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpw2yw2fkt.php
    on line 88

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, 1);\n    $vowels_count = min($vowels_count, $word);\n \
    \   $vowels_count = abs($vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    return $vowels[$vowels_count];\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_search(): Argument #2 ($haystack)\
    \ must be of type array, int given in /tmp/tmpapjwzm5m.php:22\nStack trace:\n\
    #0 /tmp/tmpapjwzm5m.php(22): array_search(Array, 5)\n#1 /tmp/tmpapjwzm5m.php(27):\
    \ get_closest_vowel('yogurt')\n#2 /tmp/tmpapjwzm5m.php(31): candidate('yogurt')\n\
    #3 /tmp/tmpapjwzm5m.php(46): test()\n#4 {main}\n  thrown in /tmp/tmpapjwzm5m.php\
    \ on line 22\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg2692wg_.php on line 60

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count - 1], array_reverse($vowels));\n\
    \    return $vowels[$vowels_count];\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lwdfrv9.php:28\n\
    Stack trace:\n#0 /tmp/tmp7lwdfrv9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7lwdfrv9.php\
    \ on line 28\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_array = str_split($word);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpr8ykt7dd.php
    on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count =\
    \ array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp0m0r6cnq.php on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_length = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2\
    \ = $vowels_length - 1;\n    $vowels_index3 = $vowels_length - 2;\n    $vowels_index4\
    \ = $vowels_length - 3;\n    $vowels_index5 = $vowels_length - 4;\n    $vowels_index6\
    \ = $vowels_length - 5;\n    $vowels_index7 = $vowels_length - 6;\n    $vowels_index8\
    \ = $vowels_length - 7;\n    $vowels_index9 = $vowels_length - 8;\n    $vowels_index10\
    \ = $vowels_length - 9;\n    $vowels_index11 = $vowels_length - 10;\n    $vowels_index12\
    \ = $vowels_length - 11;\n    $vowels_index13 = $vowels_length - 12;\n    $vowels_index14\
    \ = $vowels_length - 13;\n    $vowels_index15 = $vowels_length - 14;\n    $vowels_index16\
    \ = $vowels_length - 15;\n    $vowels_index17 = $vowels_length - 16;\n    $vowels_index18\
    \ = $vowels_length - 17;\n    $vowels_index19 = $vowels_length - 18;\n    $vowels_index20\
    \ = $vowels_length - 19;\n    $vowels_index21 = $vowels_length - 20;\n    $vowels_index22\
    \ = $vowels_length - 21;\n    $vowels_index23 = $vowels_length - 22;\n    $vowels_index24\
    \ = $vowels_length - 23;\n    $vowels_index25 = $vowels_length - 24;\n    $vowels_index26\
    \ = $vowels_length - 25;\n    $vowels_index27 = $vowels_length - 26;\n    $vowels_index28\
    \ = $vowels_length - 27;\n    $vowels_index29 = $vowels_length - 28;\n    $vowels_index30\
    \ = $vowels_length - 29;\n    $vowels_index31 = $vowels_length - 30;\n    $vowels_index32\
    \ = $vowels_length - 31;\n    $vowels_index33 = $vowels_length - 32;\n    $vowels_index34\
    \ = $vowels_length - 33;\n    $vowels_index35 = $vowels_length - 34;\n    $vowels_index36\
    \ = $vowels_length - 35;\n    $vowels_index37 = $vowels_length - 36;\n    $vowels_index38\
    \ = $vowels_length - 37;\n    $vowels_index39 = $vowels_length - 38;\n    $vowels_index40\
    \ = $vowels_length - 39;\n    $vowels_index41 = $vowels_length - 40;\n    $vowels_index42\
    \ = $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpd8nqif8f.php on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg2692wg_.php on line 60

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowel\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp854e7k0o.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_found = 0;\n    $vowels_found2 = $vowels_count - 1;\n    $vowels_found3\
    \ = $vowels_count - 2;\n    $vowels_found4 = $vowels_count - 3;\n    $vowels_found5\
    \ = $vowels_count - 4;\n    $vowels_found6 = $vowels_count - 5;\n    $vowels_found7\
    \ = $vowels_count - 6;\n    $vowels_found8 = $vowels_count - 7;\n    $vowels_found9\
    \ = $vowels_count - 8;\n    $vowels_found10 = $vowels_count - 9;\n    $vowels_found11\
    \ = $vowels_count - 10;\n    $vowels_found12 = $vowels_count - 11;\n    $vowels_found13\
    \ = $vowels_count - 12;\n    $vowels_found14 = $vowels_count - 13;\n    $vowels_found15\
    \ = $vowels_count - 14;\n    $vowels_found16 = $vowels_count - 15;\n    $vowels_found17\
    \ = $vowels_count - 16;\n    $vowels_found18 = $vowels_count - 17;\n    $vowels_found19\
    \ = $vowels_count - 18;\n    $vowels_found20 = $vowels_count - 19;\n    $vowels_found21\
    \ = $vowels_count - 20;\n    $vowels_found22 = $vowels_count - 21;\n    $vowels_found23\
    \ = $vowels_count - 22;\n    $vowels_found24 = $vowels_count - 23;\n    $vowels_found25\
    \ = $vowels_count - 24;\n    $vowels_found26 = $vowels_count - 25;\n    $vowels_found27\
    \ = $vowels_count - 26;\n    $vowels_found28 = $vowels_count - 27;\n    $vowels_found29\
    \ = $vowels_count - 28;\n    $vowels_found30 = $vowels_count - 29;\n    $vowels_found31\
    \ = $vowels_count - 30;\n    $vowels_found32 = $vowels_count - 31;\n    $vowels_found33\
    \ = $vowels_count - 32;\n    $vowels_found34 = $vowels_count - 33;\n    $vowels_found35\
    \ = $vowels_count - 34;\n    $vowels_found36 = $vowels_count - 35;\n    $vowels_found37\
    \ = $vowels_count - 36;\n    $vowels_found38 = $vowels_count - 37;\n    $vowels_found39\
    \ = $vowels_count - 38;\n    $vowels_\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpkqsmd9wq.php
    on line 59

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($vowels[0]);\n    $vowels_index = 0;\n    $vowels_index2\
    \ = $vowels_index + $vowels_len;\n    $vowels_index3 = $vowels_index + $vowels_len\
    \ + $vowels_len;\n    $vowels_index4 = $vowels_index + $vowels_len + $vowels_len\
    \ + $vowels_len;\n    $vowels_index5 = $vowels_index + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len;\n    $vowels_index6 = $vowels_index + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len;\n    $vowels_index7\
    \ = $vowels_index + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len;\n    $vowels_index8 = $vowels_index + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len;\n    $vowels_index9 = $vowels_index + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len;\n    $vowels_index10\
    \ = $vowels_index + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len;\n    $vowels_index11 = $vowels_index\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len + $vowels_len\
    \ + $vowels_len + $vowels_len + $vowels_len + $vowels_len;\n    $vowels_index12\
    \ = $vowels_index + $vowels_len + $vowels_len + $\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpvddbyilz.php on line 32

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpo0b5_748.php on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmp98mdkr69.php on line 79

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl_y3cvq5.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_max = count($vowels)\
    \ - 1;\n    \n    for($i = 0; $i < $vowels_count; $i++) {\n        $vowels_index\
    \ += $vowels_len;\n        $vowels_index_max -= $vowels_len;\n        \n     \
    \   if($vowels_index >= $vowels_index_max) {\n            $vowels_index -= $vowels_len;\n\
    \        }\n        \n        if($word[$vowels_index] === \"a\" || $word[$vowels_index]\
    \ === \"e\" || $word[$vowels_index] === \"i\" || $word[$vowels_index] === \"o\"\
    \ || $word[$vowels_index] === \"u\") {\n            return $word[$vowels_index];\n\
    \        }\n    }\n    \n    return \"\";\n}\n\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphssy7m0v.php:44\n\
    Stack trace:\n#0 /tmp/tmphssy7m0v.php(59): test()\n#1 {main}\n  thrown in /tmp/tmphssy7m0v.php\
    \ on line 44\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_len =\
    \ strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_len - 1;\n\
    \    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4 = $vowels_len - 3;\n\
    \    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6 = $vowels_len - 5;\n\
    \    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8 = $vowels_len - 7;\n\
    \    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10 = $vowels_len - 9;\n\
    \    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12 = $vowels_len -\
    \ 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14 = $vowels_len\
    \ - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16 = $vowels_len\
    \ - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18 = $vowels_len\
    \ - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20 = $vowels_len\
    \ - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22 = $vowels_len\
    \ - 21;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24 = $vowels_len\
    \ - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26 = $vowels_len\
    \ - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28 = $vowels_len\
    \ - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30 = $vowels_len\
    \ - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32 = $vowels_len\
    \ - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34 = $vowels_len\
    \ - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36 = $vowels_len\
    \ - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38 = $vowels_len\
    \ - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40 = $vowels_len\
    \ - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42 = $vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmplfjyabgv.php
    on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count,\
    \ $word.length - 1);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count, $word.length\
    \ - 1);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count\
    \ - 1, 0);\n    $vowels_count = min($vowels_count, $word.length - 1);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = max($vowels_count - 1, 0);\n    $vowels_count\
    \ = min($vowels_count, $word.length - 1);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count,\
    \ $word.length - 1);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count, $word.length\
    \ - 1);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count\
    \ - 1, 0);\n    $vowels_count = min($vowels_count, $word.length - 1);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = max($vowels_count - 1, 0);\n    $vowels_count\
    \ = min($vowels_count, $word.length - 1);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count,\
    \ $word.length - 1);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count, $word.length\
    \ - 1);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count\
    \ - 1, 0);\n    $vowels_count = min($vowels_count, $word.length - 1);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = max($vowels_count - 1, 0);\n    $vowels_count\
    \ = min($vowels_count, $word.length - 1);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count,\
    \ $word.length - 1);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ max($vowels_count - 1, 0);\n    $vowels_count = min($vowels_count, $word.length\
    \ - 1);\n    $vowels_count = count($\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp9sy4pks_.php on line 61

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = count($vowels) - 1;\n    $vowels_index3\
    \ = count($vowels) - 2;\n    $vowels_index4 = count($vowels) - 3;\n    $vowels_index5\
    \ = count($vowels) - 4;\n    $vowels_index6 = count($vowels) - 5;\n    $vowels_index7\
    \ = count($vowels) - 6;\n    $vowels_index8 = count($vowels) - 7;\n    $vowels_index9\
    \ = count($vowels) - 8;\n    $vowels_index10 = count($vowels) - 9;\n    $vowels_index11\
    \ = count($vowels) - 10;\n    $vowels_index12 = count($vowels) - 11;\n    $vowels_index13\
    \ = count($vowels) - 12;\n    $vowels_index14 = count($vowels) - 13;\n    $vowels_index15\
    \ = count($vowels) - 14;\n    $vowels_index16 = count($vowels) - 15;\n    $vowels_index17\
    \ = count($vowels) - 16;\n    $vowels_index18 = count($vowels) - 17;\n    $vowels_index19\
    \ = count($vowels) - 18;\n    $vowels_index20 = count($vowels) - 19;\n    $vowels_index21\
    \ = count($vowels) - 20;\n    $vowels_index22 = count($vowels) - 21;\n    $vowels_index23\
    \ = count($vowels) - 22;\n    $vowels_index24 = count($vowels) - 23;\n    $vowels_index25\
    \ = count($vowels) - 24;\n    $vowels_index26 = count($vowels) - 25;\n    $vowels_index27\
    \ = count($vowels) - 26;\n    $vowels_index28 = count($vowels) - 27;\n    $vowels_index29\
    \ = count($vowels) - 28;\n    $vowels_index30 = count($vowels) - 29;\n    $vowels_index31\
    \ = count($vowels) - 30;\n    $vowels_index32 = count($vowels) - 31;\n    $vowels_index33\
    \ = count($vowels) - 32;\n    $vowels_index34 = count($vowels) - 33;\n    $vowels_index35\
    \ = count($vowels) - 34;\n    $vowels_index36 = count($vowels) - 35;\n    $vowels_index37\
    \ = count($vowels) - 36;\n    $vowels_index38 = count($vowels) - 37;\n    $vowels_index39\
    \ = count($vowels) - 38;\n    $vowels_index40 = count($vowels) - 39;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpnq0td568.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_found2 = $vowels_count - 1;\n    $vowels_found3 = $vowels_count\
    \ - 2;\n    $vowels_found4 = $vowels_count - 3;\n    $vowels_found5 = $vowels_count\
    \ - 4;\n    $vowels_found6 = $vowels_count - 5;\n    $vowels_found7 = $vowels_count\
    \ - 6;\n    $vowels_found8 = $vowels_count - 7;\n    $vowels_found9 = $vowels_count\
    \ - 8;\n    $vowels_found10 = $vowels_count - 9;\n    $vowels_found11 = $vowels_count\
    \ - 10;\n    $vowels_found12 = $vowels_count - 11;\n    $vowels_found13 = $vowels_count\
    \ - 12;\n    $vowels_found14 = $vowels_count - 13;\n    $vowels_found15 = $vowels_count\
    \ - 14;\n    $vowels_found16 = $vowels_count - 15;\n    $vowels_found17 = $vowels_count\
    \ - 16;\n    $vowels_found18 = $vowels_count - 17;\n    $vowels_found19 = $vowels_count\
    \ - 18;\n    $vowels_found20 = $vowels_count - 19;\n    $vowels_found21 = $vowels_count\
    \ - 20;\n    $vowels_found22 = $vowels_count - 21;\n    $vowels_found23 = $vowels_count\
    \ - 22;\n    $vowels_found24 = $vowels_count - 23;\n    $vowels_found25 = $vowels_count\
    \ - 24;\n    $vowels_found26 = $vowels_count - 25;\n    $vowels_found27 = $vowels_count\
    \ - 26;\n    $vowels_found28 = $vowels_count - 27;\n    $vowels_found29 = $vowels_count\
    \ - 28;\n    $vowels_found30 = $vowels_count - 29;\n    $vowels_found31 = $vowels_count\
    \ - 30;\n    $vowels_found32 = $vowels_count - 31;\n    $vowels_found33 = $vowels_count\
    \ - 32;\n    $vowels_found34 = $vowels_count - 33;\n    $vowels_found35 = $vowels_count\
    \ - 34;\n    $vowels_found36 = $vowels_count - 35;\n    $vowels_found37 = $vowels_count\
    \ - 36;\n    $vowels_found38 = $vowels_count - 37;\n    $vowels_found39 = $vowels_count\
    \ - 38;\n    $vowels_found\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp7wjr1uij.php
    on line 59

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl_y3cvq5.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = -1;\n    $vowels_index2 = -1;\n    $vowels_index3 = -1;\n    $vowels_index4\
    \ = -1;\n    $vowels_index5 = -1;\n    $vowels_index6 = -1;\n    $vowels_index7\
    \ = -1;\n    $vowels_index8 = -1;\n    $vowels_index9 = -1;\n    $vowels_index10\
    \ = -1;\n    $vowels_index11 = -1;\n    $vowels_index12 = -1;\n    $vowels_index13\
    \ = -1;\n    $vowels_index14 = -1;\n    $vowels_index15 = -1;\n    $vowels_index16\
    \ = -1;\n    $vowels_index17 = -1;\n    $vowels_index18 = -1;\n    $vowels_index19\
    \ = -1;\n    $vowels_index20 = -1;\n    $vowels_index21 = -1;\n    $vowels_index22\
    \ = -1;\n    $vowels_index23 = -1;\n    $vowels_index24 = -1;\n    $vowels_index25\
    \ = -1;\n    $vowels_index26 = -1;\n    $vowels_index27 = -1;\n    $vowels_index28\
    \ = -1;\n    $vowels_index29 = -1;\n    $vowels_index30 = -1;\n    $vowels_index31\
    \ = -1;\n    $vowels_index32 = -1;\n    $vowels_index33 = -1;\n    $vowels_index34\
    \ = -1;\n    $vowels_index35 = -1;\n    $vowels_index36 = -1;\n    $vowels_index37\
    \ = -1;\n    $vowels_index38 = -1;\n    $vowels_index39 = -1;\n    $vowels_index40\
    \ = -1;\n    $vowels_index41 = -1;\n    $vowels_index42 = -1;\n    $vowels_index43\
    \ = -1;\n    $vowels_index44 = -1;\n    $vowels_index45 = -1;\n    $vowels_index46\
    \ = -1;\n    $vowels_index47 = -1;\n    $vowels_index48 = -1;\n    $vowels_index49\
    \ = -1;\n    $vowels_index50 = -1;\n    $vowels_index51 = -1;\n    $vowels_index52\
    \ = -1;\n    $vowels_index53 = -1;\n    $vowels_index54 = -1;\n    $vowels_index55\
    \ = -1;\n    $vowels_index56 = -1;\n    $vowels_index57 = -1;\n    $vowels_index58\
    \ = -1;\n    $vowels_index59 = -1;\n    $vowels_index60 = -1;\n    $vowels_index61\
    \ = -1;\n    $vowels_index62 = -1;\n    $vowels_index63 = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpmdsz5odv.php on line 82

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max\
    \ = $vowels_count - 1;\n    $vowels_index_count_min = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    \n    for($i = 0; $i < strlen($word);\
    \ $i++) {\n        if($word[$i] == $vowels[$vowels_index]) {\n            $vowels_index_count++;\n\
    \            if($vowels_index_count == $vowels_count) {\n                $vowels_index_count_max\
    \ = $i;\n                $vowels_index_count_max_index = $vowels_index;\n    \
    \        }\n            if($vowels_index_count == $vowels_count - 1) {\n     \
    \           $vowels_index_count_min = $i;\n                $vowels_index_count_min_index\
    \ = $vowels_index;\n            }\n        }\n        $vowels_index++;\n    }\n\
    \    \n    if($vowels_index_count_max != $vowels_index_count_min_index) {\n  \
    \      $vowels_index_count_max = $vowels_index_count_max - 1;\n        $vowels_index_count_min\
    \ = $vowels_index_count_min + 1;\n    }\n    \n    if($vowels_index_count_max\
    \ != $vowels_index_count_min_index) {\n        return \"\";\n    }\n    \n   \
    \ return $vowels[$vowels_index_count_max_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdykhzjow.php:58\n\
    Stack trace:\n#0 /tmp/tmpdykhzjow.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpdykhzjow.php\
    \ on line 58\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 2], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 3], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 4], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 5], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 6], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 7], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 8], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 9], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 10], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 11], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 12], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 13], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 14], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 15], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 16], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 17], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 18], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 19], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 20], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 21], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 22], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 23], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 24], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 25], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 26], array_reverse($vowels));\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmp7v43phqy.php on line 65

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_count\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len_count = 0;\n    $vowels_index_len_count2\
    \ = 0;\n    $vowels_index_len_count3 = 0;\n    $vowels_index_len_count4 = 0;\n\
    \    $vowels_index_len_count5 = 0;\n    $vowels_index_len_count6 = 0;\n    $vowels_index_len_count7\
    \ = 0;\n    $vowels_index_len_count8 = 0;\n    $vowels_index_len_count9 = 0;\n\
    \    $vowels_index_len_count10 = 0;\n    $vowels_index_len_count11 = 0;\n    $vowels_index_len_count12\
    \ = 0;\n    $vowels_index_len_count13 = 0;\n    $vowels_index_len_count14 = 0;\n\
    \    $vowels_index_len_count15 = 0;\n    $vowels_index_len_count16 = 0;\n    $vowels_index_len_count17\
    \ = 0;\n    $vowels_index_len_count18 = 0;\n    $vowels_index_len_count19 = 0;\n\
    \    $vowels_index_len_count20 = 0;\n    $vowels_index_len_count21 = 0;\n    $vowels_index_len_count22\
    \ = 0;\n    $vowels_index_len_count23 = 0;\n    $vowels_index_len_count24 = 0;\n\
    \    $vowels_index_len_count25 = 0;\n    $vowels_index_len_count26 = 0;\n    $vowels_index_len_count27\
    \ = 0;\n    $vowels_index_len_count28 = 0;\n    $vowels_index_len_count29 = 0;\n\
    \    $vowels_index_len_count30 = 0;\n    $vowels_index_len_count31 = 0;\n    $vowels_index_len_count32\
    \ = 0;\n    $vowels_index_len_count33 = 0;\n    $vowels_index_len_count34 = 0;\n\
    \    $vowels_index_len_count35 = 0;\n    $vowels_index_len_count36 = 0;\n    $vowels_index_len_count37\
    \ = 0;\n    $vowels_index_len_count38 = 0;\n    $vowels_index_len_count39 = 0;\n\
    \    $vowels_index_len_count40 = 0;\n    $vowels_index_len_count41 = 0;\n    $vowels_index_len_count42\
    \ = 0;\n    $vowels_index_len_count43 = 0;\n    $vowels_index_len_count44 = 0;\n\
    \    $vowels_index_len_count45 = 0;\n    $vowels_index_len_count46 = 0;\n    $vowels_index_len_count47\
    \ = 0;\n    $vowels_index_len_count48 = 0;\n    $vowels_index_len_count49 = 0;\n\
    \    $vowels_index_len_count50 = 0;\n    $vowels_index_len_count51 = 0;\n    $vowels_index_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpj7uparr_.php
    on line 75

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    return\
    \ $vowels[$vowels_count];\n}\n</code>\n<|/ a tags=php,string |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpzkxm3izr.php
    on line 22

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_array = array();\n    foreach ($vowels as $vowel) {\n        $vowels_array[]\
    \ = $vowel;\n    }\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmpn9wp7oq5.php on line 77

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpy8t7abeg.php on line 50

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_max = count($vowels) - 1;\n    \n    $vowels_index_min\
    \ = 0;\n    $vowels_index_min_index = 0;\n    \n    $vowels_index_max = 0;\n \
    \   $vowels_index_max_index = 0;\n    \n    foreach ($vowels as $vowel) {\n  \
    \      if (strpos($word, $vowel) !== false) {\n            $vowels_index = $vowel;\n\
    \            break;\n        }\n    }\n    \n    foreach ($vowels as $vowel) {\n\
    \        if (strrpos($word, $vowel) !== false) {\n            $vowels_index_max\
    \ = $vowel;\n            break;\n        }\n    }\n    \n    foreach ($vowels\
    \ as $vowel) {\n        if (strpos($word, $vowel) !== false) {\n            $vowels_index_min\
    \ = $vowel;\n            break;\n        }\n    }\n    \n    foreach ($vowels\
    \ as $vowel) {\n        if (strrpos($word, $vowel) !== false) {\n            $vowels_index_min_index\
    \ = $vowel;\n            break;\n        }\n    }\n    \n    foreach ($vowels\
    \ as $vowel) {\n        if (strpos($word, $vowel) !== false) {\n            $vowels_index_max\
    \ = $vowel;\n            break;\n        }\n    }\n    \n    if ($vowels_index\
    \ > $vowels_index_max) {\n        return \"\";\n    }\n    \n    if ($vowels_index\
    \ > $vowels_index_min) {\n        return $vowels_index;\n    }\n    \n    if ($vowels_index_min\
    \ > $vowels_index_max) {\n        return $vowels_index_min;\n    }\n    \n   \
    \ if ($vowels_index_min_index > $vowels_index_max) {\n        return $vowels_index_min_index;\n\
    \    }\n    \n    if ($vowels_index_min_index > $vowels_index_min_index) {\n \
    \       return $vowels_index_min_index;\n    }\n    \n    if ($vowels_index_max_index\
    \ > $vowels_index_min_index) {\n        return $vowels_index_max_index;\n    }\n\
    \    \n    if ($vowels_index_max_index > $vowels_index_min_index) {\n        return\
    \ $vowels_index_max_index;\n    }\n    \n    return \"\";\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work if the word is \"ab\", it returns \"a\".\n<|/\
    \ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<|\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpl7y9zvtd.php
    on line 93

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max\
    \ = $vowels_count - 1;\n    $vowels_index_count_min = 0;\n    \n    for($i = 0;\
    \ $i < strlen($word); $i++) {\n        if($word[$i] == $vowels[$vowels_index])\
    \ {\n            $vowels_index_count++;\n            if($vowels_index_count ==\
    \ $vowels_index_count_max) {\n                $vowels_index_count_max = $vowels_index_count\
    \ - 1;\n            }\n            if($vowels_index_count == $vowels_index_count_min)\
    \ {\n                $vowels_index_count_min = $vowels_index_count - 1;\n    \
    \        }\n        }\n        $vowels_index++;\n    }\n    \n    if($vowels_index_count\
    \ == $vowels_index_count_max) {\n        return $vowels[$vowels_index_count_min];\n\
    \    }\n    else {\n        return \"\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpth4pvc1o.php:50\n\
    Stack trace:\n#0 /tmp/tmpth4pvc1o.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpth4pvc1o.php\
    \ on line 50\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowel\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp854e7k0o.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_fli\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx_eyoncn.php on line 60

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max\
    \ = $vowels_count - 1;\n    \n    for($i = 0; $i < strlen($word); $i++) {\n  \
    \      if($word[$i] == $vowels[$vowels_index]) {\n            $vowels_index_count++;\n\
    \            if($vowels_index_count > $vowels_index_count_max) {\n           \
    \     $vowels_index_count_max = $vowels_index_count;\n                $vowels_index\
    \ = $i;\n            }\n        }\n    }\n    \n    return $vowels[$vowels_index];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp1vthke20.php
    on line 35

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmph6_vqj6g.php
    on line 88

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($vowels);\n    $vowels_index = 0;\n    $vowels_index2\
    \ = $vowels_len - 1;\n    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4\
    \ = $vowels_len - 3;\n    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6\
    \ = $vowels_len - 5;\n    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8\
    \ = $vowels_len - 7;\n    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10\
    \ = $vowels_len - 9;\n    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12\
    \ = $vowels_len - 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14\
    \ = $vowels_len - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16\
    \ = $vowels_len - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18\
    \ = $vowels_len - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20\
    \ = $vowels_len - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22\
    \ = $vowels_len - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24\
    \ = $vowels_len - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26\
    \ = $vowels_len - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28\
    \ = $vowels_len - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30\
    \ = $vowels_len - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32\
    \ = $vowels_len - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34\
    \ = $vowels_len - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36\
    \ = $vowels_len - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38\
    \ = $vowels_len - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40\
    \ = $vowels_len - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42\
    \ = $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpi3r6odrp.php on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    \n    for($i = strlen($word); $i > 0; $i--) {\n  \
    \      $letter = substr($word, $i, 1);\n        if(in_array($letter, $vowels))\
    \ {\n            $vowels_index = $i;\n            break;\n        }\n    }\n \
    \   \n    $vowels_index += 1;\n    \n    $consonants = array(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $consonants_count\
    \ = count($consonants);\n    $consonants_index = 0;\n    \n    for($i = strlen($word);\
    \ $i > 0; $i--) {\n        $letter = substr($word, $i, 1);\n        if(in_array($letter,\
    \ $consonants)) {\n            $consonants_index = $i;\n            break;\n \
    \       }\n    }\n    \n    $consonants_index += 1;\n    \n    if($vowels_index\
    \ >= $consonants_index) {\n        return $vowels[$vowels_index];\n    } else\
    \ {\n        return \"\";\n    }\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\n\
    This doesn't work if the word is \"ab\". It returns \"u\" instead of \"\".\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I didn't notice that case. Now I fixed it.\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp5db3axq8.php
    on line 51

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpdrjs87y8.php
    on line 54

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl_y3cvq5.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ += $vowels_count % 2;\n    return $vowels[$vowels_count];\n}\n</code>\n<|/ a\
    \ tags=php,string |>\n<| c |>\nThis doesn't work if the word is \"ab\". It returns\
    \ \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nThanks for pointing out. I've updated\
    \ the answer. Now it works.\n<|/ c |>\n<| a tags=php,string |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpz0v5divr.php
    on line 23

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp6yq6wwpl.php on line 88

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 =\
    \ $vowels_len - 1;\n    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4\
    \ = $vowels_len - 3;\n    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6\
    \ = $vowels_len - 5;\n    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8\
    \ = $vowels_len - 7;\n    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10\
    \ = $vowels_len - 9;\n    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12\
    \ = $vowels_len - 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14\
    \ = $vowels_len - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16\
    \ = $vowels_len - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18\
    \ = $vowels_len - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20\
    \ = $vowels_len - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22\
    \ = $vowels_len - 21;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24\
    \ = $vowels_len - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26\
    \ = $vowels_len - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28\
    \ = $vowels_len - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30\
    \ = $vowels_len - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32\
    \ = $vowels_len - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34\
    \ = $vowels_len - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36\
    \ = $vowels_len - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38\
    \ = $vowels_len - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40\
    \ = $vowels_len - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42\
    \ = $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpbichdoir.php on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl_y3cvq5.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count - 1], array_reverse($vowels));\n\
    \    return $vowels[$vowels_count];\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lwdfrv9.php:28\n\
    Stack trace:\n#0 /tmp/tmp7lwdfrv9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7lwdfrv9.php\
    \ on line 28\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, 1);\n    $vowels_count = min($vowels_count, strlen($word));\n\
    \    \n    $vowels_found = false;\n    \n    for ($i = strlen($word) - $vowels_count;\
    \ $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            $vowels_found\
    \ = true;\n            break;\n        }\n    }\n    \n    if ($vowels_found)\
    \ {\n        return $word[$vowels_count - 1];\n    }\n    \n    return \"\";\n\
    }\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxskrdvp.php:43\n\
    Stack trace:\n#0 /tmp/tmpsxskrdvp.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpsxskrdvp.php\
    \ on line 43\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count =\
    \ array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmplkpvhja4.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_reverse =\
    \ array_reverse($vowels_array);\n    $vowels_array_reverse_count = count($vowels_array_reverse);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp7rfuaogr.php
    on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpu95f9ojz.php on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmp98mdkr69.php on line 79

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpu1ik6162.php
    on line 50

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count - 1], array_reverse($vowels));\n\
    \    return $vowels[$vowels_count];\n}\n</code>\n<|/ a tags=php,string,algorithm\
    \ |>\n<| a tags=php,string,algorithm |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp2uplh4mw.php
    on line 22

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg2692wg_.php on line 60

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ = array_search($word[$\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpvqwhjfax.php on line 68

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    return\
    \ $vowels[$vowels_count];\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if\
    \ the word is \"ab\", it returns \"a\" instead of \"\"\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing out. I've updated the answer to handle this case.\n<|/ c |>\n<|\
    \ a tags=php,string |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp_ty7kyc8.php
    on line 22

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi0rg4a7g.php on line 62

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_count_array = array_count_values($vowels);\n\
    \    $vowels_count_array = array_slice($vowels_count_array, 0, $vowels_count);\n\
    \    $vowels_count_array = array_reverse($vowels_count_array);\n    $vowels_count_array\
    \ = array_keys($vowels_count_array);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_reverse($vowels_count_array);\n\
    \    $vowels_count_array = array_values($vowels_count_array);\n    $vowels_count_array\
    \ = array_slice($vowels_count_array, 0, $vowels_count);\n    $vowels_count_array\
    \ = array_reverse($vowels_count_array);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, $vowels_count);\n    $vowels_count_array = array_slice($vowels_count_array,\
    \ 0, \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpribylllf.php on line 48

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, 1);\n    $vowels_count = min($vowels_count, $word);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count, 1);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmphqyze1qu.php
    on line 65

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($vowels);\n    $vowels_len = max($vowels_len, strlen($word));\n\
    \    $vowels_len = min($vowels_len, strlen($word));\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpefc3927l.php
    on line 63

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_fli\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx_eyoncn.php on line 60

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$word.length - 1], array_reverse($vowels));\n\
    \    $vowels_count += 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmpqv7hryix.php on line 108

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index43 = \nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpev97c2vd.php on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    for($i = 0; $i < strlen($word); $i++) {\n        if($word[$i]\
    \ == $vowels[$vowels_index]) {\n            $vowels_index++;\n            if($vowels_index\
    \ == $vowels_count) {\n                $vowels_index = 0;\n                $vowels_index_count++;\n\
    \                if($vowels_index_count == $vowels_index_count_max) {\n      \
    \              return \"\";\n                }\n            }\n        } else\
    \ {\n            $vowels_index = 0;\n            $vowels_index_count = 0;\n  \
    \      }\n    }\n    return $vowels[$vowels_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q04lo0y.php:46\n\
    Stack trace:\n#0 /tmp/tmp6q04lo0y.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp6q04lo0y.php\
    \ on line 46\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 2], $vowels);\n    $vowels_count = array_search($word[$word.length - 3], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 4], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 5], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 6], $vowels);\n    $vowels_count = array_search($word[$word.length - 7], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 8], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 9], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 10], $vowels);\n    $vowels_count = array_search($word[$word.length - 11],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 12], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 13], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 14], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 15], $vowels);\n    $vowels_count = array_search($word[$word.length - 16],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 17], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 18], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 19], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 20], $vowels);\n    $vowels_count = array_search($word[$word.length - 21],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 22], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 23], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 24], $vowels);\n    $vowels_count = array_search($word[$word.length\
    \ - 25], $vowels);\n    $vowels_count = array_search($word[$word.length - 26],\
    \ $vowels);\n    $vowels_count = array_search($word[$word.length - 27], $vowels);\n\
    \    $vowels_count = array_search($word[$word.length - 28], $vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 29], $vowels);\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmp7qiacxd_.php on line 69

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    foreach ($vowels as $vowel) {\n        if (strpos($word, $vowel) !==\
    \ false) {\n            $vowels_index = $vowel;\n            break;\n        }\n\
    \    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_max = $vowels_count\
    \ - 1;\n    }\n    $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = 1;\n        $vowels_index_count_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp_5jdphst.php
    on line 77

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    \n    $vowels_array = array();\n    for($i = 0; $i < $vowels_count;\
    \ $i++) {\n        $vowels_array[] = $vowels[$i];\n    }\n    \n    $vowels_array\
    \ = array_reverse($vowels_array);\n    \n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    \n    $vowels_array = array_reverse($vowels_array);\n\
    \    \n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n   \
    \ \n    $vowels_array = array_reverse($vowels_array);\n    \n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    \n    $vowels_array = array_reverse($vowels_array);\n\
    \    \n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n   \
    \ \n    $vowels_array = array_reverse($vowels_array);\n    \n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    \n    $vowels_array = array_reverse($vowels_array);\n\
    \    \n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n   \
    \ \n    $vowels_array = array_reverse($vowels_array);\n    \n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    \n    $vowels_array = array_reverse($vowels_array);\n\
    \    \n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n   \
    \ \n    $vowels_array = array_reverse($vowels_array);\n    \n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    \n    $vowels_array = array_reverse($vowels_array);\n\
    \    \n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n   \
    \ \n    $vowels_array = array_reverse($vowels_array);\n    \n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    \n    $vowels_array = array_reverse($vowels_array);\n\
    \    \n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n   \
    \ \n    $vowels_array = array_reverse($vowels_array);\n    \n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    \n    $vowels_array = array_reverse($vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp7jfnsvvn.php
    on line 80

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    $vowels_index_count_min = 0;\n    \n    for($i = 0; $i < strlen($word);\
    \ $i++) {\n        if($word[$i] == $vowels[$vowels_index]) {\n            $vowels_index_count++;\n\
    \            if($vowels_index_count == $vowels_index_count_max) {\n          \
    \      $vowels_index_count_min = $i;\n            }\n        }\n        $vowels_index++;\n\
    \    }\n    \n    if($vowels_index_count > $vowels_index_count_min) {\n      \
    \  return $vowels[$vowels_index_count_min];\n    } else {\n        return \"\"\
    ;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpdwxsbm4_.php
    on line 41

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 =\
    \ $vowels_len - 1;\n    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4\
    \ = $vowels_len - 3;\n    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6\
    \ = $vowels_len - 5;\n    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8\
    \ = $vowels_len - 7;\n    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10\
    \ = $vowels_len - 9;\n    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12\
    \ = $vowels_len - 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14\
    \ = $vowels_len - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16\
    \ = $vowels_len - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18\
    \ = $vowels_len - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20\
    \ = $vowels_len - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22\
    \ = $vowels_len - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24\
    \ = $vowels_len - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26\
    \ = $vowels_len - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28\
    \ = $vowels_len - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30\
    \ = $vowels_len - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32\
    \ = $vowels_len - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34\
    \ = $vowels_len - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36\
    \ = $vowels_len - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38\
    \ = $vowels_len - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40\
    \ = $vowels_len - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42\
    \ = $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpx8j_vdb1.php on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpo0b5_748.php on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_fli\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx_eyoncn.php on line 60

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$word.length - 1], array_reverse($vowels));\n\
    \    return $vowels[$vowels_count];\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Undefined constant \"length\" in /tmp/tmpty6rh9h3.php:19\n\
    Stack trace:\n#0 /tmp/tmpty6rh9h3.php(24): get_closest_vowel('yogurt')\n#1 /tmp/tmpty6rh9h3.php(28):\
    \ candidate('yogurt')\n#2 /tmp/tmpty6rh9h3.php(43): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpty6rh9h3.php on line 19\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_reverse =\
    \ array_reverse($vowels_array);\n    $vowels_array_reverse_count = count($vowels_array_reverse);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp7rfuaogr.php
    on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($vowels);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, \n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpffpralp1.php on line 57

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowel\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp8jb3r4sv.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count_right\
    \ = count($vowels, 1);\n    $vowels_count_left = count($vowels, 0);\n    $vowels_count_left_right\
    \ = count($vowels, 2);\n    $vowels_count_left_right_left = count($vowels, 3);\n\
    \    $vowels_count_left_right_left_right = count($vowels, 4);\n    $vowels_count_left_right_left_right_left\
    \ = count($vowels, 5);\n    $vowels_count_left_right_left_right_left_right = count($vowels,\
    \ 6);\n    $vowels_count_left_right_left_right_left_right_left = count($vowels,\
    \ 7);\n    $vowels_count_left_right_left_right_left_right_left_right = count($vowels,\
    \ 8);\n    $vowels_count_left_right_left_right_left_right_left_right_left = count($vowels,\
    \ 9);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 10);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 11);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 12);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 13);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 14);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 15);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 16);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 17);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 18);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 19);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 20);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 21);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 22);\n    $vowels_count_left_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpz2jkgskq.php
    on line 43

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count - 1], array_reverse($vowels));\n\
    \    return $vowels[$vowels_count];\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lwdfrv9.php:28\n\
    Stack trace:\n#0 /tmp/tmp7lwdfrv9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7lwdfrv9.php\
    \ on line 28\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count\
    \ + 1], $vowels);\n    $vowels_count = array_search($word[$vowels_count + 2],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count + 3], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count + 4], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count + 5], $vowels);\n    $vowels_count = array_search($word[$vowels_count\
    \ + 6], $vowels);\n    $vowels_count = array_search($word[$vowels_count + 7],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count + 8], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count + 9], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count + 10], $vowels);\n    $vowels_count = array_search($word[$vowels_count\
    \ + 11], $vowels);\n    $vowels_count = array_search($word[$vowels_count + 12],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count + 13], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count + 14], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count + 15], $vowels);\n    $vowels_count = array_search($word[$vowels_count\
    \ + 16], $vowels);\n    $vowels_count = array_search($word[$vowels_count + 17],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count + 18], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count + 19], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count + 20], $vowels);\n    $vowels_count = array_search($word[$vowels_count\
    \ + 21], $vowels);\n    $vowels_count = array_search($word[$vowels_count + 22],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count + 23], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count + 24], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count + 25], $vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpe2u1ll1m.php
    on line 46

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = count($word) - 1;\n    $vowels_index3 = count($word)\
    \ - 2;\n    $vowels_index4 = count($word) - 3;\n    $vowels_index5 = count($word)\
    \ - 4;\n    $vowels_index6 = count($word) - 5;\n    $vowels_index7 = count($word)\
    \ - 6;\n    $vowels_index8 = count($word) - 7;\n    $vowels_index9 = count($word)\
    \ - 8;\n    $vowels_index10 = count($word) - 9;\n    $vowels_index11 = count($word)\
    \ - 10;\n    $vowels_index12 = count($word) - 11;\n    $vowels_index13 = count($word)\
    \ - 12;\n    $vowels_index14 = count($word) - 13;\n    $vowels_index15 = count($word)\
    \ - 14;\n    $vowels_index16 = count($word) - 15;\n    $vowels_index17 = count($word)\
    \ - 16;\n    $vowels_index18 = count($word) - 17;\n    $vowels_index19 = count($word)\
    \ - 18;\n    $vowels_index20 = count($word) - 19;\n    $vowels_index21 = count($word)\
    \ - 20;\n    $vowels_index22 = count($word) - 21;\n    $vowels_index23 = count($word)\
    \ - 22;\n    $vowels_index24 = count($word) - 23;\n    $vowels_index25 = count($word)\
    \ - 24;\n    $vowels_index26 = count($word) - 25;\n    $vowels_index27 = count($word)\
    \ - 26;\n    $vowels_index28 = count($word) - 27;\n    $vowels_index29 = count($word)\
    \ - 28;\n    $vowels_index30 = count($word) - 29;\n    $vowels_index31 = count($word)\
    \ - 30;\n    $vowels_index32 = count($word) - 31;\n    $vowels_index33 = count($word)\
    \ - 32;\n    $vowels_index34 = count($word) - 33;\n    $vowels_index35 = count($word)\
    \ - 34;\n    $vowels_index36 = count($word) - 35;\n    $vowels_index37 = count($word)\
    \ - 36;\n    $vowels_index38 = count($word) - 37;\n    $vowels_index39 = count($word)\
    \ - 38;\n    $vowels_index40 = count($word) - 39;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpv0dfd7bw.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp6yq6wwpl.php on line 88

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi0rg4a7g.php on line 62

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max\
    \ = $vowels_count - 1;\n    $vowels_index_count_min = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp68e7dc_e.php
    on line 74

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count =\
    \ array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowel\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpglroyobz.php
    on line 52

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_found = 0;\n    $vowels_left = 0;\n    $vowels_right = 0;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $vowels_found\
    \ = false;\n    $vowels_left = false;\n    $vowels_right = false;\n    $\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp640ilsg7.php on line 101

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl_y3cvq5.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count_right = count($vowels, 1);\n    $vowels_count_left = count($vowels,\
    \ 0);\n    $vowels_count_left = count($vowels, -1);\n    $vowels_count_right =\
    \ count($vowels, -2);\n    $vowels_count_left = count($vowels, -3);\n    $vowels_count_left\
    \ = count($vowels, -4);\n    $vowels_count_right = count($vowels, -5);\n    $vowels_count_left\
    \ = count($vowels, -6);\n    $vowels_count_left = count($vowels, -7);\n    $vowels_count_right\
    \ = count($vowels, -8);\n    $vowels_count_left = count($vowels, -9);\n    $vowels_count_left\
    \ = count($vowels, -10);\n    $vowels_count_right = count($vowels, -11);\n   \
    \ $vowels_count_left = count($vowels, -12);\n    $vowels_count_left = count($vowels,\
    \ -13);\n    $vowels_count_right = count($vowels, -14);\n    $vowels_count_left\
    \ = count($vowels, -15);\n    $vowels_count_left = count($vowels, -16);\n    $vowels_count_right\
    \ = count($vowels, -17);\n    $vowels_count_left = count($vowels, -18);\n    $vowels_count_left\
    \ = count($vowels, -19);\n    $vowels_count_right = count($vowels, -20);\n   \
    \ $vowels_count_left = count($vowels, -21);\n    $vowels_count_left = count($vowels,\
    \ -22);\n    $vowels_count_right = count($vowels, -23);\n    $vowels_count_left\
    \ = count($vowels, -24);\n    $vowels_count_left = count($vowels, -25);\n    $vowels_count_right\
    \ = count($vowels, -26);\n    $vowels_count_left = count($vowels, -27);\n    $vowels_count_left\
    \ = count($vowels, -28);\n    $vowels_count_right = count($vowels, -29);\n   \
    \ $vowels_count_left = count($vowels, -30);\n    $vowels_count_left = count($vowels,\
    \ -31); \n    $vowels_count_right = count($vowels, -32);\n    $vowels_count_left\
    \ = count($vowels, -33);\n    $vowels_count_left = count($vowels, -34);\n    $vowels_count_right\
    \ = count($vowels, -35);\n    $vowels_count_left = count($vowels, -36);\n    $vowels_count_left\
    \ = count($vowels, -37);\n    $vowels_count_right = count($vowels, \nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpi6u4ftpo.php on line 59

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp9kd9c57_.php on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl_y3cvq5.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($word);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_reverse =\
    \ array_reverse($vowels_array);\n    $vowels_array_reverse_count = count($vowels_array_reverse);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpi3t_e5bq.php
    on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n    $vowels_count = min($vowels_count,\
    \ $vowels_count + 1);\n    \n    $vowels_count = count($vowels);\n    \n    $vowels_count\
    \ = max($vowels_count, $vowels_count - 1);\n\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmpkwn0ume8.php on line 96

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_l_xe71n.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpu1ik6162.php
    on line 50

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 =\
    \ $vowels_len - 1;\n    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4\
    \ = $vowels_len - 3;\n    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6\
    \ = $vowels_len - 5;\n    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8\
    \ = $vowels_len - 7;\n    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10\
    \ = $vowels_len - 9;\n    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12\
    \ = $vowels_len - 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14\
    \ = $vowels_len - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16\
    \ = $vowels_len - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18\
    \ = $vowels_len - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20\
    \ = $vowels_len - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22\
    \ = $vowels_len - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24\
    \ = $vowels_len - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26\
    \ = $vowels_len - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28\
    \ = $vowels_len - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30\
    \ = $vowels_len - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32\
    \ = $vowels_len - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34\
    \ = $vowels_len - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36\
    \ = $vowels_len - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38\
    \ = $vowels_len - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40\
    \ = $vowels_len - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42\
    \ = $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpx8j_vdb1.php on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len\
    \ = 0;\n    $vowels_index_len = 0;\n    $vowels_index_len = 0;\n    $vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpuu97aav8.php
    on line 89

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_index = array_search($word,\
    \ $vowels_array);\n    $vowels_array_index_count = count($vowels_array);\n   \
    \ $vowels_array_index_count--;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n    $vowels_array_index_count++;\n\
    \    $vowels_array_index_count++;\n    $\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp2p9risez.php on line 79

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_len = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 =\
    \ $vowels_len - 1;\n    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4\
    \ = $vowels_len - 3;\n    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6\
    \ = $vowels_len - 5;\n    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8\
    \ = $vowels_len - 7;\n    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10\
    \ = $vowels_len - 9;\n    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12\
    \ = $vowels_len - 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14\
    \ = $vowels_len - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16\
    \ = $vowels_len - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18\
    \ = $vowels_len - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20\
    \ = $vowels_len - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22\
    \ = $vowels_len - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24\
    \ = $vowels_len - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26\
    \ = $vowels_len - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28\
    \ = $vowels_len - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30\
    \ = $vowels_len - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32\
    \ = $vowels_len - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34\
    \ = $vowels_len - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36\
    \ = $vowels_len - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38\
    \ = $vowels_len - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40\
    \ = $vowels_len - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42\
    \ = $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpx8j_vdb1.php on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_array = array_flip($vowels);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpq6toz6a4.php on line 57

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count =\
    \ array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8de9nx28.php on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_count = 0;\n   \
    \ $vowels_index_len = 0;\n    $vowels_index_len_count = 0;\n    $vowels_index_len_count2\
    \ = 0;\n    $vowels_index_len_count3 = 0;\n    $vowels_index_len_count4 = 0;\n\
    \    $vowels_index_len_count5 = 0;\n    $vowels_index_len_count6 = 0;\n    $vowels_index_len_count7\
    \ = 0;\n    $vowels_index_len_count8 = 0;\n    $vowels_index_len_count9 = 0;\n\
    \    $vowels_index_len_count10 = 0;\n    $vowels_index_len_count11 = 0;\n    $vowels_index_len_count12\
    \ = 0;\n    $vowels_index_len_count13 = 0;\n    $vowels_index_len_count14 = 0;\n\
    \    $vowels_index_len_count15 = 0;\n    $vowels_index_len_count16 = 0;\n    $vowels_index_len_count17\
    \ = 0;\n    $vowels_index_len_count18 = 0;\n    $vowels_index_len_count19 = 0;\n\
    \    $vowels_index_len_count20 = 0;\n    $vowels_index_len_count21 = 0;\n    $vowels_index_len_count22\
    \ = 0;\n    $vowels_index_len_count23 = 0;\n    $vowels_index_len_count24 = 0;\n\
    \    $vowels_index_len_count25 = 0;\n    $vowels_index_len_count26 = 0;\n    $vowels_index_len_count27\
    \ = 0;\n    $vowels_index_len_count28 = 0;\n    $vowels_index_len_count29 = 0;\n\
    \    $vowels_index_len_count30 = 0;\n    $vowels_index_len_count31 = 0;\n    $vowels_index_len_count32\
    \ = 0;\n    $vowels_index_len_count33 = 0;\n    $vowels_index_len_count34 = 0;\n\
    \    $vowels_index_len_count35 = 0;\n    $vowels_index_len_count36 = 0;\n    $vowels_index_len_count37\
    \ = 0;\n    $vowels_index_len_count38 = 0;\n    $vowels_index_len_count39 = 0;\n\
    \    $vowels_index_len_count40 = 0;\n    $vowels_index_len_count41 = 1;\n    $vowels_index_len_count42\
    \ = 0;\n    $vowels_index_len_count43 = 0;\n    $vowels_index_len_count44 = 0;\n\
    \    $vowels_index_len_count45 = 0;\n    $vowels_index_len_count46 = 0;\n    $vowels_index_len_count47\
    \ = 0;\n    $vowels_index_len_count48 = 0;\n    $vowels_index_len_count49 = 0;\n\
    \    $vowels_index_len_count50 = 0;\n    $vowels_index_len_count51 = 1;\n    $vowels_index_len\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpk51tyza6.php
    on line 75

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    $vowels_index_count_min = 0;\n    $vowels_index_count_min_index =\
    \ 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpu3biqjmz.php
    on line 74

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_len =\
    \ strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_len - 1;\n\
    \    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4 = $vowels_len - 3;\n\
    \    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6 = $vowels_len - 5;\n\
    \    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8 = $vowels_len - 7;\n\
    \    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10 = $vowels_len - 9;\n\
    \    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12 = $vowels_len -\
    \ 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14 = $vowels_len\
    \ - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16 = $vowels_len\
    \ - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18 = $vowels_len\
    \ - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20 = $vowels_len\
    \ - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22 = $vowels_len\
    \ - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24 = $vowels_len\
    \ - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26 = $vowels_len\
    \ - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28 = $vowels_len\
    \ - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30 = $vowels_len\
    \ - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32 = $vowels_len\
    \ - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34 = $vowels_len\
    \ - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36 = $vowels_len\
    \ - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38 = $vowels_len\
    \ - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40 = $vowels_len\
    \ - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42 = $vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsb1coq6k.php
    on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, 1);\n    $vowels_count = min($vowels_count, $word);\n \
    \   $vowels_count = count($vowels);\n    \n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    \n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    \n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = max($vowels_count, 1);\n    $vowels_count\
    \ = min($vowels_count, $word);\n    \n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    \n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    \n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = max($vowels_count, 1);\n    $vowels_count\
    \ = min($vowels_count, $word);\n    \n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    \n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    \n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = max($vowels_count, 1);\n    $vowels_count\
    \ = min($vowels_count, $word);\n    \n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    \n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    \n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = max($vowels_count, 1);\n    $vowels_count\
    \ = min($vowels_count, $word);\n    \n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    \n    $vowels_count = count($vowels);\n    $vowels_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpv81oeyn4.php
    on line 77

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpr7ot1lfs.php
    on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$word.length - 1], array_reverse($vowels));\n\
    \    $vowels_count += $vowels_count % 2;\n    $vowels_count += $vowels_count >\
    \ 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count += $vowels_count\
    \ > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count +=\
    \ $vowels_count > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count\
    \ += $vowels_count > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n   \
    \ $vowels_count += $vowels_count > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count\
    \ % 2;\n    $vowels_count += $vowels_count > 0 ? 1 : 0;\n    $vowels_count -=\
    \ $vowels_count % 2;\n    $vowels_count += $vowels_count > 0 ? 1 : 0;\n    $vowels_count\
    \ -= $vowels_count % 2;\n    $vowels_count += $vowels_count > 0 ? 1 : 0;\n   \
    \ $vowels_count -= $vowels_count % 2;\n    $vowels_count += $vowels_count > 0\
    \ ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count += $vowels_count\
    \ > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count +=\
    \ $vowels_count > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count\
    \ += $vowels_count > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n   \
    \ $vowels_count += $vowels_count > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count\
    \ % 2;\n    $vowels_count += $vowels_count > 0 ? 1 : 0;\n    $vowels_count -=\
    \ $vowels_count % 2;\n    $vowels_count += $vowels_count > 0 ? 1 : 0;\n    $vowels_count\
    \ -= $vowels_count % 2;\n    $vowels_count += $vowels_count > 0 ? 1 : 0;\n   \
    \ $vowels_count -= $vowels_count % 2;\n    $vowels_count += $vowels_count > 0\
    \ ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count += $vowels_count\
    \ > 0 ? 1 : 0;\n    $vowels_count -= $vowels_count % 2;\n    $vowels_count +=\
    \ $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyqt9if9y.php
    on line 58

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp6yq6wwpl.php on line 88

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_len =\
    \ strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_len - 1;\n\
    \    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4 = $vowels_len - 3;\n\
    \    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6 = $vowels_len - 5;\n\
    \    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8 = $vowels_len - 7;\n\
    \    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10 = $vowels_len - 9;\n\
    \    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12 = $vowels_len -\
    \ 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14 = $vowels_len\
    \ - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16 = $vowels_len\
    \ - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18 = $vowels_len\
    \ - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20 = $vowels_len\
    \ - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22 = $vowels_len\
    \ - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24 = $vowels_len\
    \ - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26 = $vowels_len\
    \ - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28 = $vowels_len\
    \ - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30 = $vowels_len\
    \ - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32 = $vowels_len\
    \ - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34 = $vowels_len\
    \ - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36 = $vowels_len\
    \ - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38 = $vowels_len\
    \ - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40 = $vowels_len\
    \ - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42 = $vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsb1coq6k.php
    on line 62

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_reverse =\
    \ array_reverse($vowels_array);\n    $vowels_array_reverse_count = count($vowels_array_reverse);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp7rfuaogr.php
    on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n   \
    \ $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9c8aw9qi.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpu1ik6162.php
    on line 50

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_index = array_search($word,\
    \ $vowels_array);\n    $vowels_array_index_count = count($vowels_array_index);\n\
    \    $vowels_array_index_count_minus_one = count($vowels_array_index) - 1;\n \
    \   $vowels_array_index_count_minus_two = count($vowels_array_index) - 2;\n  \
    \  $vowels_array_index_count_minus_three = count($vowels_array_index) - 3;\n \
    \   $vowels_array_index_count_minus_four = count($vowels_array_index) - 4;\n \
    \   $vowels_array_index_count_minus_five = count($vowels_array_index) - 5;\n \
    \   $vowels_array_index_count_minus_six = count($vowels_array_index) - 6;\n  \
    \  $vowels_array_index_count_minus_seven = count($vowels_array_index) - 7;\n \
    \   $vowels_array_index_count_minus_eight = count($vowels_array_index) - 8;\n\
    \    $vowels_array_index_count_minus_nine = count($vowels_array_index) - 9;\n\
    \    $vowels_array_index_count_minus_ten = count($vowels_array_index) - 10;\n\
    \    $vowels_array_index_count_minus_eleven = count($vowels_array_index) - 11;\n\
    \    $vowels_array_index_count_minus_twelve = count($vowels_array_index) - 12;\n\
    \    $vowels_array_index_count_minus_thirteen = count($vowels_array_index) - 13;\n\
    \    $vowels_array_index_count_minus_fourteen = count($vowels_array_index) - 14;\n\
    \    $vowels_array_index_count_minus_fifteen = count($vowels_array_index) - 15;\n\
    \    $vowels_array_index_count_minus_sixteen = count($vowels_array_index) - 16;\n\
    \    $vowels_array_index_count_minus_seventeen = count($vowels_array_index) -\
    \ 17;\n    $vowels_array_index_count_minus_eighteen = count($vowels_array_index)\
    \ - 18;\n    $vowels_array_index_count_minus_nineteen = count($vowels_array_index)\
    \ - 19;\n    $vowels_array_index_count_minus_twenty = count($vowels_array_index)\
    \ - 20;\n    $vowels_array_index_count_minus_twenty_one = count($vowels_array_index)\
    \ - 21;\n    $vowels_array_index_count_minus_twenty_two = count($vowels_array_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpy7il8kak.php
    on line 45

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count_from_right = count($word) - $vowels_count;\n    $vowels_count_from_left\
    \ = count($word) - $vowels_count_from_right;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_right - $vowels_count;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_left_to_right_to_left\
    \ = count($word) - $vowels_count_from_right_to_left - $vowels_count_from_left;\n\
    \    $vowels_count_from_right_to_left_to_right = count($word) - $vowels_count_from_left_to_right\
    \ - $vowels_count_from_right;\n    $vowels_count_from_left_to_right_to_left_to_right\
    \ = count($word) - $vowels_count_from_right_to_left_to_right - $vowels_count_from_left_to_right;\n\
    \    $vowels_count_from_right_to_left_to_right_to_left = count($word) - $vowels_count_from_left_to_right_to_left\
    \ - $vowels_count_from_right_to_left;\n    $vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = count($word) - $vowels_count_from_right_to_left_to_right_to_left - $vowels_count_from_left_to_right_to_left;\n\
    \    $vowels_count_from_right_to_left_to_right_to_left_to_right = count($word)\
    \ - $vowels_count_from_left_to_right_to_left_to_right - $vowels_count_from_right_to_left_to_right;\n\
    \    $vowels_count_from_left_to_right_to_left_to_right_to_left_to_right = count($word)\
    \ - $vowels_count_from_right_to_left_to_right_to_left_to_right - $vowels_count_from_left_to_right_to_left_to_right;\n\
    \    $vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = count($word)\
    \ - $vowels_count_from_left_to_right_to_left_to_right_to_left - $vowels_count_from_right_to_left_to_right_to_left;\n\
    \    $vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = count($word) - $vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ - $vowels_count_from_left_to_right_to_left_to_right_to_left;\n    $vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = count($word) - $vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpphus6pcf.php
    on line 33

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    foreach ($vowels as $vowel) {\n        if (strpos($word, $vowel) !==\
    \ false) {\n            $vowels_index = $vowel;\n            break;\n        }\n\
    \    }\n    $vowels_index_count = $vowels_index - $vowels_index_count_max;\n \
    \   $vowels_index_count_min = $vowels_index_count + 1;\n    foreach ($vowels as\
    \ $vowel) {\n        if (strpos($word, $vowel) !== false) {\n            $vowels_index_count\
    \ = $vowels_index - $vowels_index_count_max;\n            $vowels_index_count_min\
    \ = $vowels_index_count + 1;\n            break;\n        }\n    }\n    if ($vowels_index_count\
    \ > $vowels_index_count_max) {\n        return \"\";\n    }\n    if ($vowels_index_count\
    \ < $vowels_index_count_min) {\n        return \"\";\n    }\n    return $vowels[$vowels_index_count];\n\
    }\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string -\
    \ int in /tmp/tmp5j3sjdix.php:28\nStack trace:\n#0 /tmp/tmp5j3sjdix.php(47): get_closest_vowel('yogurt')\n\
    #1 /tmp/tmp5j3sjdix.php(51): candidate('yogurt')\n#2 /tmp/tmp5j3sjdix.php(66):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5j3sjdix.php on line 28\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count_right\
    \ = count($vowels, 1);\n    $vowels_count_left = count($vowels, 0);\n    $vowels_count_left_right\
    \ = count($vowels, 2);\n    $vowels_count_left_right_left = count($vowels, 3);\n\
    \    $vowels_count_left_right_left_right = count($vowels, 4);\n    $vowels_count_left_right_left_right_left\
    \ = count($vowels, 5);\n    $vowels_count_left_right_left_right_left_right = count($vowels,\
    \ 6);\n    $vowels_count_left_right_left_right_left_right_left = count($vowels,\
    \ 7);\n    $vowels_count_left_right_left_right_left_right_left_right = count($vowels,\
    \ 8);\n    $vowels_count_left_right_left_right_left_right_left_right_left = count($vowels,\
    \ 9);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 10);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 11);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 12);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 13);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 14);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 15);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 16);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 17);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 18);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 19);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = count($vowels, 20);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = count($vowels, 21);\n    $vowels_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_right\
    \ = count($vowels, 22);\n    $vowels_count_left_right_left_right_left_right_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmps9z80a4t.php
    on line 43

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count %= $vowels_count;\n    return $vowels[$vowels_count];\n}\n\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrcq9z_y.php:30\n\
    Stack trace:\n#0 /tmp/tmpkrcq9z_y.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkrcq9z_y.php\
    \ on line 30\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = max($vowels_count, 1);\n    $vowels_count = min($vowels_count, $word);\n \
    \   $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $word);\n    $vowels_count = min($vowels_count, $word);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $word);\n    $vowels_count = min($vowels_count, $word);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $word);\n    $vowels_count = min($vowels_count, $word);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $word);\n    $vowels_count = min($vowels_count, $word);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $word);\n    $vowels_count = min($vowels_count, $word);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $word);\n    $vowels_count = min($vowels_count, $word);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $word);\n    $vowels_count = min($vowels_count, $word);\n\
    \    $vowels_count = min($vowels_count, $word);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count =\
    \ min($vowels_count, $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpt8byibah.php on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count,\
    \ 1);\n    $vowels_count = min($vowels_count, $word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = max($vowels_count, 1);\n    $vowels_count = min($vowels_count,\
    \ $word);\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpek0xnm0e.php
    on line 65

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    return $vowels[$vowels_count];\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php |>\n<code>\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmpd3mzwsq6.php
    on line 23

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi0rg4a7g.php on line 62

    '
  timestamp: 1659730791
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpdrjs87y8.php
    on line 54

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpbmcjokcc.php on line 60

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = count($word) - 1;\n    $vowels_index3 = $vowels_index2\
    \ - 1;\n    $vowels_index4 = $vowels_index3 - 1;\n    $vowels_index5 = $vowels_index4\
    \ - 1;\n    $vowels_index6 = $vowels_index5 - 1;\n    $vowels_index7 = $vowels_index6\
    \ - 1;\n    $vowels_index8 = $vowels_index7 - 1;\n    $vowels_index9 = $vowels_index8\
    \ - 1;\n    $vowels_index10 = $vowels_index9 - 1;\n    $vowels_index11 = $vowels_index10\
    \ - 1;\n    $vowels_index12 = $vowels_index11 - 1;\n    $vowels_index13 = $vowels_index12\
    \ - 1;\n    $vowels_index14 = $vowels_index13 - 1;\n    $vowels_index15 = $vowels_index14\
    \ - 1;\n    $vowels_index16 = $vowels_index15 - 1;\n    $vowels_index17 = $vowels_index16\
    \ - 1;\n    $vowels_index18 = $vowels_index17 - 1;\n    $vowels_index19 = $vowels_index18\
    \ - 1;\n    $vowels_index20 = $vowels_index19 - 1;\n    $vowels_index21 = $vowels_index20\
    \ - 1;\n    $vowels_index22 = $vowels_index21 - 1;\n    $vowels_index23 = $vowels_index22\
    \ - 1;\n    $vowels_index24 = $vowels_index23 - 1;\n    $vowels_index25 = $vowels_index24\
    \ - 1;\n    $vowels_index26 = $vowels_index25 - 1;\n    $vowels_index27 = $vowels_index26\
    \ - 1;\n    $vowels_index28 = $vowels_index27 - 1;\n    $vowels_index29 = $vowels_index28\
    \ - 1;\n    $vowels_index30 = $vowels_index29 - 1;\n    $vowels_index31 = $vowels_index30\
    \ - 1;\n    $vowels_index32 = $vowels_index31 - 1;\n    $vowels_index33 = $vowels_index32\
    \ - 1;\n    $vowels_index34 = $vowels_index33 - 1;\n    $vowels_index35 = $vowels_index34\
    \ - 1;\n    $vowels_index36 = $vowels_index35 - 1;\n    $vowels_index37 = $vowels_index36\
    \ - 1;\n    $vowels_index38 = $vowels_index37 - 1;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp5s_2nh5g.php
    on line 58

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    for($i = 0; $i < strlen($word); $i++) {\n        if($word[$i]\
    \ == $vowels[$vowels_index]) {\n            $vowels_index_count++;\n         \
    \   if($vowels_index_count == $vowels_index_count_max) {\n                $vowels_index++;\n\
    \                $vowels_index_count = 0;\n            }\n        } else {\n \
    \           $vowels_index_count = 0;\n        }\n    }\n    \n    if($vowels_index_count\
    \ > 0) {\n        return $vowels[$vowels_index];\n    } else {\n        return\
    \ \"\";\n    }\n}\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oj80gry.php:47\n\
    Stack trace:\n#0 /tmp/tmp0oj80gry.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp0oj80gry.php\
    \ on line 47\n"
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($vowels[0]);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_index\
    \ + $vowels_len;\n    $vowels_index3 = $vowels_index + $vowels_len * 2;\n    $vowels_index4\
    \ = $vowels_index + $vowels_len * 3;\n    $vowels_index5 = $vowels_index + $vowels_len\
    \ * 4;\n    $vowels_index6 = $vowels_index + $vowels_len * 5;\n    $vowels_index7\
    \ = $vowels_index + $vowels_len * 6;\n    $vowels_index8 = $vowels_index + $vowels_len\
    \ * 7;\n    $vowels_index9 = $vowels_index + $vowels_len * 8;\n    $vowels_index10\
    \ = $vowels_index + $vowels_len * 9;\n    $vowels_index11 = $vowels_index + $vowels_len\
    \ * 10;\n    $vowels_index12 = $vowels_index + $vowels_len * 11;\n    $vowels_index13\
    \ = $vowels_index + $vowels_len * 12;\n    $vowels_index14 = $vowels_index + $vowels_len\
    \ * 13;\n    $vowels_index15 = $vowels_index + $vowels_len * 14;\n    $vowels_index16\
    \ = $vowels_index + $vowels_len * 15;\n    $vowels_index17 = $vowels_index + $vowels_len\
    \ * 16;\n    $vowels_index18 = $vowels_index + $vowels_len * 17;\n    $vowels_index19\
    \ = $vowels_index + $vowels_len * 18;\n    $vowels_index20 = $vowels_index + $vowels_len\
    \ * 19;\n    $vowels_index21 = $vowels_index + $vowels_len * 20;\n    $vowels_index22\
    \ = $vowels_index + $vowels_len * 21;\n    $vowels_index23 = $vowels_index + $vowels_len\
    \ * 22;\n    $vowels_index24 = $vowels_index + $vowels_len * 23;\n    $vowels_index25\
    \ = $vowels_index + $vowels_len * 24;\n    $vowels_index26 = $vowels_index + $vowels_len\
    \ * 25;\n    $vowels_index27 = $vowels_index + $vowels_len * 26;\n    $vowels_index28\
    \ = $vowels_index + $vowels_len * 27;\n    $vowels_index29 = $vowels_index + $vowels_len\
    \ * 28;\n    $vowels_index30 = $vowels_index + $vowels_len\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp4c82j3n6.php
    on line 50

    '
  timestamp: 1659824026
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($word[$vowels_count - 1], array_reverse($vowels));\n\
    \    return $vowels[$vowels_count];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I appreciate your answer, but this doesn't seem to work. I've tried it on several\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always returns an empty string. I've also tried it on several other\
    \ words and it always \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "<", expecting end of file in /tmp/tmp8jclh2hv.php
    on line 22

    '
  timestamp: 1659824026
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n\
    \    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right\
    \ = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n\
    \    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left\
    \ = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n\
    \    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found\
    \ = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n\
    \    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right\
    \ = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n\
    \    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left\
    \ = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n\
    \    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found\
    \ = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n\
    \    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right\
    \ = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n\
    \    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left\
    \ = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n\
    \    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found\
    \ = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n\
    \    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n    $vowels_right\
    \ = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left = $vowels_count;\n\
    \    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n    $vowels_left\
    \ = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found = 0;\n\
    \    $vowels_left = $vowels_count;\n    $vowels_right = $vowels_count;\n    $vowels_found\
    \ = 0;\n    $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpe88s4lkj.php
    on line 81

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvaoqonqw.php on line 74

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_index = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3\
    \ = $vowels_index + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5\
    \ = $vowels_index + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7\
    \ = $vowels_index + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9\
    \ = $vowels_index + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11\
    \ = $vowels_index + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13\
    \ = $vowels_index + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15\
    \ = $vowels_index + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17\
    \ = $vowels_index + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19\
    \ = $vowels_index + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21\
    \ = $vowels_index + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23\
    \ = $vowels_index + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25\
    \ = $vowels_index + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27\
    \ = $vowels_index + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29\
    \ = $vowels_index + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31\
    \ = $vowels_index + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33\
    \ = $vowels_index + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35\
    \ = $vowels_index + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37\
    \ = $vowels_index + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39\
    \ = $vowels_index + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41\
    \ = $vowels_index + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkgrw2l6.php on line 62

    '
  timestamp: 1659730790
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, $vowels_count);\n\
    \    $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_search($vowels, \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpu95f9ojz.php on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($word);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_reverse =\
    \ array_reverse($vowels_array);\n    $vowels_array_reverse_count = count($vowels_array_reverse);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpi3t_e5bq.php
    on line 55

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    $vowels_count_from_right = max($vowels_count_from_right,\
    \ 0);\n    \n    $vowels_count_from_left = count($word) - $vowels_count_from_right;\n\
    \    $vowels_count_from_left = min($vowels_count_from_left, count($word) - 1);\n\
    \    \n    $vowels_count_from_left = $vowels_count_from_left + 1;\n    $vowels_count_from_right\
    \ = $vowels_count_from_right + 1;\n    \n    $vowels_count_from_right = max($vowels_count_from_right,\
    \ 0);\n    $vowels_count_from_left = min($vowels_count_from_left, count($word)\
    \ - 1);\n    \n    $vowels_count_from_right = max($vowels_count_from_right, 0);\n\
    \    $vowels_count_from_left = min($vowels_count_from_left, count($word) - 1);\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 16 in /tmp/tmphvn05u98.php on line 213

    '
  timestamp: 1659824025
- exit_code: 255
  program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n \
    \   $vowels_count = array_search($vowels, $vowels_count);\n    $vowels_count =\
    \ array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmplkpvhja4.php
    on line 60

    '
  timestamp: 1659824025
